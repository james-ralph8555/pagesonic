(function(){"use strict";/*!
 * ONNX Runtime Web v1.23.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Jr=Object.defineProperty,ql=Object.getOwnPropertyDescriptor,_l=Object.getOwnPropertyNames,$l=Object.prototype.hasOwnProperty,A6=(i=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(i,{get:(o,u)=>(typeof require<"u"?require:o)[u]}):i)(function(i){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+i+'" is not supported')}),uA=(i,o)=>()=>(i&&(o=i(i=0)),o),st=(i,o)=>{for(var u in o)Jr(i,u,{get:o[u],enumerable:!0})},e6=(i,o,u,d)=>{if(o&&typeof o=="object"||typeof o=="function")for(let p of _l(o))!$l.call(i,p)&&p!==u&&Jr(i,p,{get:()=>o[p],enumerable:!(d=ql(o,p))||d.enumerable});return i},Lt=i=>e6(Jr({},"__esModule",{value:!0}),i),nt,Ve,z2,Pi,Si,Fi=uA(()=>{nt=new Map,Ve=[],z2=(i,o,u)=>{if(o&&typeof o.init=="function"&&typeof o.createInferenceSessionHandler=="function"){let d=nt.get(i);if(d===void 0)nt.set(i,{backend:o,priority:u});else{if(d.priority>u)return;if(d.priority===u&&d.backend!==o)throw new Error(`cannot register backend "${i}" using priority ${u}`)}if(u>=0){let p=Ve.indexOf(i);p!==-1&&Ve.splice(p,1);for(let k=0;k<Ve.length;k++)if(nt.get(Ve[k]).priority<=u){Ve.splice(k,0,i);return}Ve.push(i)}return}throw new TypeError("not a valid backend")},Pi=async i=>{let o=nt.get(i);if(!o)return"backend not found.";if(o.initialized)return o.backend;if(o.aborted)return o.error;{let u=!!o.initPromise;try{return u||(o.initPromise=o.backend.init(i)),await o.initPromise,o.initialized=!0,o.backend}catch(d){return u||(o.error=`${d}`,o.aborted=!0),o.error}finally{delete o.initPromise}}},Si=async i=>{let o=i.executionProviders||[],u=o.map(x=>typeof x=="string"?x:x.name),d=u.length===0?Ve:u,p,k=[],h=new Set;for(let x of d){let G=await Pi(x);typeof G=="string"?k.push({name:x,err:G}):(p||(p=G),p===G&&h.add(x))}if(!p)throw new Error(`no available backend found. ERR: ${k.map(x=>`[${x.name}] ${x.err}`).join(", ")}`);for(let{name:x,err:G}of k)u.includes(x)&&console.warn(`removing requested execution provider "${x}" from session options because it is not available: ${G}`);let w=o.filter(x=>h.has(typeof x=="string"?x:x.name));return[p,new Proxy(i,{get:(x,G)=>G==="executionProviders"?w:Reflect.get(x,G)})]}}),t6=uA(()=>{Fi()}),Ri,r6=uA(()=>{Ri="1.23.0"}),jr,z0,Wi=uA(()=>{r6(),jr="warning",z0={wasm:{},webgl:{},webgpu:{},versions:{common:Ri},set logLevel(i){if(i!==void 0){if(typeof i!="string"||["verbose","info","warning","error","fatal"].indexOf(i)===-1)throw new Error(`Unsupported logging level: ${i}`);jr=i}},get logLevel(){return jr}},Object.defineProperty(z0,"logLevel",{enumerable:!0})}),f0,a6=uA(()=>{Wi(),f0=z0}),Ki,Zi,i6=uA(()=>{Ki=(i,o)=>{let u=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);u.width=i.dims[3],u.height=i.dims[2];let d=u.getContext("2d");if(d!=null){let p,k;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(p=i.dims[2],k=i.dims[3]):(p=i.dims[3],k=i.dims[2]);let h=o?.format!==void 0?o.format:"RGB",w=o?.norm,x,G;w===void 0||w.mean===void 0?x=[255,255,255,255]:typeof w.mean=="number"?x=[w.mean,w.mean,w.mean,w.mean]:(x=[w.mean[0],w.mean[1],w.mean[2],0],w.mean[3]!==void 0&&(x[3]=w.mean[3])),w===void 0||w.bias===void 0?G=[0,0,0,0]:typeof w.bias=="number"?G=[w.bias,w.bias,w.bias,w.bias]:(G=[w.bias[0],w.bias[1],w.bias[2],0],w.bias[3]!==void 0&&(G[3]=w.bias[3]));let z=k*p,M=0,N=z,H=z*2,S=-1;h==="RGBA"?(M=0,N=z,H=z*2,S=z*3):h==="RGB"?(M=0,N=z,H=z*2):h==="RBG"&&(M=0,H=z,N=z*2);for(let K=0;K<k;K++)for(let X=0;X<p;X++){let V=(i.data[M++]-G[0])*x[0],W=(i.data[N++]-G[1])*x[1],j=(i.data[H++]-G[2])*x[2],l=S===-1?255:(i.data[S++]-G[3])*x[3];d.fillStyle="rgba("+V+","+W+","+j+","+l+")",d.fillRect(X,K,1,1)}if("toDataURL"in u)return u.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Zi=(i,o)=>{let u=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),d;if(u!=null){let p,k,h;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(p=i.dims[2],k=i.dims[1],h=i.dims[3]):(p=i.dims[3],k=i.dims[2],h=i.dims[1]);let w=o!==void 0&&o.format!==void 0?o.format:"RGB",x=o?.norm,G,z;x===void 0||x.mean===void 0?G=[255,255,255,255]:typeof x.mean=="number"?G=[x.mean,x.mean,x.mean,x.mean]:(G=[x.mean[0],x.mean[1],x.mean[2],255],x.mean[3]!==void 0&&(G[3]=x.mean[3])),x===void 0||x.bias===void 0?z=[0,0,0,0]:typeof x.bias=="number"?z=[x.bias,x.bias,x.bias,x.bias]:(z=[x.bias[0],x.bias[1],x.bias[2],0],x.bias[3]!==void 0&&(z[3]=x.bias[3]));let M=k*p;if(o!==void 0&&(o.format!==void 0&&h===4&&o.format!=="RGBA"||h===3&&o.format!=="RGB"&&o.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let N=4,H=0,S=1,K=2,X=3,V=0,W=M,j=M*2,l=-1;w==="RGBA"?(V=0,W=M,j=M*2,l=M*3):w==="RGB"?(V=0,W=M,j=M*2):w==="RBG"&&(V=0,j=M,W=M*2),d=u.createImageData(p,k);for(let B=0;B<k*p;H+=N,S+=N,K+=N,X+=N,B++)d.data[H]=(i.data[V++]-z[0])*G[0],d.data[S]=(i.data[W++]-z[1])*G[1],d.data[K]=(i.data[j++]-z[2])*G[2],d.data[X]=l===-1?255:(i.data[l++]-z[3])*G[3]}else throw new Error("Can not access image data");return d}}),Vt,Li,Vi,Ui,Xi,Ji,s6=uA(()=>{_r(),Vt=(i,o)=>{if(i===void 0)throw new Error("Image buffer must be defined");if(o.height===void 0||o.width===void 0)throw new Error("Image height and width must be defined");if(o.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:u,width:d}=o,p=o.norm??{mean:255,bias:0},k,h;typeof p.mean=="number"?k=[p.mean,p.mean,p.mean,p.mean]:k=[p.mean[0],p.mean[1],p.mean[2],p.mean[3]??255],typeof p.bias=="number"?h=[p.bias,p.bias,p.bias,p.bias]:h=[p.bias[0],p.bias[1],p.bias[2],p.bias[3]??0];let w=o.format!==void 0?o.format:"RGBA",x=o.tensorFormat!==void 0&&o.tensorFormat!==void 0?o.tensorFormat:"RGB",G=u*d,z=x==="RGBA"?new Float32Array(G*4):new Float32Array(G*3),M=4,N=0,H=1,S=2,K=3,X=0,V=G,W=G*2,j=-1;w==="RGB"&&(M=3,N=0,H=1,S=2,K=-1),x==="RGBA"?j=G*3:x==="RBG"?(X=0,W=G,V=G*2):x==="BGR"&&(W=0,V=G,X=G*2);for(let l=0;l<G;l++,N+=M,S+=M,H+=M,K+=M)z[X++]=(i[N]+h[0])/k[0],z[V++]=(i[H]+h[1])/k[1],z[W++]=(i[S]+h[2])/k[2],j!==-1&&K!==-1&&(z[j++]=(i[K]+h[3])/k[3]);return x==="RGBA"?new ie("float32",z,[1,4,u,d]):new ie("float32",z,[1,3,u,d])},Li=async(i,o)=>{let u=typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement,d=typeof ImageData<"u"&&i instanceof ImageData,p=typeof ImageBitmap<"u"&&i instanceof ImageBitmap,k=typeof i=="string",h,w=o??{},x=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},G=z=>typeof HTMLCanvasElement<"u"&&z instanceof HTMLCanvasElement||z instanceof OffscreenCanvas?z.getContext("2d"):null;if(u){let z=x();z.width=i.width,z.height=i.height;let M=G(z);if(M!=null){let N=i.height,H=i.width;if(o!==void 0&&o.resizedHeight!==void 0&&o.resizedWidth!==void 0&&(N=o.resizedHeight,H=o.resizedWidth),o!==void 0){if(w=o,o.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");w.tensorFormat="RGBA",w.height=N,w.width=H}else w.tensorFormat="RGBA",w.height=N,w.width=H;M.drawImage(i,0,0),h=M.getImageData(0,0,H,N).data}else throw new Error("Can not access image data")}else if(d){let z,M;if(o!==void 0&&o.resizedWidth!==void 0&&o.resizedHeight!==void 0?(z=o.resizedHeight,M=o.resizedWidth):(z=i.height,M=i.width),o!==void 0&&(w=o),w.format="RGBA",w.height=z,w.width=M,o!==void 0){let N=x();N.width=M,N.height=z;let H=G(N);if(H!=null)H.putImageData(i,0,0),h=H.getImageData(0,0,M,z).data;else throw new Error("Can not access image data")}else h=i.data}else if(p){if(o===void 0)throw new Error("Please provide image config with format for Imagebitmap");let z=x();z.width=i.width,z.height=i.height;let M=G(z);if(M!=null){let N=i.height,H=i.width;return M.drawImage(i,0,0,H,N),h=M.getImageData(0,0,H,N).data,w.height=N,w.width=H,Vt(h,w)}else throw new Error("Can not access image data")}else{if(k)return new Promise((z,M)=>{let N=x(),H=G(N);if(!i||!H)return M();let S=new Image;S.crossOrigin="Anonymous",S.src=i,S.onload=()=>{N.width=S.width,N.height=S.height,H.drawImage(S,0,0,N.width,N.height);let K=H.getImageData(0,0,N.width,N.height);w.height=N.height,w.width=N.width,z(Vt(K.data,w))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(h!==void 0)return Vt(h,w);throw new Error("Input data provided is not supported - aborted tensor creation")},Vi=(i,o)=>{let{width:u,height:d,download:p,dispose:k}=o,h=[1,d,u,4];return new ie({location:"texture",type:"float32",texture:i,dims:h,download:p,dispose:k})},Ui=(i,o)=>{let{dataType:u,dims:d,download:p,dispose:k}=o;return new ie({location:"gpu-buffer",type:u??"float32",gpuBuffer:i,dims:d,download:p,dispose:k})},Xi=(i,o)=>{let{dataType:u,dims:d,download:p,dispose:k}=o;return new ie({location:"ml-tensor",type:u??"float32",mlTensor:i,dims:d,download:p,dispose:k})},Ji=(i,o,u)=>new ie({location:"cpu-pinned",type:i,data:o,dims:u??[o.length]})}),t2,ot,qr,ji,n6=uA(()=>{t2=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),ot=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),qr=!1,ji=()=>{if(!qr){qr=!0;let i=typeof BigInt64Array<"u"&&BigInt64Array.from,o=typeof BigUint64Array<"u"&&BigUint64Array.from,u=globalThis.Float16Array,d=typeof u<"u"&&u.from;i&&(t2.set("int64",BigInt64Array),ot.set(BigInt64Array,"int64")),o&&(t2.set("uint64",BigUint64Array),ot.set(BigUint64Array,"uint64")),d?(t2.set("float16",u),ot.set(u,"float16")):t2.set("float16",Uint16Array)}}}),qi,_i,o6=uA(()=>{_r(),qi=i=>{let o=1;for(let u=0;u<i.length;u++){let d=i[u];if(typeof d!="number"||!Number.isSafeInteger(d))throw new TypeError(`dims[${u}] must be an integer, got: ${d}`);if(d<0)throw new RangeError(`dims[${u}] must be a non-negative integer, got: ${d}`);o*=d}return o},_i=(i,o)=>{switch(i.location){case"cpu":return new ie(i.type,i.data,o);case"cpu-pinned":return new ie({location:"cpu-pinned",data:i.data,type:i.type,dims:o});case"texture":return new ie({location:"texture",texture:i.texture,type:i.type,dims:o});case"gpu-buffer":return new ie({location:"gpu-buffer",gpuBuffer:i.gpuBuffer,type:i.type,dims:o});case"ml-tensor":return new ie({location:"ml-tensor",mlTensor:i.mlTensor,type:i.type,dims:o});default:throw new Error(`tensorReshape: tensor location ${i.location} is not supported`)}}}),ie,_r=uA(()=>{i6(),s6(),n6(),o6(),ie=class{constructor(i,o,u){ji();let d,p;if(typeof i=="object"&&"location"in i)switch(this.dataLocation=i.location,d=i.type,p=i.dims,i.location){case"cpu-pinned":{let h=t2.get(d);if(!h)throw new TypeError(`unsupported type "${d}" to create tensor from pinned buffer`);if(!(i.data instanceof h))throw new TypeError(`buffer should be of type ${h.name}`);this.cpuData=i.data;break}case"texture":{if(d!=="float32")throw new TypeError(`unsupported type "${d}" to create tensor from texture`);this.gpuTextureData=i.texture,this.downloader=i.download,this.disposer=i.dispose;break}case"gpu-buffer":{if(d!=="float32"&&d!=="float16"&&d!=="int32"&&d!=="int64"&&d!=="uint32"&&d!=="uint8"&&d!=="bool"&&d!=="uint4"&&d!=="int4")throw new TypeError(`unsupported type "${d}" to create tensor from gpu buffer`);this.gpuBufferData=i.gpuBuffer,this.downloader=i.download,this.disposer=i.dispose;break}case"ml-tensor":{if(d!=="float32"&&d!=="float16"&&d!=="int32"&&d!=="int64"&&d!=="uint32"&&d!=="uint64"&&d!=="int8"&&d!=="uint8"&&d!=="bool"&&d!=="uint4"&&d!=="int4")throw new TypeError(`unsupported type "${d}" to create tensor from MLTensor`);this.mlTensorData=i.mlTensor,this.downloader=i.download,this.disposer=i.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let h,w;if(typeof i=="string")if(d=i,w=u,i==="string"){if(!Array.isArray(o))throw new TypeError("A string tensor's data must be a string array.");h=o}else{let x=t2.get(i);if(x===void 0)throw new TypeError(`Unsupported tensor type: ${i}.`);if(Array.isArray(o)){if(i==="float16"&&x===Uint16Array||i==="uint4"||i==="int4")throw new TypeError(`Creating a ${i} tensor from number array is not supported. Please use ${x.name} as data.`);i==="uint64"||i==="int64"?h=x.from(o,BigInt):h=x.from(o)}else if(o instanceof x)h=o;else if(o instanceof Uint8ClampedArray)if(i==="uint8")h=Uint8Array.from(o);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(i==="float16"&&o instanceof Uint16Array&&x!==Uint16Array)h=new globalThis.Float16Array(o.buffer,o.byteOffset,o.length);else throw new TypeError(`A ${d} tensor's data must be type of ${x}`)}else if(w=o,Array.isArray(i)){if(i.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let x=typeof i[0];if(x==="string")d="string",h=i;else if(x==="boolean")d="bool",h=Uint8Array.from(i);else throw new TypeError(`Invalid element type of data array: ${x}.`)}else if(i instanceof Uint8ClampedArray)d="uint8",h=Uint8Array.from(i);else{let x=ot.get(i.constructor);if(x===void 0)throw new TypeError(`Unsupported type for tensor data: ${i.constructor}.`);d=x,h=i}if(w===void 0)w=[h.length];else if(!Array.isArray(w))throw new TypeError("A tensor's dims must be a number array");p=w,this.cpuData=h,this.dataLocation="cpu"}let k=qi(p);if(this.cpuData&&k!==this.cpuData.length&&!((d==="uint4"||d==="int4")&&Math.ceil(k/2)===this.cpuData.length))throw new Error(`Tensor's size(${k}) does not match data length(${this.cpuData.length}).`);this.type=d,this.dims=p,this.size=k}static async fromImage(i,o){return Li(i,o)}static fromTexture(i,o){return Vi(i,o)}static fromGpuBuffer(i,o){return Ui(i,o)}static fromMLTensor(i,o){return Xi(i,o)}static fromPinnedBuffer(i,o,u){return Ji(i,o,u)}toDataURL(i){return Ki(this,i)}toImageData(i){return Zi(this,i)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(i){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let o=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=o,i&&this.disposer&&(this.disposer(),this.disposer=void 0),o}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(i){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return _i(this,i)}}}),$0,$i=uA(()=>{_r(),$0=ie}),Ut,$r,xe,le,r2,a2,As=uA(()=>{Wi(),Ut=(i,o)=>{(typeof z0.trace>"u"?!z0.wasm.trace:!z0.trace)||console.timeStamp(`${i}::ORT::${o}`)},$r=(i,o)=>{let u=new Error().stack?.split(/\r\n|\r|\n/g)||[],d=!1;for(let p=0;p<u.length;p++){if(d&&!u[p].includes("TRACE_FUNC")){let k=`FUNC_${i}::${u[p].trim().split(" ")[1]}`;o&&(k+=`::${o}`),Ut("CPU",k);return}u[p].includes("TRACE_FUNC")&&(d=!0)}},xe=i=>{(typeof z0.trace>"u"?!z0.wasm.trace:!z0.trace)||$r("BEGIN",i)},le=i=>{(typeof z0.trace>"u"?!z0.wasm.trace:!z0.trace)||$r("END",i)},r2=i=>{(typeof z0.trace>"u"?!z0.wasm.trace:!z0.trace)||console.time(`ORT::${i}`)},a2=i=>{(typeof z0.trace>"u"?!z0.wasm.trace:!z0.trace)||console.timeEnd(`ORT::${i}`)}}),es,g6=uA(()=>{Fi(),$i(),As(),es=class Jl{constructor(o){this.handler=o}async run(o,u,d){xe(),r2("InferenceSession.run");let p={},k={};if(typeof o!="object"||o===null||o instanceof $0||Array.isArray(o))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let h=!0;if(typeof u=="object"){if(u===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(u instanceof $0)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(u)){if(u.length===0)throw new TypeError("'fetches' cannot be an empty array.");h=!1;for(let G of u){if(typeof G!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(G)===-1)throw new RangeError(`'fetches' contains invalid output name: ${G}.`);p[G]=null}if(typeof d=="object"&&d!==null)k=d;else if(typeof d<"u")throw new TypeError("'options' must be an object.")}else{let G=!1,z=Object.getOwnPropertyNames(u);for(let M of this.outputNames)if(z.indexOf(M)!==-1){let N=u[M];(N===null||N instanceof $0)&&(G=!0,h=!1,p[M]=N)}if(G){if(typeof d=="object"&&d!==null)k=d;else if(typeof d<"u")throw new TypeError("'options' must be an object.")}else k=u}}else if(typeof u<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let G of this.inputNames)if(typeof o[G]>"u")throw new Error(`input '${G}' is missing in 'feeds'.`);if(h)for(let G of this.outputNames)p[G]=null;let w=await this.handler.run(o,p,k),x={};for(let G in w)if(Object.hasOwnProperty.call(w,G)){let z=w[G];z instanceof $0?x[G]=z:x[G]=new $0(z.type,z.data,z.dims)}return a2("InferenceSession.run"),le(),x}async release(){return this.handler.dispose()}static async create(o,u,d,p){xe(),r2("InferenceSession.create");let k,h={};if(typeof o=="string"){if(k=o,typeof u=="object"&&u!==null)h=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof Uint8Array){if(k=o,typeof u=="object"&&u!==null)h=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&o instanceof SharedArrayBuffer){let z=o,M=0,N=o.byteLength;if(typeof u=="object"&&u!==null)h=u;else if(typeof u=="number"){if(M=u,!Number.isSafeInteger(M))throw new RangeError("'byteOffset' must be an integer.");if(M<0||M>=z.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${z.byteLength}).`);if(N=o.byteLength-M,typeof d=="number"){if(N=d,!Number.isSafeInteger(N))throw new RangeError("'byteLength' must be an integer.");if(N<=0||M+N>z.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${z.byteLength-M}].`);if(typeof p=="object"&&p!==null)h=p;else if(typeof p<"u")throw new TypeError("'options' must be an object.")}else if(typeof d<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof u<"u")throw new TypeError("'options' must be an object.");k=new Uint8Array(z,M,N)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[w,x]=await Si(h),G=await w.createInferenceSessionHandler(k,x);return a2("InferenceSession.create"),le(),new Jl(G)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),Aa,f6=uA(()=>{g6(),Aa=es}),u6=uA(()=>{}),l6=uA(()=>{}),C6=uA(()=>{}),c6=uA(()=>{}),d6={};st(d6,{InferenceSession:()=>Aa,TRACE:()=>Ut,TRACE_EVENT_BEGIN:()=>r2,TRACE_EVENT_END:()=>a2,TRACE_FUNC_BEGIN:()=>xe,TRACE_FUNC_END:()=>le,Tensor:()=>$0,env:()=>f0,registerBackend:()=>z2});var ge=uA(()=>{t6(),a6(),f6(),$i(),u6(),l6(),As(),C6(),c6()}),ea=uA(()=>{}),ts={};st(ts,{default:()=>rs});var ta,ra,rs,b6=uA(()=>{O3(),i2(),ga(),ta="ort-wasm-proxy-worker",ra=globalThis.self?.name===ta,ra&&(self.onmessage=i=>{let{type:o,in:u}=i.data;try{switch(o){case"init-wasm":la(u.wasm).then(()=>{B1(u).then(()=>{postMessage({type:o})},d=>{postMessage({type:o,err:d})})},d=>{postMessage({type:o,err:d})});break;case"init-ep":{let{epName:d,env:p}=u;E1(p,d).then(()=>{postMessage({type:o})},k=>{postMessage({type:o,err:k})});break}case"copy-from":{let{buffer:d}=u,p=lr(d);postMessage({type:o,out:p});break}case"create":{let{model:d,options:p}=u;v1(d,p).then(k=>{postMessage({type:o,out:k})},k=>{postMessage({type:o,err:k})});break}case"release":G1(u),postMessage({type:o});break;case"run":{let{sessionId:d,inputIndices:p,inputs:k,outputIndices:h,options:w}=u;y1(d,p,k,h,new Array(h.length).fill(null),w).then(x=>{x.some(G=>G[3]!=="cpu")?postMessage({type:o,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:o,out:x},M1([...k,...x]))},x=>{postMessage({type:o,err:x})});break}case"end-profiling":D1(u),postMessage({type:o});break;default:}}catch(d){postMessage({type:o,err:d})}}),rs=ra?null:i=>new Worker(i??se,{type:"module",name:ta})}),aa,as,is,se,ia,Xt,ss,ns,sa,os,na,gs,oa,fs,ga=uA(()=>{ea(),aa=typeof location>"u"?void 0:location.origin,as=self.location.href>"file:"&&self.location.href<"file;",is=()=>{{if(as){let i=URL;return new URL(new i("ort.min.mjs",self.location.href).href,aa).href}return self.location.href}},se=is(),ia=()=>{if(se&&!se.startsWith("blob:"))return se.substring(0,se.lastIndexOf("/")+1)},Xt=(i,o)=>{try{let u=o??se;return(u?new URL(i,u):new URL(i)).origin===aa}catch{return!1}},ss=(i,o)=>{let u=o??se;try{return(u?new URL(i,u):new URL(i)).href}catch{return}},ns=(i,o)=>`${o??"./"}${i}`,sa=async i=>{let o=await(await fetch(i,{credentials:"same-origin"})).blob();return URL.createObjectURL(o)},os=async i=>(await import(i)).default,na=(b6(),Lt(ts)).default,gs=async()=>{if(!se)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Xt(se))return[void 0,na()];let i=await sa(se);return[i,na(i)]},oa=void 0,fs=async(i,o,u,d)=>{let p=oa&&!(i||o);if(p)if(se)p=Xt(se);else if(d&&!u)p=!0;else throw new Error("cannot determine the script source URL.");if(p)return[void 0,oa];{let k="ort-wasm-simd-threaded.jsep.mjs",h=i??ss(k,o),w=u&&h&&!Xt(h,o),x=w?await sa(h):h??ns(k,o);return[w?x:void 0,await os(x)]}}}),fa,Jt,gt,ua,us,ls,Cs,la,s0,i2=uA(()=>{ga(),Jt=!1,gt=!1,ua=!1,us=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},ls=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Cs=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},la=async i=>{if(Jt)return Promise.resolve();if(gt)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(ua)throw new Error("previous call to 'initializeWebAssembly()' failed.");gt=!0;let o=i.initTimeout,u=i.numThreads;if(i.simd!==!1){if(i.simd==="relaxed"){if(!Cs())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!ls())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let d=us();u>1&&!d&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+u+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),i.numThreads=u=1);let p=i.wasmPaths,k=typeof p=="string"?p:void 0,h=p?.mjs,w=h?.href??h,x=p?.wasm,G=x?.href??x,z=i.wasmBinary,[M,N]=await fs(w,k,u>1,!!z||!!G),H=!1,S=[];if(o>0&&S.push(new Promise(K=>{setTimeout(()=>{H=!0,K()},o)})),S.push(new Promise((K,X)=>{let V={numThreads:u};if(z)V.wasmBinary=z;else if(G||k)V.locateFile=W=>G??k+W;else if(w&&w.indexOf("blob:")!==0)V.locateFile=W=>new URL(W,w).href;else if(M){let W=ia();W&&(V.locateFile=j=>W+j)}N(V).then(W=>{gt=!1,Jt=!0,fa=W,K(),M&&URL.revokeObjectURL(M)},W=>{gt=!1,ua=!0,X(W)})})),await Promise.race(S),H)throw new Error(`WebAssembly backend initializing failed due to timeout: ${o}ms`)},s0=()=>{if(Jt&&fa)return fa;throw new Error("WebAssembly is not initialized yet.")}}),Ce,jt,e0,Ca=uA(()=>{i2(),Ce=(i,o)=>{let u=s0(),d=u.lengthBytesUTF8(i)+1,p=u._malloc(d);return u.stringToUTF8(i,p,d),o.push(p),p},jt=(i,o,u,d)=>{if(typeof i=="object"&&i!==null){if(u.has(i))throw new Error("Circular reference in options");u.add(i)}Object.entries(i).forEach(([p,k])=>{let h=o?o+p:p;if(typeof k=="object")jt(k,h+".",u,d);else if(typeof k=="string"||typeof k=="number")d(h,k.toString());else if(typeof k=="boolean")d(h,k?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof k}`)})},e0=i=>{let o=s0(),u=o.stackSave();try{let d=o.PTR_SIZE,p=o.stackAlloc(2*d);o._OrtGetLastError(p,p+d);let k=Number(o.getValue(p,d===4?"i32":"i64")),h=o.getValue(p+d,"*"),w=h?o.UTF8ToString(h):"";throw new Error(`${i} ERROR_CODE: ${k}, ERROR_MESSAGE: ${w}`)}finally{o.stackRestore(u)}}}),cs,I6=uA(()=>{i2(),Ca(),cs=i=>{let o=s0(),u=0,d=[],p=i||{};try{if(i?.logSeverityLevel===void 0)p.logSeverityLevel=2;else if(typeof i.logSeverityLevel!="number"||!Number.isInteger(i.logSeverityLevel)||i.logSeverityLevel<0||i.logSeverityLevel>4)throw new Error(`log severity level is not valid: ${i.logSeverityLevel}`);if(i?.logVerbosityLevel===void 0)p.logVerbosityLevel=0;else if(typeof i.logVerbosityLevel!="number"||!Number.isInteger(i.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${i.logVerbosityLevel}`);i?.terminate===void 0&&(p.terminate=!1);let k=0;return i?.tag!==void 0&&(k=Ce(i.tag,d)),u=o._OrtCreateRunOptions(p.logSeverityLevel,p.logVerbosityLevel,!!p.terminate,k),u===0&&e0("Can't create run options."),i?.extra!==void 0&&jt(i.extra,"",new WeakSet,(h,w)=>{let x=Ce(h,d),G=Ce(w,d);o._OrtAddRunConfigEntry(u,x,G)!==0&&e0(`Can't set a run config entry: ${h} - ${w}.`)}),[u,d]}catch(k){throw u!==0&&o._OrtReleaseRunOptions(u),d.forEach(h=>o._free(h)),k}}}),ds,bs,Is,ft,ps,hs,p6=uA(()=>{i2(),Ca(),ds=i=>{switch(i){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"layout":return 3;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${i}`)}},bs=i=>{switch(i){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${i}`)}},Is=i=>{i.extra||(i.extra={}),i.extra.session||(i.extra.session={});let o=i.extra.session;o.use_ort_model_bytes_directly||(o.use_ort_model_bytes_directly="1"),i.executionProviders&&i.executionProviders.some(u=>(typeof u=="string"?u:u.name)==="webgpu")&&(i.enableMemPattern=!1)},ft=(i,o,u,d)=>{let p=Ce(o,d),k=Ce(u,d);s0()._OrtAddSessionConfigEntry(i,p,k)!==0&&e0(`Can't set a session config entry: ${o} - ${u}.`)},ps=async(i,o,u)=>{for(let d of o){let p=typeof d=="string"?d:d.name,k=[];switch(p){case"webnn":if(p="WEBNN",typeof d!="string"){let z=d?.deviceType;z&&ft(i,"deviceType",z,u)}break;case"webgpu":if(p="JS",typeof d!="string"){let z=d;if(z?.preferredLayout){if(z.preferredLayout!=="NCHW"&&z.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${z.preferredLayout}`);ft(i,"preferredLayout",z.preferredLayout,u)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${p}`)}let h=Ce(p,u),w=k.length,x=0,G=0;if(w>0){x=s0()._malloc(w*s0().PTR_SIZE),u.push(x),G=s0()._malloc(w*s0().PTR_SIZE),u.push(G);for(let z=0;z<w;z++)s0().setValue(x+z*s0().PTR_SIZE,k[z][0],"*"),s0().setValue(G+z*s0().PTR_SIZE,k[z][1],"*")}await s0()._OrtAppendExecutionProvider(i,h,x,G,w)!==0&&e0(`Can't append execution provider: ${p}.`)}},hs=async i=>{let o=s0(),u=0,d=[],p=i||{};Is(p);try{let k=ds(p.graphOptimizationLevel??"all"),h=bs(p.executionMode??"sequential"),w=typeof p.logId=="string"?Ce(p.logId,d):0,x=p.logSeverityLevel??2;if(!Number.isInteger(x)||x<0||x>4)throw new Error(`log severity level is not valid: ${x}`);let G=p.logVerbosityLevel??0;if(!Number.isInteger(G)||G<0||G>4)throw new Error(`log verbosity level is not valid: ${G}`);let z=typeof p.optimizedModelFilePath=="string"?Ce(p.optimizedModelFilePath,d):0;if(u=o._OrtCreateSessionOptions(k,!!p.enableCpuMemArena,!!p.enableMemPattern,h,!!p.enableProfiling,0,w,x,G,z),u===0&&e0("Can't create session options."),p.executionProviders&&await ps(u,p.executionProviders,d),p.enableGraphCapture!==void 0){if(typeof p.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${p.enableGraphCapture}`);ft(u,"enableGraphCapture",p.enableGraphCapture.toString(),d)}if(p.freeDimensionOverrides)for(let[M,N]of Object.entries(p.freeDimensionOverrides)){if(typeof M!="string")throw new Error(`free dimension override name must be a string: ${M}`);if(typeof N!="number"||!Number.isInteger(N)||N<0)throw new Error(`free dimension override value must be a non-negative integer: ${N}`);let H=Ce(M,d);o._OrtAddFreeDimensionOverride(u,H,N)!==0&&e0(`Can't set a free dimension override: ${M} - ${N}.`)}return p.extra!==void 0&&jt(p.extra,"",new WeakSet,(M,N)=>{ft(u,M,N,d)}),[u,d]}catch(k){throw u!==0&&o._OrtReleaseSessionOptions(u)!==0&&e0("Can't release session options."),d.forEach(h=>o._free(h)),k}}}),s2,Te,n2,qt,_t,ca,da,ba,yA=uA(()=>{s2=i=>{switch(i){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${i}`)}},Te=i=>{switch(i){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${i}`)}},n2=(i,o)=>{let u=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][i],d=typeof o=="number"?o:o.reduce((p,k)=>p*k,1);return u>0?Math.ceil(d*u):void 0},qt=i=>{switch(i){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${i}`)}},_t=i=>{switch(i){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${i}`)}},ca=i=>i==="float32"||i==="float16"||i==="int32"||i==="int64"||i==="uint32"||i==="uint8"||i==="bool"||i==="uint4"||i==="int4",da=i=>i==="float32"||i==="float16"||i==="int32"||i==="int64"||i==="uint32"||i==="uint64"||i==="int8"||i==="uint8"||i==="bool"||i==="uint4"||i==="int4",ba=i=>{switch(i){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${i}`)}}}),Ia,ms=uA(()=>{ea(),Ia=async i=>{if(typeof i=="string"){let o=await fetch(i);if(!o.ok)throw new Error(`failed to load external data file: ${i}`);let u=o.headers.get("Content-Length"),d=u?parseInt(u,10):0;if(d<1073741824)return new Uint8Array(await o.arrayBuffer());{if(!o.body)throw new Error(`failed to load external data file: ${i}, no response body.`);let p=o.body.getReader(),k;try{k=new ArrayBuffer(d)}catch(w){if(w instanceof RangeError){let x=Math.ceil(d/65536);k=new WebAssembly.Memory({initial:x,maximum:x}).buffer}else throw w}let h=0;for(;;){let{done:w,value:x}=await p.read();if(w)break;let G=x.byteLength;new Uint8Array(k,h,G).set(x),h+=G}return new Uint8Array(k,0,d)}}else return i instanceof Blob?new Uint8Array(await i.arrayBuffer()):i instanceof Uint8Array?i:new Uint8Array(i)}}),ks,ws,Bs,Es,pa,xs,LA,Oe=uA(()=>{yA(),ks=["V","I","W","E","F"],ws=(i,o)=>{console.log(`[${ks[i]},${new Date().toISOString()}]${o}`)},pa=(i,o)=>{Bs=i,Es=o},xs=(i,o)=>{let u=_t(i),d=_t(Bs);u>=d&&ws(u,typeof o=="function"?o():o)},LA=(...i)=>{Es&&xs(...i)}}),vs,Y2,eA,$t,Gs,Qs,ys,TA=uA(()=>{vs=class{static calcMatMulShape(i,o){return i[1]!==o[0]?void 0:[i[0],o[1]]}},Y2=class{static calcShape(i,o,u=!1){let d=i.length,p=o.length;if(d===0)return o;if(p===0)return i;let k=Math.max(i.length,o.length),h=new Array(k);if(u){if(d<2||p<2)return;let w=vs.calcMatMulShape([i[d-2],i[d-1]],[o[p-2],o[p-1]]);if(w===void 0)return;[h[k-2],h[k-1]]=w}for(let w=u?3:1;w<=k;w++){let x=d-w<0?1:i[d-w],G=p-w<0?1:o[p-w];if(x!==G&&x>1&&G>1)return;let z=Math.max(x,G);if(x&&G)h[k-w]=Math.max(x,G);else{if(z>1)return;h[k-w]=0}}return h}static isValidBroadcast(i,o){let u=i.length,d=o.length;if(u>d)return!1;for(let p=1;p<=u;p++)if(i[u-p]!==1&&i[u-p]!==o[d-p])return!1;return!0}},eA=class Xr{static size(o){return Xr.getSizeFromDimensionRange(o,0,o.length)}static convertShape(o,u=4){let d=o.length;if(d===0)return[];let p=new Array(d),k=d-1;for(;k>=0;){if(o[k]%u===0){p[k]=o[k]/u;break}if(u%o[k]!==0)throw new Error("cannot convert shape");p[k]=1,u/=o[k],k--}for(k--;k>=0;k--)p[k]=o[k];return p}static sizeFromDimension(o,u){if(u<0||u>o.length)throw new Error(`invalid dimension of ${u} for sizeFromDimension as Tensor has ${o.length} dimensions.`);return Xr.getSizeFromDimensionRange(o,u,o.length)}static sizeToDimension(o,u){if(u<0||u>o.length)throw new Error(`invalid dimension of ${u} for sizeToDimension as Tensor has ${o.length} dimensions.`);return Xr.getSizeFromDimensionRange(o,0,u)}static getSizeFromDimensionRange(o,u,d){let p=1;for(let k=u;k<d;k++){if(o[k]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");p*=Number(o[k])}return p}static computeStrides(o){let u=o.length;if(u===0)return[];if(u===1)return[1];let d=new Array(u);d[u-1]=1,d[u-2]=o[u-1];for(let p=u-3;p>=0;--p)d[p]=d[p+1]*o[p+1];return d}static normalizeAxis(o,u){if(o<-u&&o>=u)throw new Error("unsupported axis for this operation.");return o<0?o+u:o}static normalizeAxes(o,u){return o.map(d=>this.normalizeAxis(d,u??o.length))}static sortBasedOnPerm(o,u){return u?u.map(d=>o[d]):o.slice().reverse()}static padShape(o,u){let d=o.length;return o.map((p,k)=>p+u[k]+u[k+d])}static areEqual(o,u){return o.length!==u.length?!1:o.every((d,p)=>d===u[p])}},$t=class Zt{static adjustPoolAttributes(o,u,d,p,k,h){if(!o&&d.length!==u.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(o)for(let w=0;w<u.length-2;w++)w>=d.length?d.push(u[w+2]):d[w]=u[w+2];for(let w=0;w<d.length;w++)if(w<p.length){if(p[w]<0)throw new Error("strides should be greater than or equal to 1")}else p.push(1);for(let w=0;w<d.length;w++)if(w<k.length){if(k[w]<0)throw new Error("dilations should be greater than or equal to 1")}else k.push(1);for(let w=0;w<d.length*2;w++)if(w<h.length){if(h[w]<0)throw new Error("pad should be greater than or equal to 1")}else h.push(0);for(let w=0;w<d.length;w++){if(d[w]<=0)throw new Error("kernel shapes need to be greater than 0");if(h[w]>=d[w]||h[w+d.length]>=d[w])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(o,u,d,p,k,h,w){if(w){if(k.length!==2*(o.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(u.length!==o.length-2)throw new Error("length of strides should be the length of data dimensions");if(p.length!==o.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let x=0;x<o.length-2;x++)Zt.adjustPadAndReturnShape(o[x+(h?1:2)],u[x],d[x],p[x],k,x,x+o.length-2,w)}}static computePoolOutputShape(o,u,d,p,k,h,w){if(u.length<=0)throw new Error("input shape must be of size greater than 0");let x=[u[0],u[1]];return Zt.computeShapeHelper(o,u,x,d,p,k,h,w),x}static computeConvOutputShape(o,u,d,p,k,h,w){if(o.length<=0||u.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let x=[o[0],u[0]];return Zt.computeShapeHelper(!1,o,x,d,p,k,h,w),x}static computeShapeHelper(o,u,d,p,k,h,w,x){if(o)for(let G=0;G<u.length-2;G++)d.push(1);else for(let G=0;G<u.length-2;G++)d.push(Zt.adjustPadAndReturnShape(u[G+2],p[G],k[G],h[G],w,G,G+u.length-2,x))}static adjustPadAndReturnShape(o,u,d,p,k,h,w,x){let G=d*(p-1)+1;if(x&&x!=="NOTSET")switch(x){case"VALID":return k[h]=0,k[w]=0,Math.floor((o-G)/u+1);case"SAME_LOWER":case"SAME_UPPER":if(d!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let z=((o+u-1)/u-1)*u+p-o;return k[h]=Math.floor(x==="SAME_LOWER"?(z+1)/2:z/2),k[w]=z-k[h],Math.floor((o+z-p)/u+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((o+k[h]+k[w]-G)/u+1)}},Gs=class{static getShapeOfGemmResult(i,o,u,d,p){if(i.length!==2||u.length!==2)throw new Error("shape need to be of size 2");let k,h,w;o?(k=i[1],h=i[0]):(k=i[0],h=i[1]);let x=-1;if(d?(w=u[0],x=1):(w=u[1],x=0),u[x]!==h)throw new Error("dimension mismatch");if(k<=0||w<=0||h<=0)throw new Error("invalid shape specified");if(p&&!Y2.isValidBroadcast(p,[k,w]))throw new Error("gemm: invalid bias shape for broadcast");return[k,w,h]}},Qs=-34028234663852886e22,ys=34028234663852886e22}),ha,Ds=uA(()=>{yA(),ha=(i,o)=>new(qt(o))(i)}),ma,ka,wa,Ms,Ba,zs,Ea,xa,va,Ys,Ns,h6=uA(()=>{yA(),Oe(),ma=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),ka=(i,o)=>{if(o==="int32")return i;let u=ma.get(o);if(!u)throw new Error(`WebNN backend does not support data type: ${o}`);let d=u/8;if(i.byteLength%d!==0)throw new Error(`Invalid Uint8Array length - must be a multiple of ${d}.`);let p=i.byteLength/d,k=new(qt(o))(i.buffer,i.byteOffset,p);switch(o){case"int64":case"uint64":{let h=new Int32Array(p);for(let w=0;w<p;w++){let x=k[w];if(x>2147483647n||x<-2147483648n)throw new Error("Can not convert int64 data to int32 - value out of range.");h[w]=Number(x)}return new Uint8Array(h.buffer)}case"int8":case"uint8":case"uint32":{if(o==="uint32"&&k.some(w=>w>2147483647))throw new Error("Can not convert uint32 data to int32 - value out of range.");let h=Int32Array.from(k,Number);return new Uint8Array(h.buffer)}default:throw new Error(`Unsupported data conversion from ${o} to 'int32'`)}},wa=(i,o)=>{if(o==="int32")return i;if(i.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (int32).");let u=i.byteLength/4,d=new Int32Array(i.buffer,i.byteOffset,u);switch(o){case"int64":{let p=BigInt64Array.from(d,BigInt);return new Uint8Array(p.buffer)}case"uint64":{if(d.some(k=>k<0))throw new Error("Can not convert int32 data to uin64 - negative value found.");let p=BigUint64Array.from(d,BigInt);return new Uint8Array(p.buffer)}case"int8":{if(d.some(k=>k<-128||k>127))throw new Error("Can not convert int32 data to int8 - value out of range.");let p=Int8Array.from(d,Number);return new Uint8Array(p.buffer)}case"uint8":{if(d.some(p=>p<0||p>255))throw new Error("Can not convert int32 data to uint8 - value out of range.");return Uint8Array.from(d,Number)}case"uint32":{if(d.some(k=>k<0))throw new Error("Can not convert int32 data to uint32 - negative value found.");let p=Uint32Array.from(d,Number);return new Uint8Array(p.buffer)}default:throw new Error(`Unsupported data conversion from 'int32' to ${o}`)}},Ms=1,Ba=()=>Ms++,zs=new Map([["int8","int32"],["uint8","int32"],["uint32","int32"],["int64","int32"]]),Ea=(i,o)=>{let u=ma.get(i);if(!u)throw new Error(`WebNN backend does not support data type: ${i}`);return o.length>0?Math.ceil(o.reduce((d,p)=>d*p)*u/8):0},xa=class{constructor(i){this.isDataConverted=!1;let{sessionId:o,context:u,tensor:d,dataType:p,shape:k,fallbackDataType:h}=i;this.sessionId=o,this.mlContext=u,this.mlTensor=d,this.dataType=p,this.tensorShape=k,this.fallbackDataType=h}get tensor(){return this.mlTensor}get type(){return this.dataType}get fallbackType(){return this.fallbackDataType}get shape(){return this.tensorShape}get byteLength(){return Ea(this.dataType,this.tensorShape)}destroy(){LA("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(i){this.mlContext.writeTensor(this.mlTensor,i)}async read(i){if(this.fallbackDataType){let o=await this.mlContext.readTensor(this.mlTensor),u=wa(new Uint8Array(o),this.dataType);if(i){(i instanceof ArrayBuffer?new Uint8Array(i):new Uint8Array(i.buffer,i.byteOffset,i.byteLength)).set(u);return}else return u.buffer}else return i?this.mlContext.readTensor(this.mlTensor,i):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(i,o,u){return this.mlContext===i&&this.dataType===o&&this.tensorShape.length===u.length&&this.tensorShape.every((d,p)=>d===u[p])}setIsDataConverted(i){this.isDataConverted=i}},va=class{constructor(i,o){this.tensorManager=i,this.wrapper=o}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(i,o,u,d){let p=this.tensorManager.getMLContext(i),k;if(!p.opSupportLimits().input.dataTypes.includes(o)){if(k=zs.get(o),!k||!p.opSupportLimits().input.dataTypes.includes(k))throw new Error(`WebNN backend does not support data type: ${o}`);LA("verbose",()=>`[WebNN] TensorIdTracker.ensureTensor: fallback dataType from ${o} to ${k}`)}if(this.wrapper){if(this.wrapper.canReuseTensor(p,o,u))return this.wrapper.tensor;if(d){if(this.wrapper.byteLength!==Ea(o,u))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let h=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(i,o,u,h,!0,!0,k),d&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(i){let o=i;if(this.wrapper){if(this.wrapper.fallbackType)if(this.wrapper.fallbackType==="int32")o=ka(i,this.wrapper.type),this.wrapper.setIsDataConverted(!0);else throw new Error(`Unsupported fallback data type: ${this.wrapper.fallbackType}`);if(i.byteLength===this.wrapper.byteLength){this.wrapper.write(o);return}else LA("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor()}this.activeUpload?this.activeUpload.set(o):this.activeUpload=new Uint8Array(o)}async download(i){if(this.activeUpload){let o=this.wrapper?.isDataConverted?wa(this.activeUpload,this.wrapper?.type):this.activeUpload;if(i){i instanceof ArrayBuffer?new Uint8Array(i).set(o):new Uint8Array(i.buffer,i.byteOffset,i.byteLength).set(o);return}else return o.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return i?this.wrapper.read(i):this.wrapper.read()}},Ys=class{constructor(i){this.backend=i,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(i){let o=this.backend.getMLContext(i);if(!o)throw new Error("MLContext not found for session.");return o}reserveTensorId(){let i=Ba();return this.tensorTrackersById.set(i,new va(this)),i}releaseTensorId(i){let o=this.tensorTrackersById.get(i);o&&(this.tensorTrackersById.delete(i),o.tensorWrapper&&this.releaseTensor(o.tensorWrapper))}async ensureTensor(i,o,u,d,p){LA("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${o}, dataType: ${u}, shape: ${d}, copyOld: ${p}}`);let k=this.tensorTrackersById.get(o);if(!k)throw new Error("Tensor not found.");return k.ensureTensor(i,u,d,p)}upload(i,o){let u=this.tensorTrackersById.get(i);if(!u)throw new Error("Tensor not found.");u.upload(o)}async download(i,o){LA("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${i}, dstBuffer: ${o?.byteLength}}`);let u=this.tensorTrackersById.get(i);if(!u)throw new Error("Tensor not found.");return u.download(o)}releaseTensorsForSession(i){for(let o of this.freeTensors)o.sessionId===i&&o.destroy();this.freeTensors=this.freeTensors.filter(o=>o.sessionId!==i)}registerTensor(i,o,u,d){let p=this.getMLContext(i),k=Ba(),h=new xa({sessionId:i,context:p,tensor:o,dataType:u,shape:d});return this.tensorTrackersById.set(k,new va(this,h)),this.externalTensors.add(h),k}async getCachedTensor(i,o,u,d,p,k,h){let w=this.getMLContext(i);for(let[G,z]of this.freeTensors.entries())if(z.canReuseTensor(w,o,u)){LA("verbose",()=>`[WebNN] Reusing tensor {dataType: ${o}, ${h?`fallbackDataType: ${h},`:""} shape: ${u}`);let M=this.freeTensors.splice(G,1)[0];return M.sessionId=i,M}LA("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${o}, ${h?`fallbackDataType: ${h},`:""} shape: ${u}}`);let x=await w.createTensor({dataType:h??o,shape:u,dimensions:u,usage:d,writable:p,readable:k});return new xa({sessionId:i,context:w,tensor:x,dataType:o,shape:u,fallbackDataType:h})}releaseTensor(i){this.externalTensors.has(i)&&this.externalTensors.delete(i),this.freeTensors.push(i)}},Ns=(...i)=>new Ys(...i)}),ut,Ts,Os,m6=uA(()=>{yA(),i2(),Ds(),h6(),Oe(),ut=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),Ts=(i,o)=>{if(i===o)return!0;if(i===void 0||o===void 0)return!1;let u=Object.keys(i).sort(),d=Object.keys(o).sort();return u.length===d.length&&u.every((p,k)=>p===d[k]&&i[p]===o[p])},Os=class{constructor(i){this.tensorManager=Ns(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.sessionGraphOutputs=new Map,this.temporaryGraphInputs=[],this.temporaryGraphOutputs=[],this.temporarySessionTensorIds=new Map,pa(i.logLevel,!!i.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(i){LA("verbose",()=>`[WebNN] onRunStart {sessionId: ${i}}`),this.activeSessionId=i}onRunEnd(i){LA("verbose",()=>`[WebNN] onRunEnd {sessionId: ${i}}`);let o=this.temporarySessionTensorIds.get(i);if(o){for(let u of o)LA("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${u}}`),this.tensorManager.releaseTensorId(u);this.temporarySessionTensorIds.delete(i),this.activeSessionId=void 0}}async createMLContext(i){if(i instanceof GPUDevice){let u=this.mlContextCache.findIndex(d=>d.gpuDevice===i);if(u!==-1)return this.mlContextCache[u].mlContext;{let d=await navigator.ml.createContext(i);return this.mlContextCache.push({gpuDevice:i,mlContext:d}),d}}else if(i===void 0){let u=this.mlContextCache.findIndex(d=>d.options===void 0&&d.gpuDevice===void 0);if(u!==-1)return this.mlContextCache[u].mlContext;{let d=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:d}),d}}let o=this.mlContextCache.findIndex(u=>Ts(u.options,i));if(o!==-1)return this.mlContextCache[o].mlContext;{let u=await navigator.ml.createContext(i);return this.mlContextCache.push({options:i,mlContext:u}),u}}registerMLContext(i,o){this.mlContextBySessionId.set(i,o);let u=this.sessionIdsByMLContext.get(o);u||(u=new Set,this.sessionIdsByMLContext.set(o,u)),u.add(i),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(i,this.temporaryGraphInputs),this.temporaryGraphInputs=[]),this.temporaryGraphOutputs.length>0&&(this.sessionGraphOutputs.set(i,this.temporaryGraphOutputs),this.temporaryGraphOutputs=[])}onReleaseSession(i){this.sessionGraphInputs.delete(i),this.sessionGraphOutputs.delete(i);let o=this.mlContextBySessionId.get(i);if(!o)return;this.tensorManager.releaseTensorsForSession(i),this.mlContextBySessionId.delete(i);let u=this.sessionIdsByMLContext.get(o);if(u.delete(i),u.size===0){this.sessionIdsByMLContext.delete(o);let d=this.mlContextCache.findIndex(p=>p.mlContext===o);d!==-1&&this.mlContextCache.splice(d,1)}}getMLContext(i){return this.mlContextBySessionId.get(i)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(i){LA("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${i}}`),this.tensorManager.releaseTensorId(i)}async ensureTensor(i,o,u,d,p){let k=ut.get(u);if(!k)throw new Error(`Unsupported ONNX data type: ${u}`);return this.tensorManager.ensureTensor(i??this.currentSessionId,o,k,d,p)}async createTemporaryTensor(i,o,u){LA("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${o}, shape: ${u}}`);let d=ut.get(o);if(!d)throw new Error(`Unsupported ONNX data type: ${o}`);let p=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(i,p,d,u,!1);let k=this.temporarySessionTensorIds.get(i);return k?k.push(p):this.temporarySessionTensorIds.set(i,[p]),p}uploadTensor(i,o){if(!s0().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");LA("verbose",()=>`[WebNN] uploadTensor {tensorId: ${i}, data: ${o.byteLength}}`),this.tensorManager.upload(i,o)}async downloadTensor(i,o){return this.tensorManager.download(i,o)}createMLTensorDownloader(i,o){return async()=>{let u=await this.tensorManager.download(i);return ha(u,o)}}registerMLTensor(i,o,u,d){let p=ut.get(u);if(!p)throw new Error(`Unsupported ONNX data type: ${u}`);let k=this.tensorManager.registerTensor(i,o,p,d);return LA("verbose",()=>`[WebNN] registerMLTensor {tensor: ${o}, dataType: ${p}, dimensions: ${d}} -> {tensorId: ${k}}`),k}registerMLConstant(i,o,u,d,p,k,h=!1){if(!k)throw new Error("External mounted files are not available.");let w=i;i.startsWith("./")&&(w=i.substring(2));let x=k.get(w);if(!x)throw new Error(`File with name ${w} not found in preloaded files.`);if(o+u>x.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let G=x.slice(o,o+u).buffer,z;switch(p.dataType){case"float32":z=new Float32Array(G);break;case"float16":z=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(G):new Uint16Array(G);break;case"int32":z=new Int32Array(G);break;case"uint32":z=new Uint32Array(G);break;case"int64":if(h){let M=ka(new Uint8Array(G),"int64");z=new Int32Array(M.buffer),p.dataType="int32"}else z=new BigInt64Array(G);break;case"uint64":z=new BigUint64Array(G);break;case"int8":z=new Int8Array(G);break;case"int4":case"uint4":case"uint8":z=new Uint8Array(G);break;default:throw new Error(`Unsupported data type: ${p.dataType} in creating WebNN Constant from external data.`)}return LA("verbose",()=>`[WebNN] registerMLConstant {dataType: ${p.dataType}, shape: ${p.shape}}} ${h?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),d.constant(p,z)}registerGraphInput(i){this.temporaryGraphInputs.push(i)}registerGraphOutput(i){this.temporaryGraphOutputs.push(i)}isGraphInput(i,o){let u=this.sessionGraphInputs.get(i);return u?u.includes(o):!1}isGraphOutput(i,o){let u=this.sessionGraphOutputs.get(i);return u?u.includes(o):!1}isGraphInputOutputTypeSupported(i,o,u=!0){let d=this.mlContextBySessionId.get(i),p=ut.get(s2(o));return typeof p>"u"?!1:u?!!d?.opSupportLimits().input.dataTypes.includes(p):!!d?.opSupportLimits().output.dataTypes.includes(p)}flush(){}}}),Ga=uA(()=>{}),Qa,Ar,er,Hs,Ps,ya,Da,Ss,Fs,k6=uA(()=>{Oe(),Ga(),Qa=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Ar=[],er=i=>Math.ceil(Number(i)/16)*16,Hs=i=>{for(let o=0;o<Ar.length;o++){let u=Ar[o];if(i<=u)return u}return Math.ceil(i/16)*16},Ps=1,ya=()=>Ps++,Da=async(i,o,u,d)=>{let p=er(u),k=i.device.createBuffer({size:p,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let h=i.getCommandEncoder();i.endComputePass(),h.copyBufferToBuffer(o,0,k,0,p),i.flush(),await k.mapAsync(GPUMapMode.READ);let w=k.getMappedRange();if(d){let x=d();return x.set(new Uint8Array(w,0,u)),x}else return new Uint8Array(w.slice(0,u))}finally{k.destroy()}},Ss=class{constructor(i){this.backend=i,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[o]of Qa)Ar.push(o),this.freeBuffers.set(o,[]),this.freeUniformBuffers.set(o,[]);this.sessionCount=0}upload(i,o){let u=o.buffer,d=o.byteOffset,p=o.byteLength,k=er(p),h=this.storageCache.get(i);if(!h)throw new Error("gpu data for uploading does not exist");if(Number(h.originalSize)!==p)throw new Error(`inconsistent data size. gpu data size=${h.originalSize}, data size=${p}`);let w=this.backend.device.createBuffer({mappedAtCreation:!0,size:k,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),x=w.getMappedRange();new Uint8Array(x).set(new Uint8Array(u,d,p)),w.unmap();let G=this.backend.device.createCommandEncoder();G.copyBufferToBuffer(w,0,h.gpuData.buffer,0,k),this.backend.device.queue.submit([G.finish()]),w.destroy(),LA("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${i})`)}memcpy(i,o){let u=this.storageCache.get(i);if(!u)throw new Error("source gpu data for memcpy does not exist");let d=this.storageCache.get(o);if(!d)throw new Error("destination gpu data for memcpy does not exist");if(u.originalSize!==d.originalSize)throw new Error("inconsistent source and destination gpu data size");let p=er(u.originalSize),k=this.backend.getCommandEncoder();this.backend.endComputePass(),k.copyBufferToBuffer(u.gpuData.buffer,0,d.gpuData.buffer,0,p)}registerExternalBuffer(i,o,u){let d;if(u){if(d=u[0],i===u[1])return LA("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${o}) => id=${d}, buffer is the same, skip.`),d;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else d=ya();return this.storageCache.set(d,{gpuData:{id:d,type:0,buffer:i},originalSize:o}),LA("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${o}) => id=${d}, registered.`),d}unregisterExternalBuffer(i){i!==void 0&&(this.storageCache.delete(i),LA("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${i}`))}create(i,o=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let u=Hs(i),d,p=(o&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,k=(o&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(p||k){let w=(p?this.freeBuffers:this.freeUniformBuffers).get(u);w?w.length>0?d=w.pop():d=this.backend.device.createBuffer({size:u,usage:o}):d=this.backend.device.createBuffer({size:u,usage:o})}else d=this.backend.device.createBuffer({size:u,usage:o});let h={id:ya(),type:0,buffer:d};return this.storageCache.set(h.id,{gpuData:h,originalSize:Number(i)}),LA("verbose",()=>`[WebGPU] GpuDataManager.create(size=${i}) => id=${h.id}`),h}get(i){return this.storageCache.get(i)?.gpuData}release(i){let o=typeof i=="bigint"?Number(i):i,u=this.storageCache.get(o);if(!u){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return LA("verbose",()=>`[WebGPU] GpuDataManager.release(id=${o}), gpuDataId=${u.gpuData.id}`),this.storageCache.delete(o),this.buffersPending.push(u.gpuData.buffer),u.originalSize}async download(i,o){let u=this.storageCache.get(Number(i));if(!u)throw new Error("data does not exist");await Da(this.backend,u.gpuData.buffer,u.originalSize,o)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let i of this.buffersPending){let o=Qa.get(i.size);if((i.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let u=this.freeBuffers.get(i.size)||[];o===void 0||u.length>=o?i.destroy():u.push(i)}else if((i.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let u=this.freeUniformBuffers.get(i.size)||[];o===void 0||u.length>=o?i.destroy():u.push(i)}else i.destroy()}this.buffersPending=[]}else{let i=this.capturedPendingBuffers.get(this.backend.currentSessionId);i||(i=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,i));for(let o of this.buffersPending)i.push(o);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(i=>{i.forEach(o=>{o.destroy()})}),this.freeUniformBuffers.forEach(i=>{i.forEach(o=>{o.destroy()})}),this.storageCache.forEach(i=>{i.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(i=>{i.forEach(o=>{o.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(i){let o=this.capturedPendingBuffers.get(i);o&&(o.forEach(u=>{u.destroy()}),this.capturedPendingBuffers.delete(i)),this.sessionCount-=1,this.sessionCount===0&&(LA("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(u=>{u.gpuData.buffer.destroy()}),this.storageCache=new Map)}},Fs=(...i)=>new Ss(...i)}),Rs,JA,I0=uA(()=>{Rs=class{constructor(i){Object.assign(this,i)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(i=>`${this[i]}`).join(";")),this.key}},JA=i=>new Rs(i)}),N2,tr,y0,Z0,EA,l0,Ma,T2,Ue,kA,lt,rA,hA,Ws,za,Ks,Zs,OA=uA(()=>{yA(),TA(),N2=64,tr=(i,o)=>{if(o===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(i)){case 10:return o>1?`vec${o}<f16>`:"f16";case 1:return o>1?`vec${o}<f32>`:"f32";case 6:return o>1?`vec${o}<i32>`:"i32";case 12:return o>1?`vec${o}<u32>`:"u32";case 7:if(o>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(o>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(o!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${i}`)}},y0=(i,o=1)=>{let u=tr(i,o);return typeof u=="string"?u:u[0]},Z0=(i,o=1)=>{let u=tr(i,o);return typeof u=="string"?u:u[1]},EA=(...i)=>{let o=[];return i.forEach(u=>{u.length!==0&&o.push({type:12,data:u},{type:12,data:eA.computeStrides(u)})}),o},l0=i=>i%4===0?4:i%2===0?2:1,Ma=(i="f32",o,u="0")=>!o||o===1?`${i}(${u})`:`vec${o}<${i}>(${u})`,T2=(i,o,u)=>i==="f32"?u:o===1?`f32(${u})`:`vec${o}<f32>(${u})`,Ue=(i,o)=>o===4?`(${i}.x + ${i}.y + ${i}.z + ${i}.w)`:o===2?`(${i}.x + ${i}.y)`:o===3?`(${i}.x + ${i}.y + ${i}.z)`:i,kA=(i,o,u,d)=>i.startsWith("uniforms.")&&u>4?typeof o=="string"?d==="f16"?`${i}[(${o}) / 8][(${o}) % 8 / 4][(${o}) % 8 % 4]`:`${i}[(${o}) / 4][(${o}) % 4]`:d==="f16"?`${i}[${Math.floor(o/8)}][${Math.floor(o%8/4)}][${o%8%4}]`:`${i}[${Math.floor(o/4)}][${o%4}]`:u>1?`${i}[${o}]`:i,lt=(i,o,u,d,p)=>{let k=typeof u=="number",h=k?u:u.length,w=[...new Array(h).keys()],x=h<2?"u32":h<=4?`vec${h}<u32>`:`array<u32, ${h}>`,G=tr(o,p),z=typeof G=="string"?G:G[1],M=typeof G=="string"?G:G[0],N={indices:x,value:z,storage:M,tensor:o},H=gA=>typeof gA=="string"?gA:`${gA}u`,S={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},K=k?"uniforms.":"",X=`${K}${i}_shape`,V=`${K}${i}_strides`,W="";for(let gA=0;gA<h-1;gA++)W+=`
    let dim${gA} = current / ${kA(V,gA,h)};
    let rest${gA} = current % ${kA(V,gA,h)};
    indices[${gA}] = dim${gA};
    current = rest${gA};
    `;W+=`indices[${h-1}] = current;`;let j=h<2?"":`
  fn o2i_${i}(offset: u32) -> ${N.indices} {
    var indices: ${N.indices};
    var current = offset;
    ${W}
    return indices;
  }`,l=gA=>(S.offsetToIndices=!0,h<2?gA:`o2i_${i}(${gA})`),B=[];if(h>=2)for(let gA=h-1;gA>=0;gA--)B.push(`${kA(V,gA,h)} * (indices[${gA}])`);let A=h<2?"":`
  fn i2o_${i}(indices: ${N.indices}) -> u32 {
    return ${B.join("+")};
  }`,C=gA=>(S.indicesToOffset=!0,h<2?gA:`i2o_${i}(${gA})`),y=(...gA)=>h===0?"0u":`${N.indices}(${gA.map(H).join(",")})`,aA=(gA,CA)=>h<2?`${gA}`:`${kA(gA,CA,h)}`,Q=(gA,CA,zA)=>h<2?`${gA}=${zA};`:`${kA(gA,CA,h)}=${zA};`,T={},wA=(gA,CA)=>{S.broadcastedIndicesToOffset=!0;let zA=`${CA.name}broadcastedIndicesTo${i}Offset`;if(zA in T)return`${zA}(${gA})`;let jA=[];for(let E0=h-1;E0>=0;E0--){let ue=CA.indicesGet("outputIndices",E0+CA.rank-h);jA.push(`${aA(V,E0)} * (${ue} % ${aA(X,E0)})`)}return T[zA]=`fn ${zA}(outputIndices: ${CA.type.indices}) -> u32 {
             return ${jA.length>0?jA.join("+"):"0u"};
           }`,`${zA}(${gA})`},sA=(gA,CA)=>(()=>{if(N.storage===N.value)return`${i}[${gA}]=${CA};`;if(N.storage==="vec2<u32>"&&N.value==="i32")return`${i}[${gA}]=vec2<u32>(u32(${CA}), select(0u, 0xFFFFFFFFu, ${CA} < 0));`;if(N.storage==="vec2<u32>"&&N.value==="u32")return`${i}[${gA}]=vec2<u32>(u32(${CA}), 0u);`;if(N.storage==="u32"&&N.value==="vec4<bool>")return`${i}[${gA}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${CA}));`;throw new Error(`not supported combination of storage type ${N.storage} and value type ${N.value} yet`)})(),oA=gA=>(()=>{if(N.storage===N.value)return`${i}[${gA}]`;if(N.storage==="vec2<u32>"&&N.value==="i32")return`i32(${i}[${gA}].x)`;if(N.storage==="vec2<u32>"&&N.value==="u32")return`u32(${i}[${gA}].x)`;if(N.storage==="u32"&&N.value==="vec4<bool>")return`vec4<bool>(bool(${i}[${gA}] & 0xFFu), bool(${i}[${gA}] & 0xFF00u), bool(${i}[${gA}] & 0xFF0000u), bool(${i}[${gA}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${N.storage} and value type ${N.value} yet`)})(),PA=h<2?"":`
  fn get_${i}ByIndices(indices: ${N.indices}) -> ${z} {
    return ${oA(`i2o_${i}(indices)`)};
  }`,vA=h<2?"":(()=>{let gA=w.map(zA=>`d${zA}: u32`).join(", "),CA=w.map(zA=>`d${zA}`).join(", ");return`
  fn get_${i}(${gA}) -> ${z} {
    return get_${i}ByIndices(${y(CA)});
  }`})(),mA=(...gA)=>{if(gA.length!==h)throw new Error(`indices length must be ${h}`);let CA=gA.map(H).join(",");return h===0?oA("0u"):h===1?oA(CA[0]):(S.get=!0,S.getByIndices=!0,S.indicesToOffset=!0,`get_${i}(${CA})`)},ZA=gA=>h<2?oA(gA):(S.getByIndices=!0,S.indicesToOffset=!0,`get_${i}ByIndices(${gA})`),BA=h<2?"":`
  fn set_${i}ByIndices(indices: ${N.indices}, value: ${z}) {
    ${sA(`i2o_${i}(indices)`,"value")}
  }`,i0=h<2?"":(()=>{let gA=w.map(zA=>`d${zA}: u32`).join(", "),CA=w.map(zA=>`d${zA}`).join(", ");return`
  fn set_${i}(${gA}, value: ${z}) {
    set_${i}ByIndices(${y(CA)}, value);
  }`})();return{impl:()=>{let gA=[],CA=!1;return S.offsetToIndices&&(gA.push(j),CA=!0),S.indicesToOffset&&(gA.push(A),CA=!0),S.broadcastedIndicesToOffset&&(Object.values(T).forEach(zA=>gA.push(zA)),CA=!0),S.set&&(gA.push(i0),CA=!0),S.setByIndices&&(gA.push(BA),CA=!0),S.get&&(gA.push(vA),CA=!0),S.getByIndices&&(gA.push(PA),CA=!0),!k&&CA&&gA.unshift(`const ${X} = ${N.indices}(${u.join(",")});`,`const ${V} = ${N.indices}(${eA.computeStrides(u).join(",")});`),gA.join(`
`)},type:N,offsetToIndices:l,indicesToOffset:C,broadcastedIndicesToOffset:wA,indices:y,indicesGet:aA,indicesSet:Q,set:(...gA)=>{if(gA.length!==h+1)throw new Error(`indices length must be ${h}`);let CA=gA[h];if(typeof CA!="string")throw new Error("value must be string");let zA=gA.slice(0,h).map(H).join(",");return h===0?sA("0u",CA):h===1?sA(zA[0],CA):(S.set=!0,S.setByIndices=!0,S.indicesToOffset=!0,`set_${i}(${zA}, ${CA})`)},setByOffset:sA,setByIndices:(gA,CA)=>h<2?sA(gA,CA):(S.setByIndices=!0,S.indicesToOffset=!0,`set_${i}ByIndices(${gA}, ${CA});`),get:mA,getByOffset:oA,getByIndices:ZA,usage:d,name:i,strides:V,shape:X,rank:h}},rA=(i,o,u,d=1)=>lt(i,o,u,"input",d),hA=(i,o,u,d=1)=>lt(i,o,u,"output",d),Ws=(i,o,u)=>lt(i,o,u,"atomicOutput",1),za=(i,o,u,d=1)=>lt(i,o,u,"internal",d),Ks=class{constructor(i,o){this.normalizedDispatchGroup=i,this.limits=o,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(i){return`if (global_idx >= ${typeof i=="number"?`${i}u`:i}) { return; }`}mainStart(i=N2){let o=typeof i=="number"?i:i[0],u=typeof i=="number"?1:i[1],d=typeof i=="number"?1:i[2];if(o>this.limits.maxComputeWorkgroupSizeX||u>this.limits.maxComputeWorkgroupSizeY||d>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${o}, ${u}, ${d}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(o*u*d>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${o}, ${u}, ${d}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let p=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,k=p?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,h=p?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${o*u*d}u + local_idx;`;return`@compute @workgroup_size(${o}, ${u}, ${d})
  fn main(${k}) {
    ${h}
  `}appendVariableUniforms(i){i.rank!==0&&(i.shape.startsWith("uniforms.")&&this.uniforms.push({name:i.shape.replace("uniforms.",""),type:"u32",length:i.rank}),i.strides.startsWith("uniforms.")&&this.uniforms.push({name:i.strides.replace("uniforms.",""),type:"u32",length:i.rank}))}declareVariable(i,o){if(i.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(i),this.appendVariableUniforms(i);let u=i.usage==="input"?"read":"read_write",d=i.usage==="atomicOutput"?"atomic<i32>":i.type.storage;return`@group(0) @binding(${o}) var<storage, ${u}> ${i.name}: array<${d}>;`}declareVariables(...i){return i.map(o=>this.declareVariable(o,this.variableIndex++)).join(`
`)}registerInternalVariable(i){if(i.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(i),this.appendVariableUniforms(i)}registerInternalVariables(...i){return i.forEach(o=>this.registerInternalVariable(o)),this}registerUniform(i,o,u=1){return this.uniforms.push({name:i,type:o,length:u}),this}registerUniforms(i){return this.uniforms=this.uniforms.concat(i),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let i=[];for(let{name:o,type:u,length:d}of this.uniforms)if(d&&d>4)u==="f16"?i.push(`@align(16) ${o}:array<mat2x4<${u}>, ${Math.ceil(d/8)}>`):i.push(`${o}:array<vec4<${u}>, ${Math.ceil(d/4)}>`);else{let p=d==null||d===1?u:`vec${d}<${u}>`;i.push(`${o}:${p}`)}return`
      struct Uniforms { ${i.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(i=>i.impl()).join(`
`)+this.internalVariables.map(i=>i.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let i=o=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(o)];return this.uniforms.map(o=>[i(o.type),o.length??1])}},Zs=(i,o)=>new Ks(i,o)}),Ls,Ya,Vs,Us,Xs,Js,ne,js,qs,Xe=uA(()=>{yA(),TA(),I0(),OA(),Ls=(i,o)=>{if(!i||i.length!==1)throw new Error("Transpose requires 1 input.");if(o.length!==0&&o.length!==i[0].dims.length)throw new Error(`perm size ${o.length} does not match input rank ${i[0].dims.length}`)},Ya=(i,o)=>o.length!==0?o:[...new Array(i).keys()].reverse(),Vs=(i,o)=>eA.sortBasedOnPerm(i,Ya(i.length,o)),Us=(i,o,u,d)=>{let p=`fn perm(i: ${d.type.indices}) -> ${u.type.indices} {
    var a: ${u.type.indices};`;for(let k=0;k<o;++k)p+=`a[${i[k]}]=i[${k}];`;return p+="return a;}"},Xs=(i,o)=>{let u=[],d=[];for(let p=0;p<i.length;++p)i[p]!==1&&u.push(i[p]),i[o[p]]!==1&&d.push(o[p]);return{newShape:u,newPerm:d}},Js=(i,o)=>{let u=0;for(let d=0;d<i.length;++d)if(o[i[d]]!==1){if(i[d]<u)return!1;u=i[d]}return!0},ne=(i,o)=>{let u=i.dataType,d=i.dims.length,p=Ya(d,o),k=Vs(i.dims,p),h=i.dims,w=k,x=d<2||Js(p,i.dims),G;if(x)return G=S=>{let K=rA("input",u,h,4),X=hA("output",u,w,4);return`
  ${S.registerUniform("output_size","u32").declareVariables(K,X)}
  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let S=eA.size(k);return{outputs:[{dims:k,dataType:i.dataType}],dispatchGroup:{x:Math.ceil(S/64/4)},programUniforms:[{type:12,data:Math.ceil(S/4)}]}},getShaderSource:G};let{newShape:z,newPerm:M}=Xs(i.dims,p),N=eA.areEqual(M,[2,3,1]),H=eA.areEqual(M,[3,1,2]);if(z.length===2||N||H){h=N?[z[0],z[1]*z[2]]:H?[z[0]*z[1],z[2]]:z,w=[h[1],h[0]];let S=16;return G=K=>{let X=rA("a",u,h.length),V=hA("output",u,w.length);return`
  ${K.registerUniform("output_size","u32").declareVariables(X,V)}
  var<workgroup> tile : array<array<${V.type.value}, ${S+1}>, ${S}>;
  ${K.mainStart([S,S,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${S} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${S}u + local_id.x;
    let input_row = workgroup_id_x * ${S}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${X.getByIndices(`${X.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${S}u + local_id.x;
    let output_row = workgroup_id_y * ${S}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${V.setByIndices(`${V.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let K=eA.size(k);return{outputs:[{dims:k,dataType:i.dataType}],dispatchGroup:{x:Math.ceil(w[1]/S),y:Math.ceil(w[0]/S)},programUniforms:[{type:12,data:K},...EA(h,w)]}},getShaderSource:G}}return G=S=>{let K=rA("a",u,h.length),X=hA("output",u,w.length);return`
  ${S.registerUniform("output_size","u32").declareVariables(K,X)}

  ${Us(p,d,K,X)}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${X.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${X.setByOffset("global_idx",K.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${o}`,inputDependencies:["rank"]},getRunData:()=>{let S=eA.size(k);return{outputs:[{dims:k,dataType:i.dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},...EA(h,w)]}},getShaderSource:G}},js=(i,o)=>{Ls(i.inputs,o.perm),i.compute(ne(i.inputs[0],o.perm))},qs=i=>JA({perm:i.perm})}),_s,$s,An,en,tn,rn,an,sn,nn,on,ce,gn,fn,un,ln,Cn,cn,dn,bn,In,pn,w6=uA(()=>{yA(),TA(),OA(),Ta(),Xe(),_s={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},$s={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},An={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},en={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},tn=(i,o)=>{let u=[];for(let d=o-i;d<o;++d)u.push(d);return u},rn=(i,o)=>{let u=[],d=i.length;for(let k=0;k<d;k++)o.indexOf(k)===-1&&u.push(i[k]);let p=o.map(k=>i[k]);return[u,p]},an=(i,o)=>{let u=i.length+o.length,d=[],p=0;for(let k=0;k<u;k++)o.indexOf(k)===-1?d.push(i[p++]):d.push(1);return d},sn=(i,o)=>{for(let u=0;u<i.length;++u)if(i[i.length-u-1]!==o-1-u)return!1;return!0},nn=(i,o)=>{let u=[];if(!sn(i,o)){for(let d=0;d<o;++d)i.indexOf(d)===-1&&u.push(d);i.forEach(d=>u.push(d))}return u},on=(i,o,u,d,p,k,h)=>{let w=u[0].dims,x=eA.size(k),G=eA.size(h),z=rA("_A",u[0].dataType,w),M=hA("output",p,k),N=64;x===1&&(N=256);let H=`
          var<workgroup> aBestValues : array<f32, ${N}>;
       `,S=K=>`
        ${K.registerUniform("reduceSize","u32").declareVariables(z,M)}
        ${H}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${K.mainStart(N)}

          let outputIndex = global_idx / ${N};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${An[d]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${N}) {
           let candidate = f32(${z.getByOffset("offset + k")});
           bestValue = ${_s[d]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${N}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${$s[d]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${M.setByOffset("outputIndex",`${d==="mean"?`${M.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${M.type.storage}(${en[d]})`}`)};
         }
        }`;return{name:i,shaderCache:{hint:`${o};${N}`,inputDependencies:["type"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:k,dataType:p}],dispatchGroup:{x},programUniforms:[{type:12,data:G}]})}},ce=(i,o,u,d)=>{let p=i.inputs.length===1?u:Na(i.inputs,u),k=p.axes;k.length===0&&!p.noopWithEmptyAxes&&(k=i.inputs[0].dims.map((H,S)=>S));let h=eA.normalizeAxes(k,i.inputs[0].dims.length),w=h,x=i.inputs[0],G=nn(w,i.inputs[0].dims.length);G.length>0&&(x=i.compute(ne(i.inputs[0],G),{inputs:[0],outputs:[-1]})[0],w=tn(w.length,x.dims.length));let[z,M]=rn(x.dims,w),N=z;p.keepDims&&(N=an(z,h)),i.compute(on(o,p.cacheKey,[x],d,i.inputs[0].dataType,N,M),{inputs:[x]})},gn=(i,o)=>{ce(i,"ReduceMeanShared",o,"mean")},fn=(i,o)=>{ce(i,"ReduceL1Shared",o,"l1")},un=(i,o)=>{ce(i,"ReduceL2Shared",o,"l2")},ln=(i,o)=>{ce(i,"ReduceLogSumExpShared",o,"logSumExp")},Cn=(i,o)=>{ce(i,"ReduceMaxShared",o,"max")},cn=(i,o)=>{ce(i,"ReduceMinShared",o,"min")},dn=(i,o)=>{ce(i,"ReduceProdShared",o,"prod")},bn=(i,o)=>{ce(i,"ReduceSumShared",o,"sum")},In=(i,o)=>{ce(i,"ReduceSumSquareShared",o,"sumSquare")},pn=(i,o)=>{ce(i,"ReduceLogSumShared",o,"logSum")}}),de,hn,rr,Na,be,mn,kn,wn,Bn,En,xn,vn,Gn,Qn,yn,Ie,Dn,Mn,zn,Yn,Nn,Tn,On,Hn,Pn,Sn,Ta=uA(()=>{yA(),TA(),I0(),OA(),w6(),de=i=>{if(!i||i.length===0||i.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(i.length===2&&i[1].dims.length!==1)throw new Error("Invalid axes input dims.")},hn=i=>["","",`var value = ${i.getByIndices("input_indices")};`,""],rr=(i,o,u,d,p,k,h=!1,w=!1)=>{let x=[],G=u[0].dims,z=G.length,M=eA.normalizeAxes(p,z),N=!w&&M.length===0;G.forEach((K,X)=>{N||M.indexOf(X)>=0?h&&x.push(1):x.push(K)});let H=x.length,S=eA.size(x);return{name:i,shaderCache:o,getShaderSource:K=>{let X=[],V=rA("_A",u[0].dataType,z),W=hA("output",k,H),j=d(V,W,M),l=j[2];for(let B=0,A=0;B<z;B++)N||M.indexOf(B)>=0?(h&&A++,l=`for(var j${B}: u32 = 0; j${B} < ${G[B]}; j${B}++) {
                  ${j[2].includes("last_index")?`let last_index = j${B};`:""}
                  ${V.indicesSet("input_indices",B,`j${B}`)}
                  ${l}
                }`):(X.push(`${V.indicesSet("input_indices",B,W.indicesGet("output_indices",A))};`),A++);return`

        ${K.registerUniform("output_size","u32").declareVariables(V,W)}

        ${K.mainStart()}
          ${K.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${V.type.indices};
          let output_indices = ${W.offsetToIndices("global_idx")};

          ${X.join(`
`)}
          ${j[0]}       // init ops for reduce max/min
          ${j[1]}
          ${l}
          ${j[3]}
          ${j.length===4?W.setByOffset("global_idx","value"):j.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:x,dataType:k}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},...EA(G,x)]})}},Na=(i,o)=>{let u=[];return i[1].dims[0]>0&&i[1].getBigInt64Array().forEach(d=>u.push(Number(d))),JA({axes:u,keepDims:o.keepDims,noopWithEmptyAxes:o.noopWithEmptyAxes})},be=(i,o,u,d)=>{let p=i.inputs,k=p.length===1?u:Na(p,u);i.compute(rr(o,{hint:k.cacheKey,inputDependencies:["rank"]},[p[0]],k.noopWithEmptyAxes&&k.axes.length===0?hn:d,k.axes,p[0].dataType,k.keepDims,k.noopWithEmptyAxes),{inputs:[0]})},mn=(i,o)=>{de(i.inputs),be(i,"ReduceLogSum",o,(u,d)=>[`var value = ${d.type.storage}(0);`,"",`value += ${u.getByIndices("input_indices")};`,"value = log(value);"])},kn=(i,o)=>{de(i.inputs),be(i,"ReduceL1",o,(u,d)=>[`var value = ${d.type.storage}(0);`,"",`value += abs(${u.getByIndices("input_indices")});`,""])},wn=(i,o)=>{de(i.inputs),be(i,"ReduceL2",o,(u,d)=>[`var t = ${d.type.value}(0); var value = ${d.type.value}(0);`,"",`t = ${u.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Bn=(i,o)=>{de(i.inputs),be(i,"ReduceLogSumExp",o,(u,d)=>[`var value = ${d.type.storage}(0);`,"",`value += exp(${u.getByIndices("input_indices")});`,"value = log(value);"])},En=(i,o)=>{de(i.inputs),be(i,"ReduceMax",o,(u,d,p)=>{let k=[];for(let h=0;h<u.rank;h++)(p.indexOf(h)>=0||p.length===0)&&k.push(u.indicesSet("input_indices",h,0));return[`${k.join(`
`)}`,`var value = ${u.getByIndices("input_indices")};`,`value = max(value, ${u.getByIndices("input_indices")});`,""]})},xn=(i,o)=>{de(i.inputs),be(i,"ReduceMean",o,(u,d,p)=>{let k=1;for(let h=0;h<u.rank;h++)(p.indexOf(h)>=0||p.length===0)&&(k*=i.inputs[0].dims[h]);return["var sum = f32(0);","",`sum += f32(${u.getByIndices("input_indices")});`,`let value = ${d.type.value}(sum / ${k});`]})},vn=(i,o)=>{de(i.inputs),be(i,"ReduceMin",o,(u,d,p)=>{let k=[];for(let h=0;h<u.rank;h++)(p.indexOf(h)>=0||p.length===0)&&k.push(`input_indices[${h}] = 0;`);return[`${k.join(`
`)}`,`var value = ${u.getByIndices("input_indices")};`,`value = min(value, ${u.getByIndices("input_indices")});`,""]})},Gn=(i,o)=>{de(i.inputs),be(i,"ReduceProd",o,(u,d)=>[`var value = ${d.type.storage}(1);`,"",`value *= ${u.getByIndices("input_indices")};`,""])},Qn=(i,o)=>{de(i.inputs),be(i,"ReduceSum",o,(u,d)=>[`var value = ${d.type.storage}(0);`,"",`value += ${u.getByIndices("input_indices")};`,""])},yn=(i,o)=>{de(i.inputs),be(i,"ReduceSumSquare",o,(u,d)=>[`var t = ${d.type.value}(0); var value = ${d.type.value}(0);`,"",`t = ${u.getByIndices("input_indices")}; value += t * t;`,""])},Ie=(i,o,u)=>{if(o.length===0)return u;let d=1,p=1;for(let k=0;k<o.length;k++)o.indexOf(k)===-1?d*=i[k]:p*=i[k];return p<32&&d>1024},Dn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?xn(i,o):gn(i,o)},Mn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?kn(i,o):fn(i,o)},zn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?wn(i,o):un(i,o)},Yn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Bn(i,o):ln(i,o)},Nn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?En(i,o):Cn(i,o)},Tn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?vn(i,o):cn(i,o)},On=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Gn(i,o):dn(i,o)},Hn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Qn(i,o):bn(i,o)},Pn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?yn(i,o):In(i,o)},Sn=(i,o)=>{Ie(i.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?mn(i,o):pn(i,o)}}),Oa,Fn,Rn,Ha,B6=uA(()=>{yA(),I0(),Ta(),Oa=i=>{if(!i||i.length===0||i.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(i[0].dataType!==1)throw new Error("Invalid input type.")},Fn=(i,o)=>{Oa(i.inputs);let u=(d,p,k)=>{let h=[];for(let w=0;w<d.rank;w++)(k.indexOf(w)>=0||k.length===0)&&h.push(`input_indices[${w}] = 0;`);return[`${h.join(`
`)}`,`var value = ${d.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${d.getByIndices("input_indices")} ${o.selectLastIndex>0?"<=":"<"} value) {
         value = ${d.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",p.setByOffset("global_idx","best_index")]};i.compute(rr("ArgMin",{hint:o.cacheKey,inputDependencies:["rank"]},[i.inputs[0]],u,[o.axis],7,o.keepDims),{inputs:[0]})},Rn=(i,o)=>{Oa(i.inputs);let u=(d,p,k)=>{let h=[];for(let w=0;w<d.rank;w++)(k.indexOf(w)>=0||k.length===0)&&h.push(`input_indices[${w}] = 0;`);return[`${h.join(`
`)}`,`var value = ${d.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${d.getByIndices("input_indices")} ${o.selectLastIndex>0?">=":">"} value) {
         value = ${d.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",p.setByOffset("global_idx","best_index")]};i.compute(rr("argMax",{hint:o.cacheKey,inputDependencies:["rank"]},[i.inputs[0]],u,[o.axis],7,o.keepDims),{inputs:[0]})},Ha=i=>JA(i)}),Wn,ar,Kn,Zn,Ln,Ct,Vn,Un,Pa=uA(()=>{yA(),TA(),Ga(),OA(),Wn=(i,o)=>{let u=i[0],d=i[1],p=i[2],k=i[3],h=i[4],w=i[5];if(h&&w)throw new Error("Attention cannot have both past and attention_bias");if(u.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let x=u.dims[0],G=u.dims[1],z=u.dims[2];if(p.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(d.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(d.dims[0]!==z)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(p.dims[0]!==d.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let M=p.dims[0]/3,N=M,H=N;if(o.qkvHiddenSizes.length>0){if(o.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let j of o.qkvHiddenSizes)if(j%o.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");M=o.qkvHiddenSizes[0],N=o.qkvHiddenSizes[1],H=o.qkvHiddenSizes[2]}let S=G;if(M!==N)throw new Error("qkv_hidden_sizes first element should be same as the second");if(p.dims[0]!==M+N+H)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let K=0;if(h){if(N!==H)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(h.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(h.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(h.dims[1]!==x)throw new Error('Input "past" second dimension must be batch_size');if(h.dims[2]!==o.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(h.dims[4]!==N/o.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');o.pastPresentShareBuffer||(K=h.dims[3])}let X=S+K,V=-1,W=0;if(k)throw new Error("Mask not supported");if(h)throw new Error("past is not supported");if(w){if(w.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(w.dims[0]!==x||w.dims[1]!==o.numHeads||w.dims[2]!==G||w.dims[3]!==X)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:x,sequenceLength:G,pastSequenceLength:K,kvSequenceLength:S,totalSequenceLength:X,maxSequenceLength:V,inputHiddenSize:z,hiddenSize:M,vHiddenSize:H,headSize:Math.floor(M/o.numHeads),vHeadSize:Math.floor(H/o.numHeads),numHeads:o.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:o.maskFilterValue,maskType:W,scale:o.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ar=(i,o,u)=>o&&i?`
      let total_sequence_length_input = u32(${o.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${i?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${u?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Kn=(i,o,u,d,p,k,h,w)=>{let x=l0(h?1:k),G=64,z=k/x;z<G&&(G=32);let M=Math.ceil(k/x/G),N=[{type:12,data:o},{type:12,data:u},{type:12,data:d},{type:12,data:p},{type:12,data:z},{type:12,data:M}],H=y0(i.dataType,x),S=Z0(1,x),K=["type"];h&&K.push("type"),w&&K.push("type");let X=V=>{let W=hA("x",i.dataType,i.dims,x),j=[W],l=h?rA("seq_lens",h.dataType,h.dims):void 0;l&&j.push(l);let B=w?rA("total_sequence_length_input",w.dataType,w.dims):void 0;B&&j.push(B);let A=Z0(i.dataType),C=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${G}>;
  var<workgroup> thread_sum: array<f32, ${G}>;
  ${V.registerUniforms(C).declareVariables(...j)}
  ${V.mainStart([G,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${ar(l,B,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${G}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${h?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${S}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${S}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(x){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${x}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${G}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${S}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${S}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(x){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${x}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${G}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${W.type.value}(${A}(1.0) / ${A}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${S}(x[offset + i]);
        x[offset + i] = ${W.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${h?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${W.type.value}(${A}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${G};${H};${x}`,inputDependencies:K},getShaderSource:X,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:p,z:o*u},programUniforms:N})}},Zn=(i,o,u,d,p,k,h,w,x)=>{let G=h+k.kvSequenceLength,z=[k.batchSize,k.numHeads,k.sequenceLength,G],M=i>1&&d,N=k.kvNumHeads?k.kvNumHeads:k.numHeads,H=M?[k.batchSize,N,G,k.headSize]:void 0,S=k.nReps?k.nReps:1,K=k.scale===0?1/Math.sqrt(k.headSize):k.scale,X=l0(k.headSize),V=k.headSize/X,W=12,j={x:Math.ceil(G/W),y:Math.ceil(k.sequenceLength/W),z:k.batchSize*k.numHeads},l=[{type:12,data:k.sequenceLength},{type:12,data:V},{type:12,data:G},{type:12,data:k.numHeads},{type:12,data:k.headSize},{type:1,data:K},{type:12,data:h},{type:12,data:k.kvSequenceLength},{type:12,data:S}],B=M&&d&&eA.size(d.dims)>0,A=["type","type"];B&&A.push("type"),p&&A.push("type"),w&&A.push("type"),x&&A.push("type");let C=[{dims:z,dataType:o.dataType,gpuDataType:0}];M&&C.push({dims:H,dataType:o.dataType,gpuDataType:0});let y=aA=>{let Q=rA("q",o.dataType,o.dims,X),T=rA("key",u.dataType,u.dims,X),wA=[Q,T];if(B){let BA=rA("past_key",d.dataType,d.dims,X);wA.push(BA)}p&&wA.push(rA("attention_bias",p.dataType,p.dims));let sA=w?rA("seq_lens",w.dataType,w.dims):void 0;sA&&wA.push(sA);let oA=x?rA("total_sequence_length_input",x.dataType,x.dims):void 0;oA&&wA.push(oA);let PA=hA("output",o.dataType,z),vA=[PA];M&&vA.push(hA("present_key",o.dataType,H,X));let mA=Z0(1,X),ZA=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${W}u;

  var<workgroup> tileQ: array<${Q.type.storage}, ${W*W}>;
  var<workgroup> tileK: array<${Q.type.storage}, ${W*W}>;
  ${aA.registerUniforms(ZA).declareVariables(...wA,...vA)}
  ${aA.mainStart([W,W,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${S===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${S===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${ar(sA,oA,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${B&&M?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${M?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${mA}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${B&&M?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${M?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${mA}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(X){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${X}`)}})()};
        output[outputIdx] = ${PA.type.value} (sum * uniforms.alpha) + ${p?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${X};${p!==void 0};${d!==void 0};${i}`,inputDependencies:A},getRunData:()=>({outputs:C,dispatchGroup:j,programUniforms:l}),getShaderSource:y}},Ln=(i,o,u,d,p,k,h=void 0,w=void 0)=>{let x=k+p.kvSequenceLength,G=p.nReps?p.nReps:1,z=p.vHiddenSize*G,M=i>1&&d,N=p.kvNumHeads?p.kvNumHeads:p.numHeads,H=M?[p.batchSize,N,x,p.headSize]:void 0,S=[p.batchSize,p.sequenceLength,z],K=12,X={x:Math.ceil(p.vHeadSize/K),y:Math.ceil(p.sequenceLength/K),z:p.batchSize*p.numHeads},V=[{type:12,data:p.sequenceLength},{type:12,data:x},{type:12,data:p.vHeadSize},{type:12,data:p.numHeads},{type:12,data:p.headSize},{type:12,data:z},{type:12,data:k},{type:12,data:p.kvSequenceLength},{type:12,data:G}],W=M&&d&&eA.size(d.dims)>0,j=["type","type"];W&&j.push("type"),h&&j.push("type"),w&&j.push("type");let l=[{dims:S,dataType:o.dataType,gpuDataType:0}];M&&l.push({dims:H,dataType:o.dataType,gpuDataType:0});let B=A=>{let C=rA("probs",o.dataType,o.dims),y=rA("v",u.dataType,u.dims),aA=[C,y];W&&aA.push(rA("past_value",d.dataType,d.dims));let Q=h?rA("seq_lens",h.dataType,h.dims):void 0;h&&aA.push(Q);let T=w?rA("total_sequence_length_input",w.dataType,w.dims):void 0;w&&aA.push(T);let wA=[hA("output",o.dataType,S)];M&&wA.push(hA("present_value",o.dataType,H));let sA=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${K}u;
  var<workgroup> tileQ: array<${C.type.value}, ${K*K}>;
  var<workgroup> tileV: array<${C.type.value}, ${K*K}>;
  ${A.registerUniforms(sA).declareVariables(...aA,...wA)}
  ${A.mainStart([K,K,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${G===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${G===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${ar(Q,T,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${W&&M?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${M?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${C.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${W&&M?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${M?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${d!==void 0};${i}`,inputDependencies:j},getRunData:()=>({outputs:l,dispatchGroup:X,programUniforms:V}),getShaderSource:B}},Ct=(i,o,u,d,p,k,h,w,x,G,z=void 0,M=void 0)=>{let N=Math.min(i.outputCount,1+(h?1:0)+(w?1:0)),H=N>1?G.pastSequenceLength:0,S=H+G.kvSequenceLength,K=x&&eA.size(x.dims)>0?x:void 0,X=[o,u];N>1&&h&&eA.size(h.dims)>0&&X.push(h),K&&X.push(K),z&&X.push(z),M&&X.push(M);let V=i.compute(Zn(N,o,u,h,K,G,H,z,M),{inputs:X,outputs:N>1?[-1,1]:[-1]})[0];i.compute(Kn(V,G.batchSize,G.numHeads,H,G.sequenceLength,S,z,M),{inputs:z&&M?[V,z,M]:[V],outputs:[]});let W=[V,d];N>1&&w&&eA.size(w.dims)>0&&W.push(w),z&&W.push(z),M&&W.push(M),i.compute(Ln(N,V,d,w,G,H,z,M),{inputs:W,outputs:N>1?[0,2]:[0]})},Vn=(i,o)=>{let u=[o.batchSize,o.numHeads,o.sequenceLength,o.headSize],d=o.sequenceLength,p=o.inputHiddenSize,k=o.headSize,h=12,w={x:Math.ceil(o.headSize/h),y:Math.ceil(o.sequenceLength/h),z:o.batchSize*o.numHeads},x=[i.inputs[0],i.inputs[1],i.inputs[2]],G=[{type:12,data:d},{type:12,data:p},{type:12,data:k},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:12,data:o.hiddenSize},{type:12,data:o.hiddenSize+o.hiddenSize+o.vHiddenSize}],z=M=>{let N=hA("output_q",x[0].dataType,u),H=hA("output_k",x[0].dataType,u),S=hA("output_v",x[0].dataType,u),K=rA("input",x[0].dataType,x[0].dims),X=rA("weight",x[1].dataType,x[1].dims),V=rA("bias",x[2].dataType,x[2].dims),W=K.type.storage,j=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${h}u;
  var<workgroup> tileInput: array<${W}, ${h*h}>;
  var<workgroup> tileWeightQ: array<${W}, ${h*h}>;
  var<workgroup> tileWeightK: array<${W}, ${h*h}>;
  var<workgroup> tileWeightV: array<${W}, ${h*h}>;
  ${M.registerUniforms(j).declareVariables(K,X,V,N,H,S)}
  ${M.mainStart([h,h,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${W}(0);
    var valueK = ${W}(0);
    var valueV = ${W}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return i.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:i.inputs[0].dataType,gpuDataType:0},{dims:u,dataType:i.inputs[0].dataType,gpuDataType:0},{dims:u,dataType:i.inputs[0].dataType,gpuDataType:0}],dispatchGroup:w,programUniforms:G}),getShaderSource:z},{inputs:x,outputs:[-1,-1,-1]})},Un=(i,o)=>{let u=Wn(i.inputs,o),[d,p,k]=Vn(i,u);return Ct(i,d,p,k,i.inputs[4],void 0,void 0,void 0,i.inputs[5],u)}}),Xn,Jn,jn,qn,E6=uA(()=>{ge(),yA(),TA(),I0(),OA(),Xn=(i,o)=>{if(!i||i.length!==5)throw new Error("BatchNormalization requires 5 inputs");let u=(d,p,k)=>{let h=p.length;if(h!==d.length)throw new Error(`${k}: num dimensions != ${h}`);p.forEach((w,x)=>{if(w!==d[x])throw new Error(`${k}: dim[${x}] do not match`)})};if(i[0].dims.length>1){let d=o.format==="NHWC"?o.spatial?i[0].dims.slice(-1):i[0].dims.slice(-1).concat(i[0].dims.slice(1,i[0].dims.length-1)):i[0].dims.slice(1,o.spatial?2:void 0);u(i[1].dims,d,"Invalid input scale"),u(i[2].dims,d,"Invalid input B"),u(i[3].dims,d,"Invalid input mean"),u(i[4].dims,d,"Invalid input var")}else u(i[1].dims,[1],"Invalid input scale"),u(i[2].dims,[1],"Invalid input B"),u(i[3].dims,[1],"Invalid input mean"),u(i[4].dims,[1],"Invalid input var")},Jn=(i,o)=>{let{epsilon:u,spatial:d,format:p}=o,k=i[0].dims,h=d?l0(k[k.length-1]):1,w=p==="NHWC"&&k.length>1?h:1,x=eA.size(k)/h,G=d,z=G?k.length:k,M=rA("x",i[0].dataType,i[0].dims,h),N=rA("scale",i[1].dataType,i[1].dims,w),H=rA("bias",i[2].dataType,i[2].dims,w),S=rA("inputMean",i[3].dataType,i[3].dims,w),K=rA("inputVar",i[4].dataType,i[4].dims,w),X=hA("y",i[0].dataType,z,h),V=()=>{let j="";if(d)j=`let cOffset = ${k.length===1?"0u":p==="NHWC"?`outputIndices[${k.length-1}] / ${h}`:"outputIndices[1]"};`;else if(p==="NCHW")j=`
            ${X.indicesSet("outputIndices","0","0")}
            let cOffset = ${X.indicesToOffset("outputIndices")};`;else{j=`var cIndices = ${N.type.indices}(0);
                       cIndices[0] = outputIndices[${k.length-1}];`;for(let l=1;l<N.rank;l++)j+=`cIndices[${l}] = outputIndices[${l}];`;j+=`let cOffset = ${N.indicesToOffset("cIndices")};`}return j},W=j=>`
  const epsilon = ${u};
  ${j.registerUniform("outputSize","u32").declareVariables(M,N,H,S,K,X)}
  ${j.mainStart()}
  ${j.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${X.offsetToIndices(`global_idx * ${h}`)};
    ${V()}
    let scale = ${N.getByOffset("cOffset")};
    let bias = ${H.getByOffset("cOffset")};
    let inputMean = ${S.getByOffset("cOffset")};
    let inputVar = ${K.getByOffset("cOffset")};
    let x = ${M.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${X.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${o.epsilon}_${o.format}_${d}_${h}`,inputDependencies:G?["rank","type","type","type","type"]:void 0},getShaderSource:W,getRunData:()=>({outputs:[{dims:i[0].dims,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:G?[{type:12,data:x},...EA(k)]:[{type:12,data:x}]})}},jn=i=>JA(i),qn=(i,o)=>{let{inputs:u,outputCount:d}=i,p=jn({...o,outputCount:d});if(f0.webgpu.validateInputContent&&Xn(u,p),o.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");i.compute(Jn(u,p))}}),_n,$n,Ao,x6=uA(()=>{TA(),OA(),_n=i=>{if(i[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(i[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(i[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(i[0].dims[2]!==i[1].dims[0])throw new Error("last dimension of input and bias are not the same")},$n=i=>{let o=i[0].dims,u=i[0].dims[2],d=eA.size(o)/4,p=i[0].dataType,k=rA("input",p,o,4),h=rA("bias",p,[u],4),w=rA("residual",p,o,4),x=hA("output",p,o,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:o,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)}}),getShaderSource:G=>`
  const channels = ${u}u / 4;
  ${G.declareVariables(k,h,w,x)}

  ${G.mainStart()}
    ${G.guardAgainstOutOfBoundsWorkgroupSizes(d)}
    let value = ${k.getByOffset("global_idx")}
      + ${h.getByOffset("global_idx % channels")} + ${w.getByOffset("global_idx")};
    ${x.setByOffset("global_idx","value")}
  }`}},Ao=i=>{_n(i.inputs),i.compute($n(i.inputs))}}),eo,UA,to,ro,ao,io,so,no,oo,go,fo,uo,lo,Co,co,bo,ct,Io,ir,po,ho,mo,ko,wo,Bo,Eo,xo,vo,Go,Qo,yo,Do,Mo,zo,Yo,Sa,No,Fa,Ra,To,Oo,Ho,Po,So,Fo,Wa=uA(()=>{yA(),TA(),I0(),OA(),eo=(i,o,u,d,p,k,h)=>{let w=Math.ceil(o/4),x="";typeof p=="string"?x=`${p}(a)`:x=p("a");let G=rA("inputData",u,[w],4),z=hA("outputData",d,[w],4),M=[{name:"vec_size",type:"u32"}];return h&&M.push(...h),`
      ${i.registerUniforms(M).declareVariables(G,z)}

  ${k??""}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${G.getByOffset("global_idx")};
    ${z.setByOffset("global_idx",x)}
  }`},UA=(i,o,u,d,p,k=i.dataType,h,w)=>{let x=[{type:12,data:Math.ceil(eA.size(i.dims)/4)}];return h&&x.push(...h),{name:o,shaderCache:{hint:p,inputDependencies:["type"]},getShaderSource:G=>eo(G,eA.size(i.dims),i.dataType,k,u,d,w),getRunData:G=>({outputs:[{dims:i.dims,dataType:k}],dispatchGroup:{x:Math.ceil(eA.size(G[0].dims)/64/4)},programUniforms:x})}},to=i=>{i.compute(UA(i.inputs[0],"Abs","abs"))},ro=i=>{i.compute(UA(i.inputs[0],"Acos","acos"))},ao=i=>{i.compute(UA(i.inputs[0],"Acosh","acosh"))},io=i=>{i.compute(UA(i.inputs[0],"Asin","asin"))},so=i=>{i.compute(UA(i.inputs[0],"Asinh","asinh"))},no=i=>{i.compute(UA(i.inputs[0],"Atan","atan"))},oo=i=>{i.compute(UA(i.inputs[0],"Atanh","atanh"))},go=i=>JA(i),fo=(i,o)=>{let u;switch(o.to){case 10:u="vec4<f16>";break;case 1:u="vec4<f32>";break;case 12:u="vec4<u32>";break;case 6:u="vec4<i32>";break;case 9:u="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${o.to}`)}i.compute(UA(i.inputs[0],"Cast",u,void 0,o.cacheKey,o.to))},uo=i=>{let o,u,d=i.length>=2&&i[1].data!==0,p=i.length>=3&&i[2].data!==0;switch(i[0].dataType){case 1:o=d?i[1].getFloat32Array()[0]:-34028234663852886e22,u=p?i[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:o=d?i[1].getUint16Array()[0]:64511,u=p?i[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return JA({min:o,max:u})},lo=(i,o)=>{let u=o||uo(i.inputs),d=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"Clip",p=>`clamp(${p}, vec4<${d}>(uniforms.min), vec4<${d}>(uniforms.max))`,void 0,u.cacheKey,void 0,[{type:i.inputs[0].dataType,data:u.min},{type:i.inputs[0].dataType,data:u.max}],[{name:"min",type:d},{name:"max",type:d}]),{inputs:[0]})},Co=i=>{i.compute(UA(i.inputs[0],"Ceil","ceil"))},co=i=>{i.compute(UA(i.inputs[0],"Cos","cos"))},bo=i=>{i.compute(UA(i.inputs[0],"Cosh","cosh"))},ct=i=>JA(i),Io=(i,o)=>{let u=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"Elu",d=>`elu_vf32(${d})`,`
  const elu_alpha_ = ${u}(${o.alpha});

  fn elu_f32(a: ${u}) -> ${u} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${u}>) -> vec4<${u}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,o.cacheKey))},ir=(i="f32")=>`
const r0: ${i} = 0.3275911;
const r1: ${i} = 0.254829592;
const r2: ${i} = -0.284496736;
const r3: ${i} = 1.421413741;
const r4: ${i} = -1.453152027;
const r5: ${i} = 1.061405429;

fn erf_vf32(v: vec4<${i}>) -> vec4<${i}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,po=i=>{let o=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"Erf",u=>`erf_vf32(${u})`,ir(o)))},ho=i=>{i.compute(UA(i.inputs[0],"Exp","exp"))},mo=i=>{i.compute(UA(i.inputs[0],"Floor","floor"))},ko=i=>{let o=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"Gelu",u=>`0.5 * ${u} * (1.0 + erf_vf32(${u} * 0.7071067811865475))`,ir(o)))},wo=(i,o)=>{let u=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"LeakyRelu",d=>`select(leaky_relu_alpha_ * ${d}, ${d}, ${d} >= vec4<${u}>(0.0))`,`const leaky_relu_alpha_ = ${u}(${o.alpha});`,o.cacheKey))},Bo=i=>{i.compute(UA(i.inputs[0],"Not",o=>`!${o}`))},Eo=i=>{i.compute(UA(i.inputs[0],"Neg",o=>`-${o}`))},xo=i=>{i.compute(UA(i.inputs[0],"Reciprocal",o=>`1.0/${o}`))},vo=i=>{let o=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"Relu",u=>`select(vec4<${o}>(0.0), ${u}, ${u} > vec4<${o}>(0.0))`))},Go=i=>{i.compute(UA(i.inputs[0],"Sigmoid",o=>`(1.0 / (1.0 + exp(-${o})))`))},Qo=i=>JA(i),yo=(i,o)=>{let u=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"HardSigmoid",d=>`max(vec4<${u}>(0.0), min(vec4<${u}>(1.0), ${o.alpha} * ${d} + vec4<${u}>(${o.beta})))`,void 0,o.cacheKey))},Do=i=>{i.compute(UA(i.inputs[0],"Sin","sin"))},Mo=i=>{i.compute(UA(i.inputs[0],"Sinh","sinh"))},zo=i=>{i.compute(UA(i.inputs[0],"Sqrt","sqrt"))},Yo=i=>{i.compute(UA(i.inputs[0],"Tan","tan"))},Sa=i=>`sign(${i}) * (1 - exp(-2 * abs(${i}))) / (1 + exp(-2 * abs(${i})))`,No=i=>{i.compute(UA(i.inputs[0],"Tanh",Sa))},Fa=(i="f32")=>`
const fast_gelu_a: ${i} = 0.5;
const fast_gelu_b: ${i} = 0.7978845608028654;
const fast_gelu_c: ${i} = 0.035677408136300125;

fn tanh_v(v: vec4<${i}>) -> vec4<${i}> {
  return ${Sa("v")};
}
`,Ra=i=>`(fast_gelu_a + fast_gelu_a * tanh_v(${i} * (fast_gelu_c * ${i} * ${i} + fast_gelu_b))) * ${i}`,To=i=>{let o=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"FastGelu",Ra,Fa(o),void 0,i.inputs[0].dataType))},Oo=(i,o)=>{let u=Z0(i.inputs[0].dataType);return i.compute(UA(i.inputs[0],"ThresholdedRelu",d=>`select(vec4<${u}>(0.0), ${d}, ${d} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${u}>(${o.alpha});`,o.cacheKey)),0},Ho=i=>{i.compute(UA(i.inputs[0],"Log","log"))},Po=(i,o)=>`
const alpha = vec4<${i}>(${o});
const one = ${i}(1.0);
const zero = ${i}(0.0);

fn quick_gelu_impl(x: vec4<${i}>) -> vec4<${i}> {
  let v = x *alpha;
  var x1 : vec4<${i}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,So=i=>`quick_gelu_impl(${i})`,Fo=(i,o)=>{let u=Z0(i.inputs[0].dataType);i.compute(UA(i.inputs[0],"QuickGelu",So,Po(u,o.alpha),o.cacheKey,i.inputs[0].dataType))}}),Ro,Wo,Ko,v6=uA(()=>{TA(),OA(),Wa(),Ro=i=>{if(i[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(i[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(i[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(i[0].dims[2]!==i[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Wo=i=>{let o=i[0].dims.slice();o[2]=o[2]/2;let u=rA("input",i[0].dataType,i[0].dims,4),d=rA("bias",i[0].dataType,[i[0].dims[2]],4),p=hA("output",i[0].dataType,o,4),k=eA.size(o)/4,h=y0(i[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:o,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(k/64)}}),getShaderSource:w=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${i[0].dims[2]/4/2}u;

  ${w.declareVariables(u,d,p)}

  ${ir(h)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes(k)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${p.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Ko=i=>{Ro(i.inputs),i.compute(Wo(i.inputs))}}),Zo,Lo,pe,Vo,Uo,Xo,Jo,jo,qo,_o,$o,A4,e4,G6=uA(()=>{yA(),TA(),OA(),Zo=(i,o,u,d,p,k,h,w,x,G,z,M)=>{let N,H;typeof w=="string"?N=H=(W,j)=>`${w}((${W}),(${j}))`:typeof w=="function"?N=H=w:(N=w.scalar,H=w.vector);let S=hA("outputData",z,d.length,4),K=rA("aData",x,o.length,4),X=rA("bData",G,u.length,4),V;if(p)if(k){let W=eA.size(o)===1,j=eA.size(u)===1,l=o.length>0&&o[o.length-1]%4===0,B=u.length>0&&u[u.length-1]%4===0;W||j?V=S.setByOffset("global_idx",H(W?`${K.type.value}(${K.getByOffset("0")}.x)`:K.getByOffset("global_idx"),j?`${X.type.value}(${X.getByOffset("0")}.x)`:X.getByOffset("global_idx"))):V=`
            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};
            let offsetA = ${K.broadcastedIndicesToOffset("outputIndices",S)};
            let offsetB = ${X.broadcastedIndicesToOffset("outputIndices",S)};
            ${S.setByOffset("global_idx",H(h||l?K.getByOffset("offsetA / 4u"):`${K.type.value}(${K.getByOffset("offsetA / 4u")}[offsetA % 4u])`,h||B?X.getByOffset("offsetB / 4u"):`${X.type.value}(${X.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else V=S.setByOffset("global_idx",H(K.getByOffset("global_idx"),X.getByOffset("global_idx")));else{if(!k)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let W=(j,l,B="")=>{let A=`aData[indexA${l}][componentA${l}]`,C=`bData[indexB${l}][componentB${l}]`;return`
            let outputIndices${l} = ${S.offsetToIndices(`global_idx * 4u + ${l}u`)};
            let offsetA${l} = ${K.broadcastedIndicesToOffset(`outputIndices${l}`,S)};
            let offsetB${l} = ${X.broadcastedIndicesToOffset(`outputIndices${l}`,S)};
            let indexA${l} = offsetA${l} / 4u;
            let indexB${l} = offsetB${l} / 4u;
            let componentA${l} = offsetA${l} % 4u;
            let componentB${l} = offsetB${l} % 4u;
            ${j}[${l}] = ${B}(${N(A,C)});
          `};z===9?V=`
            var data = vec4<u32>(0);
            ${W("data",0,"u32")}
            ${W("data",1,"u32")}
            ${W("data",2,"u32")}
            ${W("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:V=`
            ${W("outputData[global_idx]",0)}
            ${W("outputData[global_idx]",1)}
            ${W("outputData[global_idx]",2)}
            ${W("outputData[global_idx]",3)}
          `}return`
        ${i.registerUniform("vec_size","u32").declareVariables(K,X,S)}

        ${M??""}

        ${i.mainStart()}
        ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${V}
      }`},Lo=(i,o,u,d,p,k,h=u.dataType)=>{let w=u.dims.map(K=>Number(K)??1),x=d.dims.map(K=>Number(K)??1),G=!eA.areEqual(w,x),z=w,M=eA.size(w),N=!1,H=!1,S=[G];if(G){let K=Y2.calcShape(w,x,!1);if(!K)throw new Error("Can't perform binary op on the given tensors");z=K.slice(),M=eA.size(z);let X=eA.size(w)===1,V=eA.size(x)===1,W=w.length>0&&w[w.length-1]%4===0,j=x.length>0&&x[x.length-1]%4===0;S.push(X),S.push(V),S.push(W),S.push(j);let l=1;for(let B=1;B<z.length;B++){let A=w[w.length-B],C=x[x.length-B];if(A===C)l*=A;else break}l%4===0?(H=!0,N=!0):(X||V||W||j)&&(N=!0)}else N=!0;return S.push(N),{name:i,shaderCache:{hint:o+S.map(K=>K.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:K=>Zo(K,w,x,z,N,G,H,p,u.dataType,d.dataType,h,k),getRunData:()=>({outputs:[{dims:z,dataType:h}],dispatchGroup:{x:Math.ceil(M/64/4)},programUniforms:[{type:12,data:Math.ceil(eA.size(z)/4)},...EA(w,x,z)]})}},pe=(i,o,u,d,p,k)=>{i.compute(Lo(o,p??"",i.inputs[0],i.inputs[1],u,d,k))},Vo=i=>{pe(i,"Add",(o,u)=>`${o}+${u}`)},Uo=i=>{pe(i,"Div",(o,u)=>`${o}/${u}`)},Xo=i=>{pe(i,"Equal",{scalar:(o,u)=>`u32(${o}==${u})`,vector:(o,u)=>`vec4<u32>(${o}==${u})`},void 0,void 0,9)},Jo=i=>{pe(i,"Mul",(o,u)=>`${o}*${u}`)},jo=i=>{let o=rA("input",i.inputs[0].dataType,i.inputs[0].dims).type.value;pe(i,"Pow",{scalar:(u,d)=>`pow_custom(${u},${d})`,vector:(u,d)=>`pow_vector_custom(${u},${d})`},`
    fn pow_custom(a : ${o}, b : ${o}) -> ${o} {
      if (b == ${o}(0.0)) {
        return ${o}(1.0);
      } else if (a < ${o}(0.0) && f32(b) != floor(f32(b))) {
        return ${o}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${o}(1.0), round(f32(abs(b) % ${o}(2.0))) != 1.0) * ${o}(${o==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${o}>, b : vec4<${o}>) -> vec4<${o}> {
      // TODO: implement vectorized pow
      return vec4<${o}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},qo=i=>{pe(i,"Sub",(o,u)=>`${o}-${u}`)},_o=i=>{pe(i,"Greater",{scalar:(o,u)=>`u32(${o}>${u})`,vector:(o,u)=>`vec4<u32>(${o}>${u})`},void 0,void 0,9)},$o=i=>{pe(i,"Less",{scalar:(o,u)=>`u32(${o}<${u})`,vector:(o,u)=>`vec4<u32>(${o}<${u})`},void 0,void 0,9)},A4=i=>{pe(i,"GreaterOrEqual",{scalar:(o,u)=>`u32(${o}>=${u})`,vector:(o,u)=>`vec4<u32>(${o}>=${u})`},void 0,void 0,9)},e4=i=>{pe(i,"LessOrEqual",{scalar:(o,u)=>`u32(${o}<=${u})`,vector:(o,u)=>`vec4<u32>(${o}<=${u})`},void 0,void 0,9)}}),t4,r4,a4,i4,s4,n4,Q6=uA(()=>{yA(),TA(),I0(),OA(),t4=(i,o)=>{if(!i||i.length<1)throw new Error("too few inputs");let u=0,d=i[u],p=d.dataType,k=d.dims.length;i.forEach((h,w)=>{if(w!==u){if(h.dataType!==p)throw new Error("input tensors should be one type");if(h.dims.length!==k)throw new Error("input tensors should have the same shape");h.dims.forEach((x,G)=>{if(G!==o&&x!==d.dims[G])throw new Error("non concat dimensions must match")})}})},r4=(i,o)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${i}u>(${o});
    for (var i: u32 = 0u; i < ${i}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${i}u;
  }`,a4=(i,o)=>{let u=i.length,d=[];for(let p=0;p<u;++p){let k=o.setByOffset("global_idx",i[p].getByIndices("indices"));u===1?d.push(k):p===0?d.push(`if (inputIndex == ${p}u) { ${k} }`):p===u-1?d.push(`else { ${k} }`):d.push(`else if (inputIndex == ${p}) { ${k} }`)}return d.join(`
`)},i4=(i,o,u,d)=>{let p=eA.size(u),k=new Array(i.length),h=new Array(i.length),w=0,x=[],G=[],z=[{type:12,data:p}];for(let K=0;K<i.length;++K)w+=i[K].dims[o],k[K]=w,G.push(i[K].dims.length),h[K]=rA(`input${K}`,d,G[K]),x.push("rank"),z.push({type:12,data:k[K]});for(let K=0;K<i.length;++K)z.push(...EA(i[K].dims));z.push(...EA(u));let M=hA("output",d,u.length),N=M.indicesGet("indices",o),H=Array.from(Array(k.length).keys()).map(K=>`uniforms.sizeInConcatAxis${K}`).join(","),S=K=>`

  ${(()=>{K.registerUniform("outputSize","u32");for(let X=0;X<i.length;X++)K.registerUniform(`sizeInConcatAxis${X}`,"u32");return K.declareVariables(...h,M)})()}

  ${r4(k.length,H)}

  ${K.mainStart()}
    ${K.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${M.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${N});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${k.length}u>(${H});
      ${N} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${a4(h,M)}
  }`;return{name:"Concat",shaderCache:{hint:`${o}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:d}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:z}),getShaderSource:S}},s4=(i,o)=>{let u=i.inputs,d=u[0].dims,p=eA.normalizeAxis(o.axis,d.length);t4(u,p);let k=d.slice();k[p]=u.reduce((w,x)=>w+(x.dims.length>p?x.dims[p]:0),0);let h=u.filter(w=>eA.size(w.dims)>0);i.compute(i4(h,p,k,u[0].dataType),{inputs:h})},n4=i=>JA({axis:i.axis})}),o2,g2,f2,Ka,u2=uA(()=>{yA(),TA(),o2=(i,o,u="f32")=>{switch(i.activation){case"Relu":return`value = max(value, ${o}(0.0));`;case"Sigmoid":return`value = (${o}(1.0) / (${o}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${o}(${u}(uniforms.clip_min)), ${o}(${u}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${o}(0.0), min(${o}(1.0), ${u}(uniforms.alpha) * value + ${u}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${u}(uniforms.alpha) * value, value, value >= ${o}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${i.activation}`)}},g2=(i,o)=>{i.activation==="Clip"?o.push({type:1,data:i.clipMax},{type:1,data:i.clipMin}):i.activation==="HardSigmoid"?o.push({type:1,data:i.alpha},{type:1,data:i.beta}):i.activation==="LeakyRelu"&&o.push({type:1,data:i.alpha})},f2=(i,o)=>{i.activation==="Clip"?o.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):i.activation==="HardSigmoid"?o.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):i.activation==="LeakyRelu"&&o.push({name:"alpha",type:"f32"})},Ka=i=>{let o=i?.activation||"";if(o==="HardSigmoid"){let[u,d]=i?.activation_params||[.2,.5];return{activation:o,alpha:u,beta:d}}else if(o==="Clip"){let[u,d]=i?.activation_params||[Qs,ys];return{activation:o,clipMax:d,clipMin:u}}else if(o==="LeakyRelu"){let[u]=i?.activation_params||[.01];return{activation:o,alpha:u}}return{activation:o}}}),Y0,o4,Za=uA(()=>{Y0=(i,o)=>{switch(i){case 1:return o;case 2:return`vec2<${o}>`;case 3:return`vec3<${o}>`;case 4:return`vec4<${o}>`;default:throw new Error(`${i}-component is not supported.`)}},o4=i=>`
      ${i?"value = value + getBiasByOutputCoords(coords);":""}
      `}),g4,y6=uA(()=>{g4=i=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${i}.x), i32(${i}.y), i32(${i}.z), 1));
}
`}),dt,La,Va=uA(()=>{yA(),TA(),OA(),u2(),dt=(i,o,u,d,p)=>{let k=d-u;return`
      ${Array.from({length:u}).map((h,w)=>`
      if (${kA(o.shape,w,o.rank)} != 1) {
        ${o.indicesSet(i,w,kA(p,w+k,d))}
      } else {
        ${o.indicesSet(i,w,0)}
      }`).join("")}
`},La=(i,o,u,d,p=!1,k)=>{let h=i[0].dims,w=i[1].dims,x=h[h.length-2],G=w[w.length-1],z=h[h.length-1],M=l0(G),N=l0(z),H=l0(x),S=eA.size(u)/M/H,K=i.length>2,X=d?d.slice(0,-2):u.slice(0,-2),V=[eA.size(X),x,G],W=[{type:12,data:S},{type:12,data:x},{type:12,data:G},{type:12,data:z}];g2(o,W),W.push(...EA(X,h,w)),K&&W.push(...EA(i[2].dims)),W.push(...EA(V));let j=l=>{let B=za("batch_dims",i[0].dataType,X.length),A=rA("a",i[0].dataType,h.length,N),C=rA("b",i[1].dataType,w.length,M),y=hA("output",i[0].dataType,V.length,M),aA=y0(y.type.tensor),Q=o2(o,y.type.value,aA),T=[A,C],wA="";if(K){let PA=p?M:1;T.push(rA("bias",i[2].dataType,i[2].dims.length,PA)),wA=`${p?`value += bias[col / ${PA}];`:`value += ${y.type.value}(bias[row + i]);`}`}let sA=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];f2(o,sA);let oA=()=>{let PA=`var a_data: ${A.type.value};`;for(let vA=0;vA<N;vA++)PA+=`
              let b_data${vA} = b[(b_offset + (k + ${vA}) * uniforms.N + col) / ${M}];`;for(let vA=0;vA<H;vA++){PA+=`a_data = a[(a_offset + (row + ${vA}) * uniforms.K + k) / ${N}];`;for(let mA=0;mA<N;mA++)PA+=`
            values[${vA}] = fma(${C.type.value}(a_data${N===1?"":`[${mA}]`}), b_data${mA}, values[${vA}]);
`}return PA};return`
  ${l.registerUniforms(sA).registerInternalVariables(B).declareVariables(...T,y)}
  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${M})) * ${M};
    var index1 = global_idx / (uniforms.N / ${M});
    let stride1 = uniforms.M / ${H};
    let row = (index1 % stride1) * ${H};
    let batch = index1 / stride1;

    ${u.length===2?"":`let batch_indices = ${B.offsetToIndices("batch")};`}

    var a_indices: ${A.type.indices};
    ${dt("a_indices",A,A.rank-2,B.rank,"batch_indices")}
    ${A.indicesSet("a_indices",A.rank-2,0)}
    ${A.indicesSet("a_indices",A.rank-1,0)}
    let a_offset = ${A.indicesToOffset("a_indices")};

    var b_indices: ${C.type.indices};
    ${dt("b_indices",C,C.rank-2,B.rank,"batch_indices")}
    ${C.indicesSet("b_indices",C.rank-2,0)}
    ${C.indicesSet("b_indices",C.rank-1,0)}
    let b_offset = ${C.indicesToOffset("b_indices")};
    var values: array<${y.type.value}, ${H}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${N}) {
      ${oA()}
    }
    for (var i = 0u; i < ${H}u; i++) {
      var value = values[i];
      ${wA}
      ${Q}
      let cur_indices = ${y.type.indices}(batch, row + i, col);
      let offset = ${y.indicesToOffset("cur_indices")};
      ${y.setByOffset(`offset / ${M}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${o.activation};${M};${N};${H};${p}`,inputDependencies:K?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:k?k(u):u,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:W}),getShaderSource:j}}}),f4,u4,Ua,Xa,l4,Ja,C4,sr,ja=uA(()=>{yA(),TA(),OA(),u2(),Va(),Za(),f4=(i,o)=>i?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${o?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${o?", batchIndices":""});
        `,u4=(i,o)=>i?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${o===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${o===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${o===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ua=(i,o,u="f32",d,p=!1,k=32,h=!1,w=32)=>{let x=o[1]*i[1],G=o[0]*i[0],z=p?x:k,M=p?k:x,N=z/o[0],H=k/o[1];if(!((p&&N===4&&i[1]===4||!p&&(N===3||N===4))&&z%o[0]===0&&k%o[1]===0&&i[0]===4))throw new Error(`If transposeA ${p} is true, innerElementSize ${N} and workPerThread[1] ${i[1]} must be 4.
      Otherwise, innerElementSize ${N} must be 3 or 4.
  tileAWidth ${z} must be divisible by workgroupSize[0]${o[0]}. tileInner ${k} must be divisible by workgroupSize[1] ${o[1]}. colPerThread ${i[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${N}<${u}>, ${z/N}>, ${M}>;
var<workgroup> mm_Bsub: array<array<vec4<${u}>, ${G/i[0]}>, ${k}>;

const rowPerThread = ${i[1]};
const colPerThread = ${i[0]};
const innerElementSize = ${N};
const tileInner = ${k};

@compute @workgroup_size(${o[0]}, ${o[1]}, ${o[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${h?"0":"i32(globalId.z)"};
  ${d?`let batchIndices = ${d.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${x};

  let num_tiles = ${h?`${Math.ceil(w/k)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${h?`i32(globalId.z) * ${w}`:"0"};

  var acc: array<vec4<${u}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${H};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${f4(p,d)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${H}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${d?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${N===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${u4(p,N)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Xa=(i,o)=>i?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${o?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${o?", batchIndices":""});
            `,l4=i=>i?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Ja=(i,o,u="f32",d,p=!1,k=32,h=!1,w=32,x=!1)=>{let G=i[1]*o[1],z=i[0]*o[0],M=p?G:k,N=p?k:G;if(!(N%o[1]===0&&M%o[0]===0&&k%o[1]===0))throw new Error(`tileAHight ${N} must be divisible by workgroupSize[1]${o[1]}, tileAWidth ${M} must be divisible by workgroupSize[0]${o[0]}, tileInner ${k} must be divisible by workgroupSize[1]${o[1]}`);let H=N/o[1],S=M/o[0],K=k/o[1],X=x?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${G};
    let globalColStart = i32(workgroupId.x) * ${z};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${N}; inputRow = inputRow + ${o[1]}) {
        for (var inputCol = localCol; inputCol < ${M}; inputCol = inputCol + ${o[0]}) {
          ${Xa(p,d)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${k}; inputRow = inputRow + ${o[1]}) {
            for (var inputCol = localCol; inputCol < ${z}; inputCol = inputCol + ${o[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${d?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${u}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${o[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${p?`mm_Asub[k][localRow + innerRow * ${o[1]}];`:`mm_Asub[localRow + innerRow * ${o[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${o[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${o[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${G};

let tileRowA = i32(localId.y) * ${H};
let tileColA = i32(localId.x) * ${S};
let tileRowB = i32(localId.y) * ${K};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${H}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${S}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Xa(p,d)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${K}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${d?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${u}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${l4(p)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${u}, ${M}>, ${N}>;
  var<workgroup> mm_Bsub : array<array<${u}, ${z}>, ${k}>;
  const rowPerThread = ${i[1]};
  const colPerThread = ${i[0]};
  const tileInner = ${k};

@compute @workgroup_size(${o[0]}, ${o[1]}, ${o[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${h?"0":"i32(globalId.z)"};
    ${d?`let batchIndices = ${d.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${h?`${Math.ceil(w/k)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${h?`i32(globalId.z) * ${w}`:"0"};

    var acc : array<array<${u}, colPerThread>, rowPerThread>;
    ${X}
  }
`},C4=(i,o,u,d,p=!1)=>{let[k,h,w,x]=d,G=y0(d[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${k.type.indices}) -> ${Y0(i,G)} {
      var value = ${Y0(i,G)}(0.0);
      let col = colIn * ${i};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${h.type.indices};
        ${dt("aIndices",h,h.rank-2,k.rank,"batchIndices")}
        ${h.indicesSet("aIndices",h.rank-2,"u32(row)")}
        ${h.indicesSet("aIndices",h.rank-1,"u32(colIn)")}
        value = ${h.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${k.type.indices}) -> ${Y0(i,G)} {
      var value = ${Y0(i,G)}(0.0);
      let col = colIn * ${i};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${w.type.indices};
        ${dt("bIndices",w,w.rank-2,k.rank,"batchIndices")}
        ${w.indicesSet("bIndices",w.rank-2,"u32(row)")}
        ${w.indicesSet("bIndices",w.rank-1,"u32(colIn)")}
        value = ${w.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Y0(i,G)}) {
      let col = colIn * ${i};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${o?`value = value + ${p?"bias[colIn]":`${Y0(i,G)}(bias[row])`};`:""}
        ${u}
        ${x.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},sr=(i,o,u,d,p=!1,k)=>{let h=i[0].dims,w=i[1].dims,x=h.slice(0,-2),G=w.slice(0,-2),z=d?d.slice(0,-2):u.slice(0,-2),M=eA.size(z),N=h[h.length-2],H=h[h.length-1],S=w[w.length-1],K=H%4===0&&S%4===0,X=N<=8?[4,1,1]:[4,4,1],V=[8,8,1],W=[Math.ceil(S/V[0]/X[0]),Math.ceil(N/V[1]/X[1]),Math.ceil(M/V[2]/X[2])],j=K?4:1,l=[...x,N,H/j],B=l.length,A=[...G,H,S/j],C=A.length,y=[M,N,S/j],aA=[{type:6,data:N},{type:6,data:S},{type:6,data:H}];g2(o,aA),aA.push(...EA(z,l,A));let Q=["rank","rank"],T=i.length>2;T&&(aA.push(...EA(i[2].dims)),Q.push("rank")),aA.push(...EA(y));let wA=sA=>{let oA=z.length,PA=za("batchDims",i[0].dataType,oA,1),vA=y0(i[0].dataType),mA=rA("a",i[0].dataType,B,j),ZA=rA("b",i[1].dataType,C,j),BA=hA("result",i[0].dataType,y.length,j),i0=[mA,ZA];if(T){let E0=p?j:1;i0.push(rA("bias",i[2].dataType,i[2].dims.length,E0))}let gA=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];f2(o,gA);let CA=y0(BA.type.tensor),zA=o2(o,BA.type.value,CA),jA=C4(j,T,zA,[PA,mA,ZA,BA],p);return`
  ${sA.registerUniforms(gA).registerInternalVariables(PA).declareVariables(...i0,BA)}
  ${jA}
  ${K?Ua(X,V,vA,PA):Ja(X,V,vA,PA)}
                   `};return{name:"MatMul",shaderCache:{hint:`${X};${o.activation};${K};${p}`,inputDependencies:Q},getRunData:()=>({outputs:[{dims:k?k(u):u,dataType:i[0].dataType}],dispatchGroup:{x:W[0],y:W[1],z:W[2]},programUniforms:aA}),getShaderSource:wA}}}),c4,d4,D6=uA(()=>{yA(),Oe(),OA(),u2(),Za(),y6(),ja(),c4=(i,o,u,d,p=!1,k,h=4,w=4,x=4,G="f32")=>{let z=aA=>{switch(aA){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${G}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${aA} is not supported.`)}},M=aA=>{switch(aA){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${aA} is not supported.`)}},N=i?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,H=i?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,S=i?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",K=i?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",X=i?"row":"col",V=i?"col":"row",W=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${i?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${X} / outWidth;
    let outCol = ${X} % outWidth;

    let WRow = ${V} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${V} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${V} % inChannels;
    var resData = ${Y0(h,G)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${S} && xCol >= 0 && xCol < ${K}) {
      ${N}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${z(h)}
    }
    return resData;`,j=i?o&&d?`
    let col = colIn * ${h};
    ${W}`:`
    let col = colIn * ${h};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${W}
    }
    return ${Y0(h,G)}(0.0);`:d&&u?`
    let col = colIn * ${h};
    ${W}`:`
    let col = colIn * ${h};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${W}
    }
    return ${Y0(h,G)}(0.0);`,l=i?d&&u?M(w):`
    let col = colIn * ${w};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${M(w)}
    }
    return ${Y0(w,G)}(0.0);`:`
    let col = colIn * ${w};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${M(w)}
    }
    return ${Y0(w,G)}(0.0);`,B=Y0(x,G),A=Y0(i?h:w,G),C=Y0(i?w:h,G),y=o2(k,B,G);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${A} {
      ${i?j:l}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${C} {
      ${i?l:j}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {
      let col = colIn * ${x};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${i?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${H}
      ${o4(p)}
      ${y}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},d4=(i,o,u,d,p,k,h,w,x)=>{let G=o.format==="NHWC",z=G?i[0].dims[3]:i[0].dims[1],M=u[0],N=G?u[2]:u[3],H=G?u[1]:u[2],S=G?u[3]:u[1],K=G&&(z%4===0||z%3===0)&&S%4===0,X=G?S:N*H,V=G?N*H:S,W=[8,8,1],j=d<=8?[4,1,1]:[4,4,1],l=[Math.ceil(X/W[0]/j[0]),Math.ceil(V/W[1]/j[1]),Math.ceil(M/W[2]/j[2])];LA("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${l}`);let B=K?G&&z%4!==0?3:4:1,A=W[1]*j[1],C=W[0]*j[0],y=Math.max(W[0]*B,W[1]),aA=d%A===0,Q=p%C===0,T=k%y===0,wA=K?[B,4,4]:[1,1,1],sA=[{type:6,data:d},{type:6,data:p},{type:6,data:k},{type:6,data:[o.pads[0],o.pads[1]]},{type:6,data:o.strides},{type:6,data:o.dilations}];g2(o,sA),sA.push(...EA(i[0].dims,i[1].dims));let oA=["rank","rank"];h&&(sA.push(...EA(i[2].dims)),oA.push("rank")),sA.push(...EA(u));let PA=vA=>{let mA=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];f2(o,mA);let ZA=K?4:1,BA=y0(i[0].dataType),i0=`
      fn setOutputAtIndex(flatIndex : i32, value : ${K?`vec4<${BA}>`:BA}) {
        result[flatIndex] = ${K?`vec4<${BA}>`:BA}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${K?`vec4<${BA}>`:BA}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${K?"/ 4":""}, value);
      }`,gA=rA("x",i[0].dataType,i[0].dims.length,B===3?1:B),CA=rA("w",i[1].dataType,i[1].dims.length,ZA),zA=[gA,CA],jA=hA("result",i[0].dataType,u.length,ZA);if(h){let E0=rA("bias",i[2].dataType,i[2].dims.length,ZA);zA.push(E0),i0+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${K?`vec4<${BA}>`:BA} {
          return bias[coords.${G?"w":"y"}${K?"/ 4":""}];
        }`}return`
        ${g4("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${vA.registerUniforms(mA).declareVariables(...zA,jA)}
        ${i0}
        ${c4(G,aA,Q,T,h,o,wA[0],wA[1],wA[2],BA)}
        ${K?Ua(j,W,BA,void 0,!G,y):Ja(j,W,BA,void 0,!G,y,!1,void 0,w)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${o.cacheKey};${B};${K};${aA};${Q};${T};${A};${C};${y}`,inputDependencies:oA},getRunData:()=>({outputs:[{dims:x?x(u):u,dataType:i[0].dataType}],dispatchGroup:{x:l[0],y:l[1],z:l[2]},programUniforms:sA}),getShaderSource:PA}}}),b4,qa,bt,I4,_a,p4,h4,m4,M6=uA(()=>{yA(),Oe(),TA(),OA(),u2(),Za(),b4=i=>{let o=1;for(let u=0;u<i.length;u++)o*=i[u];return o},qa=i=>typeof i=="number"?[i,i,i]:i,bt=(i,o)=>o<=1?i:i+(i-1)*(o-1),I4=(i,o,u,d=1)=>{let p=bt(o,d);return Math.floor((i[0]*(u-1)-u+p)/2)},_a=(i,o,u,d,p)=>{p==null&&(p=I4(i,o[0],d[0]));let k=[0,0,0,u];for(let h=0;h<3;h++)i[h]+2*p>=o[h]&&(k[h]=Math.trunc((i[h]-o[h]+2*p)/d[h]+1));return k},p4=(i,o,u,d,p,k,h,w,x,G)=>{let z,M,N,H;if(i==="VALID"&&(i=0),typeof i=="number"){z={top:i,bottom:i,left:i,right:i,front:i,back:i};let S=_a([o,u,d,1],[w,x,G],1,[p,k,h],i);M=S[0],N=S[1],H=S[2]}else if(Array.isArray(i)){if(!i.every((K,X,V)=>K===V[0]))throw Error(`Unsupported padding parameter: ${i}`);z={top:i[0],bottom:i[1],left:i[2],right:i[3],front:i[4],back:i[5]};let S=_a([o,u,d,1],[w,x,G],1,[p,k,h],i[0]);M=S[0],N=S[1],H=S[2]}else if(i==="SAME_UPPER"){M=Math.ceil(o/p),N=Math.ceil(u/k),H=Math.ceil(d/h);let S=(M-1)*p+w-o,K=(N-1)*k+x-u,X=(H-1)*h+G-d,V=Math.floor(S/2),W=S-V,j=Math.floor(K/2),l=K-j,B=Math.floor(X/2),A=X-B;z={top:j,bottom:l,left:B,right:A,front:V,back:W}}else throw Error(`Unknown padding parameter: ${i}`);return{padInfo:z,outDepth:M,outHeight:N,outWidth:H}},h4=(i,o,u,d,p,k=!1,h="channelsLast")=>{let w,x,G,z,M;if(h==="channelsLast")[w,x,G,z,M]=i;else if(h==="channelsFirst")[w,M,x,G,z]=i;else throw new Error(`Unknown dataFormat ${h}`);let[N,,H,S,K]=o,[X,V,W]=qa(u),[j,l,B]=qa(d),A=bt(H,j),C=bt(S,l),y=bt(K,B),{padInfo:aA,outDepth:Q,outHeight:T,outWidth:wA}=p4(p,x,G,z,X,V,W,A,C,y),sA=k?N*M:N,oA=[0,0,0,0,0];return h==="channelsFirst"?oA=[w,sA,Q,T,wA]:h==="channelsLast"&&(oA=[w,Q,T,wA,sA]),{batchSize:w,dataFormat:h,inDepth:x,inHeight:G,inWidth:z,inChannels:M,outDepth:Q,outHeight:T,outWidth:wA,outChannels:sA,padInfo:aA,strideDepth:X,strideHeight:V,strideWidth:W,filterDepth:H,filterHeight:S,filterWidth:K,effectiveFilterDepth:A,effectiveFilterHeight:C,effectiveFilterWidth:y,dilationDepth:j,dilationHeight:l,dilationWidth:B,inShape:i,outShape:oA,filterShape:o}},m4=(i,o,u,d,p,k)=>{let h=k==="channelsLast";h?i[0].dims[3]:i[0].dims[1];let w=[64,1,1],x={x:u.map((X,V)=>V)},G=[Math.ceil(b4(x.x.map(X=>u[X]))/w[0]),1,1];LA("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${G}`);let z=1,M=eA.size(u),N=[{type:12,data:M},{type:12,data:d},{type:12,data:p},{type:12,data:o.strides},{type:12,data:o.dilations}];g2(o,N),N.push(...EA(i[0].dims,i[1].dims));let H=["rank","rank"],S=i.length===3;S&&(N.push(...EA(i[2].dims)),H.push("rank")),N.push(...EA(u));let K=X=>{let V=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:d.length},{name:"pads",type:"u32",length:p.length},{name:"strides",type:"u32",length:o.strides.length},{name:"dilations",type:"u32",length:o.dilations.length}];f2(o,V);let W=1,j=y0(i[0].dataType),l=rA("x",i[0].dataType,i[0].dims.length,z),B=rA("W",i[1].dataType,i[1].dims.length,W),A=[l,B],C=hA("result",i[0].dataType,u.length,W),y="";if(S){let T=rA("bias",i[2].dataType,i[2].dims.length,W);A.push(T),y+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${j} {
          return bias[${h?kA("coords",4,5):kA("coords",1,5)}];
        }`}let aA=Y0(z,j),Q=o2(o,aA,j);return`
            ${y}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${l.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${B.getByIndices("aIndices")};
            }
          ${X.registerUniforms(V).declareVariables(...A,C)}
          ${X.mainStart()}
          ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${C.offsetToIndices("global_idx")};
              let batch = ${kA("coords",0,l.rank)};
              let d2 = ${h?kA("coords",l.rank-1,l.rank):kA("coords",1,l.rank)};
              let xFRCCorner = vec3<u32>(${h?kA("coords",1,l.rank):kA("coords",2,l.rank)},
              ${h?kA("coords",2,l.rank):kA("coords",3,l.rank)},
              ${h?kA("coords",3,l.rank):kA("coords",4,l.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${h?kA("uniforms.x_shape",1,l.rank):kA("uniforms.x_shape",2,l.rank)};
              let xShapeZ = ${h?kA("uniforms.x_shape",2,l.rank):kA("uniforms.x_shape",3,l.rank)};
              let xShapeW = ${h?kA("uniforms.x_shape",3,l.rank):kA("uniforms.x_shape",4,l.rank)};
              let xShapeU = ${h?kA("uniforms.x_shape",4,l.rank):kA("uniforms.x_shape",1,l.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${h?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${h?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${h?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${h?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${S?"value = value + getBiasByOutputCoords(coords)":""};
              ${Q}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${o.cacheKey};${h};${z};${S}`,inputDependencies:H},getRunData:()=>({outputs:[{dims:u,dataType:i[0].dataType}],dispatchGroup:{x:G[0],y:G[1],z:G[2]},programUniforms:N}),getShaderSource:K}}}),k4,w4,z6=uA(()=>{yA(),TA(),OA(),u2(),k4=(i,o,u,d)=>{let p=i.length>2,k=p?"value += b[output_channel];":"",h=i[0].dims,w=i[1].dims,x=o.format==="NHWC",G=x?u[3]:u[1],z=G/o.group,M=x&&z>=4?l0(G):1,N=eA.size(u)/M,H=[{type:12,data:N},{type:12,data:o.dilations},{type:12,data:[o.strides[0],o.strides[1]]},{type:12,data:[o.pads[0],o.pads[1]]},{type:12,data:z}];g2(o,H),H.push(...EA(h,[w[0],w[1],w[2],w[3]/M]));let S=p?["rank","rank","rank"]:["rank","rank"];H.push(...EA([u[0],u[1],u[2],u[3]/M]));let K=X=>{let V=hA("output",i[0].dataType,u.length,M),W=y0(V.type.tensor),j=o2(o,V.type.value,W),l=rA("x",i[0].dataType,h.length),B=rA("w",i[1].dataType,w.length,M),A=[l,B];p&&A.push(rA("b",i[2].dataType,i[2].dims,M));let C=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:o.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];f2(o,C);let y=x?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${l.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${B.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${l.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${B.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${X.registerUniforms(C).declareVariables(...A,V)}

  ${X.mainStart()}
    ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${V.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${x?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${x?1:2}], outputIndices[${x?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${M} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${x?2:1}];

    var value: ${V.type.value} = ${V.type.value}(0);
    ${y}
    ${k}
    ${j}
    ${V.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${o.cacheKey}_${M}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:d?d(u):u,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:H}),getShaderSource:K}},w4=(i,o,u,d)=>{let p=i.length>2,k=l0(u[3]),h=l0(u[2]),w=eA.size(u)/k/h,x=[i[0].dims[0],i[0].dims[1],i[0].dims[2],i[0].dims[3]/k],G=[i[1].dims[0],i[1].dims[1],i[1].dims[2],i[1].dims[3]/k],z=[u[0],u[1],u[2],u[3]/k],M=[{type:12,data:w},{type:6,data:[o.strides[0],o.strides[1]]},{type:6,data:[o.pads[0],o.pads[1]]}];g2(o,M),M.push(...EA(x,G,z));let N=(h-1)*o.strides[1]+G[1],H=S=>{let K=hA("output",i[0].dataType,z.length,k),X=y0(K.type.tensor),V=o2(o,K.type.value,X),W=rA("x",i[0].dataType,x.length,k),j=rA("w",i[1].dataType,G.length,k),l=[W,j];p&&l.push(rA("b",i[2].dataType,i[2].dims,k));let B=p?"value += b[output_channel];":"",A=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return f2(o,A),`
  ${S.registerUniforms(A).declareVariables(...l,K)}
  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${h}u;
    let col = (index1 % width1) * ${h}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${W.type.value}, ${N}>;
    var values: array<${K.type.value}, ${h}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${G[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${N}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${W.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${W.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${G[1]}; w_width++) {
          let w_val = ${j.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${h}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${h}u; i++) {
      var value = values[i];
      ${B}
      ${V}
      ${K.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${o.cacheKey};${k};${h};${N};${G[0]};${G[1]}`,inputDependencies:p?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:d?d(u):u,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:M}),getShaderSource:H}}}),B4,nr,E4,or,$a,A1,x4,v4,e1,Y6=uA(()=>{TA(),D6(),M6(),ja(),z6(),u2(),Va(),Xe(),B4=(i,o,u,d,p,k)=>{let h=i[0],w=i.slice(k?1:2,k?3:4),x=w.length,G=o[0],z=o.slice(2).map((N,H)=>N+(N-1)*(u[H]-1)),M=w.map((N,H)=>N+d[H]+d[H+x]).map((N,H)=>Math.floor((N-z[H]+p[H])/p[H]));return M.splice(0,0,h),M.splice(k?3:1,0,G),M},nr=[2,3,1,0],E4=(i,o)=>{if(!i||i.length!==2&&i.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(i[0].dims.length>5)throw new Error("greater than 5D is not supported");if(i[0].dims.length!==i[1].dims.length)throw new Error("filter does not have same dimension as input");let u=i[0].dims[o.format==="NHWC"?i[0].dims.length-1:1],d=i[1].dims[1]*o.group;if(u!==d)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(i.length===3&&(i[2].dims.length!==1||i[1].dims[0]!==i[2].dims[0]))throw new Error("invalid bias");let p=i[0].dims.length-2;if(o.dilations.length!==p)throw new Error(`dilations should be ${p}D`);if(o.strides.length!==p)throw new Error(`strides should be ${p}D`);if(o.pads.length!==p*2)throw new Error(`pads should be ${p*2}D`);if(o.kernelShape.length!==0&&o.kernelShape.length!==i[1].dims.length-2)throw new Error("invalid kernel shape")},or=(i,o)=>{let u=i.kernelShape.slice();u.length<o[1].dims.length-2&&u.push(...Array(o[1].dims.length-2-u.length).fill(0));for(let k=2;k<o[1].dims.length;++k)u[k-2]===0&&(u[k-2]=o[1].dims[k]);let d=i.pads.slice();$t.adjustPadsBasedOnAutoPad(o[0].dims,i.strides,i.dilations,u,d,i.format==="NHWC",i.autoPad);let p=Object.assign({},i);return Object.assign(p,{kernelShape:u,pads:d}),p},$a=i=>{let o=Ka(i),u=i.format,d=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][i.auto_pad],p=i.dilations,k=i.group,h=i.kernel_shape,w=i.pads,x=i.strides,G=i.w_is_const();return{autoPad:d,format:u,dilations:p,group:k,kernelShape:h,pads:w,strides:x,wIsConst:G,...o,cacheKey:`${i.format};${o.activation};`}},A1=(i,o,u,d)=>{let p=u.format==="NHWC",k=B4(o[0].dims,o[1].dims,u.dilations,u.pads,u.strides,p);if(u.group!==1){let A=[o[0]];if(p){let C=i.kernelCustomData.wT??i.compute(ne(o[1],nr),{inputs:[1],outputs:[u.wIsConst?-2:-1]})[0];u.wIsConst&&!i.kernelCustomData.wT&&(i.kernelCustomData.wT=C),A.push(C)}else A.push(o[1]);o.length===3&&A.push(o[2]),!i.adapterInfo.isArchitecture("ampere")&&p&&o[1].dims[0]===u.group&&o[1].dims[1]===1&&u.dilations[0]===1&&u.dilations[1]===1?i.compute(w4(A,u,k,d),{inputs:A}):i.compute(k4(A,u,k,d),{inputs:A});return}let h=o.length===3,w=o[0].dims[p?1:2],x=o[0].dims[p?2:3],G=o[0].dims[p?3:1],z=o[1].dims[2],M=o[1].dims[3],N=k[p?1:2],H=k[p?2:3],S=k[p?3:1],K=p&&z===w&&M===x&&u.pads[0]===0&&u.pads[1]===0;if(K||z===1&&M===1&&u.dilations[0]===1&&u.dilations[1]===1&&u.strides[0]===1&&u.strides[1]===1&&u.pads[0]===0&&u.pads[1]===0){let A=k[0],C,y,aA,Q=[];if(p){let sA=i.kernelCustomData.wT??i.compute(ne(o[1],nr),{inputs:[1],outputs:[u.wIsConst?-2:-1]})[0];if(u.wIsConst&&!i.kernelCustomData.wT&&(i.kernelCustomData.wT=sA),K){let oA=w*x*G;C=o[0].reshape([1,A,oA]),y=sA.reshape([1,oA,S]),aA=[1,A,S]}else C=o[0].reshape([A,w*x,G]),y=sA.reshape([1,G,S]),aA=[A,N*H,S];Q.push(C),Q.push(y)}else C=o[0].reshape([A,G,w*x]),y=o[1].reshape([1,S,G]),aA=[A,S,N*H],Q.push(y),Q.push(C);h&&Q.push(o[2]);let T=aA[2],wA=Q[0].dims[Q[0].dims.length-1];T<8&&wA<8?i.compute(La(Q,u,k,aA,p,d),{inputs:Q}):i.compute(sr(Q,u,k,aA,p,d),{inputs:Q});return}let X=!0,V=i.kernelCustomData.wT??i.compute(ne(o[1],nr),{inputs:[1],outputs:[u.wIsConst?-2:-1]})[0];u.wIsConst&&!i.kernelCustomData.wT&&(i.kernelCustomData.wT=V);let W=[o[0],V];h&&W.push(o[2]);let j=p?N*H:S,l=p?S:N*H,B=z*M*G;i.compute(d4(W,u,k,j,l,B,h,X,d),{inputs:W})},x4=(i,o)=>{let u=o.format==="NHWC",d=[i.inputs[0].reshape(u?[i.inputs[0].dims[0],1,i.inputs[0].dims[1],i.inputs[0].dims[2]]:[i.inputs[0].dims[0],i.inputs[0].dims[1],1,i.inputs[0].dims[2]]),i.inputs[1].reshape([i.inputs[1].dims[0],i.inputs[1].dims[1],1,i.inputs[1].dims[2]])];i.inputs.length===3&&d.push(i.inputs[2]);let p=[0,o.pads[0],0,o.pads[1]],k=[1].concat(o.strides),h=[1].concat(o.dilations),w=[1].concat(o.kernelShape),x=or({...o,pads:p,strides:k,dilations:h,kernelShape:w},d);A1(i,d,x,G=>u?[G[0],G[2],G[3]]:[G[0],G[1],G[3]])},v4=(i,o,u)=>{let d=u.format==="NHWC"?"channelsLast":"channelsFirst",p=or(u,o),k=u.autoPad==="NOTSET"?u.pads:u.autoPad,h=h4(o[0].dims,o[1].dims,u.strides,u.dilations,k,!1,d);i.compute(m4(o,p,h.outShape,[h.filterDepth,h.filterHeight,h.filterWidth],[h.padInfo.front,h.padInfo.top,h.padInfo.left],d))},e1=(i,o)=>{if(E4(i.inputs,o),i.inputs[0].dims.length===3)x4(i,o);else if(i.inputs[0].dims.length===5)v4(i,i.inputs,o);else{let u=or(o,i.inputs);A1(i,i.inputs,u)}}}),G4,N6=uA(()=>{yA(),Oe(),TA(),OA(),G4=(i,o,u)=>{let d=i.length>2,p=o.outputShape,k=o.format==="NHWC",h=o.group,w=i[1].dims,x=w[2]/h,G=w[3],z=k?l0(x):1,M=k&&G===1&&x>=4,N=M?Math.floor(x/4)*4:Math.floor(x/z)*z,H=x-N,S=k?l0(G):1,K=k?G===1?z:S:1,X=eA.size(p)/S,V=[Math.ceil(X/64),1,1];LA("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${V}`);let W=["rank","rank"],j=[o.strides[0],o.strides[1]],l=[o.kernelShape[k?1:2],o.kernelShape[k?2:3]],B=[o.dilations[0],o.dilations[1]],A=[l[0]+(o.dilations[0]<=1?0:(o.kernelShape[k?1:2]-1)*(o.dilations[0]-1)),l[1]+(o.dilations[1]<=1?0:(o.kernelShape[k?2:3]-1)*(o.dilations[1]-1))],C=[A[0]-1-Math.floor((o.pads[0]+o.pads[2])/2),A[1]-1-Math.floor((o.pads[1]+o.pads[3])/2)],y=[{type:12,data:X},{type:12,data:j},{type:12,data:l},{type:12,data:B},{type:12,data:A},{type:6,data:C},{type:12,data:N},{type:12,data:x},{type:12,data:G},...EA(i[0].dims,i[1].dims)];d&&(y.push(...EA(i[2].dims)),W.push("rank")),y.push(...EA(p));let aA=Q=>{let T=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:j.length},{name:"filter_dims",type:"u32",length:l.length},{name:"dilations",type:"u32",length:l.length},{name:"effective_filter_dims",type:"u32",length:A.length},{name:"pads",type:"i32",length:C.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],wA=y0(i[0].dataType),sA=k?1:2,oA=k?2:3,PA=k?3:1,vA=rA("W",i[1].dataType,i[1].dims.length,K),mA=rA("Dy",i[0].dataType,i[0].dims.length,z),ZA=[mA,vA];d&&ZA.push(rA("bias",i[2].dataType,[p[PA]].length,S));let BA=hA("result",i[0].dataType,p.length,S),i0=()=>{let zA="";if(M)z===4?zA+=`
        let xValue = ${mA.getByOffset("x_offset")};
        let wValue = ${vA.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:z===2?zA+=`
          dotProd = dotProd + dot(vec4<${wA}>(${mA.getByOffset("x_offset")}, ${mA.getByOffset("x_offset + 1u")}), vec4<${wA}>(${vA.getByOffset("w_offset")}, ${vA.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:z===1&&(zA+=`
          dotProd = dotProd + dot(vec4<${wA}>(${mA.getByOffset("x_offset")}, ${mA.getByOffset("x_offset + 1u")}, ${mA.getByOffset("x_offset + 2u")}, ${mA.getByOffset("x_offset + 3u")}), vec4<${wA}>(${vA.getByOffset("w_offset")}, ${vA.getByOffset("w_offset + 1u")}, ${vA.getByOffset("w_offset + 2u")}, ${vA.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(zA+=`
                  let xValue = ${k?mA.getByOffset(`${mA.indicesToOffset(`${mA.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${z}`):mA.get("batch","inputChannel","idyR","idyC")};
        `,z===1)zA+=`
          let w_offset = ${vA.indicesToOffset(`${vA.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${vA.getByOffset(`w_offset / ${K}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let jA=0;jA<z;jA++)zA+=`
            let wValue${jA} = ${vA.getByOffset(`${vA.indicesToOffset(`${vA.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${jA}, wOutChannel)`)} / ${K}`)};
            dotProd = dotProd + xValue[${jA}] * wValue${jA};`;return zA},gA=()=>{if(H===0)return"";if(!M)throw new Error(`packInputAs4 ${M} is not true.`);let zA="";if(z===1){zA+="dotProd = dotProd";for(let jA=0;jA<H;jA++)zA+=`
            + ${mA.getByOffset(`x_offset + ${jA}`)} * ${vA.getByOffset(`w_offset + ${jA}`)}`;zA+=";"}else if(z===2){if(H!==2)throw new Error(`Invalid inputChannelsRemainder ${H}.`);zA+=`
          let xValue = ${mA.getByOffset("x_offset")};
          let wValue = ${vA.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return zA},CA=`
            let outputIndices = ${BA.offsetToIndices(`global_idx * ${S}`)};
            let batch = ${BA.indicesGet("outputIndices",0)};
            let d1 = ${BA.indicesGet("outputIndices",PA)};
            let r = ${BA.indicesGet("outputIndices",sA)};
            let c = ${BA.indicesGet("outputIndices",oA)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${BA.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${wA}(dyRCorner) + ${wA}(wR)) / ${wA}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${wA}(uniforms.Dy_shape[${sA}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${wA}(dyCCorner) + ${wA}(wC)) / ${wA}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${wA}(uniforms.Dy_shape[${oA}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${M?`
                var x_offset = ${mA.indicesToOffset(`${mA.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${z};
                var w_offset = ${vA.indicesToOffset(`${vA.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${K};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${M?4:z}) {
                  ${i0()}
                  inputChannel = inputChannel + ${M?4:z};
                }
                ${gA()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${d?` + bias[d1 / ${S}]`:""};
            ${BA.setByOffset("global_idx","value")};
          `;return`
    ${Q.registerUniforms(T).declareVariables(...ZA,BA)}
      ${Q.mainStart()}
      ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${CA}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${o.cacheKey};${z}${K}${S}${M}${H}`,inputDependencies:W},getRunData:()=>({dispatchGroup:{x:V[0],y:V[1],z:V[2]},outputs:[{dims:u?u(p):p,dataType:i[0].dataType}],programUniforms:y}),getShaderSource:aA}}}),Q4,y4,D4,t1,M4,z4,r1,Y4,N4,T6=uA(()=>{N6(),u2(),Xe(),Q4=(i,o,u,d,p,k)=>(i-1)*o+u+(d-1)*p+1-k,y4=(i,o,u,d,p)=>{let k=Math.floor(i/2);o==="SAME_UPPER"?(u[d]=k,u[p]=i-k):o==="SAME_LOWER"&&(u[d]=i-k,u[p]=k)},D4=(i,o,u,d,p,k,h,w,x,G)=>{let z=i.length-2,M=G.length===0;x.length<z&&x.push(...Array(z-x.length).fill(0));let N=i[0],H=o[w?3:1]*p;for(let S=0,K=i.length-z-(w?1:0);S<z;++S,++K){let X=i[K],V=M?X*h[S]:G[S],W=Q4(X,h[S],k[S],o[K],u[S],V);y4(W,d,k,S,S+z),M&&G.push(h[S]*(X-1)+x[S]+(o[K]-1)*u[S]+1-k[S]-k[S+z])}G.splice(0,0,N),G.splice(w?3:1,0,H)},t1=(i,o)=>{let u=i.kernelShape.slice();if(i.kernelShape.length===0||i.kernelShape.reduce((M,N)=>M*N,1)===0){u.length=0;for(let M=2;M<o[1].dims.length;++M)u.push(o[1].dims[M])}let d=i.format==="NHWC";u.splice(0,0,o[1].dims[0]),u.splice(d?3:1,0,o[1].dims[1]);let p=i.pads.slice(),k=i.outputShape.slice(),h=i.outputPadding.slice(),w=o[0].dims,x=i.dilations.slice();if(x.reduce((M,N)=>M+N,0)===0){let M=o[0].dims.length-2;x=new Array(M).fill(1)}let G=i.strides.slice();if(G.reduce((M,N)=>M+N,0)===0){let M=o[0].dims.length-2;G=new Array(M).fill(1)}D4(w,u,x,i.autoPad,i.group,p,G,d,h,k);let z=Object.assign({},i);return Object.assign(z,{kernelShape:u,pads:p,outputPadding:h,outputShape:k,dilations:x,strides:G}),z},M4=i=>{let o=Ka(i),u=i.format,d=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof i.autoPad>"u"?0:i.autoPad],p=i.dilations,k=i.group,h=i.kernelShape,w=i.pads,x=i.strides,G=i.wIsConst(),z=i.outputPadding,M=i.outputShape;return{autoPad:d,format:u,dilations:p,group:k,kernelShape:h,outputPadding:z,outputShape:M,pads:w,strides:x,wIsConst:G,...o,cacheKey:`${i.format};${o.activation};`}},z4=(i,o)=>{if(!i||i.length!==2&&i.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(i[0].dims.length!==4&&i[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(i[0].dims.length!==i[1].dims.length)throw new Error("filter does not have same dimension as input");let u=i[0].dims[o.format==="NHWC"?i[0].dims.length-1:1],d=i[1].dims[0];if(u!==d)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let p=i[1].dims[1]*o.group;if(i.length===3&&(i[2].dims.length!==1||i[2].dims[0]!==p))throw new Error("invalid bias");let k=i[0].dims.length-2;if(o.dilations.reduce((h,w)=>h+w,0)>0&&o.dilations.length!==k)throw new Error(`dilations should be ${k}D`);if(o.strides.reduce((h,w)=>h+w,0)>0&&o.strides.length!==k)throw new Error(`strides should be ${k}D`);if(o.pads.reduce((h,w)=>h+w,0)>0&&o.pads.length!==k*2)throw new Error(`pads should be ${k*2}D`);if(o.outputPadding.length!==k&&o.outputPadding.length!==0)throw new Error(`output_padding should be ${k}D`);if(o.kernelShape.reduce((h,w)=>h+w,0)>0&&o.kernelShape.length!==0&&o.kernelShape.length!==i[1].dims.length-2)throw new Error("invalid kernel shape");if(o.outputShape.length!==0&&o.outputShape.length!==i[0].dims.length-2)throw new Error("invalid output shape")},r1=(i,o,u,d)=>{let p=i.kernelCustomData.wT??i.compute(ne(o[1],[2,3,0,1]),{inputs:[1],outputs:[u.wIsConst?-2:-1]})[0];u.wIsConst&&!i.kernelCustomData.wT&&(i.kernelCustomData.wT=p);let k=[o[0],p];o.length===3&&k.push(o[2]),i.compute(G4(k,u,d),{inputs:k})},Y4=(i,o)=>{let u=o.format==="NHWC",d=[i.inputs[0].reshape(u?[i.inputs[0].dims[0],1,i.inputs[0].dims[1],i.inputs[0].dims[2]]:[i.inputs[0].dims[0],i.inputs[0].dims[1],1,i.inputs[0].dims[2]]),i.inputs[1].reshape([i.inputs[1].dims[0],i.inputs[1].dims[1],1,i.inputs[1].dims[2]])];i.inputs.length===3&&d.push(i.inputs[2]);let p=o.kernelShape;(p.length===0||p[0]===0)&&(p=[i.inputs[1].dims[2]]);let k=o.dilations;(k.length===0||k[0]===0)&&(k=[1]);let h=o.strides;(h.length===0||h[0]===0)&&(h=[1]);let w=o.pads;w.length===0&&(w=[0,0]),w=[0,w[0],0,w[1]],h=[1].concat(h),k=[1].concat(k),p=[1].concat(p);let x=o.outputPadding;x=[0].concat(x);let G=t1({...o,pads:w,strides:h,dilations:k,kernelShape:p,outputPadding:x},d);r1(i,d,G,z=>u?[z[0],z[2],z[3]]:[z[0],z[1],z[3]])},N4=(i,o)=>{if(z4(i.inputs,o),i.inputs[0].dims.length===3)Y4(i,o);else{let u=t1(o,i.inputs);r1(i,i.inputs,u)}}}),T4,O4,H4,O6=uA(()=>{yA(),TA(),I0(),OA(),T4=(i,o,u,d)=>{let p=eA.size(o),k=o.length,h=rA("input",i,k),w=hA("output",i,k),x=u.dataType===6?u.getInt32Array()[0]:Number(u.getBigInt64Array()[0]),G=eA.normalizeAxis(x,k),z=M=>{let N=` i32(${h.indicesGet("inputIndices","uniforms.axis")}) `,H=kA("uniforms.input_shape","uniforms.axis",k),S=d.reverse?N+(d.exclusive?" + 1":""):"0",K=d.reverse?H:N+(d.exclusive?"":" + 1");return`
                ${M.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(h,w)}
                ${M.mainStart()}
                  ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${w.offsetToIndices("global_idx")};
                  var sum = ${w.type.value}(0);
                  let first : i32 = ${S};
                  let last : i32 = ${K};
                  for (var i : i32 = first; i < last; i++) {
                    ${h.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${h.getByIndices("inputIndices")};
                  }
                  ${w.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:d.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:i}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},{type:12,data:G},...EA(o,o)]}),getShaderSource:z}},O4=(i,o)=>{let u=i.inputs[0].dims,d=i.inputs[0].dataType,p=i.inputs[1];i.compute(T4(d,u,p,o),{inputs:[0]})},H4=i=>{let o=i.exclusive===1,u=i.reverse===1;return JA({exclusive:o,reverse:u})}}),P4,S4,F4,R4,W4,H6=uA(()=>{yA(),TA(),I0(),OA(),P4=i=>{if(!i||i.length!==1)throw new Error("DepthToSpace requires 1 input.");if(i[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},S4=(i,o,u,d)=>{let p=[];p.push(`fn perm(i: ${d.type.indices}) -> ${u.type.indices} {
    var a: ${u.type.indices};`);for(let k=0;k<o;++k)p.push(u.indicesSet("a",i[k],`i[${k}]`));return p.push("return a;}"),p.join(`
`)},F4=(i,o)=>{let u,d,p,k,h,w,x=o.format==="NHWC",G=o.blocksize,z=o.mode==="DCR";x?([u,d,p,k]=i.dims,h=z?[u,d,p,G,G,k/G**2]:[u,d,p,k/G**2,G,G],w=z?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([u,d,p,k]=[i.dims[0],i.dims[2],i.dims[3],i.dims[1]],h=z?[u,G,G,k/G**2,d,p]:[u,k/G**2,G,G,d,p],w=z?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let M=i.reshape(h),N=M.dims.length,H=i.dataType,S=rA("a",H,N),K=hA("output",H,N),X=V=>`
  ${V.registerUniform("output_size","u32").declareVariables(S,K)}

  ${S4(w,N,S,K)}

  ${V.mainStart()}
    ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${K.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${K.setByOffset("global_idx",S.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${i.dims};${o.blocksize};${o.mode}`,inputDependencies:["rank"]},getRunData:V=>{let W=x?[u,d*G,p*G,k/G**2]:[u,k/G**2,d*G,p*G],j=eA.size(W),l=M.dims,B=eA.sortBasedOnPerm(l,w);return{outputs:[{dims:W,dataType:V[0].dataType}],dispatchGroup:{x:Math.ceil(j/64)},programUniforms:[{type:12,data:j},...EA(l,B)]}},getShaderSource:X}},R4=(i,o)=>{P4(i.inputs),i.compute(F4(i.inputs[0],o))},W4=i=>JA({blocksize:i.blocksize,mode:i.mode,format:i.format})}),gr,It,a1,K4,Z4,L4,V4,i1,U4,X4,J4,P6=uA(()=>{yA(),TA(),I0(),OA(),gr="[a-zA-Z]|\\.\\.\\.",It="("+gr+")+",a1="^"+It+"$",K4="("+It+",)*"+It,Z4="^"+K4+"$",L4=class{constructor(i=-1){this.symbolToIndices=new Map,this.inputIndex=i}addSymbol(i,o){let u=this.symbolToIndices.get(i);u===void 0?u=[o]:u.push(o),this.symbolToIndices.set(i,u)}},V4=class{constructor(i,o){this.equation=o,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[u,d]=o.includes("->")?o.split("->",2):[o,""];if(!u.match(RegExp(Z4)))throw new Error("Invalid LHS term");if(u.split(",").forEach((p,k)=>{let h=i[k].dims.slice();if(!p.match(RegExp(a1)))throw new Error("Invalid LHS term");let w=this.processTerm(p,!0,h,k);this.lhs.push(w)}),d==="")d+=[...this.symbolToInfo.entries()].filter(([p,k])=>k.count===1||p==="...").map(([p])=>p).join("");else if(!d.match(RegExp(It)))throw new Error("Invalid RHS");d.match(RegExp(gr,"g"))?.forEach(p=>{if(p==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let k=this.symbolToInfo.get(p);if(k===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(k.dimValue)}}),this.rhs=this.processTerm(d,!1,this.outputDims)}addSymbol(i,o,u){let d=this.symbolToInfo.get(i);if(d!==void 0){if(d.dimValue!==o&&d.count!==1)throw new Error("Dimension mismatch");d.count++,d.inputIndices.push(u)}else d={count:1,dimValue:o,inputIndices:[u]};this.symbolToInfo.set(i,d)}processTerm(i,o,u,d=-1){let p=u.length,k=!1,h=[],w=0;if(!i.match(RegExp(a1))&&!o&&i!=="")throw new Error("Invalid LHS term");let x=i.match(RegExp(gr,"g")),G=new L4(d);return x?.forEach((z,M)=>{if(z==="..."){if(k)throw new Error("Only one ellipsis is allowed per input term");k=!0;let N=p-x.length+1;if(N<0)throw new Error("Ellipsis out of bounds");if(h=u.slice(w,w+N),this.hasEllipsis){if(this.ellipsisDims.length!==h.length||this.ellipsisDims.toString()!==h.toString())throw new Error("Ellipsis dimensions mismatch")}else if(o)this.hasEllipsis=!0,this.ellipsisDims=h;else throw new Error("Ellipsis must be specified in the LHS");for(let H=0;H<h.length;H++){let S=String.fromCharCode(48+H);G.addSymbol(S,M+H),this.addSymbol(S,u[w++],d)}}else G.addSymbol(z,M+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(z,u[w++],d)}),G}},i1=i=>i+"_max",U4=(i,o,u,d)=>{let p=i.map(G=>G.length).map((G,z)=>rA(`input${z}`,o,G)),k=eA.size(d),h=hA("output",o,d.length),w=[...u.symbolToInfo.keys()].filter(G=>!u.rhs.symbolToIndices.has(G)),x=G=>{let z=[],M="var prod = 1.0;",N="var sum = 0.0;",H="sum += prod;",S=[],K=[],X=[],V=[],W=u.symbolToInfo.size===u.rhs.symbolToIndices.size;u.symbolToInfo.forEach((l,B)=>{if(u.rhs.symbolToIndices.has(B)){let A=u.rhs.symbolToIndices.get(B)?.[0];A!==void 0&&u.lhs.forEach((C,y)=>{if(l.inputIndices.includes(y)){let aA=C.symbolToIndices.get(B);if(aA===void 0)throw new Error("Invalid symbol error");aA.forEach(Q=>{z.push(`${p[y].indicesSet(`input${y}Indices`,Q,h.indicesGet("outputIndices",A))}`)})}})}else u.lhs.forEach((A,C)=>{if(l.inputIndices.includes(C)){let y=A.symbolToIndices.get(B);if(y===void 0)throw new Error("Invalid symbol error");y.forEach(aA=>{S.push(`${p[C].indicesSet(`input${C}Indices`,aA,`${B}`)}`)}),V.push(`prod *= ${p[C].getByIndices(`input${C}Indices`)};`)}}),K.push(`for(var ${B}: u32 = 0; ${B} < uniforms.${i1(B)}; ${B}++) {`),X.push("}")});let j=W?[...z,`let sum = ${p.map((l,B)=>l.getByIndices(`input${B}Indices`)).join(" * ")};`]:[...z,N,...K,...S,M,...V,H,...X];return`
            ${G.registerUniforms(w.map(l=>({name:`${i1(l)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...p,h)}

            ${G.mainStart()}
            ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${h.offsetToIndices("global_idx")};
            ${p.map((l,B)=>`var input${B}Indices: ${p[B].type.indices};`).join(`
`)}
            ${j.join(`
`)};
            ${h.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:u.equation,inputDependencies:i.map(()=>"rank")},getRunData:()=>{let G=w.filter(M=>u.symbolToInfo.has(M)).map(M=>({type:12,data:u.symbolToInfo.get(M)?.dimValue||0}));G.push({type:12,data:k});let z=i.map((M,N)=>[...EA(M)]).reduce((M,N)=>M.concat(N),G);return z.push(...EA(d)),{outputs:[{dims:d,dataType:o}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:z}},getShaderSource:x}},X4=(i,o)=>{let u=new V4(i.inputs,o.equation),d=u.outputDims,p=i.inputs.map((k,h)=>k.dims);i.compute(U4(p,i.inputs[0].dataType,u,d))},J4=i=>{let o=i.equation.replace(/\s+/g,"");return JA({equation:o})}}),j4,s1,q4,_4,$4,S6=uA(()=>{yA(),TA(),OA(),j4=i=>{if(!i||i.length!==2)throw new Error("Expand requires 2 input.");let o=i[0].dims,u=Array.from(i[1].getBigInt64Array(),Number),d=u.length<o.length?0:u.length-o.length,p=o.length<u.length?0:o.length-u.length;for(;d<u.length&&p<o.length;++d,++p)if(u[d]!==o[p]&&u[d]!==1&&o[p]!==1)throw new Error("Expand requires shape to be broadcastable to input")},s1=(i,o)=>{let u=i.length-o.length,d=[];for(let p=0;p<u;++p)d.push(i[p]);for(let p=0;p<o.length;++p)d.push(o[p]===1?i[p+u]:o[p]);return d},q4=(i,o)=>i.length>o.length?s1(i,o):s1(o,i),_4=i=>{let o=i[0].dims,u=Array.from(i[1].getBigInt64Array(),Number),d=q4(o,u),p=i[0].dataType,k=p===9||eA.size(o)===1,h=p===9||o.length>0&&o[o.length-1]%4===0?4:1,w=k||d.length>0&&d[d.length-1]%4===0?4:1,x=Math.ceil(eA.size(d)/w),G=M=>{let N=rA("input",p,o.length,h),H=hA("output",p,d.length,w),S;if(p===9){let K=(X,V,W="")=>`
          let outputIndices${V} = ${H.offsetToIndices(`outputOffset + ${V}u`)};
          let offset${V} = ${N.broadcastedIndicesToOffset(`outputIndices${V}`,H)};
          let index${V} = offset${V} / 4u;
          let component${V} = offset${V} % 4u;
          ${X}[${V}] = ${W}(${N.getByOffset(`index${V}`)}[component${V}]);
        `;S=`
        let outputOffset = global_idx * ${w};
        var data = vec4<u32>(0);
        ${K("data",0,"u32")}
        ${K("data",1,"u32")}
        ${K("data",2,"u32")}
        ${K("data",3,"u32")}
        ${H.setByOffset("global_idx","data")}
      }`}else S=`
        let outputIndices = ${H.offsetToIndices(`global_idx * ${w}`)};
        let inputOffset = ${N.broadcastedIndicesToOffset("outputIndices",H)};
        let data = ${H.type.value}(${N.getByOffset(`inputOffset / ${h}`)});
        ${H.setByOffset("global_idx","data")}
      }`;return`
    ${M.registerUniform("vec_size","u32").declareVariables(N,H)}
    ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${S}`},z=[{type:12,data:x},...EA(o,d)];return{name:"Expand",shaderCache:{hint:`${d.length};${h}${w}`,inputDependencies:["rank"]},getShaderSource:G,getRunData:()=>({outputs:[{dims:d,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:z})}},$4=i=>{j4(i.inputs),i.compute(_4(i.inputs),{inputs:[0]})}}),Ag,eg,F6=uA(()=>{yA(),TA(),OA(),Wa(),Ag=i=>{let o=i[0].dataType,u=eA.size(i[0].dims),d=eA.size(i[1].dims),p=d%4===0,k=h=>{let w=rA("x",o,[1],4),x=rA("bias",o,[1],4),G=hA("y",o,[1],4),z=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],M=H=>`
      let bias${H}_offset: u32 = (global_idx * 4 + ${H}) % uniforms.bias_size;
      let bias${H} = ${x.getByOffset(`bias${H}_offset / 4`)}[bias${H}_offset % 4];`,N=p?`
      let bias = ${x.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${M(0)}${M(1)}${M(2)}${M(3)}
      let bias = ${w.type.value}(bias0, bias1, bias2, bias3);`;return`${h.registerUniforms(z).declareVariables(w,x,G)}

    ${Fa(Z0(o))}

    ${h.mainStart(N2)}
      ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${w.getByOffset("global_idx")};
      ${N}
      let x_in = x + bias;
      ${G.setByOffset("global_idx",Ra("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${p}`,inputDependencies:["type","type"]},getShaderSource:k,getRunData:h=>({outputs:[{dims:h[0].dims,dataType:h[0].dataType}],programUniforms:[{type:12,data:Math.ceil(u/4)},{type:12,data:d}],dispatchGroup:{x:Math.ceil(u/N2/4)}})}},eg=i=>{i.inputs.length<2||eA.size(i.inputs[1].dims)===0?To(i):i.compute(Ag(i.inputs))}}),tg,rg,ag,ig,R6=uA(()=>{yA(),TA(),I0(),OA(),tg=i=>{if(!i||i.length!==2)throw new Error("Gather requires 2 inputs.")},rg=(i,o)=>{let u=i[0].dims,d=i[1].dims,p=u.length,k=eA.normalizeAxis(o.axis,p),h=u.slice(0);h.splice(k,1,...d);let w=u[k],x=i[0].dataType===9?4:1,G=Math.ceil(eA.size(h)/x),z=[{type:12,data:G},{type:6,data:w},{type:12,data:k},...EA(i[0].dims,i[1].dims,h)],M=N=>{let H=rA("data",i[0].dataType,i[0].dims.length,x),S=rA("inputIndices",i[1].dataType,i[1].dims.length),K=hA("output",i[0].dataType,h.length,x),X=W=>{let j=d.length,l=`var indicesIndices${W}  = ${S.type.indices}(0);`;for(let B=0;B<j;B++)l+=`${j>1?`indicesIndices${W}[${B}]`:`indicesIndices${W}`} = ${h.length>1?`outputIndices${W}[uniforms.axis + ${B}]`:`outputIndices${W}`};`;l+=`
          var idx${W} = ${S.getByIndices(`indicesIndices${W}`)};
          if (idx${W} < 0) {
            idx${W} = idx${W} + uniforms.axisDimLimit;
          }
          var dataIndices${W} : ${H.type.indices};
        `;for(let B=0,A=0;B<p;B++)B===k?(l+=`${p>1?`dataIndices${W}[${B}]`:`dataIndices${W}`} = u32(idx${W});`,A+=j):(l+=`${p>1?`dataIndices${W}[${B}]`:`dataIndices${W}`} = ${h.length>1?`outputIndices${W}[${A}]`:`outputIndices${W}`};`,A++);return l},V;if(i[0].dataType===9){let W=(j,l,B="")=>`
          let outputIndices${l} = ${K.offsetToIndices(`outputOffset + ${l}u`)};
          ${X(l)};
          let offset${l} = ${H.indicesToOffset(`dataIndices${l}`)};
          let index${l} = offset${l} / 4u;
          let component${l} = offset${l} % 4u;
          ${j}[${l}] = ${B}(${H.getByOffset(`index${l}`)}[component${l}]);
        `;V=`
        let outputOffset = global_idx * ${x};
        var value = vec4<u32>(0);
        ${W("value",0,"u32")}
        ${W("value",1,"u32")}
        ${W("value",2,"u32")}
        ${W("value",3,"u32")}
        ${K.setByOffset("global_idx","value")}
      `}else V=`
      let outputIndices = ${K.offsetToIndices("global_idx")};
      ${X("")};
      let value = ${H.getByIndices("dataIndices")};
      ${K.setByOffset("global_idx","value")};
      `;return`
      ${N.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(H,S,K)}
      ${N.mainStart()}
        ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${V}
      }`};return{name:"Gather",shaderCache:{hint:o.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(G/64)},programUniforms:z}),getShaderSource:M}},ag=i=>JA({axis:i.axis}),ig=(i,o)=>{let u=i.inputs;tg(u),i.compute(rg(i.inputs,o))}}),sg,ng,og,W6=uA(()=>{yA(),TA(),OA(),sg=(i,o,u,d,p,k,h,w,x)=>{let G=[{type:12,data:k},{type:12,data:d},{type:12,data:p},{type:12,data:u},{type:12,data:h},{type:12,data:w},{type:12,data:x}],z=[k];G.push(...EA(o.dims,z));let M=N=>{let H=rA("indices_data",o.dataType,o.dims.length),S=hA("input_slice_offsets_data",12,1,1),K=[H,S],X=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:p.length},{name:"sizes_from_slice_dims_data",type:"u32",length:u.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${N.registerUniforms(X).declareVariables(...K)}
  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${p.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${u.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return i.compute({name:"computeSliceOffsets",shaderCache:{hint:`${p.length}_${u.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:z,dataType:i.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:G}),getShaderSource:M},{inputs:[o],outputs:[-1]})[0]},ng=(i,o)=>{let u=i.inputs,d=u[0].dims,p=u[0].dataType,k=u[1].dims,h=k[k.length-1],w=eA.sizeToDimension(k,k.length-1),x=eA.sizeFromDimension(d,o.batchDims+h),G=eA.sizeToDimension(d,o.batchDims),z=eA.sizeFromDimension(d,o.batchDims),M=w/G,N=new Array(h),H=x;for(let l=0;l<h;++l)N[h-1-l]=H,H*=d[o.batchDims+h-1-l];let S=sg(i,u[1],N,o.batchDims,d,w,M,z,h),K=o.batchDims+h;if(K>d.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let X=k.slice(0,-1).concat(d.slice(K)),V=eA.size(X),W=[{type:12,data:V},{type:12,data:x},...EA(u[0].dims,S.dims,X)],j=l=>{let B=rA("data",u[0].dataType,u[0].dims.length),A=rA("slice_offsets",12,S.dims.length),C=hA("output",u[0].dataType,X.length);return`
          ${l.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(B,A,C)}
            ${l.mainStart()}
            ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};i.compute({name:"GatherND",shaderCache:{hint:o.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:X,dataType:p}],dispatchGroup:{x:Math.ceil(V/64)},programUniforms:W}),getShaderSource:j},{inputs:[u[0],S]})},og=i=>({batchDims:i.batch_dims,cacheKey:""})}),gg,fg,ug,lg,K6=uA(()=>{yA(),TA(),I0(),OA(),gg=(i,o)=>{if(i.length<3||i.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let u=eA.normalizeAxis(o.quantizeAxis,i[0].dims.length),d=o.blockSize,p=i[0],k=i[2],h=i.length===4?i[3]:void 0;if(k.dims.length!==p.dims.length||!p.dims.map((w,x)=>x===u?Math.ceil(w/d)===k.dims[x]:w===k.dims[x]).reduce((w,x)=>w&&x,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(h){if(h.dataType!==p.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(h.dims.length!==k.dims.length||!h.dims.map((w,x)=>w===k.dims[x]).reduce((w,x)=>w&&x,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},fg=(i,o)=>{let u=i[0].dims,d=i[1].dims,p=u.length,k=eA.normalizeAxis(o.gatherAxis,p),h=eA.normalizeAxis(o.quantizeAxis,p),w=u.slice(0);w.splice(k,1,...d);let x=eA.size(w),G=i[2].dataType,z=i[0].dataType===22,M=[{type:12,data:x},{type:12,data:h},{type:12,data:k},{type:12,data:o.blockSize},...EA(...i.map((H,S)=>H.dims),w)],N=H=>{let S=rA("data",i[0].dataType,i[0].dims.length),K=rA("inputIndices",i[1].dataType,i[1].dims.length),X=rA("scales",i[2].dataType,i[2].dims.length),V=i.length>3?rA("zeroPoint",i[3].dataType,i[3].dims.length):void 0,W=hA("output",G,w.length),j=[S,K,X];V&&j.push(V);let l=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${H.registerUniforms(l).declareVariables(...j,W)}
        ${H.mainStart()}
        let output_indices = ${W.offsetToIndices("global_idx")};
        var indices_indices = ${K.type.indices}(0);
        ${d.length>1?`
          for (var i: u32 = 0; i < ${d.length}; i++) {
            let index = ${W.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${K.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${W.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${S.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${W.indicesGet("output_indices","i")};
          ${S.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${K.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${u[k]};
        }
        ${S.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${w.length}; i++) {
          let index = ${W.indicesGet("output_indices",`i + ${d.length} - 1`)};
          ${S.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${S.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${S.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${z?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${X.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${X.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${X.getByIndices("scale_indices")};
        ${V?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${V.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${V.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${z?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${Z0(G)}(quantized_data - zero_point) * scale;
        ${W.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${o.cacheKey};${i.filter((H,S)=>S!==1).map(H=>H.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:i.length},(H,S)=>"rank")},getRunData:()=>({outputs:[{dims:w,dataType:G}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:M}),getShaderSource:N}},ug=(i,o)=>{let u=i.inputs;gg(u,o),i.compute(fg(i.inputs,o))},lg=i=>JA({blockSize:i.blockSize,gatherAxis:i.gatherAxis,quantizeAxis:i.quantizeAxis})}),Cg,cg,dg,bg,Z6=uA(()=>{yA(),TA(),I0(),OA(),Cg=i=>{if(!i||i.length!==2)throw new Error("GatherElements requires 2 inputs.");if(i[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(i[0].dims.length!==i[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},cg=(i,o)=>{let u=i[0].dims,d=i[0].dataType,p=u.length,k=i[1].dims,h=i[1].dataType,w=eA.normalizeAxis(o.axis,p),x=u[w],G=k.slice(0),z=eA.size(G),M=rA("input",d,p),N=rA("indicesInput",h,k.length),H=hA("output",d,G.length),S=[{type:12,data:z},{type:6,data:x},{type:12,data:w}];return S.push(...EA(u,k,G)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:G,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(z/64)},programUniforms:S}),getShaderSource:K=>`
      ${K.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(M,N,H)}
      ${K.mainStart()}
      ${K.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${H.offsetToIndices("global_idx")};

      var idx = ${N.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${M.type.indices}(outputIndices);
      ${M.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${M.getByIndices("inputIndices")};

      ${H.setByOffset("global_idx","value")};
  }`}},dg=i=>JA({axis:i.axis}),bg=(i,o)=>{let u=i.inputs;Cg(u),i.compute(cg(i.inputs,o))}}),Ig,pg,hg,mg,L6=uA(()=>{yA(),TA(),OA(),Ig=i=>{if(!i)throw new Error("Input is missing");if(i.length<2||i.length>3)throw new Error("Invaid input number.");if(i.length===3&&i[2].dims.length>2)throw new Error("Invalid input shape of C");if(i[0].dataType!==i[1].dataType||i.length===3&&i[0].dataType!==i[2].dataType)throw new Error("Input types are mismatched")},pg=(i,o)=>{let u=i[0].dims.slice(),d=i[1].dims.slice(),[p,k,h]=Gs.getShapeOfGemmResult(u,o.transA,d,o.transB,i.length===3?i[2].dims:void 0),w=[p,k];if(!w)throw new Error("Can't use gemm on the given tensors");let x=16,G=Math.ceil(k/x),z=Math.ceil(p/x),M=!0,N=eA.size(w),H=[{type:12,data:M?G:N},{type:12,data:p},{type:12,data:k},{type:12,data:h},{type:1,data:o.alpha},{type:1,data:o.beta}],S=["type","type"];i.length===3&&(H.push(...EA(i[2].dims)),S.push("rank")),H.push(...EA(w));let K=V=>{let W="";o.transA&&o.transB?W="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":o.transA&&!o.transB?W="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!o.transA&&o.transB?W="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!o.transA&&!o.transB&&(W="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let j=o.alpha===1?"":"value *= uniforms.alpha;",l=rA("a",i[0].dataType,i[0].dims),B=rA("b",i[1].dataType,i[1].dims),A=l.type.value,C=null,y=[l,B];i.length===3&&(C=rA("c",i[2].dataType,i[2].dims.length),y.push(C));let aA=hA("output",i[0].dataType,w.length);y.push(aA);let Q=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${V.registerUniforms(Q).declareVariables(...y)}

  ${V.mainStart()}
    ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${A}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${W}
    }

    ${j}
    ${C!=null?`let cOffset = ${C.broadcastedIndicesToOffset("vec2(m, n)",aA)}; value += ${A}(uniforms.beta) * ${C.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},X=V=>{let W=rA("a",i[0].dataType,i[0].dims),j=rA("b",i[1].dataType,i[1].dims),l=null,B=[W,j];i.length===3&&(l=rA("c",i[2].dataType,i[2].dims.length),B.push(l));let A=hA("output",i[0].dataType,w.length);B.push(A);let C=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],y="",aA="";o.transA&&o.transB?(aA=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${W.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${j.type.value}(0);
      }
      `,y="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):o.transA&&!o.transB?(aA=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${W.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${j.type.value}(0);
      }
      `,y="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!o.transA&&o.transB?(aA=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${W.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${j.type.value}(0);
      }
      `,y="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!o.transA&&!o.transB&&(aA=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${W.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${j.type.value}(0);
      }
      `,y="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let Q=o.alpha===1?"":"value *= uniforms.alpha;";return`
  ${V.registerUniforms(C).declareVariables(...B)}
  var<workgroup> tile_a: array<array<${W.type.storage}, ${x}>, ${x}>;
  var<workgroup> tile_b: array<array<${j.type.storage}, ${x}>, ${x}>;
  ${V.mainStart([x,x,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${x};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${x};
    let num_tiles = (uniforms.K - 1) / ${x} + 1;
    var k_start = 0u;
    var value = ${A.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${aA}
      k_start = k_start + ${x};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${x}; k++) {
        ${y}
      }
      workgroupBarrier();
    }

    ${Q}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${l!=null?`let cOffset = ${l.broadcastedIndicesToOffset("vec2(m, n)",A)}; value += ${A.type.value}(uniforms.beta) * ${l.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return M?{name:"GemmShared",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:w,dataType:i[0].dataType}],dispatchGroup:{x:G*z},programUniforms:H}),getShaderSource:X}:{name:"Gemm",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:w,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:H}),getShaderSource:K}},hg=i=>{let o=i.transA,u=i.transB,d=i.alpha,p=i.beta;return{transA:o,transB:u,alpha:d,beta:p,cacheKey:`${i.transA};${i.transB};${i.alpha===1}`}},mg=(i,o)=>{Ig(i.inputs),i.compute(pg(i.inputs,o))}}),ve,He,l2,C2,kg,wg,Bg,Eg,xg,vg,Gg,Qg,yg,Dg,V6=uA(()=>{yA(),TA(),I0(),OA(),[ve,He,l2,C2]=[0,1,2,3],kg=i=>{if(i[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(i[0].dims.length!==i[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(i[0].dims.length-2!==i[1].dims[i[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${i[0].dims.length-2}`);if(i[0].dims[0]!==i[1].dims[0])throw new Error("grid batch size must match input batch size")},wg=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,Bg=i=>`
  fn gs_bicubic_interpolate(p: mat4x4<${i}>, x: f32, y: f32) -> ${i} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${i}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Eg=i=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${i.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,xg=i=>`
  ${i.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,vg=(i,o,u)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${o} {
     var pixel = ${o}(0);
     var indices = vec4<u32>(0);
     indices[${ve}] = batch;
     indices[${He}] = channel;`+(()=>{switch(u.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${l2}] = u32(r);
            indices[${C2}] = u32(c);
          } else {
            return ${o}(0);
          }
        `;case"border":return`
          indices[${l2}] = u32(clamp(r, 0, H - 1));
          indices[${C2}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${l2}] = gs_reflect(r, border[1], border[3]);
          indices[${C2}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${u.paddingMode} is not supported`)}})()+`
    return ${i.getByIndices("indices")};
  }
`,Gg=(i,o,u)=>(()=>{switch(u.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${ve}], indices[${He}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${ve}], indices[${He}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${ve}], indices[${He}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${ve}], indices[${He}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${ve}], indices[${He}], border);

          let dx2 = ${o}(f32(x2) - x);
          let dx1 = ${o}(x - f32(x1));
          let dy2 = ${o}(f32(y2) - y);
          let dy1 = ${o}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${o}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${ve}], indices[${He}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${u.mode} is not supported`)}})()+`${i.setByOffset("global_idx","result")}`,Qg=(i,o)=>{let u=rA("x",i[0].dataType,i[0].dims.length),d=[i[1].dims[0],i[1].dims[1],i[1].dims[2]],p=rA("grid",i[1].dataType,d.length,2),k=[i[0].dims[0],i[0].dims[1],i[1].dims[1],i[1].dims[2]];o.format==="NHWC"&&(k=[i[0].dims[0],i[1].dims[1],i[1].dims[2],i[0].dims[3]],[ve,He,l2,C2]=[0,3,1,2]);let h=hA("output",i[0].dataType,k.length),w=u.type.value,x=eA.size(k),G=[{type:12,data:x},...EA(i[0].dims,d,k)],z=M=>`
  ${M.registerUniform("output_size","u32").declareVariables(u,p,h)}
  ${wg}
  ${Bg(w)}
  ${Eg(o)}
  ${xg(o)}
  ${vg(u,w,o)}

  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${l2}]);
      let W_in = i32(uniforms.x_shape[${C2}]);

      ${o.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${h.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${ve}], indices[${l2}], indices[${C2}]);
      let nxy = ${p.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${Gg(h,w,o)}
  }`;return{name:"GridSample",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:["type","type"]},getRunData:M=>{let N=eA.size(k);return{outputs:[{dims:k,dataType:M[0].dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:G}},getShaderSource:z}},yg=(i,o)=>{kg(i.inputs),i.compute(Qg(i.inputs,o))},Dg=i=>JA({alignCorners:i.align_corners,mode:i.mode,paddingMode:i.padding_mode,format:i.format})}),X0,Mg,zg,n1,Yg,pt,Ng,Tg=uA(()=>{yA(),TA(),I0(),Ga(),Pa(),OA(),Xe(),X0=(i,o)=>i.length>o&&i[o].dims.length>0?i[o]:void 0,Mg=(i,o)=>{let u=i[0],d=X0(i,1),p=X0(i,2),k=X0(i,3),h=X0(i,4),w=X0(i,5),x=X0(i,6),G=X0(i,7);if(u.dims.length!==3&&u.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let z=u.dims[0],M=u.dims[1],N=u.dims.length===3?u.dims[2]:o.numHeads*u.dims[4],H=M,S=0,K=0,X=Math.floor(N/o.numHeads);if(x&&G&&eA.size(x.dims)&&eA.size(G.dims)){if(x.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(x.dims[0]!==z||x.dims[1]!==o.numHeads||x.dims[3]!==X)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(G.dims[0]!==z||G.dims[1]!==o.numHeads||G.dims[3]!==X)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(x.dims[2]!==G.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(G.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');S=x.dims[2],K=x.dims[2]}else if(x&&eA.size(x.dims)||G&&eA.size(G.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let V;if(d&&eA.size(d.dims)>0){if(u.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(d.dims.length<3||d.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(u.dims[0]!==d.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(d.dims.length===3){if(d.dims[2]!==u.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');V=2,H=d.dims[1]}else if(d.dims.length===5){if(d.dims[2]!==o.numHeads||d.dims[3]!==2||d.dims[4]!==X)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(p)throw new Error('Expect "value" be none when "key" has packed kv format.');V=5,H=d.dims[1]}else{if(d.dims[1]!==o.numHeads||d.dims[3]!==X)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');V=0,H=d.dims[2]}}else{if(u.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(u.dims[2]!==o.numHeads||u.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');V=3}if(k&&eA.size(k.dims)>0){if(k.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(d&&d.dims.length===5&&d.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let W=S+H,j=0;if(h&&eA.size(h.dims)>0){j=8;let C=h.dims;throw C.length===1?C[0]===z?j=1:C[0]===3*z+2&&(j=3):C.length===2&&C[0]===z&&C[1]===W&&(j=5),j===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let l=!1,B=N;if(p&&eA.size(p.dims)>0){if(p.dims.length!==3&&p.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(u.dims[0]!==p.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(p.dims.length===3){if(H!==p.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');B=p.dims[2]}else{if(H!==p.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');B=p.dims[1]*p.dims[3],l=!0}}let A=!1;if(h&&eA.size(h.dims)>0)throw new Error("Key padding mask is not supported");if(w&&eA.size(w.dims)>0){if(w.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(w.dims[0]!==z||w.dims[1]!==o.numHeads||w.dims[2]!==M||w.dims[3]!==W)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:z,sequenceLength:M,pastSequenceLength:S,kvSequenceLength:H,totalSequenceLength:W,maxSequenceLength:K,inputHiddenSize:0,hiddenSize:N,vHiddenSize:B,headSize:X,vHeadSize:Math.floor(B/o.numHeads),numHeads:o.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:o.maskFilterValue,maskType:j,scale:o.scale,broadcastResPosBias:A,passPastInKv:l,qkvFormat:V}},zg=i=>JA({...i}),n1=JA({perm:[0,2,1,3]}),Yg=(i,o,u,d,p,k,h)=>{let w=[d,p,k],x=eA.size(w),G=[{type:12,data:x},{type:12,data:h},{type:12,data:k}],z=M=>{let N=hA("qkv_with_bias",o.dataType,w),H=rA("qkv",o.dataType,w),S=rA("bias",u.dataType,w),K=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${M.registerUniforms(K).declareVariables(H,S,N)}
  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return i.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:w,dataType:o.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:G}),getShaderSource:z},{inputs:[o,u],outputs:[-1]})[0]},pt=(i,o,u,d,p,k,h,w)=>{let x=k;if(h&&eA.size(h.dims)>0){if(d===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return x=Yg(i,k,h,o,d,u*p,w),x=x.reshape([o,d,u,p]),u===1||d===1?x:i.compute(ne(x,n1.perm),{inputs:[x],outputs:[-1]})[0]}else return k.dims.length===3&&(x=k.reshape([o,d,u,p])),u===1||d===1?x:i.compute(ne(x,n1.perm),{inputs:[x],outputs:[-1]})[0]},Ng=(i,o)=>{let u=Mg(i.inputs,o),d=i.inputs[0],p=X0(i.inputs,1),k=X0(i.inputs,2),h=X0(i.inputs,3),w=X0(i.inputs,4),x=X0(i.inputs,5),G=X0(i.inputs,6),z=X0(i.inputs,7);if(d.dims.length===5)throw new Error("Packed QKV is not implemented");if(p?.dims.length===5)throw new Error("Packed KV is not implemented");let M=p&&k&&p.dims.length===4&&k.dims.length===4,N=pt(i,u.batchSize,u.numHeads,u.sequenceLength,u.headSize,d,h,0);if(M)return Ct(i,N,p,k,w,void 0,G,z,x,u);if(!p||!k)throw new Error("key and value must be provided");let H=pt(i,u.batchSize,u.numHeads,u.kvSequenceLength,u.headSize,p,h,u.hiddenSize),S=pt(i,u.batchSize,u.numHeads,u.kvSequenceLength,u.vHeadSize,k,h,2*u.hiddenSize);Ct(i,N,H,S,w,void 0,G,z,x,u)}}),Og,Hg,Pg,Sg,o1,Fg,Rg,Wg=uA(()=>{yA(),TA(),I0(),OA(),Og=i=>{if(!i||i.length<1)throw new Error("too few inputs")},Hg=(i,o)=>{let u=[],d=o.numOutputs;return i[1].dims[0]>0&&(i[1].getBigInt64Array().forEach(p=>u.push(Number(p))),d=u.length),JA({numOutputs:d,axis:o.axis,splitSizes:u})},Pg=i=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${i}u; i += 1u ) {
    if (index < ${kA("uniforms.size_in_split_axis","i",i)}) {
        return i;
    }
    }
    return ${i}u;
}`,Sg=i=>{let o=i.length,u=[];for(let d=0;d<o;++d){let p=i[d].setByIndices("indices","input[global_idx]");o===1?u.push(p):d===0?u.push(`if (output_number == ${d}u) { ${p} }`):d===o-1?u.push(`else { ${p} }`):u.push(`else if (output_number == ${d}) { ${p} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${i[0].type.indices}, global_idx: u32) {
        ${u.join(`
`)}
      }`},o1=(i,o)=>{let u=i[0].dims,d=eA.size(u),p=i[0].dataType,k=eA.normalizeAxis(o.axis,u.length),h=new Array(o.numOutputs),w=rA("input",p,u.length),x=new Array(o.numOutputs),G=[],z=[],M=0,N=[{type:12,data:d}];for(let S=0;S<o.numOutputs;S++){M+=o.splitSizes[S],x[S]=M;let K=u.slice();K[k]=o.splitSizes[S],z.push(K),h[S]=hA(`output${S}`,p,K.length),G.push({dims:z[S],dataType:i[0].dataType})}N.push({type:12,data:x},...EA(u,...z));let H=S=>`
  ${S.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",x.length).declareVariables(w,...h)}
  ${Pg(x.length)}
  ${Sg(h)}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${w.offsetToIndices("global_idx")};
    var index = ${w.indicesGet("indices",k)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${kA("uniforms.size_in_split_axis","output_number - 1u",x.length)};
      ${w.indicesSet("indices",k,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getShaderSource:H,getRunData:()=>({outputs:G,dispatchGroup:{x:Math.ceil(d/64)},programUniforms:N})}},Fg=(i,o)=>{Og(i.inputs);let u=i.inputs.length===1?o:Hg(i.inputs,o);i.compute(o1(i.inputs,u),{inputs:[0]})},Rg=i=>{let o=i.axis,u=i.splitSizes,d=i.numOutputs<0?u.length:i.numOutputs;if(d!==u.length)throw new Error("numOutputs and splitSizes length must be equal");return JA({axis:o,numOutputs:d,splitSizes:u})}}),Kg,fr,Zg,Lg=uA(()=>{yA(),TA(),I0(),OA(),Kg=(i,o)=>{let[u,d,p,k]=i,{numHeads:h,rotaryEmbeddingDim:w}=o;if(u.dims.length!==3&&u.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${u.dims.length}`);if(!eA.areEqual(d.dims,[])&&!eA.areEqual(d.dims,[1])&&d.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${d.dims.length}`);if(p.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${p.dims.length}`);if(k.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${k.dims.length}`);if(!eA.areEqual(p.dims,k.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(w>0&&h===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let x=u.dims[0],G=u.dims[u.dims.length-2],z=p.dims[0],M=eA.sizeFromDimension(u.dims,1)/G,N=w===0?p.dims[1]*2:M/h;if(w>N)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(d.dims.length===2){if(x!==d.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${d.dims[0]}`);if(G!==d.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${d.dims[1]}`)}if(N/2!==p.dims[1]&&w/2!==p.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${p.dims[1]}`);if(G>z)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},fr=(i,o)=>{let{interleaved:u,numHeads:d,rotaryEmbeddingDim:p,scale:k}=o,h=i[0].dims[0],w=eA.sizeFromDimension(i[0].dims,1),x=i[0].dims[i[0].dims.length-2],G=w/x,z=i[2].dims[1],M=p===0?z*2:G/d,N=new Array(h,x,G/M,M-z),H=eA.computeStrides(N),S=[{type:1,data:k},{type:12,data:N},{type:12,data:H},...i[0].dims.length===3?new Array({type:12,data:[w,G,M,1]}):[],...i[0].dims.length===4?new Array({type:12,data:[w,M,x*M,1]}):[],...EA(i[0].dims,i[1].dims,i[2].dims,i[3].dims,i[0].dims)],K=X=>{let V=rA("input",i[0].dataType,i[0].dims.length),W=rA("position_ids",i[1].dataType,i[1].dims.length),j=rA("cos_cache",i[2].dataType,i[2].dims.length),l=rA("sin_cache",i[3].dataType,i[3].dims.length),B=hA("output",i[0].dataType,i[0].dims.length);return X.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:N.length},{name:"global_strides",type:"u32",length:H.length},{name:"input_output_strides",type:"u32",length:H.length}]),`
        ${X.declareVariables(V,W,j,l,B)}

        ${X.mainStart(N2)}
          let half_rotary_emb_dim = uniforms.${j.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${X.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${W.broadcastedIndicesToOffset("bsnh.xy",hA("",W.type.tensor,2))};
            let position_id =
                u32(${W.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${u});
            let j = i + select(half_rotary_emb_dim, 1, ${u});
            let re = ${V.getByOffset("i")} * ${j.get("position_id","bsnh[3]")} -
                ${V.getByOffset("j")} * ${l.get("position_id","bsnh[3]")};
            ${B.setByOffset("i","re")}
            let im = ${V.getByOffset("i")} * ${l.get("position_id","bsnh[3]")} +
                ${V.getByOffset("j")} * ${j.get("position_id","bsnh[3]")};
            ${B.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${B.setByOffset("k",V.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:JA({interleaved:u}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:K,getRunData:()=>({outputs:[{dims:i[0].dims,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(eA.size(N)/N2)},programUniforms:S})}},Zg=(i,o)=>{Kg(i.inputs,o),i.compute(fr(i.inputs,o))}}),Vg,Ug,g1,Xg,Jg,U6=uA(()=>{I0(),yA(),Pa(),Tg(),Wg(),Xe(),Lg(),OA(),Vg=(i,o)=>{if(o.doRotary&&i.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let u=i[0],d=i[1],p=i[2],k=i[3],h=i[4];if(o.doRotary!==0&&i.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(o.localWindowSize!==-1)throw new Error("Local attention is not supported");if(o.softcap!==0)throw new Error("Softcap is not supported");if(o.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(o.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(u.dims.length!==3&&u.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let w=!1,x=u.dims[0],G=u.dims[1],z=u.dims.length===3?w?u.dims[2]/3:u.dims[2]:o.numHeads*u.dims[4],M=G,N=0,H=!d||d.dims.length===0,S=Math.floor(H?z/(o.numHeads+2*o.kvNumHeads):z/o.numHeads);H&&(z=S*o.numHeads);let K=k&&k.dims.length!==0,X=h&&h.dims.length!==0;if(K&&k.dims.length===4&&k.dims[0]===x&&k.dims[1]!==o.kvNumHeads&&k.dims[2]===o.kvNumHeads&&k.dims[3]===S)throw new Error("BSNH pastKey/pastValue is not supported");if(K&&X){if(k.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(h.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');N=k.dims[2]}else if(K||X)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let V=1;if(d&&d.dims.length>0){if(u.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(d.dims.length<3||d.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(u.dims[0]!==d.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(d.dims.length===3){if(u.dims[2]%d.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');M=d.dims[1]}else if(d.dims.length===5){if(d.dims[2]!==o.numHeads||d.dims[3]!==2||d.dims[4]!==S)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(p)throw new Error('Expect "value" be none when "key" has packed kv format.');M=d.dims[1]}else{if(d.dims[1]!==o.numHeads||d.dims[3]!==S)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');M=d.dims[2]}}else{if(u.dims.length!==3&&u.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(u.dims.length===5&&(u.dims[2]!==o.numHeads||u.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');V=3}let W=0,j=!1,l=o.kvNumHeads?S*o.kvNumHeads:z;if(p&&p.dims.length>0){if(p.dims.length!==3&&p.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(u.dims[0]!==p.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(p.dims.length===3){if(M!==p.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');l=p.dims[2]}else{if(M!==p.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');l=p.dims[1]*p.dims[3],j=!0}}let B=i.length>4?i[5]:void 0;if(B&&B.dims.length!==1&&B.dims[0]!==x)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:x,sequenceLength:G,pastSequenceLength:N,kvSequenceLength:M,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:z,vHiddenSize:l,headSize:S,vHeadSize:Math.floor(l/o.kvNumHeads),numHeads:o.numHeads,kvNumHeads:o.kvNumHeads,nReps:o.numHeads/o.kvNumHeads,pastPresentShareBuffer:!1,maskType:W,scale:o.scale,broadcastResPosBias:!1,passPastInKv:j,qkvFormat:V}},Ug=JA({perm:[0,2,1,3]}),g1=(i,o,u)=>{let d=o,p=u.kvNumHeads;return o.dims.length===3&&u.kvSequenceLength!==0&&(d=o.reshape([u.batchSize,u.kvSequenceLength,p,u.headSize]),d=i.compute(ne(d,Ug.perm),{inputs:[d],outputs:[-1]})[0]),d},Xg=(i,o,u,d)=>{let p=7,k=["type","type"],h=[i*o],w=i*o,x=[{type:12,data:w},{type:12,data:o},{type:12,data:i}],G=z=>{let M=rA("seq_lens",u.dataType,u.dims),N=rA("total_seq_lens",d.dataType,d.dims),H=hA("pos_ids",p,h),S=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${z.registerUniforms(S).declareVariables(M,N,H)}
  ${z.mainStart()}
    ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${N.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${M.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${H.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${H.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${H.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${i};${o}`,inputDependencies:k},getRunData:()=>({outputs:[{dims:h,dataType:p}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:x}),getShaderSource:G}},Jg=(i,o)=>{let u=Vg(i.inputs,o);if(i.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(i.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let d=i.inputs[0],p=i.inputs[1]&&i.inputs[1].dims.length>0?i.inputs[1]:void 0,k=i.inputs[2]&&i.inputs[2].dims.length>0?i.inputs[2]:void 0,h=i.inputs[3]&&i.inputs[3].dims.length!==0?i.inputs[3]:void 0,w=i.inputs[4]&&i.inputs[4].dims.length!==0?i.inputs[4]:void 0,x=i.inputs.length>4?i.inputs[5]:void 0,G=i.inputs.length>5?i.inputs[6]:void 0,z=u.kvNumHeads?u.kvNumHeads:u.numHeads,M=JA({axis:2,numOutputs:3,splitSizes:[u.numHeads*u.headSize,z*u.headSize,z*u.headSize]}),[N,H,S]=!p&&!k?i.compute(o1([d],M),{inputs:[d],outputs:[-1,-1,-1]}):[d,p,k],K,X;if(o.doRotary){let l=i.compute(Xg(u.batchSize,u.sequenceLength,x,G),{inputs:[x,G],outputs:[-1]})[0],B=i.inputs[7],A=i.inputs[8],C=JA({interleaved:o.rotaryInterleaved!==0,numHeads:u.numHeads,rotaryEmbeddingDim:0,scale:o.scale}),y=[N,l,B,A],aA=[-1];K=i.compute(fr(y,C),{inputs:y,outputs:aA})[0],y.splice(0,1,H);let Q=JA({interleaved:o.rotaryInterleaved!==0,numHeads:u.kvNumHeads,rotaryEmbeddingDim:0,scale:o.scale});X=i.compute(fr(y,Q),{inputs:y,outputs:aA})[0]}let V=pt(i,u.batchSize,u.numHeads,u.sequenceLength,u.headSize,o.doRotary?K:N,void 0,0),W=g1(i,o.doRotary?X:H,u),j=g1(i,S,u);Ct(i,V,W,j,void 0,void 0,h,w,void 0,u,x,G)}}),f1,jg,qg,_g,X6=uA(()=>{yA(),TA(),Xe(),OA(),f1=(i,o,u,d,p,k,h,w)=>{let x=l0(k),G=x===1?"f32":`vec${x}f`,z=x===1?"vec2f":`mat2x${x}f`,M=p*h,N=64;M===1&&(N=256);let H=[p,h,k/x],S=[p,h,2],K=["rank","type","type"],X=[];X.push(...EA(H,S));let V=W=>{let j=rA("x",o.dataType,3,x),l=rA("scale",u.dataType,u.dims),B=rA("bias",d.dataType,d.dims),A=hA("output",1,3,2),C=[j,l,B,A];return`
  var<workgroup> workgroup_shared : array<${z}, ${N}>;
  const workgroup_size = ${N}u;
  ${W.declareVariables(...C)}
  ${W.mainStart(N)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${G}(0);
    var squared_sum = ${G}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${G}(${j.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${z}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Ue("workgroup_shared[0][0]",x)} / f32(hight * ${x});
      let squared_sum_final = ${Ue("workgroup_shared[0][1]",x)} / f32(hight * ${x});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${w}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return i.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${x};${w};${N}`,inputDependencies:K},getRunData:()=>({outputs:[{dims:S,dataType:1}],dispatchGroup:{x:M},programUniforms:X}),getShaderSource:V},{inputs:[o,u,d],outputs:[-1]})[0]},jg=(i,o,u)=>{let d=o[0].dims,p=d,k=2,h=d[0],w=d[1],x=eA.sizeFromDimension(d,k),G=l0(x),z=eA.size(p)/G,M=f1(i,o[0],o[1],o[2],h,x,w,u.epsilon),N=[h,w,x/G],H=[h,w],S=["type","none"],K=X=>{let V=rA("x",o[0].dataType,N.length,G),W=rA("scale_shift",1,H.length,2),j=hA("output",o[0].dataType,N.length,G),l=[V,W,j];return`
  ${X.registerUniform("output_size","u32").declareVariables(...l)}
  ${X.mainStart()}
  ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${j.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${W.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${V.getByOffset("global_idx")} * ${j.type.value}(scale_shift.x) + ${j.type.value}(scale_shift.y);
      ${j.setByOffset("global_idx","value")};
  }`};i.compute({name:"InstanceNormalization",shaderCache:{hint:`${G}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:p,dataType:o[0].dataType}],dispatchGroup:{x:Math.ceil(z/64)},programUniforms:[{type:12,data:z},...EA(N,H,N)]}),getShaderSource:K},{inputs:[o[0],M]})},qg=(i,o,u)=>{let d=o[0].dims,p=d,k=d[0],h=d[d.length-1],w=eA.sizeFromDimension(d,1)/h,x=l0(h),G=eA.size(p)/x,z=[{type:12,data:w},{type:12,data:Math.floor(h/x)}],M=["type","type"],N=!1,H=[0,d.length-1];for(let V=0;V<d.length-2;V++)N=N||d[V+1]!==1,H.push(V+1);N=N&&d[d.length-1]!==1;let S=N?i.compute(ne(i.inputs[0],H),{inputs:[i.inputs[0]],outputs:[-1]})[0]:i.inputs[0].reshape(Array.from({length:d.length},(V,W)=>d[H[W]])),K=f1(i,S,o[1],o[2],k,w,h,u.epsilon),X=V=>{let W=y0(o[0].dataType),j=x===1?"vec2f":`mat${x}x2f`,l=C=>{let y=C===0?"x":"y",aA=x===1?"f32":`vec${x}f`;switch(x){case 1:return`${W}(${aA}(scale.${y}))`;case 2:return`vec2<${W}>(${aA}(scale[0].${y}, scale[1].${y}))`;case 4:return`vec4<${W}>(${aA}(scale[0].${y}, scale[1].${y}, scale[2].${y}, scale[3].${y}))`;default:throw new Error(`Not supported compoents ${x}`)}},B=rA("input",o[0].dataType,o[0].dims,x),A=hA("output",o[0].dataType,p,x);return`
  @group(0) @binding(0) var<storage, read> input : array<${B.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${j}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${A.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${V.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${l(0)}, ${l(1)});
  }`};i.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${x}`,inputDependencies:M},getRunData:()=>({outputs:[{dims:p,dataType:o[0].dataType}],dispatchGroup:{x:Math.ceil(G/64)},programUniforms:z}),getShaderSource:X},{inputs:[o[0],K]})},_g=(i,o)=>{o.format==="NHWC"?qg(i,i.inputs,o):jg(i,i.inputs,o)}}),$g,Af,ef,J6=uA(()=>{yA(),TA(),OA(),$g=i=>{if(!i||i.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Af=(i,o,u)=>{let d=o.simplified,p=i[0].dims,k=i[1],h=!d&&i[2],w=p,x=eA.normalizeAxis(o.axis,p.length),G=eA.sizeToDimension(p,x),z=eA.sizeFromDimension(p,x),M=eA.size(k.dims),N=h?eA.size(h.dims):0;if(M!==z||h&&N!==z)throw new Error(`Size of X.shape()[axis:] == ${z}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${M} and bias size of ${N}`);let H=[];for(let B=0;B<p.length;++B)B<x?H.push(p[B]):H.push(1);let S=l0(z),K=["type","type"],X=[{type:12,data:G},{type:1,data:z},{type:12,data:Math.floor(z/S)},{type:1,data:o.epsilon}];h&&K.push("type");let V=u>1,W=u>2,j=B=>{let A=y0(i[0].dataType),C=[rA("x",i[0].dataType,i[0].dims,S),rA("scale",k.dataType,k.dims,S)];h&&C.push(rA("bias",h.dataType,h.dims,S)),C.push(hA("output",i[0].dataType,w,S)),V&&C.push(hA("mean_data_output",1,H)),W&&C.push(hA("inv_std_output",1,H));let y=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${B.registerUniforms(y).declareVariables(...C)}
  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ma("f32",S)};
    var mean_square_vector = ${Ma("f32",S)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${T2(A,S,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Ue("mean_vector",S)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Ue("mean_square_vector",S)} / uniforms.norm_size ${d?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${T2(A,S,"x[j + offset]")};
      let f32scale = ${T2(A,S,"scale[j]")};
      output[j + offset] = ${C[0].type.value}((f32input ${d?"":"- mean"}) * inv_std_dev * f32scale
        ${h?`+ ${T2(A,S,"bias[j]")}`:""}
      );
    }

    ${V?"mean_data_output[global_idx] = mean":""};
    ${W?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},l=[{dims:w,dataType:i[0].dataType}];return V&&l.push({dims:H,dataType:1}),W&&l.push({dims:H,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${S};${u};${d}`,inputDependencies:K},getRunData:()=>({outputs:l,dispatchGroup:{x:Math.ceil(G/64)},programUniforms:X}),getShaderSource:j}},ef=(i,o)=>{$g(i.inputs),i.compute(Af(i.inputs,o,i.outputCount))}}),tf,rf,j6=uA(()=>{TA(),Va(),ja(),tf=i=>{if(!i||i.length!==2)throw new Error("MatMul requires 2 inputs.");if(i[0].dims[i[0].dims.length-1]!==i[1].dims[i[1].dims.length-2])throw new Error("shared dimension does not match.")},rf=i=>{tf(i.inputs);let o=Y2.calcShape(i.inputs[0].dims,i.inputs[1].dims,!0);if(!o)throw new Error("Can't use matmul on the given tensors");let u=o[o.length-1],d=i.inputs[0].dims[i.inputs[0].dims.length-1];if(u<8&&d<8)i.compute(La(i.inputs,{activation:""},o));else{let p=o[o.length-2],k=eA.size(i.inputs[0].dims.slice(0,-2)),h=eA.size(i.inputs[1].dims.slice(0,-2));if(k!==1&&p===1&&h===1){let w=i.inputs[0].reshape([1,k,d]),x=i.inputs[1].reshape([1,d,u]),G=[1,k,u],z=[w,x];i.compute(sr(z,{activation:""},o,G),{inputs:z})}else i.compute(sr(i.inputs,{activation:""},o))}}}),af,sf,nf,of,gf,q6=uA(()=>{yA(),TA(),I0(),OA(),af=(i,o)=>{if(i.length<3||i.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let u=i[0],d=u.dims.length;if(u.dims[d-1]!==o.k)throw new Error("The last dim of input shape does not match the k value");let p=Math.floor((o.k+o.blockSize-1)/o.blockSize),k=o.blockSize/8*o.bits,h=i[1];if(!eA.areEqual(h.dims,[o.n,p,k]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let w=i[2].dims;if(eA.size(w)!==o.n*p)throw new Error("scales input size error.");if(i.length===4){let x=i[3].dims,G=o.n*(o.bits===8?p:Math.floor((p*o.bits+7)/8));if(eA.size(x)!==G)throw new Error("zeroPoints input size error.")}},sf=(i,o)=>{let u=i[0].dims,d=u.length,p=u[d-2],k=o.k,h=o.n,w=u.slice(0,d-2),x=eA.size(w),G=i[1].dims[2]/4,z=i[0].dataType,M=l0(o.k),N=l0(G),H=l0(h),S=w.concat([p,h]),K=p>1&&h/H%2===0?2:1,X=eA.size(S)/H/K,V=64,W=[],j=[x,p,k/M],l=eA.convertShape(i[1].dims).slice();l.splice(-1,1,G/N),W.push(...EA(j)),W.push(...EA(l)),W.push(...EA(i[2].dims)),i.length===4&&W.push(...EA(eA.convertShape(i[3].dims)));let B=[x,p,h/H];W.push(...EA(B));let A=C=>{let y=j.length,aA=rA("a",i[0].dataType,y,M),Q=rA("b",12,l.length,N),T=rA("scales",i[2].dataType,i[2].dims.length),wA=[aA,Q,T],sA=i.length===4?rA("zero_points",12,i[3].dims.length):void 0;sA&&wA.push(sA);let oA=B.length,PA=hA("output",i[0].dataType,oA,H),vA=y0(i[0].dataType),mA=(()=>{switch(M){case 1:return`array<${vA}, 8>`;case 2:return`mat4x2<${vA}>`;case 4:return`mat2x4<${vA}>`;default:throw new Error(`${M}-component is not supported.`)}})(),ZA=()=>{let gA=`
          // reuse a data
            var input_offset = ${aA.indicesToOffset(`${aA.type.indices}(batch, row, word_offset)`)};
            var a_data: ${mA};
            for (var j: u32 = 0; j < ${8/M}; j++) {
              a_data[j] = ${aA.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let CA=0;CA<H*K;CA++)gA+=`
            b_value = ${N===1?`b${CA}_data`:`b${CA}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${mA}(${Array.from({length:4},(zA,jA)=>`${vA}(b_value_lower[${jA}]), ${vA}(b_value_upper[${jA}])`).join(", ")});
            b_dequantized_values = ${M===1?`${mA}(${Array.from({length:8},(zA,jA)=>`(b_quantized_values[${jA}] - ${sA?`zero_point${CA}`:"zero_point"}) * scale${CA}`).join(", ")});`:`(b_quantized_values - ${mA}(${Array(8).fill(`${sA?`zero_point${CA}`:"zero_point"}`).join(",")})) * scale${CA};`};
            workgroup_shared[local_id.x * ${K} + ${Math.floor(CA/H)}]${H>1?`[${CA%H}]`:""} += ${Array.from({length:8/M},(zA,jA)=>`${M===1?`a_data[${jA}] * b_dequantized_values[${jA}]`:`dot(a_data[${jA}], b_dequantized_values[${jA}])`}`).join(" + ")};
          `;return gA},BA=()=>{let gA=`
            var col_index = col * ${H};
            ${sA?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${vA}(8);`}
            `;for(let CA=0;CA<H*K;CA++)gA+=`
            let scale${CA} = ${T.getByOffset("col_index * nBlocksPerCol + block")};
            ${sA?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${sA.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${CA} = ${vA}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return gA},i0=()=>{let gA=`col_index = col * ${H};`;for(let CA=0;CA<H*K;CA++)gA+=`
            let b${CA}_data = ${Q.getByIndices(`${Q.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return gA+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${mA};
            var b_dequantized_values: ${mA};`,gA};return`
        var<workgroup> workgroup_shared: array<${PA.type.value}, ${K*V}>;
        ${C.declareVariables(...wA,PA)}
        ${C.mainStart([V,1,1])}
          let output_indices = ${PA.offsetToIndices(`(global_idx / ${V}) * ${K}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${V}) {
            //process one block
            var word_offset: u32 = block * ${o.blockSize/M};
            ${BA()}
            for (var word: u32 = 0; word < ${G}; word += ${N}) {
              ${i0()}
              for (var i: u32 = 0; i < ${N}; i++) {
                ${ZA()}
                word_offset += ${8/M};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${K}) {
            var output_value: ${PA.type.value} = ${PA.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${V}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${K};
            }
            ${PA.setByIndices(`${PA.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${o.blockSize};${o.bits};${M};${N};${H};${K};${V}`,inputDependencies:Array(i.length).fill("rank")},getRunData:()=>({outputs:[{dims:S,dataType:z}],dispatchGroup:{x:X},programUniforms:W}),getShaderSource:A}},nf=(i,o)=>{let u=i[0].dims,d=u.length,p=u[d-2],k=o.k,h=o.n,w=u.slice(0,d-2),x=eA.size(w),G=i[1].dims[2]/4,z=i[0].dataType,M=l0(o.k),N=l0(G),H=w.concat([p,h]),S=128,K=h%8===0?8:h%4===0?4:1,X=S/K,V=X*N*8,W=V/M,j=V/o.blockSize,l=eA.size(H)/K,B=[],A=[x,p,k/M],C=eA.convertShape(i[1].dims).slice();C.splice(-1,1,G/N),B.push(...EA(A)),B.push(...EA(C)),B.push(...EA(i[2].dims)),i.length===4&&B.push(...EA(eA.convertShape(i[3].dims)));let y=[x,p,h];B.push(...EA(y));let aA=Q=>{let T=A.length,wA=rA("a",i[0].dataType,T,M),sA=rA("b",12,C.length,N),oA=rA("scales",i[2].dataType,i[2].dims.length),PA=[wA,sA,oA],vA=i.length===4?rA("zero_points",12,i[3].dims.length):void 0;vA&&PA.push(vA);let mA=y.length,ZA=hA("output",i[0].dataType,mA),BA=y0(i[0].dataType),i0=()=>{switch(M){case 1:return`
          let a_data0 = vec4<${BA}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${BA}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${BA}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${BA}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${M}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${wA.type.value}, ${W}>;
        var<workgroup> inter_results: array<array<${ZA.type.value}, ${X}>, ${K}>;
        ${Q.declareVariables(...PA,ZA)}
        ${Q.mainStart([X,K,1])}
          let output_indices = ${ZA.offsetToIndices(`workgroup_index * ${K}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${j} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${W};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${W}; a_offset += ${S})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${wA.getByIndices(`${wA.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${wA.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${j} + local_id.x;
            ${vA?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${vA.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${BA}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${BA}(8);`}
            let scale = ${oA.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${sA.getByIndices(`${sA.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${o.blockSize/M};
            for (var i: u32 = 0; i < ${N}; i++) {
              ${i0()}
              let b_value = ${N===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${BA}>(${Array.from({length:4},(gA,CA)=>`${BA}(b_value_lower[${CA}]), ${BA}(b_value_upper[${CA}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${BA}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(gA,CA)=>`${`dot(a_data${CA}, b_dequantized_values[${CA}])`}`).join(" + ")};
              word_offset += ${8/M};
            }
            workgroupBarrier();
          }

          if (local_idx < ${K}) {
            var output_value: ${ZA.type.value} = ${ZA.type.value}(0);
            for (var b = 0u; b < ${X}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${ZA.setByIndices(`${ZA.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${o.blockSize};${M};${N};${X};${K}`,inputDependencies:Array(i.length).fill("rank")},getRunData:()=>({outputs:[{dims:H,dataType:z}],dispatchGroup:{x:l},programUniforms:B}),getShaderSource:aA}},of=(i,o)=>{af(i.inputs,o),o.blockSize===32&&i.adapterInfo.isVendor("intel")&&i.adapterInfo.isArchitecture("gen-12lp")?i.compute(nf(i.inputs,o)):i.compute(sf(i.inputs,o))},gf=i=>JA(i)}),ff,uf,lf,Cf,cf,df,bf,If,pf,_6=uA(()=>{yA(),TA(),OA(),ff=i=>{if(!i||i.length<1)throw new Error("Too few inputs");if(i[0].dataType!==1&&i[0].dataType!==10)throw new Error("Input type must be float or float16.");if(i.length>=2){let o=i[0].dims.length*2===i[1].dims[0];if(i.length===4&&(o=i[3].dims[0]*2===i[1].dims[0]),!o)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},uf=(i,o,u)=>{let d="";for(let p=o-1;p>=0;--p)d+=`
            k = i32(${i.indicesGet("indices",p)}) - ${kA("uniforms.pads",p,u)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${kA("uniforms.x_shape",p,o)})) {
              break;
            }
            offset += k * i32(${kA("uniforms.x_strides",p,o)});
        `;return`
          value = ${i.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${d}
            value = x[offset];
          }
      `},lf=(i,o,u)=>{let d="";for(let p=o-1;p>=0;--p)d+=`
                k = i32(${i.indicesGet("indices",p)}) - ${kA("uniforms.pads",p,u)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${kA("uniforms.x_shape",p,o)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${kA("uniforms.x_shape",p,o)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${kA("uniforms.x_strides",p,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${d}
              value = x[offset];
          `},Cf=(i,o,u)=>{let d="";for(let p=o-1;p>=0;--p)d+=`
                k = i32(${i.indicesGet("indices",p)}) - ${kA("uniforms.pads",p,u)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${kA("uniforms.x_shape",p,o)})) {
                  k = i32(${kA("uniforms.x_shape",p,o)}) - 1;
                }
                offset += k * i32(${kA("uniforms.x_strides",p,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${d}
              value = x[offset];
          `},cf=(i,o,u)=>{let d="";for(let p=o-1;p>=0;--p)d+=`
                k = i32(${i.indicesGet("indices",p)}) - ${kA("uniforms.pads",p,u)};
                if (k < 0)  {
                  k += i32(${kA("uniforms.x_shape",p,o)}]);
                }
                if (k >= i32(${kA("uniforms.x_shape",p,o)})) {
                  k -= i32(${kA("uniforms.x_shape",p,o)});
                }
                offset += k * i32(${kA("uniforms.x_strides",p,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${d}
              value = x[offset];
          `},df=(i,o,u)=>{switch(u.mode){case 0:return uf(i,o,u.pads.length);case 1:return lf(i,o,u.pads.length);case 2:return Cf(i,o,u.pads.length);case 3:return cf(i,o,u.pads.length);default:throw new Error("Invalid mode")}},bf=(i,o)=>{let u=eA.padShape(i[0].dims.slice(),o.pads),d=i[0].dims,p=eA.size(u),k=[{type:12,data:p},{type:6,data:o.pads}],h=i.length>=3&&i[2].data;o.mode===0&&k.push({type:h?i[2].dataType:1,data:o.value}),k.push(...EA(i[0].dims,u));let w=["rank"],x=G=>{let z=hA("output",i[0].dataType,u.length),M=rA("x",i[0].dataType,d.length),N=M.type.value,H=df(z,d.length,o),S=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:o.pads.length}];return o.mode===0&&S.push({name:"constant_value",type:h?N:"f32"}),`
            ${G.registerUniforms(S).declareVariables(M,z)}
            ${G.mainStart()}
            ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${z.offsetToIndices("global_idx")};

            var value = ${N}(0);
            ${H}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${o.mode}${h}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:u,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(eA.size(u)/64)},programUniforms:k}),getShaderSource:x}},If=(i,o)=>{if(i.length>1){let u=i[1].getBigInt64Array(),d=i.length>=3&&i[2].data?i[2].dataType===10?i[2].getUint16Array()[0]:i[2].getFloat32Array()[0]:0,p=i[0].dims.length,k=new Int32Array(2*p).fill(0);if(i.length>=4){let w=i[3].getBigInt64Array();for(let x=0;x<w.length;x++)k[Number(w[x])]=Number(u[x]),k[Number(w[x])+p]=Number(u[x+w.length])}else u.forEach((w,x)=>k[Number(x)]=Number(w));let h=[];return k.forEach(w=>h.push(w)),{mode:o.mode,value:d,pads:h}}else return o},pf=(i,o)=>{ff(i.inputs);let u=If(i.inputs,o);i.compute(bf(i.inputs,u),{inputs:[0]})}}),ht,u1,l1,C1,c1,hf,mf,d1,b1,kf,wf,I1,Bf,Ef,p1,xf,vf,Gf,Qf,$6=uA(()=>{ge(),yA(),TA(),OA(),ht=i=>{if(f0.webgpu.validateInputContent&&(!i||i.length!==1))throw new Error("Pool ops requires 1 input.")},u1=(i,o,u)=>{let d=o.format==="NHWC",p=i.dims.slice();d&&p.splice(1,0,p.pop());let k=Object.hasOwnProperty.call(o,"dilations"),h=o.kernelShape.slice(),w=o.strides.slice(),x=k?o.dilations.slice():[],G=o.pads.slice();$t.adjustPoolAttributes(u,p,h,w,x,G);let z=$t.computePoolOutputShape(u,p,w,x,h,G,o.autoPad),M=Object.assign({},o);k?Object.assign(M,{kernelShape:h,strides:w,pads:G,dilations:x,cacheKey:o.cacheKey}):Object.assign(M,{kernelShape:h,strides:w,pads:G,cacheKey:o.cacheKey});let N=z.slice();return N.push(N.splice(1,1)[0]),[M,d?N:z]},l1=(i,o)=>{let u=o.format==="NHWC",d=eA.size(i),p=eA.size(o.kernelShape),k=[{type:12,data:d},{type:12,data:p}],h=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(o.kernelShape.length<=2){let w=o.kernelShape[o.kernelShape.length-1],x=o.strides[o.strides.length-1],G=o.pads[o.pads.length/2-1],z=o.pads[o.pads.length-1],M=!!(G+z);k.push({type:12,data:w},{type:12,data:x},{type:12,data:G},{type:12,data:z}),h.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let N=!1;if(o.kernelShape.length===2){let H=o.kernelShape[o.kernelShape.length-2],S=o.strides[o.strides.length-2],K=o.pads[o.pads.length/2-2],X=o.pads[o.pads.length-2];N=!!(K+X),k.push({type:12,data:H},{type:12,data:S},{type:12,data:K},{type:12,data:X}),h.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[k,h,!0,M,N]}else{if(u)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let w=eA.computeStrides(o.kernelShape);k.push({type:12,data:w},{type:12,data:o.pads},{type:12,data:o.strides}),h.push({name:"kernelStrides",type:"u32",length:w.length},{name:"pads",type:"u32",length:o.pads.length},{name:"strides",type:"u32",length:o.strides.length});let x=o.pads.reduce((G,z)=>G+z);return[k,h,!!x,!1,!1]}},C1=(i,o,u,d,p,k,h,w,x,G,z,M)=>{let N=p.format==="NHWC",H=o.type.value,S=hA("output",o.type.tensor,d);if(p.kernelShape.length<=2){let K="",X="",V="",W=u-(N?2:1);if(z?K=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${W}] = indices[${W}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${W}] < 0 || xIndices[${W}]
                      >= uniforms.x_shape[${W}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${o.indicesToOffset("xIndices")}];
                  ${k}
                }`:K=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${W}] = indices[${W}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${o.indicesToOffset("xIndices")}];
                  ${k}
                }`,p.kernelShape.length===2){let j=u-(N?3:2);M?X=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${j}] = indices[${j}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${j}] < 0 || xIndices[${j}] >= uniforms.x_shape[${j}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:X=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${j}] = indices[${j}] * uniforms.sh - uniforms.phStart + j;
                `,V=`
              }
            `}return`
            ${i.registerUniforms(x).declareVariables(o,S)}

            ${i.mainStart()}
              ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${S.offsetToIndices("global_idx")};
              var xIndices = ${S.offsetToIndices("global_idx")};

              var value = ${H}(${w});
              var pad = 0;
              ${X}
              ${K}
              ${V}
              ${h}

              output[global_idx] = value;
            }`}else{if(N)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let K=p.kernelShape.length,X=p.pads.length,V="";return G?V=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${o.indicesToOffset("xIndices")}];
                ${k}
              }`:V=`
              }
              let x_val = x[${o.indicesToOffset("xIndices")}];
              ${k}
            `,`
            ${i.registerUniforms(x).declareVariables(o,S)}

            ${i.mainStart()}
              ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${S.offsetToIndices("global_idx")};
              var xIndices = ${S.offsetToIndices("global_idx")};

              var offsets: array<u32, ${K}>;

              var value = ${H}(${w});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${K-1}u; j++) {
                  offsets[j] = offset / ${kA("uniforms.kernelStrides","j",K)};
                  offset -= offsets[j] * ${kA("uniforms.kernelStrides","j",K)};
                }
                offsets[${K-1}] = offset;

                isPad = false;
                for (var j = ${u-K}u; j < ${u}u; j++) {
                  xIndices[j] = indices[j] * ${kA("uniforms.strides",`j - ${u-K}u`,K)}
                    + offsets[j - ${u-K}u] - ${kA("uniforms.pads","j - 2u",X)};
                  ${V}
              }
              ${h}

              output[global_idx] = value;
            }`}},c1=i=>`${i.format};${i.ceilMode};${i.autoPad};${i.kernelShape.length}`,hf=i=>`${c1(i)};${i.countIncludePad}`,mf=i=>`${c1(i)};${i.storageOrder};${i.dilations}`,d1=i=>({format:i.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][i.auto_pad],ceilMode:i.ceil_mode,kernelShape:i.kernel_shape,strides:i.strides,pads:i.pads}),b1=(i,o,u,d)=>{let[p,k]=u1(o,d,u),h=rA("x",o.dataType,o.dims.length),w=h.type.value,x="value += x_val;",G="";p.countIncludePad?G+=`value /= ${w}(uniforms.kernelSize);`:G+=`value /= ${w}(i32(uniforms.kernelSize) - pad);`;let[z,M,N,H,S]=l1(k,p);z.push(...EA(o.dims,k));let K=["rank"];return{name:i,shaderCache:{hint:`${d.cacheKey};${N};${H};${S}`,inputDependencies:K},getRunData:()=>({outputs:[{dims:k,dataType:o.dataType}],dispatchGroup:{x:Math.ceil(eA.size(k)/64)},programUniforms:z}),getShaderSource:X=>C1(X,h,o.dims.length,k.length,p,x,G,0,M,N,H,S)}},kf=i=>{let o=i.count_include_pad!==0,u=d1(i);if(u.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let d={countIncludePad:o,...u,cacheKey:""};return{...d,cacheKey:hf(d)}},wf=(i,o)=>{ht(i.inputs),i.compute(b1("AveragePool",i.inputs[0],!1,o))},I1={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Bf=i=>{let o=i.format;return{format:o,...I1,cacheKey:o}},Ef=(i,o)=>{ht(i.inputs),i.compute(b1("GlobalAveragePool",i.inputs[0],!0,o))},p1=(i,o,u,d)=>{let[p,k]=u1(o,d,u),h=`
      value = max(x_val, value);
    `,w="",x=rA("x",o.dataType,o.dims.length),G=["rank"],[z,M,N,H,S]=l1(k,p);return z.push(...EA(o.dims,k)),{name:i,shaderCache:{hint:`${d.cacheKey};${N};${H};${S}`,inputDependencies:G},getRunData:()=>({outputs:[{dims:k,dataType:o.dataType}],dispatchGroup:{x:Math.ceil(eA.size(k)/64)},programUniforms:z}),getShaderSource:K=>C1(K,x,o.dims.length,k.length,p,h,w,o.dataType===10?-65504:-1e5,M,N,H,S)}},xf=(i,o)=>{ht(i.inputs),i.compute(p1("MaxPool",i.inputs[0],!1,o))},vf=i=>{let o=i.storage_order,u=i.dilations,d=d1(i);if(o!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(d.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let p={storageOrder:o,dilations:u,...d,cacheKey:""};return{...p,cacheKey:mf(p)}},Gf=i=>{let o=i.format;return{format:o,...I1,cacheKey:o}},Qf=(i,o)=>{ht(i.inputs),i.compute(p1("GlobalMaxPool",i.inputs[0],!0,o))}}),yf,Df,Mf,zf,AC=uA(()=>{yA(),TA(),I0(),OA(),yf=(i,o)=>{if(i.length<2||i.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(i.length===3&&i[1].dims===i[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(i.length===3&&i[0].dataType!==i[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(i[0].dataType===6&&i.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(i[1].dims.length!==0&&i[1].dims.length!==1&&i[1].dims.length!==i[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(i.length>2){if(i[0].dataType!==i[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(i[1].dims.length!==i[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!i[1].dims.map((u,d)=>u===i[2].dims[d]).reduce((u,d)=>u&&d,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(o.blockSize>0){if(i[1].dims.length===0||i[1].dims.length===1&&i[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!i[1].dims.map((p,k)=>k===o.axis||p===i[0].dims[k]).reduce((p,k)=>p&&k,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(i[1].dims.length!==i[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let u=i[0].dims[o.axis],d=i[1].dims[o.axis];if(o.blockSize<Math.ceil(u/d)||o.blockSize>Math.ceil(u/(d-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},Df=(i,o)=>{let u=eA.normalizeAxis(o.axis,i[0].dims.length),d=i[0].dataType,p=d===3,k=i[0].dims,h=i[1].dataType,w=eA.size(k),x=d===3||d===2,G=x?[Math.ceil(eA.size(i[0].dims)/4)]:i[0].dims,z=i[1].dims,M=i.length>2?i[2]:void 0,N=M?x?[Math.ceil(eA.size(M.dims)/4)]:M.dims:void 0,H=z.length===0||z.length===1&&z[0]===1,S=H===!1&&z.length===1,K=l0(w),X=H&&(!x||K===4),V=X?K:1,W=X&&!x?K:1,j=rA("input",x?12:d,G.length,W),l=rA("scale",h,z.length),B=M?rA("zero_point",x?12:d,N.length):void 0,A=hA("output",h,k.length,V),C=[j,l];B&&C.push(B);let y=[G,z];M&&y.push(N);let aA=[{type:12,data:w/V},{type:12,data:u},{type:12,data:o.blockSize},...EA(...y,k)],Q=T=>{let wA=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${T.registerUniforms(wA).declareVariables(...C,A)}
      ${T.mainStart()}
          ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${A.offsetToIndices("global_idx")};

          // Set input x
          ${x?`
            let input = ${j.getByOffset("global_idx / 4")};
            let x_vec = ${p?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${V===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${j.getByOffset("global_idx")};`};

          // Set scale input
          ${H?`let scale_value= ${l.getByOffset("0")}`:S?`
            let scale_index = ${A.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${l.getByOffset("scale_index")};`:`
            var scale_indices: ${l.type.indices} = output_indices;
            let index = ${l.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${l.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${l.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${B?H?x?`
                let zero_point_input = ${B.getByOffset("0")};
                let zero_point_vec =  ${p?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${B.getByOffset("0")}`:S?x?`
                let zero_point_index = ${A.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${B.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${p?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${A.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${B.getByOffset("zero_point_index")};`:x?`
                let zero_point_offset = ${l.indicesToOffset("scale_indices")};
                let zero_point_input = ${B.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${p?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${B.getByIndices("scale_indices")};`:`let zero_point_value = ${x?p?"i32":"u32":j.type.value}(0);`};
      // Compute and write output
      ${A.setByOffset("global_idx",`${A.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:o.cacheKey,inputDependencies:B?["rank","rank","rank"]:["rank","rank"]},getShaderSource:Q,getRunData:()=>({outputs:[{dims:k,dataType:h}],dispatchGroup:{x:Math.ceil(w/V/64),y:1,z:1},programUniforms:aA})}},Mf=(i,o)=>{yf(i.inputs,o),i.compute(Df(i.inputs,o))},zf=i=>JA({axis:i.axis,blockSize:i.blockSize})}),Yf,Nf,Tf,eC=uA(()=>{ge(),yA(),OA(),Yf=(i,o,u)=>{let d=i===o,p=i<o&&u<0,k=i>o&&u>0;if(d||p||k)throw new Error("Range these inputs' contents are invalid.")},Nf=(i,o,u,d)=>{let p=Math.abs(Math.ceil((o-i)/u)),k=[p],h=p,w=[{type:12,data:h},{type:d,data:i},{type:d,data:u},...EA(k)],x=G=>{let z=hA("output",d,k.length),M=z.type.value,N=[{name:"outputSize",type:"u32"},{name:"start",type:M},{name:"delta",type:M}];return`
        ${G.registerUniforms(N).declareVariables(z)}
        ${G.mainStart()}
        ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${M}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${d}`},getShaderSource:x,getRunData:()=>({outputs:[{dims:k,dataType:d}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:w})}},Tf=i=>{let o=0,u=0,d=0;i.inputs[0].dataType===6?(o=i.inputs[0].getInt32Array()[0],u=i.inputs[1].getInt32Array()[0],d=i.inputs[2].getInt32Array()[0]):i.inputs[0].dataType===1&&(o=i.inputs[0].getFloat32Array()[0],u=i.inputs[1].getFloat32Array()[0],d=i.inputs[2].getFloat32Array()[0]),f0.webgpu.validateInputContent&&Yf(o,u,d),i.compute(Nf(o,u,d,i.inputs[0].dataType),{inputs:[]})}}),Of,Hf,Pf,Sf,tC=uA(()=>{yA(),TA(),I0(),OA(),Of=(i,o,u,d)=>{if(i!=="none"&&d!=="i32"&&d!=="u32"&&d!=="f32")throw new Error(`Input ${d} is not supported with reduction ${i}.`);let p=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,k=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${o}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(i){case"none":return`${o}=${u};`;case"add":return d==="i32"||d==="u32"?`atomicAdd(&${o}, bitcast<${d}>(${u}));`:`
              ${p}bitcast<${d}>(oldValue) + (${u})${k}`;case"max":return d==="i32"||d==="u32"?`atomicMax(&${o}, bitcast<${d}>(${u}));`:`
                ${p}max(bitcast<f32>(oldValue), (${u}))${k}`;case"min":return d==="i32"||d==="u32"?`atomicMin(&${o}, bitcast<${d}>(${u}));`:`${p}min(bitcast<${d}>(oldValue), (${u}))${k}`;case"mul":return`${p}(bitcast<${d}>(oldValue) * (${u}))${k}`;default:throw new Error(`Reduction ${i} is not supported.`)}},Hf=(i,o)=>{let u=i[0].dims,d=i[1].dims,p=u,k=1,h=Math.ceil(eA.sizeToDimension(d,d.length-1)/k),w=d[d.length-1],x=eA.sizeFromDimension(u,w),G=[{type:12,data:h},{type:12,data:w},{type:12,data:x},...EA(i[1].dims,i[2].dims,p)],z=M=>{let N=rA("indices",i[1].dataType,i[1].dims.length),H=rA("updates",i[2].dataType,i[2].dims.length,k),S=o.reduction!=="none"&&o.reduction!==""?Ws("output",i[0].dataType,p.length):hA("output",i[0].dataType,p.length,k);return`
      ${M.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(N,H,S)}
      ${M.mainStart()}
        ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var data_offset = 0u;
  let indices_start = uniforms.last_index_dimension * global_idx;
  let indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${i[0].dims.length===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[i - indices_start];
    let dim_value = uniforms.output_shape[i - indices_start];`}
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));
  }

  for (var i = 0u; i < uniforms.num_updates_elements; i++) {
    let value = updates[uniforms.num_updates_elements * global_idx + i];
    ${Of(o.reduction,"output[data_offset + i]","value",S.type.value)}
  }

      }`};return{name:"ScatterND",shaderCache:{hint:`${o.cacheKey}_${o.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:G}),getShaderSource:z}},Pf=i=>JA({reduction:i.reduction}),Sf=(i,o)=>{i.compute(Hf(i.inputs,o),{inputs:[i.inputs[1],i.inputs[2]],outputs:[]})}}),Ff,Rf,Wf,h1,Kf,Zf,Lf,Vf,Uf,Xf,Jf,jf,m1,qf,_f,$f,A3,e3,t3,r3,rC=uA(()=>{yA(),TA(),I0(),OA(),Ff=(i,o)=>{if(i.every(u=>u>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),i.length>0){if(o.mode==="linear"){if(!(i.length===2||i.length===3||i.length===4&&i[0]===1&&i[1]===1||i.length===4&&i[0]===1&&i[3]===1||i.length===5&&i[0]===1&&i[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(o.mode==="cubic"&&!(i.length===2||i.length===4&&i[0]===1&&i[1]===1||i.length===4&&i[0]===1&&i[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Rf=(i,o,u)=>{o.every(p=>p>=0&&p<u||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let d=new Array(u).fill(1);return o.forEach((p,k)=>d[p]=i[k]),d},Wf=(i,o,u,d,p,k)=>{let[h,w,x]=u>10?[1,2,3]:[-1,i.length>1?1:-1,-1],G=i[0].dims.length;if(h>0&&i.length>h&&i[h].dims.length>0)i[h].getFloat32Array().forEach(z=>k.push(z));else if(o.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(w>0&&i.length>w&&i[w].dims.length===1&&i[w].dims[0]>0){if(i[w].getFloat32Array().forEach(z=>d.push(z)),d.length!==0&&d.length!==G&&u>=18&&d.length!==o.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Ff(d,o),o.axes.length>0&&Rf(d,o.axes,G).forEach((z,M)=>d[M]=z)}if(x>0&&i.length>x&&i[x].dims.length===1&&i[x].dims[0]>0&&(i[x].getBigInt64Array().forEach(z=>p.push(Number(z))),p.length!==0&&p.length!==G&&u>=18&&p.length!==o.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(o.axes.length>0){if(d.length!==0&&d.length!==o.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(p.length!==0&&p.length!==o.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof d<"u"&&typeof p<"u"&&d.length>0&&p.length>G)throw new Error("Resize requires only of scales or sizes to be specified")},h1=(i,o,u,d)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${i}) * (${o});
  let whole = ${d}(big / (${u}));
  let fract = ${d}(big % (${u})) / ${d}(${u});
  return whole + fract;
`,Kf=(i,o)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${o} { `+(()=>{switch(i){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${o}(xResized) / ${o}(xScale);
          } else {
            ${h1("xResized","lengthOriginal","lengthResized",o)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${o}(xResized) + 0.5) / ${o}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${o}(xResized) + 0.5) / ${o}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${h1("xResized","lengthOriginal - 1","lengthResized - 1",o)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${o}(roiStart) * ${o}(lengthOriginal - 1) +
                        (${o}(xResized) * ${o}(roiEnd - roiStart) * ${o}(lengthOriginal - 1)) /
                        ${o}(lengthResized - 1);
                  } else {
                    return 0.5 * ${o}(roiStart + roiEnd) * ${o}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${o}xScale * ${o}(lengthResized);
                  const adjustment = ${o}(lengthResized) / outputWidth;
                  const center = ${o}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${o}(xResized) + 0.5) / ${o}(xScale)) - 0.5;`;case"half_pixel":return`return ((${o}(xResized) + 0.5) / ${o}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${i} is not supported`)}})()+"}",Zf=(i,o,u)=>`fn getNearestPixelFromOriginal(xOriginal: ${u}, isDownSample: bool) -> ${u} {`+(()=>{switch(i){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(o<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${i} is not supported`)}})()+"}",Lf=(i,o,u)=>{let d=new Array(u).fill(0).concat(new Array(u).fill(1)),p=i.length===0?d:i.slice();return o.length>0?(o.forEach((k,h)=>{d[k]=p[h],d[h+u]=p[o.length+h]}),d):p},Vf=(i,o,u,d)=>{let p=[];if(u.length>0)if(d.length>0){if(i.forEach(k=>p.push(k)),Math.max(...d)>i.length)throw new Error("axes is out of bound");d.forEach((k,h)=>p[k]=u[h])}else u.forEach(k=>p.push(k));else{if(o.length===0)throw new Error("Resize requires either scales or sizes.");p=i.map((k,h)=>Math.round(k*o[h]))}return p},Uf=(i,o,u)=>{let d=(()=>{switch(u.keepAspectRatioPolicy){case"not_larger":return u.axes.length>0?Math.min(...u.axes.map(k=>o[k]),Number.MAX_VALUE):Math.min(...o,Number.MAX_VALUE);case"not_smaller":return u.axes.length>0?Math.max(...u.axes.map(k=>o[k]),Number.MIN_VALUE):Math.max(...o,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${u.keepAspectRatioPolicy} is not supported`)}})();o.fill(1,0,o.length);let p=i.slice();return u.axes.length>0?(u.axes.forEach(k=>o[k]=d),u.axes.forEach(k=>p[k]=Math.round(i[k]*o[k]))):(o.fill(d,0,o.length),p.forEach((k,h)=>p[h]=Math.round(k*o[h]))),p},Xf=(i,o,u,d,p)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${i.type.indices}) -> array<${i.type.value}, ${u.length}> {
      var original_indices: array<${i.type.value}, ${u.length}>;
      for (var i:u32 = 0; i < ${u.length}; i++) {
        var output_index = ${i.indicesGet("output_indices","i")};
        var scale = ${kA("uniforms.scales","i",d)};
        var roi_low = ${kA("uniforms.roi","i",p)};
        var roi_hi = ${kA("uniforms.roi",`i + ${o.length}`,p)};
        if (scale == 1.0) {
          original_indices[i] = ${i.type.value}(output_index);
        } else {
          var input_shape_i = ${kA("uniforms.input_shape","i",o.length)};
          var output_shape_i = ${kA("uniforms.output_shape","i",u.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Jf=(i,o,u,d,p,k,h)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${o.type.indices}) -> ${i.type.indices} {
      var input_indices: ${i.type.indices};
      for (var i:u32 = 0; i < ${d.length}; i++) {
        var output_index = ${o.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${kA("uniforms.scales","i",p)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${kA("uniforms.roi","i",k)};
          var roi_hi = ${kA("uniforms.roi",`i + ${u.length}`,k)};
          var input_shape_i = ${kA("uniforms.input_shape","i",u.length)};
          var output_shape_i = ${kA("uniforms.output_shape","i",d.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${h} || (original_idx >= 0 && original_idx < ${o.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${o.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${i.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,jf=(i,o)=>`
    fn checkInputIndices(input_indices: ${i.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${o.length}; i++) {
        var input_index = ${i.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${kA("uniforms.input_shape","i",o.length)}) {
          return false;
        }
      }
      return true;
    }`,m1=(i,o,u,d)=>i.rank>d?`
    ${i.indicesSet("input_indices",o,"channel")};
    ${i.indicesSet("input_indices",u,"batch")};
`:"",qf=(i,o,u,d,p)=>{let[k,h,w,x]=u.length===2?[-1,0,1,-1]:[0,2,3,1],G=i.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${G} {
      var input_indices: ${i.type.indices};
      ${i.indicesSet("input_indices",h,`max(0, min(row, ${u[h]} - 1))`)};
      ${i.indicesSet("input_indices",w,`max(0, min(col, ${u[w]} - 1))`)};
      ${m1(i,x,k,2)}
      return ${i.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${o.type.indices}) -> ${G} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${G} = originalIndices[${h}];
      var col:${G} = originalIndices[${w}];
      ${d?`if (row < 0 || row > (${u[h]} - 1) || col < 0 || col > (${u[w]} - 1)) {
        return ${p};
      }`:""};
      row = max(0, min(row, ${u[h]} - 1));
      col = max(0, min(col, ${u[w]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${u.length>2?`u32(originalIndices[${x}])`:"0"};
      var batch: u32 =  ${u.length>2?`u32(originalIndices[${k}])`:"0"};
      var x11: ${G} = getInputValue(batch, channel, row1, col1);
      var x12: ${G} = getInputValue(batch, channel, row1, col2);
      var x21: ${G} = getInputValue(batch, channel, row2, col1);
      var x22: ${G} = getInputValue(batch, channel, row2, col2);
      var dx1: ${G} = abs(row - ${G}(row1));
      var dx2: ${G} = abs(${G}(row2) - row);
      var dy1: ${G} = abs(col - ${G}(col1));
      var dy2: ${G} = abs(${G}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},_f=(i,o,u,d,p,k,h,w,x,G)=>{let z=u.length===2,[M,N]=z?[0,1]:[2,3],H=i.type.value,S=K=>{let X=K===M?"row":"col";return`
      fn ${X}CubicInterpolation(input_indices: ${i.type.indices}, output_indices: ${o.type.indices}) -> ${H} {
        var output_index = ${o.indicesGet("output_indices",K)};
        var originalIdx: ${H} = getOriginalCoordinateFromResizedCoordinate(output_index, ${p[K]},
        ${d[K]}, ${u[K]}, ${k[K]}, ${k[K]} + ${u.length});
        var fractOriginalIdx: ${H} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${w} && (originalIdx < 0 || originalIdx > (${u[K]} - 1))) {
          return ${x};
        }
        var data: array<${H}, 4> = array<${H}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${X}: ${H} = originalIdx + ${H}(i);
          if (${X} < 0 || ${X} >= ${u[K]}) {
            ${G?`coefs[i + 1] = 0.0;
                        continue;`:w?`return ${x};`:`${X} = max(0, min(${X}, ${u[K]} - 1));`};
          }
        var input_indices_copy: ${i.type.indices} = input_indices;
          ${i.indicesSet("input_indices_copy",K,`u32(${X})`)};
          data[i + 1] = ${K===M?i.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${S(M)};
    ${S(N)};
  fn getCubicInterpolationCoefs(s: ${H}) -> array<${H}, 4> {
    var absS = abs(s);
    var coeffs: array<${H}, 4> = array<${H}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${H} = 1.0 - absS;
    var twoMinusAbsS: ${H} = 2.0 - absS;
    var onePlusAbsS: ${H} = 1.0 + absS;
    coeffs[0] = ((${h} * onePlusAbsS - 5 * ${h}) * onePlusAbsS + 8 * ${h}) * onePlusAbsS - 4 * ${h};
    coeffs[1] = ((${h} + 2) * absS - (${h} + 3)) * absS * absS + 1;
    coeffs[2] = ((${h} + 2) * oneMinusAbsS - (${h} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${h} * twoMinusAbsS - 5 * ${h}) * twoMinusAbsS + 8 * ${h}) * twoMinusAbsS - 4 * ${h};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${H}, 4>, coefs: array<${H}, 4>) -> ${H} {
    var coefsSum: ${H} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${o.type.indices}) -> ${H} {
    var input_indices: ${i.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},$f=(i,o,u,d,p)=>{let[k,h,w,x,G]=u.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],z=i.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${z} {
      var input_indices: ${i.type.indices};
      ${i.indicesSet("input_indices",h,`max(0, min(depth, ${u[h]} - 1))`)};
      ${i.indicesSet("input_indices",w,`max(0, min(height, ${u[w]} - 1))`)};
      ${i.indicesSet("input_indices",x,`max(0, min(width, ${u[x]} - 1))`)};
      ${m1(i,G,k,3)}
      return ${i.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${o.type.indices}) -> ${z} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${z} = originalIndices[${h}];
      var height:${z} = originalIndices[${w}];
      var width:${z} = originalIndices[${x}];
      ${d?`if (depth < 0 || depth > (${u[h]} - 1) || height < 0 || height > (${u[w]} - 1) || width < 0 || (width > ${u[x]} - 1)) {
      return ${p};
        }`:""};

    depth = max(0, min(depth, ${u[h]} - 1));
      height = max(0, min(height, ${u[w]} - 1));
      width = max(0, min(width, ${u[x]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${u.length>3?`u32(originalIndices[${G}])`:"0"};
      var batch: u32 =  ${u.length>3?`u32(originalIndices[${k}])`:"0"};

      var x111: ${z} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${z} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${z} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${z} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${z} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${z} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${z} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${z} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${z} = abs(depth - ${z}(depth1));
      var dx2: ${z} = abs(${z}(depth2) - depth);
      var dy1: ${z} = abs(height - ${z}(height1));
      var dy2: ${z} = abs(${z}(height2) - height);
      var dz1: ${z} = abs(width - ${z}(width1));
      var dz2: ${z} = abs(${z}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},A3=(i,o,u,d,p,k)=>{let h=i.dims,w=Lf(k,o.axes,h.length),x=Vf(h,d,p,o.axes),G=d.slice();d.length===0&&(G=h.map((W,j)=>W===0?1:x[j]/W),o.keepAspectRatioPolicy!=="stretch"&&(x=Uf(h,G,o)));let z=hA("output",i.dataType,x.length),M=rA("input",i.dataType,h.length),N=eA.size(x),H=h.length===x.length&&h.every((W,j)=>W===x[j]),S=o.coordinateTransformMode==="tf_crop_and_resize",K=o.extrapolationValue,X=M.type.value,V=W=>`
      ${H?"":`
      ${Kf(o.coordinateTransformMode,X)};
      ${(()=>{switch(o.mode){case"nearest":return`
              ${jf(M,h)};
              ${Zf(o.nearestMode,u,X)};
              ${Jf(M,z,h,x,G.length,w.length,S)};
              `;case"linear":return`
              ${Xf(z,h,x,G.length,w.length)};
              ${(()=>{if(h.length===2||h.length===4)return`${qf(M,z,h,S,K)}`;if(h.length===3||h.length===5)return`${$f(M,z,h,S,K)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(h.length===2||h.length===4)return`${_f(M,z,h,x,G,w,o.cubicCoeffA,S,o.extrapolationValue,o.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${W.registerUniform("output_size","u32").registerUniform("scales","f32",G.length).registerUniform("roi","f32",w.length).declareVariables(M,z)}
      ${W.mainStart()}
        ${W.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${H?"output[global_idx] = input[global_idx];":`
        let output_indices = ${z.offsetToIndices("global_idx")};
        var input_indices: ${M.type.indices};
        ${(()=>{switch(o.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${M.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${o.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${h.length===2||h.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${o.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${o.cacheKey}|${u}|${G.length>0?o.mode==="cubic"?G:G.length:""}|${p.length>0?p:""}|${w.length>0?w:""}|${H}|${o.mode==="nearest"?h.length:h}`,inputDependencies:["rank"]},getShaderSource:V,getRunData:()=>({outputs:[{dims:x,dataType:i.dataType}],dispatchGroup:{x:Math.ceil(N/64)},programUniforms:[{type:12,data:N},{type:1,data:G},{type:1,data:w},...EA(h,x)]})}},e3=i=>{let o=i.customDataBuffer;return new Uint32Array(o,o.byteOffset,1)[0]},t3=(i,o)=>{let u=[],d=[],p=[],k=e3(i);if(o.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Wf(i.inputs,o,k,u,d,p),i.compute(A3(i.inputs[0],o,k,u,d,p),{inputs:[0]})},r3=i=>{let o=i.antialias,u=i.axes,d=i.coordinateTransformMode,p=i.cubicCoeffA,k=i.excludeOutside!==0,h=i.extrapolationValue,w=i.keepAspectRatioPolicy,x=i.mode,G=i.nearestMode===""?"simple":i.nearestMode;return JA({antialias:o,axes:u,coordinateTransformMode:d,cubicCoeffA:p,excludeOutside:k,extrapolationValue:h,keepAspectRatioPolicy:w,mode:x,nearestMode:G})}}),a3,i3,s3,aC=uA(()=>{yA(),TA(),OA(),a3=i=>{if(!i||i.length<3)throw new Error("layerNorm requires at least 3 inputs.");let o=i[0],u=i[1],d=i[2];if(o.dataType!==u.dataType||o.dataType!==d.dataType)throw new Error("All inputs must have the same data type");if(o.dims.length!==3&&o.dims.length!==2)throw new Error("Input must be 2D or 3D");if(u.dims.length!==3&&u.dims.length!==2)throw new Error("Skip must be 2D or 3D");let p=o.dims[o.dims.length-1],k=o.dims[o.dims.length-2];if(u.dims[u.dims.length-1]!==p)throw new Error("Skip must have the same hidden size as input");if(u.dims[u.dims.length-2]!==k)throw new Error("Skip must have the same sequence length as input");if(d.dims.length!==1)throw new Error("Gamma must be 1D");if(d.dims[d.dims.length-1]!==p)throw new Error("Gamma must have the same hidden size as input");if(i.length>3){let h=i[3];if(h.dims.length!==1)throw new Error("Beta must be 1D");if(h.dims[h.dims.length-1]!==p)throw new Error("Beta must have the same hidden size as input")}if(i.length>4){let h=i[4];if(h.dims.length!==1)throw new Error("Bias must be 1D");if(h.dims[h.dims.length-1]!==p)throw new Error("Bias must have the same hidden size as input")}},i3=(i,o,u,d)=>{let p=o.simplified,k=i[0].dims,h=eA.size(k),w=k,x=h,G=k.slice(-1)[0],z=d?k.slice(0,-1).concat(1):[],M=!p&&i.length>3,N=i.length>4,H=d&&u>1,S=d&&u>2,K=u>3,X=64,V=l0(G),W=[{type:12,data:x},{type:12,data:V},{type:12,data:G},{type:1,data:o.epsilon}],j=B=>{let A=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],C=[rA("x",i[0].dataType,i[0].dims,V),rA("skip",i[1].dataType,i[1].dims,V),rA("gamma",i[2].dataType,i[2].dims,V)];M&&C.push(rA("beta",i[3].dataType,i[3].dims,V)),N&&C.push(rA("bias",i[4].dataType,i[4].dims,V)),C.push(hA("output",i[0].dataType,w,V)),H&&C.push(hA("mean_output",1,z)),S&&C.push(hA("inv_std_output",1,z)),K&&C.push(hA("input_skip_bias_sum",i[0].dataType,w,V));let y=y0(i[0].dataType),aA=y0(1,V);return`

      ${B.registerUniforms(A).declareVariables(...C)}
      var<workgroup> sum_shared : array<${aA}, ${X}>;
      var<workgroup> sum_squared_shared : array<${aA}, ${X}>;

      ${B.mainStart([X,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${X};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${X};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${X-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${N?"bias[offset1d + i]":y+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${K?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${T2(y,V,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${X};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Ue("sum",V)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Ue("square_sum",V)} / f32(uniforms.hidden_size) ${p?"":"- mean * mean"} + uniforms.epsilon);
        ${H?"mean_output[global_idx] = mean;":""}
        ${S?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${p?"":`- ${y}(mean)`}) *
            ${y}(inv_std_dev) * gamma[offset1d + i]
            ${M?"+ beta[offset1d + i]":""};
        }
      }`},l=[{dims:w,dataType:i[0].dataType}];return u>1&&l.push({dims:z,dataType:1}),u>2&&l.push({dims:z,dataType:1}),u>3&&l.push({dims:k,dataType:i[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${V};${H};${S};${K}`,inputDependencies:i.map((B,A)=>"type")},getShaderSource:j,getRunData:()=>({outputs:l,dispatchGroup:{x:Math.ceil(x/G)},programUniforms:W})}},s3=(i,o)=>{a3(i.inputs);let u=[0];i.outputCount>1&&u.push(-3),i.outputCount>2&&u.push(-3),i.outputCount>3&&u.push(3),i.compute(i3(i.inputs,o,i.outputCount,!1),{outputs:u})}}),n3,mt,o3,k1,g3,f3,u3,l3,iC=uA(()=>{yA(),TA(),I0(),OA(),n3=(i,o)=>{if(!i||i.length<1)throw new Error("too few inputs");if(o.axes.length!==0){if(o.axes.length!==o.starts.length||o.axes.length!==o.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(o.starts.length!==o.ends.length)throw new Error("starts and ends must have the same length");i.slice(1).forEach((u,d)=>{if(i[d+1].dataType!==6&&i[d+1].dataType!==7)throw new Error(`Input ${d} must be an array of int32 or int64`)})},mt=(i,o)=>{let u=[];if(i.length>o)if(i[o].dataType===7)i[o].getBigInt64Array().forEach(d=>u.push(Number(d)));else if(i[o].dataType===6)i[o].getInt32Array().forEach(d=>u.push(Number(d)));else throw new Error(`Input ${o} must be an array of int32 or int64`);return u},o3=(i,o)=>{if(i.length>1){let u=mt(i,1),d=mt(i,2),p=mt(i,3);return p.length===0&&(p=[...Array(i[0].dims.length).keys()]),JA({starts:u,ends:d,axes:p})}else return o},k1=(i,o,u,d,p)=>{let k=i;return i<0&&(k+=u[d[o]]),p[o]<0?Math.max(0,Math.min(k,u[d[o]]-1)):Math.max(0,Math.min(k,u[d[o]]))},g3=(i,o,u)=>`fn calculateInputIndices(output_indices: ${o.type.indices}) -> ${i.type.indices} {
          var input_indices: ${i.type.indices};
          var carry = 0u;
          for (var i = ${u.length-1}; i >= 0; i--) {
            let input_shape_i = ${kA("uniforms.input_shape","i",u.length)};
            let steps_i = ${kA("uniforms.steps","i",u.length)};
            let signs_i = ${kA("uniforms.signs","i",u.length)};
            let starts_i = ${kA("uniforms.starts","i",u.length)};
            var output_index = ${o.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${i.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,f3=(i,o)=>{let u=i[0].dims,d=eA.size(u),p=o.axes.length>0?eA.normalizeAxes(o.axes,u.length):[...Array(u.length).keys()],k=mt(i,4);k.forEach(V=>V!==0||(()=>{throw new Error("step cannot be 0")})),k.length===0&&(k=Array(p.length).fill(1));let h=o.starts.map((V,W)=>k1(V,W,u,p,k)),w=o.ends.map((V,W)=>k1(V,W,u,p,k));if(p.length!==h.length||p.length!==w.length)throw new Error("start, ends and axes should have the same number of elements");if(p.length!==u.length)for(let V=0;V<u.length;++V)p.includes(V)||(h.splice(V,0,0),w.splice(V,0,u[V]),k.splice(V,0,1));let x=k.map(V=>Math.sign(V));k.forEach((V,W,j)=>{if(V<0){let l=(w[W]-h[W])/V,B=h[W],A=B+l*k[W];h[W]=A,w[W]=B,j[W]=-V}});let G=u.slice(0);p.forEach((V,W)=>{G[V]=Math.ceil((w[V]-h[V])/k[V])});let z={dims:G,dataType:i[0].dataType},M=hA("output",i[0].dataType,G.length),N=rA("input",i[0].dataType,i[0].dims.length),H=eA.size(G),S=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:h.length},{name:"signs",type:"i32",length:x.length},{name:"steps",type:"u32",length:k.length}],K=[{type:12,data:H},{type:12,data:h},{type:6,data:x},{type:12,data:k},...EA(i[0].dims,G)],X=V=>`
      ${V.registerUniforms(S).declareVariables(N,M)}
        ${g3(N,M,u)}
        ${V.mainStart()}
          ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${M.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${M.setByOffset("global_idx",N.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${x.length}_${h.length}_${k.length}`,inputDependencies:["rank"]},getShaderSource:X,getRunData:()=>({outputs:[z],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:K})}},u3=(i,o)=>{n3(i.inputs,o);let u=o3(i.inputs,o);i.compute(f3(i.inputs,u),{inputs:[0]})},l3=i=>{let o=i.starts,u=i.ends,d=i.axes;return JA({starts:o,ends:u,axes:d})}}),C3,c3,d3,b3,sC=uA(()=>{yA(),TA(),I0(),Xe(),OA(),C3=i=>{if(!i||i.length!==1)throw new Error("Softmax op requires 1 input.")},c3=(i,o)=>{let u=i.inputs[0],d=u.dims,p=eA.size(d),k=d.length,h=eA.normalizeAxis(o.axis,k),w=h<d.length-1,x,G=[];w?(G=Array.from({length:k},(C,y)=>y),G[h]=k-1,G[k-1]=h,x=i.compute(ne(u,G),{inputs:[u],outputs:[-1]})[0]):x=u;let z=x.dims,M=z[k-1],N=p/M,H=l0(M),S=M/H,K=64;N===1&&(K=256);let X=(C,y)=>y===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:y===2?`max(${C}.x, ${C}.y)`:y===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,V=rA("x",x.dataType,x.dims,H),W=hA("result",x.dataType,x.dims,H),j=V.type.value,l=y0(x.dataType)==="f32"?`var threadMax = ${j}(-3.402823e+38f);`:`var threadMax = ${j}(-65504.0h);`,B=C=>`
      var<workgroup> rowMaxShared : ${j};
      var<workgroup> rowSumShared : ${j};
      var<workgroup> threadShared : array<${j}, ${K}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${j} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${j}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${C.registerUniform("packedCols","i32").declareVariables(V,W)}
      ${C.mainStart(K)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${K};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${l}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${j}(${X("threadShared[0]",H)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${j}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${j}(${Ue("threadShared[0]",H)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          var value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          // max operation protects against NaN since all values should be >=0
          value = max(value, ${j}(0.0));
          setValue(row, col, row_stride, value);
        }
      }`,A=i.compute({name:"Softmax",shaderCache:{hint:`${H};${K}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:z,dataType:x.dataType}],dispatchGroup:{x:N},programUniforms:[{type:6,data:S}]}),getShaderSource:B},{inputs:[x],outputs:[w?-1:0]})[0];w&&i.compute(ne(A,G),{inputs:[A]})},d3=(i,o)=>{C3(i.inputs),c3(i,o)},b3=i=>JA({axis:i.axis})}),w1,I3,p3,h3,m3,nC=uA(()=>{yA(),TA(),OA(),w1=i=>Array.from(i.getBigInt64Array(),Number),I3=i=>{if(!i||i.length!==2)throw new Error("Tile requires 2 inputs.");if(i[0].dataType!==1&&i[0].dataType!==10&&i[0].dataType!==6&&i[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(i[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(i[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(w1(i[1]).length!==i[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},p3=(i,o)=>{let u=[];for(let d=0;d<i.length;++d)u.push(i[d]*o[d]);return u},h3=(i,o)=>{let u=i[0].dims,d=o??w1(i[1]),p=p3(u,d),k=eA.size(p),h=i[0].dataType,w=rA("input",h,u.length),x=hA("output",h,p.length),G=z=>`
      const inputShape = ${w.indices(...u)};
      ${z.registerUniform("output_size","u32").declareVariables(w,x)}
      ${z.mainStart()}
      ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${x.offsetToIndices("global_idx")};
      var input_indices: ${w.type.indices};
      for (var i = 0; i < ${u.length}; i++) {
        let input_dim_i = ${w.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${x.indicesGet("output_indices","i")}  % input_dim_i;

        ${w.indicesSet("input_indices","i","input_dim_value")}
      }
      ${x.setByOffset("global_idx",w.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${d}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:p,dataType:i[0].dataType}],dispatchGroup:{x:Math.ceil(k/64)},programUniforms:[{type:12,data:k},...EA(i[0].dims,p)]}),getShaderSource:G}},m3=i=>{I3(i.inputs),i.compute(h3(i.inputs),{inputs:[0]})}}),k3,w3,B3,oC=uA(()=>{yA(),TA(),OA(),k3=(i,o,u,d,p)=>{let k=hA("output_data",p,u.length,4),h=rA("a_data",o[1].dataType,o[1].dims.length,4),w=rA("b_data",o[2].dataType,o[2].dims.length,4),x=rA("c_data",o[0].dataType,o[0].dims.length,4),G,z=(M,N,H)=>`select(${N}, ${M}, ${H})`;if(!d)G=k.setByOffset("global_idx",z(h.getByOffset("global_idx"),w.getByOffset("global_idx"),x.getByOffset("global_idx")));else{let M=(N,H,S="")=>{let K=`a_data[index_a${H}][component_a${H}]`,X=`b_data[index_b${H}][component_b${H}]`,V=`bool(c_data[index_c${H}] & (0xffu << (component_c${H} * 8)))`;return`
            let output_indices${H} = ${k.offsetToIndices(`global_idx * 4u + ${H}u`)};
            let offset_a${H} = ${h.broadcastedIndicesToOffset(`output_indices${H}`,k)};
            let offset_b${H} = ${w.broadcastedIndicesToOffset(`output_indices${H}`,k)};
            let offset_c${H} = ${x.broadcastedIndicesToOffset(`output_indices${H}`,k)};
            let index_a${H} = offset_a${H} / 4u;
            let index_b${H} = offset_b${H} / 4u;
            let index_c${H} = offset_c${H} / 4u;
            let component_a${H} = offset_a${H} % 4u;
            let component_b${H} = offset_b${H} % 4u;
            let component_c${H} = offset_c${H} % 4u;
            ${N}[${H}] = ${S}(${z(K,X,V)});
          `};p===9?G=`
            var data = vec4<u32>(0);
            ${M("data",0,"u32")}
            ${M("data",1,"u32")}
            ${M("data",2,"u32")}
            ${M("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:G=`
            ${M("output_data[global_idx]",0)}
            ${M("output_data[global_idx]",1)}
            ${M("output_data[global_idx]",2)}
            ${M("output_data[global_idx]",3)}
          `}return`
        ${i.registerUniform("vec_size","u32").declareVariables(x,h,w,k)}
        ${i.mainStart()}
        ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${G}
      }`},w3=i=>{let o=i[1].dims,u=i[2].dims,d=i[0].dims,p=i[1].dataType,k=!(eA.areEqual(o,u)&&eA.areEqual(u,d)),h=o,w=eA.size(o);if(k){let G=Y2.calcShape(Y2.calcShape(o,u,!1),d,!1);if(!G)throw new Error("Can't perform where op on the given tensors");h=G,w=eA.size(h)}let x=Math.ceil(w/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:G=>k3(G,i,h,k,p),getRunData:()=>({outputs:[{dims:h,dataType:p}],dispatchGroup:{x:Math.ceil(w/64/4)},programUniforms:[{type:12,data:x},...EA(d,o,u,h)]})}},B3=i=>{i.compute(w3(i.inputs))}}),E3,gC=uA(()=>{B6(),Pa(),E6(),x6(),v6(),G6(),Q6(),Y6(),T6(),O6(),H6(),P6(),S6(),F6(),R6(),W6(),K6(),Z6(),L6(),V6(),U6(),X6(),J6(),j6(),q6(),Tg(),_6(),$6(),AC(),eC(),tC(),Ta(),rC(),Lg(),aC(),iC(),sC(),Wg(),nC(),Xe(),Wa(),oC(),E3=new Map([["Abs",[to]],["Acos",[ro]],["Acosh",[ao]],["Add",[Vo]],["ArgMax",[Rn,Ha]],["ArgMin",[Fn,Ha]],["Asin",[io]],["Asinh",[so]],["Atan",[no]],["Atanh",[oo]],["Attention",[Un]],["AveragePool",[wf,kf]],["BatchNormalization",[qn]],["BiasAdd",[Ao]],["BiasSplitGelu",[Ko]],["Cast",[fo,go]],["Ceil",[Co]],["Clip",[lo]],["Concat",[s4,n4]],["Conv",[e1,$a]],["ConvTranspose",[N4,M4]],["Cos",[co]],["Cosh",[bo]],["CumSum",[O4,H4]],["DepthToSpace",[R4,W4]],["DequantizeLinear",[Mf,zf]],["Div",[Uo]],["Einsum",[X4,J4]],["Elu",[Io,ct]],["Equal",[Xo]],["Erf",[po]],["Exp",[ho]],["Expand",[$4]],["FastGelu",[eg]],["Floor",[mo]],["FusedConv",[e1,$a]],["Gather",[ig,ag]],["GatherElements",[bg,dg]],["GatherBlockQuantized",[ug,lg]],["GatherND",[ng,og]],["Gelu",[ko]],["Gemm",[mg,hg]],["GlobalAveragePool",[Ef,Bf]],["GlobalMaxPool",[Qf,Gf]],["Greater",[_o]],["GreaterOrEqual",[A4]],["GridSample",[yg,Dg]],["GroupQueryAttention",[Jg]],["HardSigmoid",[yo,Qo]],["InstanceNormalization",[_g]],["LayerNormalization",[ef]],["LeakyRelu",[wo,ct]],["Less",[$o]],["LessOrEqual",[e4]],["Log",[Ho]],["MatMul",[rf]],["MatMulNBits",[of,gf]],["MaxPool",[xf,vf]],["Mul",[Jo]],["MultiHeadAttention",[Ng,zg]],["Neg",[Eo]],["Not",[Bo]],["Pad",[pf]],["Pow",[jo]],["QuickGelu",[Fo,ct]],["Range",[Tf]],["Reciprocal",[xo]],["ReduceMin",[Tn]],["ReduceMean",[Dn]],["ReduceMax",[Nn]],["ReduceSum",[Hn]],["ReduceProd",[On]],["ReduceL1",[Mn]],["ReduceL2",[zn]],["ReduceLogSum",[Sn]],["ReduceLogSumExp",[Yn]],["ReduceSumSquare",[Pn]],["Relu",[vo]],["Resize",[t3,r3]],["RotaryEmbedding",[Zg]],["ScatterND",[Sf,Pf]],["Sigmoid",[Go]],["Sin",[Do]],["Sinh",[Mo]],["Slice",[u3,l3]],["SkipLayerNormalization",[s3]],["Split",[Fg,Rg]],["Sqrt",[zo]],["Softmax",[d3,b3]],["Sub",[qo]],["Tan",[Yo]],["Tanh",[No]],["ThresholdedRelu",[Oo,ct]],["Tile",[m3]],["Transpose",[js,qs]],["Where",[B3]]])}),x3,fC=uA(()=>{ge(),Oe(),OA(),x3=class{constructor(i){this.backend=i,this.repo=new Map,this.attributesBound=!1}getArtifact(i){return this.repo.get(i)}setArtifact(i,o){this.repo.set(i,o)}run(i,o,u,d,p){xe(i.programInfo.name);let k=this.backend.device,h=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let w=[];for(let G of o)w.push({binding:w.length,resource:{buffer:G.buffer}});for(let G of u)w.push({binding:w.length,resource:{buffer:G.buffer}});p&&w.push({binding:w.length,resource:p});let x=k.createBindGroup({layout:i.computePipeline.getBindGroupLayout(0),entries:w,label:i.programInfo.name});if(this.backend.sessionStatus==="capturing"){let G={kernelId:this.backend.currentKernelId,computePipeline:i.computePipeline,bindGroup:x,dispatchGroup:d};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(G)}h.setPipeline(i.computePipeline),h.setBindGroup(0,x),h.dispatchWorkgroups(...d),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),le(i.programInfo.name)}dispose(){}build(i,o){xe(i.name);let u=this.backend.device,d=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(G=>{u.features.has(G.feature)&&d.push(`enable ${G.extension};`)});let p=Zs(o,this.backend.device.limits),k=i.getShaderSource(p),h=`${d.join(`
`)}
${p.additionalImplementations}
${k}`,w=u.createShaderModule({code:h,label:i.name});LA("verbose",()=>`[WebGPU] ${i.name} shader code: ${h}`);let x=u.createComputePipeline({compute:{module:w,entryPoint:"main"},layout:"auto",label:i.name});return le(i.name),{programInfo:i,computePipeline:x,uniformVariablesInfo:p.variablesInfo}}normalizeDispatchGroupSize(i){let o=typeof i=="number"?i:i.x,u=typeof i=="number"?1:i.y||1,d=typeof i=="number"?1:i.z||1,p=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(o<=p&&u<=p&&d<=p)return[o,u,d];let k=o*u*d,h=Math.ceil(Math.sqrt(k));if(h>p){if(h=Math.ceil(Math.cbrt(k)),h>p)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[h,h,h]}else return[h,h,1]}}}),v3={};st(v3,{WebGpuBackend:()=>D3});var G3,Q3,y3,D3,uC=uA(()=>{ge(),yA(),Oe(),Ds(),k6(),gC(),fC(),G3=(i,o)=>{if(o.length!==i.length)throw new Error(`inputDependencies length ${o.length} is not equal to inputTensors length ${i.length}.`);let u=[];for(let d=0;d<i.length;++d){let p=i[d].dataType;switch(o[d]){case"none":{u.push("");break}case"type":{u.push(`${p}`);break}case"rank":{let k=i[d].dims.length;u.push(`${p};${k}`);break}case"dims":{let k=i[d].dims.join(",");u.push(`${p};${k}`);break}default:throw new Error(`unsupported input dependency: ${o[d]}`)}}return u.join("|")},Q3=(i,o,u)=>{let d=i.name;return i.shaderCache?.hint&&(d+="["+i.shaderCache.hint+"]"),d+=":"+u+`:${G3(o,i.shaderCache?.inputDependencies??new Array(o.length).fill("dims"))}`,d},y3=class{constructor(i){i&&(this.architecture=i.architecture,this.vendor=i.vendor)}isArchitecture(i){return this.architecture===i}isVendor(i){return this.vendor===i}},D3=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let i=this.kernelCustomData.get(this.currentKernelId);return i||(i={},this.kernelCustomData.set(this.currentKernelId,i)),i}async initialize(i,o){this.env=i;let u=[],d={requiredLimits:{maxComputeWorkgroupStorageSize:o.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:o.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:o.limits.maxStorageBufferBindingSize,maxBufferSize:o.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:o.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:o.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:o.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:o.limits.maxComputeWorkgroupSizeZ},requiredFeatures:u},p=k=>o.features.has(k)&&u.push(k)&&!0;p("chromium-experimental-timestamp-query-inside-passes")||p("timestamp-query"),p("shader-f16"),p("subgroups"),this.device=await o.requestDevice(d),this.adapterInfo=new y3(o.info||await o.requestAdapterInfo()),this.gpuDataManager=Fs(this),this.programManager=new x3(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,pa(i.logLevel,!!i.debug),this.device.onuncapturederror=k=>{k.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${k.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:o,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let i=this.getCommandEncoder(),o={};this.queryType==="at-passes"&&(o.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=i.beginComputePass(o)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;xe(),this.endComputePass();let i;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),i=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(i,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,i,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&i.mapAsync(GPUMapMode.READ).then(()=>{let o=new BigUint64Array(i.getMappedRange()),u=this.pendingQueries.get(i);for(let d=0;d<o.length/2;d++){let p=u[d],k=p.kernelId,h=this.kernels.get(k),w=h.kernelType,x=h.kernelName,G=p.programName,z=p.inputTensorViews,M=p.outputTensorViews,N=o[d*2],H=o[d*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=N);let S=Number(N-this.queryTimeBase),K=Number(H-this.queryTimeBase);if(!Number.isSafeInteger(S)||!Number.isSafeInteger(K))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:z.map(X=>({dims:X.dims,dataType:Te(X.dataType)})),outputsMetadata:M.map(X=>({dims:X.dims,dataType:Te(X.dataType)})),kernelId:k,kernelType:w,kernelName:x,programName:G,startTime:S,endTime:K});else{let X="";z.forEach((W,j)=>{X+=`input[${j}]: [${W.dims}] | ${Te(W.dataType)}, `});let V="";M.forEach((W,j)=>{V+=`output[${j}]: [${W.dims}] | ${Te(W.dataType)}, `}),console.log(`[profiling] kernel "${k}|${w}|${x}|${G}" ${X}${V}start time: ${S} ns, execution time: ${K-S} ns`)}Ut("GPU",`${G}::${N}::${H}`)}i.unmap(),this.pendingQueries.delete(i)}),le()}run(i,o,u,d,p,k){xe(i.name);let h=[];for(let W=0;W<o.length;++W){let j=o[W].data;if(j===0)continue;let l=this.gpuDataManager.get(j);if(!l)throw new Error(`no GPU data for input: ${j}`);h.push(l)}let{outputs:w,dispatchGroup:x,programUniforms:G}=i.getRunData(o),z=u.length===0?w.map((W,j)=>j):u;if(z.length!==w.length)throw new Error(`Output size ${z.length} must be equal to ${w.length}.`);let M=[],N=[];for(let W=0;W<w.length;++W){if(!Number.isInteger(z[W])||z[W]<-3||z[W]>=k)throw new Error(`Invalid output index: ${z[W]}`);if(z[W]===-3)continue;let j=z[W]===-1,l=z[W]===-2,B=j||l?p(w[W].dataType,w[W].dims):d(z[W],w[W].dataType,w[W].dims);if(M.push(B),B.data===0)continue;let A=this.gpuDataManager.get(B.data);if(!A)throw new Error(`no GPU data for output: ${B.data}`);if(j&&this.temporaryData.push(A),l){let C=this.kernelPersistentData.get(this.currentKernelId);C||(C=[],this.kernelPersistentData.set(this.currentKernelId,C)),C.push(A)}N.push(A)}if(h.length!==o.length||N.length!==M.length){if(N.length===0)return le(i.name),M;throw new Error(`Program ${i.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let H;if(G){let W=0,j=[];G.forEach(C=>{let y=typeof C.data=="number"?[C.data]:C.data;if(y.length===0)return;let aA=C.type===10?2:4,Q,T;C.type===10?(T=y.length>4?16:y.length>2?8:y.length*aA,Q=y.length>4?16:aA*y.length):(T=y.length<=2?y.length*aA:16,Q=16),W=Math.ceil(W/T)*T,j.push(W);let wA=C.type===10?8:4;W+=y.length>4?Math.ceil(y.length/wA)*Q:y.length*aA});let l=16;W=Math.ceil(W/l)*l;let B=new ArrayBuffer(W);G.forEach((C,y)=>{let aA=j[y],Q=typeof C.data=="number"?[C.data]:C.data;if(C.type===6)new Int32Array(B,aA,Q.length).set(Q);else if(C.type===12)new Uint32Array(B,aA,Q.length).set(Q);else if(C.type===10)new Uint16Array(B,aA,Q.length).set(Q);else if(C.type===1)new Float32Array(B,aA,Q.length).set(Q);else throw new Error(`Unsupported uniform type: ${Te(C.type)}`)});let A=this.gpuDataManager.create(W,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(A.buffer,0,B,0,W),this.gpuDataManager.release(A.id),H={offset:0,size:W,buffer:A.buffer}}let S=this.programManager.normalizeDispatchGroupSize(x),K=S[1]===1&&S[2]===1,X=Q3(i,o,K),V=this.programManager.getArtifact(X);if(V||(V=this.programManager.build(i,S),this.programManager.setArtifact(X,V),LA("info",()=>`[artifact] key: ${X}, programName: ${i.name}`)),G&&V.uniformVariablesInfo){if(G.length!==V.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${V.uniformVariablesInfo.length}, got ${G.length} in program "${V.programInfo.name}".`);for(let W=0;W<G.length;W++){let j=G[W],l=j.type,B=typeof j.data=="number"?1:j.data.length,[A,C]=V.uniformVariablesInfo[W];if(l!==A||B!==C)throw new Error(`Uniform variable ${W} mismatch: expect type ${A} with size ${C}, got type ${l} with size ${B} in program "${V.programInfo.name}".`)}}if(LA("info",()=>`[ProgramManager] run "${i.name}" (key=${X}) with ${S[0]}x${S[1]}x${S[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let W={kernelId:this.currentKernelId,programName:V.programInfo.name,inputTensorViews:o,outputTensorViews:M};this.pendingKernels.push(W),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(W)}return this.programManager.run(V,h,N,S,H),le(i.name),M}upload(i,o){this.gpuDataManager.upload(i,o)}memcpy(i,o){this.gpuDataManager.memcpy(i,o)}async download(i,o){await this.gpuDataManager.download(i,o)}alloc(i){return this.gpuDataManager.create(i).id}free(i){return this.gpuDataManager.release(i)}createKernel(i,o,u,d){let p=E3.get(i);if(!p)throw new Error(`kernel not implemented: ${i}`);let k={kernelType:i,kernelName:d,kernelEntry:p[0],attributes:[p[1],u]};this.kernels.set(o,k)}releaseKernel(i){let o=this.kernelPersistentData.get(i);if(o){for(let u of o)this.gpuDataManager.release(u.id);this.kernelPersistentData.delete(i)}this.kernelCustomData.delete(i),this.kernels.delete(i)}computeKernel(i,o,u){let d=this.kernels.get(i);if(!d)throw new Error(`kernel not created: ${i}`);let p=d.kernelType,k=d.kernelName,h=d.kernelEntry,w=d.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${p}] ${k}" is not allowed to be called recursively`);this.currentKernelId=i,w[0]&&(w[1]=w[0](w[1]),w[0]=void 0),LA("info",()=>`[WebGPU] Start to run kernel "[${p}] ${k}"...`);let x=this.env.debug;this.temporaryData=[];try{return x&&this.device.pushErrorScope("validation"),h(o,w[1]),0}catch(G){return u.push(Promise.resolve(`[WebGPU] Kernel "[${p}] ${k}" failed. ${G}`)),1}finally{x&&u.push(this.device.popErrorScope().then(G=>G?`GPU validation error for kernel "[${p}] ${k}": ${G.message}`:null));for(let G of this.temporaryData)this.gpuDataManager.release(G.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(i,o,u,d){let p=this.sessionExternalDataMapping.get(i);p||(p=new Map,this.sessionExternalDataMapping.set(i,p));let k=p.get(o),h=this.gpuDataManager.registerExternalBuffer(u,d,k);return p.set(o,[h,u]),h}unregisterBuffers(i){let o=this.sessionExternalDataMapping.get(i);o&&(o.forEach(u=>this.gpuDataManager.unregisterExternalBuffer(u[0])),this.sessionExternalDataMapping.delete(i))}getBuffer(i){let o=this.gpuDataManager.get(i);if(!o)throw new Error(`no GPU data for buffer: ${i}`);return o.buffer}createDownloader(i,o,u){return async()=>{let d=await Da(this,i,o);return ha(d.buffer,u)}}writeTimestamp(i){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,i)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){LA("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){LA("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){LA("info","replay"),this.sessionStatus="replaying";let i=this.capturedCommandList.get(this.currentSessionId),o=this.capturedPendingKernels.get(this.currentSessionId),u=i.length;this.pendingKernels=[];for(let d=0;d<u;d++){let p=this.getComputePassEncoder(),k=i[d];this.writeTimestamp(this.pendingDispatchNumber*2),p.setPipeline(k.computePipeline),p.setBindGroup(0,k.bindGroup),p.dispatchWorkgroups(...k.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(o[d]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(i){this.unregisterBuffers(i),this.capturedCommandList.has(i)&&this.capturedCommandList.delete(i),this.capturedPendingKernels.has(i)&&this.capturedPendingKernels.delete(i),this.gpuDataManager.onReleaseSession(i)}onRunStart(i){this.currentSessionId=i,this.setQueryType()}}}),M3={};st(M3,{init:()=>Y3});var ur,z3,Y3,lC=uA(()=>{yA(),Oe(),TA(),m6(),ur=class jl{constructor(o,u,d,p){this.module=o,this.dataType=u,this.data=d,this.dims=p}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let o=eA.size(this.dims);return o===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,o)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let o=eA.size(this.dims);return o===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,o)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let o=eA.size(this.dims);return o===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,o)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let o=eA.size(this.dims);return o===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,o)}reshape(o){if(eA.size(o)!==eA.size(this.dims))throw new Error("Invalid new shape");return new jl(this.module,this.dataType,this.data,o)}},z3=class{constructor(i,o,u){this.module=i,this.backend=o,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=o.adapterInfo;let d=i.PTR_SIZE,p=u/i.PTR_SIZE,k=d===4?"i32":"i64";this.opKernelContext=Number(i.getValue(d*p++,k));let h=Number(i.getValue(d*p++,k));this.outputCount=Number(i.getValue(d*p++,k)),this.customDataOffset=Number(i.getValue(d*p++,"*")),this.customDataSize=Number(i.getValue(d*p++,k));let w=[];for(let x=0;x<h;x++){let G=Number(i.getValue(d*p++,k)),z=Number(i.getValue(d*p++,"*")),M=Number(i.getValue(d*p++,k)),N=[];for(let H=0;H<M;H++)N.push(Number(i.getValue(d*p++,k)));w.push(new ur(i,G,z,N))}this.inputs=w}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(i,o){let u=o?.inputs?.map(h=>typeof h=="number"?this.inputs[h]:h)??this.inputs,d=o?.outputs??[],p=(h,w,x)=>new ur(this.module,w,this.output(h,x),x),k=(h,w)=>{let x=n2(h,w);if(!x)throw new Error(`Unsupported data type: ${h}`);let G=x>0?this.backend.gpuDataManager.create(x).id:0;return new ur(this.module,h,G,w)};return this.backend.run(i,u,d,p,k,this.outputCount)}output(i,o){let u=this.module.stackSave();try{let d=this.module.PTR_SIZE,p=d===4?"i32":"i64",k=this.module.stackAlloc((1+o.length)*d);this.module.setValue(k,o.length,p);for(let h=0;h<o.length;h++)this.module.setValue(k+d*(h+1),o[h],p);return this.module._JsepOutput(this.opKernelContext,i,k)}catch(d){throw new Error(`Failed to generate kernel's output[${i}] with dims [${o}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${d}`)}finally{this.module.stackRestore(u)}}},Y3=async(i,o,u,d)=>{let p=o.jsepInit;if(!p)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(i==="webgpu"){let k=(uC(),Lt(v3)).WebGpuBackend,h=new k;await h.initialize(u,d),p("webgpu",[h,w=>h.alloc(Number(w)),w=>h.free(w),(w,x,G,z=!1)=>{if(z)LA("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(w)}, dst=${Number(x)}, size=${Number(G)}`),h.memcpy(Number(w),Number(x));else{LA("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(w)}, gpuDataId=${Number(x)}, size=${Number(G)}`);let M=o.HEAPU8.subarray(Number(w>>>0),Number(w>>>0)+Number(G));h.upload(Number(x),M)}},async(w,x,G)=>{LA("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${w}, dataOffset=${x}, size=${G}`),await h.download(Number(w),()=>o.HEAPU8.subarray(Number(x)>>>0,Number(x+G)>>>0))},(w,x,G)=>h.createKernel(w,Number(x),G,o.UTF8ToString(o._JsepGetNodeName(Number(x)))),w=>h.releaseKernel(w),(w,x,G,z)=>{LA("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${G}, kernel=${w}, contextDataOffset=${x}`);let M=new z3(o,h,Number(x));return h.computeKernel(Number(w),M,z)},()=>h.captureBegin(),()=>h.captureEnd(),()=>h.replay()])}else{let k=new Os(u);p("webnn",[k,()=>k.reserveTensorId(),h=>k.releaseTensorId(h),async(h,w,x,G,z)=>k.ensureTensor(h,w,x,G,z),(h,w)=>{k.uploadTensor(h,w)},async(h,w)=>k.downloadTensor(h,w),(h,w)=>k.registerMLContext(h,w),!!u.trace])}}}),N3,B1,E1,Je,T3,x1,lr,v1,G1,Q1,y1,D1,M1,O3=uA(()=>{ge(),I6(),p6(),yA(),i2(),Ca(),ms(),N3=(i,o)=>{s0()._OrtInit(i,o)!==0&&e0("Can't initialize onnxruntime.")},B1=async i=>{N3(i.wasm.numThreads,_t(i.logLevel))},E1=async(i,o)=>{s0().asyncInit?.();let u=i.webgpu.adapter;if(o==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");if(u){if(typeof u.limits!="object"||typeof u.features!="object"||typeof u.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let d=i.webgpu.powerPreference;if(d!==void 0&&d!=="low-power"&&d!=="high-performance")throw new Error(`Invalid powerPreference setting: "${d}"`);let p=i.webgpu.forceFallbackAdapter;if(p!==void 0&&typeof p!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${p}"`);if(u=await navigator.gpu.requestAdapter({powerPreference:d,forceFallbackAdapter:p}),!u)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}}if(o==="webnn"&&(typeof navigator>"u"||!navigator.ml))throw new Error("WebNN is not supported in current environment");{let d=(lC(),Lt(M3)).init;o==="webgpu"&&await d("webgpu",s0(),i,u),o==="webnn"&&await d("webnn",s0(),i)}},Je=new Map,T3=i=>{let o=s0(),u=o.stackSave();try{let d=o.PTR_SIZE,p=o.stackAlloc(2*d);o._OrtGetInputOutputCount(i,p,p+d)!==0&&e0("Can't get session input/output count.");let k=d===4?"i32":"i64";return[Number(o.getValue(p,k)),Number(o.getValue(p+d,k))]}finally{o.stackRestore(u)}},x1=(i,o)=>{let u=s0(),d=u.stackSave(),p=0;try{let k=u.PTR_SIZE,h=u.stackAlloc(2*k);u._OrtGetInputOutputMetadata(i,o,h,h+k)!==0&&e0("Can't get session input/output metadata.");let w=Number(u.getValue(h,"*"));p=Number(u.getValue(h+k,"*"));let x=u.HEAP32[p/4];if(x===0)return[w,0];let G=u.HEAPU32[p/4+1],z=[];for(let M=0;M<G;M++){let N=Number(u.getValue(p+8+M*k,"*"));z.push(N!==0?u.UTF8ToString(N):Number(u.getValue(p+8+(M+G)*k,"*")))}return[w,x,z]}finally{u.stackRestore(d),p!==0&&u._OrtFree(p)}},lr=i=>{let o=s0(),u=o._malloc(i.byteLength);if(u===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${i.byteLength}.`);return o.HEAPU8.set(i,u),[u,i.byteLength]},v1=async(i,o)=>{let u,d,p=s0();Array.isArray(i)?[u,d]=i:i.buffer===p.HEAPU8.buffer?[u,d]=[i.byteOffset,i.byteLength]:[u,d]=lr(i);let k=0,h=0,w=0,x=[],G=[],z=[];try{if([h,x]=await hs(o),o?.externalData&&p.mountExternalData){let l=[];for(let B of o.externalData){let A=typeof B=="string"?B:B.path;l.push(Ia(typeof B=="string"?B:B.data).then(C=>{p.mountExternalData(A,C)}))}await Promise.all(l)}for(let l of o?.executionProviders??[])if((typeof l=="string"?l:l.name)==="webnn"){if(p.shouldTransferToMLTensor=!1,typeof l!="string"){let B=l,A=B?.context,C=B?.gpuDevice,y=B?.deviceType,aA=B?.powerPreference;A?p.currentContext=A:C?p.currentContext=await p.webnnCreateMLContext(C):p.currentContext=await p.webnnCreateMLContext({deviceType:y,powerPreference:aA})}else p.currentContext=await p.webnnCreateMLContext();break}k=await p._OrtCreateSession(u,d,h),p.webgpuOnCreateSession?.(k),k===0&&e0("Can't create a session."),p.jsepOnCreateSession?.(),p.currentContext&&(p.webnnRegisterMLContext(k,p.currentContext),p.currentContext=void 0,p.shouldTransferToMLTensor=!0);let[M,N]=T3(k),H=!!o?.enableGraphCapture,S=[],K=[],X=[],V=[],W=[];for(let l=0;l<M;l++){let[B,A,C]=x1(k,l);B===0&&e0("Can't get an input name."),G.push(B);let y=p.UTF8ToString(B);S.push(y),X.push(A===0?{name:y,isTensor:!1}:{name:y,isTensor:!0,type:Te(A),shape:C})}for(let l=0;l<N;l++){let[B,A,C]=x1(k,l+M);B===0&&e0("Can't get an output name."),z.push(B);let y=p.UTF8ToString(B);K.push(y),V.push(A===0?{name:y,isTensor:!1}:{name:y,isTensor:!0,type:Te(A),shape:C});{if(H&&o?.preferredOutputLocation===void 0){W.push("gpu-buffer");continue}let aA=typeof o?.preferredOutputLocation=="string"?o.preferredOutputLocation:o?.preferredOutputLocation?.[y]??"cpu",Q=p.webnnIsGraphOutput;if(aA==="cpu"&&Q&&Q(k,y)){W.push("ml-tensor-cpu-output");continue}if(aA!=="cpu"&&aA!=="cpu-pinned"&&aA!=="gpu-buffer"&&aA!=="ml-tensor")throw new Error(`Not supported preferred output location: ${aA}.`);if(H&&aA!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${aA}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);W.push(aA)}}let j=null;return W.some(l=>l==="gpu-buffer"||l==="ml-tensor"||l==="ml-tensor-cpu-output")&&(w=p._OrtCreateBinding(k),w===0&&e0("Can't create IO binding."),j={handle:w,outputPreferredLocations:W,outputPreferredLocationsEncoded:W.map(l=>l==="ml-tensor-cpu-output"?"ml-tensor":l).map(l=>ba(l))}),Je.set(k,[k,G,z,j,H,!1]),[k,S,K,X,V]}catch(M){throw G.forEach(N=>p._OrtFree(N)),z.forEach(N=>p._OrtFree(N)),w!==0&&p._OrtReleaseBinding(w)!==0&&e0("Can't release IO binding."),k!==0&&p._OrtReleaseSession(k)!==0&&e0("Can't release session."),M}finally{p._free(u),h!==0&&p._OrtReleaseSessionOptions(h)!==0&&e0("Can't release session options."),x.forEach(M=>p._free(M)),p.unmountExternalData?.()}},G1=i=>{let o=s0(),u=Je.get(i);if(!u)throw new Error(`cannot release session. invalid session id: ${i}`);let[d,p,k,h,w]=u;h&&(w&&o._OrtClearBoundOutputs(h.handle)!==0&&e0("Can't clear bound outputs."),o._OrtReleaseBinding(h.handle)!==0&&e0("Can't release IO binding.")),o.jsepOnReleaseSession?.(i),o.webnnOnReleaseSession?.(i),o.webgpuOnReleaseSession?.(i),p.forEach(x=>o._OrtFree(x)),k.forEach(x=>o._OrtFree(x)),o._OrtReleaseSession(d)!==0&&e0("Can't release session."),Je.delete(i)},Q1=async(i,o,u,d,p,k,h=!1)=>{if(!i){o.push(0);return}let w=s0(),x=w.PTR_SIZE,G=i[0],z=i[1],M=i[3],N=M,H,S;if(G==="string"&&(M==="gpu-buffer"||M==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(h&&M!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${k} when enableGraphCapture is true.`);if(M==="gpu-buffer"){let V=i[2].gpuBuffer;S=n2(s2(G),z);{let W=w.jsepRegisterBuffer;if(!W)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');H=W(d,k,V,S)}}else if(M==="ml-tensor"){let V=i[2].mlTensor;S=n2(s2(G),z);let W=w.webnnRegisterMLTensor;if(!W)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');H=W(d,V,s2(G),z)}else{let V=i[2];if(Array.isArray(V)){S=x*V.length,H=w._malloc(S),u.push(H);for(let W=0;W<V.length;W++){if(typeof V[W]!="string")throw new TypeError(`tensor data at index ${W} is not a string`);w.setValue(H+W*x,Ce(V[W],u),"*")}}else{let W=w.webnnIsGraphInput,j=w.webnnIsGraphOutput;if(G!=="string"&&W&&j){let l=w.UTF8ToString(p);if(W(d,l)||j(d,l)){let B=s2(G);S=n2(B,z),N="ml-tensor";let A=w.webnnCreateTemporaryTensor,C=w.webnnUploadTensor;if(!A||!C)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let y=await A(d,B,z);C(y,new Uint8Array(V.buffer,V.byteOffset,V.byteLength)),H=y}else S=V.byteLength,H=w._malloc(S),u.push(H),w.HEAPU8.set(new Uint8Array(V.buffer,V.byteOffset,S),H)}else S=V.byteLength,H=w._malloc(S),u.push(H),w.HEAPU8.set(new Uint8Array(V.buffer,V.byteOffset,S),H)}}let K=w.stackSave(),X=w.stackAlloc(4*z.length);try{z.forEach((W,j)=>w.setValue(X+j*x,W,x===4?"i32":"i64"));let V=w._OrtCreateTensor(s2(G),H,S,X,z.length,ba(N));V===0&&e0(`Can't create tensor for input/output. session=${d}, index=${k}.`),o.push(V)}finally{w.stackRestore(K)}},y1=async(i,o,u,d,p,k)=>{let h=s0(),w=h.PTR_SIZE,x=Je.get(i);if(!x)throw new Error(`cannot run inference. invalid session id: ${i}`);let G=x[0],z=x[1],M=x[2],N=x[3],H=x[4],S=x[5],K=o.length,X=d.length,V=0,W=[],j=[],l=[],B=[],A=h.stackSave(),C=h.stackAlloc(K*w),y=h.stackAlloc(K*w),aA=h.stackAlloc(X*w),Q=h.stackAlloc(X*w);try{[V,W]=cs(k),r2("wasm prepareInputOutputTensor");for(let oA=0;oA<K;oA++)await Q1(u[oA],j,B,i,z[o[oA]],o[oA],H);for(let oA=0;oA<X;oA++)await Q1(p[oA],l,B,i,M[d[oA]],K+d[oA],H);a2("wasm prepareInputOutputTensor");for(let oA=0;oA<K;oA++)h.setValue(C+oA*w,j[oA],"*"),h.setValue(y+oA*w,z[o[oA]],"*");for(let oA=0;oA<X;oA++)h.setValue(aA+oA*w,l[oA],"*"),h.setValue(Q+oA*w,M[d[oA]],"*");if(N&&!S){let{handle:oA,outputPreferredLocations:PA,outputPreferredLocationsEncoded:vA}=N;if(z.length!==K)throw new Error(`input count from feeds (${K}) is expected to be always equal to model's input count (${z.length}).`);r2("wasm bindInputsOutputs");for(let mA=0;mA<K;mA++){let ZA=o[mA];await h._OrtBindInput(oA,z[ZA],j[mA])!==0&&e0(`Can't bind input[${mA}] for session=${i}.`)}for(let mA=0;mA<X;mA++){let ZA=d[mA];p[mA]?.[3]?h._OrtBindOutput(oA,M[ZA],l[mA],0)!==0&&e0(`Can't bind pre-allocated output[${mA}] for session=${i}.`):h._OrtBindOutput(oA,M[ZA],0,vA[ZA])!==0&&e0(`Can't bind output[${mA}] to ${PA[mA]} for session=${i}.`)}a2("wasm bindInputsOutputs"),Je.set(i,[G,z,M,N,H,!0])}h.jsepOnRunStart?.(G),h.webnnOnRunStart?.(G);let T;N?T=await h._OrtRunWithBinding(G,N.handle,X,aA,V):T=await h._OrtRun(G,y,C,K,Q,X,aA,V),T!==0&&e0("failed to call OrtRun().");let wA=[],sA=[];r2("wasm ProcessOutputTensor");for(let oA=0;oA<X;oA++){let PA=Number(h.getValue(aA+oA*w,"*"));if(PA===l[oA]){wA.push(p[oA]);continue}let vA=h.stackSave(),mA=h.stackAlloc(4*w),ZA=!1,BA,i0=0;try{h._OrtGetTensorData(PA,mA,mA+w,mA+2*w,mA+3*w)!==0&&e0(`Can't access output tensor data on index ${oA}.`);let gA=w===4?"i32":"i64",CA=Number(h.getValue(mA,gA));i0=h.getValue(mA+w,"*");let zA=h.getValue(mA+w*2,"*"),jA=Number(h.getValue(mA+w*3,gA)),E0=[];for(let x0=0;x0<jA;x0++)E0.push(Number(h.getValue(zA+x0*w,gA)));h._OrtFree(zA)!==0&&e0("Can't free memory for tensor dims.");let ue=E0.reduce((x0,p0)=>x0*p0,1);BA=Te(CA);let h2=N?.outputPreferredLocations[d[oA]];if(BA==="string"){if(h2==="gpu-buffer"||h2==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let x0=[];for(let p0=0;p0<ue;p0++){let he=h.getValue(i0+p0*w,"*"),L1=h.getValue(i0+(p0+1)*w,"*"),V1=p0===ue-1?void 0:L1-he;x0.push(h.UTF8ToString(he,V1))}wA.push([BA,E0,x0,"cpu"])}else if(h2==="gpu-buffer"&&ue>0){let x0=h.jsepGetBuffer;if(!x0)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let p0=x0(i0),he=n2(CA,ue);if(he===void 0||!ca(BA))throw new Error(`Unsupported data type: ${BA}`);ZA=!0,wA.push([BA,E0,{gpuBuffer:p0,download:h.jsepCreateDownloader(p0,he,BA),dispose:()=>{h._OrtReleaseTensor(PA)!==0&&e0("Can't release tensor.")}},"gpu-buffer"])}else if(h2==="ml-tensor"&&ue>0){let x0=h.webnnEnsureTensor,p0=h.webnnIsGraphInputOutputTypeSupported;if(!x0||!p0)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(n2(CA,ue)===void 0||!da(BA))throw new Error(`Unsupported data type: ${BA}`);if(!p0(i,BA,!1))throw new Error(`preferredLocation "ml-tensor" for ${BA} output is not supported by current WebNN Context.`);let he=await x0(i,i0,CA,E0,!1);ZA=!0,wA.push([BA,E0,{mlTensor:he,download:h.webnnCreateMLTensorDownloader(i0,BA),dispose:()=>{h.webnnReleaseTensorId(i0),h._OrtReleaseTensor(PA)}},"ml-tensor"])}else if(h2==="ml-tensor-cpu-output"&&ue>0){let x0=h.webnnCreateMLTensorDownloader(i0,BA)(),p0=wA.length;ZA=!0,sA.push((async()=>{let he=[p0,await x0];return h.webnnReleaseTensorId(i0),h._OrtReleaseTensor(PA),he})()),wA.push([BA,E0,[],"cpu"])}else{let x0=qt(BA),p0=new x0(ue);new Uint8Array(p0.buffer,p0.byteOffset,p0.byteLength).set(h.HEAPU8.subarray(i0,i0+p0.byteLength)),wA.push([BA,E0,p0,"cpu"])}}finally{h.stackRestore(vA),BA==="string"&&i0&&h._free(i0),ZA||h._OrtReleaseTensor(PA)}}N&&!H&&(h._OrtClearBoundOutputs(N.handle)!==0&&e0("Can't clear bound outputs."),Je.set(i,[G,z,M,N,H,!1]));for(let[oA,PA]of await Promise.all(sA))wA[oA][2]=PA;return a2("wasm ProcessOutputTensor"),wA}finally{h.webnnOnRunEnd?.(G),h.stackRestore(A),j.forEach(T=>h._OrtReleaseTensor(T)),l.forEach(T=>h._OrtReleaseTensor(T)),B.forEach(T=>h._free(T)),V!==0&&h._OrtReleaseRunOptions(V),W.forEach(T=>h._free(T))}},D1=i=>{let o=s0(),u=Je.get(i);if(!u)throw new Error("invalid session id");let d=u[0],p=o._OrtEndProfiling(d);p===0&&e0("Can't get an profile file name."),o._OrtFree(p)},M1=i=>{let o=[];for(let u of i){let d=u[2];!Array.isArray(d)&&"buffer"in d&&o.push(d.buffer)}return o}}),je,fe,O2,kt,wt,Cr,z1,cr,c2,d2,H3,P3,S3,F3,R3,W3,K3,Z3,L3=uA(()=>{ge(),O3(),i2(),ga(),je=()=>!!f0.wasm.proxy&&typeof document<"u",O2=!1,kt=!1,wt=!1,cr=new Map,c2=(i,o)=>{let u=cr.get(i);u?u.push(o):cr.set(i,[o])},d2=()=>{if(O2||!kt||wt||!fe)throw new Error("worker not ready")},H3=i=>{switch(i.data.type){case"init-wasm":O2=!1,i.data.err?(wt=!0,z1[1](i.data.err)):(kt=!0,z1[0]()),Cr&&(URL.revokeObjectURL(Cr),Cr=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let o=cr.get(i.data.type);i.data.err?o.shift()[1](i.data.err):o.shift()[0](i.data.out);break}}},P3=async()=>{if(!kt){if(O2)throw new Error("multiple calls to 'initWasm()' detected.");if(wt)throw new Error("previous call to 'initWasm()' failed.");if(O2=!0,je())return new Promise((i,o)=>{fe?.terminate(),gs().then(([u,d])=>{try{fe=d,fe.onerror=k=>o(k),fe.onmessage=H3,z1=[i,o];let p={type:"init-wasm",in:f0};if(!p.in.wasm.wasmPaths&&u){let k=ia();k&&(p.in.wasm.wasmPaths=k)}fe.postMessage(p),Cr=u}catch(p){o(p)}},o)});try{await la(f0.wasm),await B1(f0),kt=!0}catch(i){throw wt=!0,i}finally{O2=!1}}},S3=async i=>{if(je())return d2(),new Promise((o,u)=>{c2("init-ep",[o,u]);let d={type:"init-ep",in:{epName:i,env:f0}};fe.postMessage(d)});await E1(f0,i)},F3=async i=>je()?(d2(),new Promise((o,u)=>{c2("copy-from",[o,u]);let d={type:"copy-from",in:{buffer:i}};fe.postMessage(d,[i.buffer])})):lr(i),R3=async(i,o)=>{if(je()){if(o?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return d2(),new Promise((u,d)=>{c2("create",[u,d]);let p={type:"create",in:{model:i,options:{...o}}},k=[];i instanceof Uint8Array&&k.push(i.buffer),fe.postMessage(p,k)})}else return v1(i,o)},W3=async i=>{if(je())return d2(),new Promise((o,u)=>{c2("release",[o,u]);let d={type:"release",in:i};fe.postMessage(d)});G1(i)},K3=async(i,o,u,d,p,k)=>{if(je()){if(u.some(h=>h[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(p.some(h=>h))throw new Error("pre-allocated output tensor is not supported for proxy.");return d2(),new Promise((h,w)=>{c2("run",[h,w]);let x=u,G={type:"run",in:{sessionId:i,inputIndices:o,inputs:x,outputIndices:d,options:k}};fe.postMessage(G,M1(x))})}else return y1(i,o,u,d,p,k)},Z3=async i=>{if(je())return d2(),new Promise((o,u)=>{c2("end-profiling",[o,u]);let d={type:"end-profiling",in:i};fe.postMessage(d)});D1(i)}}),Y1,V3,U3,CC=uA(()=>{ge(),L3(),yA(),ea(),ms(),Y1=(i,o)=>{switch(i.location){case"cpu":return[i.type,i.dims,i.data,"cpu"];case"gpu-buffer":return[i.type,i.dims,{gpuBuffer:i.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[i.type,i.dims,{mlTensor:i.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${i.location} for ${o()}`)}},V3=i=>{switch(i[3]){case"cpu":return new $0(i[0],i[2],i[1]);case"gpu-buffer":{let o=i[0];if(!ca(o))throw new Error(`not supported data type: ${o} for deserializing GPU tensor`);let{gpuBuffer:u,download:d,dispose:p}=i[2];return $0.fromGpuBuffer(u,{dataType:o,dims:i[1],download:d,dispose:p})}case"ml-tensor":{let o=i[0];if(!da(o))throw new Error(`not supported data type: ${o} for deserializing MLTensor tensor`);let{mlTensor:u,download:d,dispose:p}=i[2];return $0.fromMLTensor(u,{dataType:o,dims:i[1],download:d,dispose:p})}default:throw new Error(`invalid data location: ${i[3]}`)}},U3=class{async fetchModelAndCopyToWasmMemory(i){return F3(await Ia(i))}async loadModel(i,o){xe();let u;typeof i=="string"?u=await this.fetchModelAndCopyToWasmMemory(i):u=i,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await R3(u,o),le()}async dispose(){return W3(this.sessionId)}async run(i,o,u){xe();let d=[],p=[];Object.entries(i).forEach(M=>{let N=M[0],H=M[1],S=this.inputNames.indexOf(N);if(S===-1)throw new Error(`invalid input '${N}'`);d.push(H),p.push(S)});let k=[],h=[];Object.entries(o).forEach(M=>{let N=M[0],H=M[1],S=this.outputNames.indexOf(N);if(S===-1)throw new Error(`invalid output '${N}'`);k.push(H),h.push(S)});let w=d.map((M,N)=>Y1(M,()=>`input "${this.inputNames[p[N]]}"`)),x=k.map((M,N)=>M?Y1(M,()=>`output "${this.outputNames[h[N]]}"`):null),G=await K3(this.sessionId,p,w,h,x,u),z={};for(let M=0;M<G.length;M++)z[this.outputNames[h[M]]]=k[M]??V3(G[M]);return le(),z}startProfiling(){}endProfiling(){Z3(this.sessionId)}}}),X3={};st(X3,{OnnxruntimeWebAssemblyBackend:()=>T1,initializeFlags:()=>N1,wasmBackend:()=>J3});var N1,T1,J3,cC=uA(()=>{ge(),L3(),CC(),N1=()=>{(typeof f0.wasm.initTimeout!="number"||f0.wasm.initTimeout<0)&&(f0.wasm.initTimeout=0);let i=f0.wasm.simd;if(typeof i!="boolean"&&i!==void 0&&i!=="fixed"&&i!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${i}". Reset it to \`false\` and ignore SIMD feature checking.`),f0.wasm.simd=!1),typeof f0.wasm.proxy!="boolean"&&(f0.wasm.proxy=!1),typeof f0.wasm.trace!="boolean"&&(f0.wasm.trace=!1),typeof f0.wasm.numThreads!="number"||!Number.isInteger(f0.wasm.numThreads)||f0.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)f0.wasm.numThreads=1;else{let o=typeof navigator>"u"?A6("node:os").cpus().length:navigator.hardwareConcurrency;f0.wasm.numThreads=Math.min(4,Math.ceil((o||1)/2))}},T1=class{async init(i){N1(),await P3(),await S3(i)}async createInferenceSessionHandler(i,o){let u=new U3;return await u.loadModel(i,o),u}},J3=new T1});ge(),ge(),ge();var dC="1.23.0";{let i=(cC(),Lt(X3)).wasmBackend;z2("webgpu",i,5),z2("webnn",i,5),z2("cpu",i,10),z2("wasm",i,10)}Object.defineProperty(f0.versions,"web",{value:dC,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function bC(i){return i?i.replace(/[\u{1F300}-\u{1FAFF}\u{200D}\u{FE0F}]/gu,"").replace(/[""''"""]/g,"").replace(/[()\\]/g,"").replace(/\s+—\s+/g,". ").replace(/[^\u0000-\u024F.,!?;:\-\s0-9a-zA-Z]/g,"").trim():""}const IC=4,O1=500;function pC(i){if(!i)return[];const o=i.split(`
`).map(d=>d.trim()).filter(Boolean),u=[];for(const d of o){const k=(/[.!?]$/.test(d)?d:d+".").split(/(?<=[.!?])(?=\s+|$)/);let h="";for(const w of k){const x=w.trim();if(!x)continue;if(x.length>O1){const z=x.split(" ");let M="";for(const N of z){const H=M?`${M} ${N}`:N;H.length<=O1?M=H:(M&&u.push(M),M=N)}M&&(h=M);continue}const G=h?`${h} ${x}`:x;G.length>O1?(h&&u.push(h),h=x):G.length<IC?h=G:(h&&u.push(h),h=x)}h&&u.push(h)}return u}const hC="tts-cache",H2="models";let dr=null;function mC(){return dr||(dr=new Promise((i,o)=>{const u=indexedDB.open(hC,1);u.onupgradeneeded=()=>{const d=u.result;d.objectStoreNames.contains(H2)||d.createObjectStore(H2,{keyPath:"url"})},u.onsuccess=()=>i(u.result),u.onerror=()=>o(u.error)}),dr)}async function j3(i){const o=await mC(),d=o.transaction(H2,"readonly").objectStore(H2).get(i),p=await new Promise((x,G)=>{d.onsuccess=()=>x(d.result?.data??null),d.onerror=()=>G(d.error)});if(p)return p;const k=await fetch(i);if(!k.ok)throw new Error(`fetch ${i} ${k.status}`);const h=await k.arrayBuffer();return o.transaction(H2,"readwrite").objectStore(H2).put({url:i,data:h,ts:Date.now()}),h}async function kC(i){const o=await j3(i),u=new TextDecoder;return JSON.parse(u.decode(new Uint8Array(o)))}var Z=Z!==void 0?Z:{};Z.expectedDataFileDownloads||(Z.expectedDataFileDownloads=0);var wC=typeof importScripts=="function",H1=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",q3=typeof atob=="function"?atob:function(i){var o,u,d,p,k,h,w="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",x="",G=0;i=i.replace(/[^A-Za-z0-9\+\/\=]/g,"");do o=w.indexOf(i.charAt(G++))<<2|(p=w.indexOf(i.charAt(G++)))>>4,u=(15&p)<<4|(k=w.indexOf(i.charAt(G++)))>>2,d=(3&k)<<6|(h=w.indexOf(i.charAt(G++))),x+=String.fromCharCode(o),k!==64&&(x+=String.fromCharCode(u)),h!==64&&(x+=String.fromCharCode(d));while(G<i.length);return x};H1&&(process.argv.length>1&&(P1=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(i){if(!(i instanceof BC))throw i})),process.on("unhandledRejection",(function(i){throw i})),Z.inspect=function(){return"[Emscripten Module object]"}),Z.expectedDataFileDownloads++,(function(){if(Z.ENVIRONMENT_IS_PTHREAD)return;const i="/usr/share/espeak-ng-data",o=i+"/lang",u=i+"/voices";(function(d){var p=null,k=null;function h(){function w(N,H){if(!N)throw H+new Error().stack}function x(N,H,S){this.start=N,this.end=H,this.audio=S}Z.FS_createPath("/","usr",!0,!0),Z.FS_createPath("/usr","share",!0,!0),Z.FS_createPath("/usr/share","espeak-ng-data",!0,!0),Z.FS_createPath(i,"lang",!0,!0),Z.FS_createPath(o,"aav",!0,!0),Z.FS_createPath(o,"art",!0,!0),Z.FS_createPath(o,"azc",!0,!0),Z.FS_createPath(o,"bat",!0,!0),Z.FS_createPath(o,"bnt",!0,!0),Z.FS_createPath(o,"ccs",!0,!0),Z.FS_createPath(o,"cel",!0,!0),Z.FS_createPath(o,"cus",!0,!0),Z.FS_createPath(o,"dra",!0,!0),Z.FS_createPath(o,"esx",!0,!0),Z.FS_createPath(o,"gmq",!0,!0),Z.FS_createPath(o,"gmw",!0,!0),Z.FS_createPath(o,"grk",!0,!0),Z.FS_createPath(o,"inc",!0,!0),Z.FS_createPath(o,"ine",!0,!0),Z.FS_createPath(o,"ira",!0,!0),Z.FS_createPath(o,"iro",!0,!0),Z.FS_createPath(o,"itc",!0,!0),Z.FS_createPath(o,"jpx",!0,!0),Z.FS_createPath(o,"map",!0,!0),Z.FS_createPath(o,"miz",!0,!0),Z.FS_createPath(o,"myn",!0,!0),Z.FS_createPath(o,"poz",!0,!0),Z.FS_createPath(o,"roa",!0,!0),Z.FS_createPath(o,"sai",!0,!0),Z.FS_createPath(o,"sem",!0,!0),Z.FS_createPath(o,"sit",!0,!0),Z.FS_createPath(o,"tai",!0,!0),Z.FS_createPath(o,"trk",!0,!0),Z.FS_createPath(o,"urj",!0,!0),Z.FS_createPath(o,"zle",!0,!0),Z.FS_createPath(o,"zls",!0,!0),Z.FS_createPath(o,"zlw",!0,!0),Z.FS_createPath(i,"voices",!0,!0),Z.FS_createPath(u,"!v",!0,!0),Z.FS_createPath(u,"mb",!0,!0),x.prototype={requests:{},open:function(N,H){this.name=H,this.requests[H]=this,Z.addRunDependency("fp "+this.name)},send:function(){},onload:function(){var N=this.byteArray.subarray(this.start,this.end);this.finish(N)},finish:function(N){Z.FS_createDataFile(this.name,null,N,!0,!0,!0),Z.removeRunDependency("fp "+this.name),this.requests[this.name]=null}};for(var G=d.files,z=0;z<G.length;++z)new x(G[z].start,G[z].end,G[z].audio||0).open("GET",G[z].filename);function M(N){w(N,"Loading data file failed."),w(N.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var H=new Uint8Array(N);x.prototype.byteArray=H;for(var S=d.files,K=0;K<S.length;++K)x.prototype.requests[S[K].filename].onload();Z.removeRunDependency("datafile_js/espeakng.worker.data")}Z.addRunDependency("datafile_js/espeakng.worker.data"),k?(M(k),k=null):p=M}(async()=>{const w=(function(M){if(typeof H1=="boolean"&&H1){var N=Buffer.from(M,"base64");return new Uint8Array(N.buffer,N.byteOffset,N.byteLength)}try{for(var H=q3(M),S=new Uint8Array(H.length),K=0;K<H.length;++K)S[K]=H.charCodeAt(K);return S}catch(X){throw console.error(q3),console.error(X),new Error("Converting base64 string to bytes failed.")}})(""),x=new Blob([w]).stream().pipeThrough(new DecompressionStream("gzip")),G=[];for await(const M of x)G.push(M);const z=await new Blob(G).arrayBuffer();p?(p(z),p=null):k=z})(),Z.calledRun?h():(Z.preRun||(Z.preRun=[]),Z.preRun.push(h))})({files:[{filename:i+"/en_dict",start:0,end:167064},{filename:i+"/intonations",start:167064,end:169104},{filename:o+"/aav/vi",start:169104,end:169215},{filename:o+"/aav/vi-VN-x-central",start:169215,end:169358},{filename:o+"/aav/vi-VN-x-south",start:169358,end:169500},{filename:o+"/art/eo",start:169500,end:169541},{filename:o+"/art/ia",start:169541,end:169570},{filename:o+"/art/io",start:169570,end:169620},{filename:o+"/art/jbo",start:169620,end:169689},{filename:o+"/art/lfn",start:169689,end:169824},{filename:o+"/art/piqd",start:169824,end:169880},{filename:o+"/art/py",start:169880,end:170020},{filename:o+"/art/qdb",start:170020,end:170077},{filename:o+"/art/qya",start:170077,end:170250},{filename:o+"/art/sjn",start:170250,end:170425},{filename:o+"/azc/nci",start:170425,end:170539},{filename:o+"/bat/lt",start:170539,end:170567},{filename:o+"/bat/ltg",start:170567,end:170879},{filename:o+"/bat/lv",start:170879,end:171108},{filename:o+"/bnt/sw",start:171108,end:171149},{filename:o+"/bnt/tn",start:171149,end:171191},{filename:o+"/ccs/ka",start:171191,end:171315},{filename:o+"/cel/cy",start:171315,end:171352},{filename:o+"/cel/ga",start:171352,end:171418},{filename:o+"/cel/gd",start:171418,end:171469},{filename:o+"/cus/om",start:171469,end:171508},{filename:o+"/dra/kn",start:171508,end:171563},{filename:o+"/dra/ml",start:171563,end:171620},{filename:o+"/dra/ta",start:171620,end:171671},{filename:o+"/dra/te",start:171671,end:171741},{filename:o+"/esx/kl",start:171741,end:171771},{filename:o+"/eu",start:171771,end:171825},{filename:o+"/gmq/da",start:171825,end:171868},{filename:o+"/gmq/is",start:171868,end:171895},{filename:o+"/gmq/nb",start:171895,end:171982},{filename:o+"/gmq/sv",start:171982,end:172007},{filename:o+"/gmw/af",start:172007,end:172130},{filename:o+"/gmw/de",start:172130,end:172172},{filename:o+"/gmw/en",start:172172,end:172312},{filename:o+"/gmw/en-029",start:172312,end:172647},{filename:o+"/gmw/en-GB-scotland",start:172647,end:172942},{filename:o+"/gmw/en-GB-x-gbclan",start:172942,end:173180},{filename:o+"/gmw/en-GB-x-gbcwmd",start:173180,end:173368},{filename:o+"/gmw/en-GB-x-rp",start:173368,end:173617},{filename:o+"/gmw/en-US",start:173617,end:173874},{filename:o+"/gmw/en-US-nyc",start:173874,end:174145},{filename:o+"/gmw/lb",start:174145,end:174176},{filename:o+"/gmw/nl",start:174176,end:174199},{filename:o+"/grk/el",start:174199,end:174222},{filename:o+"/grk/grc",start:174222,end:174321},{filename:o+"/inc/as",start:174321,end:174363},{filename:o+"/inc/bn",start:174363,end:174388},{filename:o+"/inc/bpy",start:174388,end:174427},{filename:o+"/inc/gu",start:174427,end:174469},{filename:o+"/inc/hi",start:174469,end:174492},{filename:o+"/inc/kok",start:174492,end:174518},{filename:o+"/inc/mr",start:174518,end:174559},{filename:o+"/inc/ne",start:174559,end:174596},{filename:o+"/inc/or",start:174596,end:174635},{filename:o+"/inc/pa",start:174635,end:174660},{filename:o+"/inc/sd",start:174660,end:174726},{filename:o+"/inc/si",start:174726,end:174781},{filename:o+"/inc/ur",start:174781,end:174875},{filename:o+"/ine/hy",start:174875,end:174936},{filename:o+"/ine/hyw",start:174936,end:175301},{filename:o+"/ine/sq",start:175301,end:175404},{filename:o+"/ira/fa",start:175404,end:175494},{filename:o+"/ira/fa-Latn",start:175494,end:175763},{filename:o+"/ira/ku",start:175763,end:175803},{filename:o+"/iro/chr",start:175803,end:176372},{filename:o+"/itc/la",start:176372,end:176669},{filename:o+"/jpx/ja",start:176669,end:176721},{filename:o+"/ko",start:176721,end:176772},{filename:o+"/map/haw",start:176772,end:176814},{filename:o+"/miz/mto",start:176814,end:176997},{filename:o+"/myn/quc",start:176997,end:177207},{filename:o+"/poz/id",start:177207,end:177341},{filename:o+"/poz/mi",start:177341,end:177708},{filename:o+"/poz/ms",start:177708,end:178138},{filename:o+"/qu",start:178138,end:178226},{filename:o+"/roa/an",start:178226,end:178253},{filename:o+"/roa/ca",start:178253,end:178278},{filename:o+"/roa/es",start:178278,end:178341},{filename:o+"/roa/es-419",start:178341,end:178508},{filename:o+"/roa/fr",start:178508,end:178587},{filename:o+"/roa/fr-BE",start:178587,end:178671},{filename:o+"/roa/fr-CH",start:178671,end:178757},{filename:o+"/roa/ht",start:178757,end:178897},{filename:o+"/roa/it",start:178897,end:179006},{filename:o+"/roa/pap",start:179006,end:179068},{filename:o+"/roa/pt",start:179068,end:179163},{filename:o+"/roa/pt-BR",start:179163,end:179272},{filename:o+"/roa/ro",start:179272,end:179298},{filename:o+"/sai/gn",start:179298,end:179345},{filename:o+"/sem/am",start:179345,end:179386},{filename:o+"/sem/ar",start:179386,end:179436},{filename:o+"/sem/he",start:179436,end:179476},{filename:o+"/sem/mt",start:179476,end:179517},{filename:o+"/sem/ti",start:179517,end:179610},{filename:o+"/sit/cmn",start:179610,end:180296},{filename:o+"/sit/cmn-Latn-pinyin",start:180296,end:180457},{filename:o+"/sit/hak",start:180457,end:180585},{filename:o+"/sit/my",start:180585,end:180641},{filename:o+"/sit/yue",start:180641,end:180835},{filename:o+"/sit/yue-Latn-jyutping",start:180835,end:181048},{filename:o+"/tai/shn",start:181048,end:181140},{filename:o+"/tai/th",start:181140,end:181177},{filename:o+"/trk/az",start:181177,end:181222},{filename:o+"/trk/ba",start:181222,end:181247},{filename:o+"/trk/cv",start:181247,end:181287},{filename:o+"/trk/kk",start:181287,end:181327},{filename:o+"/trk/ky",start:181327,end:181370},{filename:o+"/trk/nog",start:181370,end:181409},{filename:o+"/trk/tk",start:181409,end:181434},{filename:o+"/trk/tr",start:181434,end:181459},{filename:o+"/trk/tt",start:181459,end:181482},{filename:o+"/trk/ug",start:181482,end:181506},{filename:o+"/trk/uz",start:181506,end:181545},{filename:o+"/urj/et",start:181545,end:181782},{filename:o+"/urj/fi",start:181782,end:182019},{filename:o+"/urj/hu",start:182019,end:182092},{filename:o+"/urj/smj",start:182092,end:182137},{filename:o+"/zle/be",start:182137,end:182189},{filename:o+"/zle/ru",start:182189,end:182246},{filename:o+"/zle/ru-LV",start:182246,end:182526},{filename:o+"/zle/ru-cl",start:182526,end:182617},{filename:o+"/zle/uk",start:182617,end:182714},{filename:o+"/zls/bg",start:182714,end:182825},{filename:o+"/zls/bs",start:182825,end:183055},{filename:o+"/zls/hr",start:183055,end:183317},{filename:o+"/zls/mk",start:183317,end:183345},{filename:o+"/zls/sl",start:183345,end:183388},{filename:o+"/zls/sr",start:183388,end:183638},{filename:o+"/zlw/cs",start:183638,end:183661},{filename:o+"/zlw/pl",start:183661,end:183699},{filename:o+"/zlw/sk",start:183699,end:183723},{filename:i+"/phondata",start:183723,end:734147},{filename:i+"/phonindex",start:734147,end:773403},{filename:i+"/phontab",start:773403,end:829491},{filename:u+"/!v/Alex",start:829491,end:829619},{filename:u+"/!v/Alicia",start:829619,end:830093},{filename:u+"/!v/Andrea",start:830093,end:830450},{filename:u+"/!v/Andy",start:830450,end:830770},{filename:u+"/!v/Annie",start:830770,end:831085},{filename:u+"/!v/AnxiousAndy",start:831085,end:831446},{filename:u+"/!v/Demonic",start:831446,end:835304},{filename:u+"/!v/Denis",start:835304,end:835609},{filename:u+"/!v/Diogo",start:835609,end:835988},{filename:u+"/!v/Gene",start:835988,end:836269},{filename:u+"/!v/Gene2",start:836269,end:836552},{filename:u+"/!v/Henrique",start:836552,end:836933},{filename:u+"/!v/Hugo",start:836933,end:837311},{filename:u+"/!v/Jacky",start:837311,end:837578},{filename:u+"/!v/Lee",start:837578,end:837916},{filename:u+"/!v/Marco",start:837916,end:838383},{filename:u+"/!v/Mario",start:838383,end:838653},{filename:u+"/!v/Michael",start:838653,end:838923},{filename:u+"/!v/Mike",start:838923,end:839035},{filename:u+"/!v/Mr serious",start:839035,end:842228},{filename:u+"/!v/Nguyen",start:842228,end:842508},{filename:u+"/!v/Reed",start:842508,end:842710},{filename:u+"/!v/RicishayMax",start:842710,end:842943},{filename:u+"/!v/RicishayMax2",start:842943,end:843378},{filename:u+"/!v/RicishayMax3",start:843378,end:843813},{filename:u+"/!v/Storm",start:843813,end:844233},{filename:u+"/!v/Tweaky",start:844233,end:847422},{filename:u+"/!v/UniRobot",start:847422,end:847839},{filename:u+"/!v/adam",start:847839,end:847914},{filename:u+"/!v/anika",start:847914,end:848407},{filename:u+"/!v/anikaRobot",start:848407,end:848919},{filename:u+"/!v/announcer",start:848919,end:849219},{filename:u+"/!v/antonio",start:849219,end:849600},{filename:u+"/!v/aunty",start:849600,end:849958},{filename:u+"/!v/belinda",start:849958,end:850298},{filename:u+"/!v/benjamin",start:850298,end:850499},{filename:u+"/!v/boris",start:850499,end:850723},{filename:u+"/!v/caleb",start:850723,end:850780},{filename:u+"/!v/croak",start:850780,end:850873},{filename:u+"/!v/david",start:850873,end:850985},{filename:u+"/!v/ed",start:850985,end:851272},{filename:u+"/!v/edward",start:851272,end:851423},{filename:u+"/!v/edward2",start:851423,end:851575},{filename:u+"/!v/f1",start:851575,end:851899},{filename:u+"/!v/f2",start:851899,end:852256},{filename:u+"/!v/f3",start:852256,end:852631},{filename:u+"/!v/f4",start:852631,end:852981},{filename:u+"/!v/f5",start:852981,end:853413},{filename:u+"/!v/fast",start:853413,end:853562},{filename:u+"/!v/grandma",start:853562,end:853825},{filename:u+"/!v/grandpa",start:853825,end:854081},{filename:u+"/!v/gustave",start:854081,end:854334},{filename:u+"/!v/ian",start:854334,end:857502},{filename:u+"/!v/iven",start:857502,end:857763},{filename:u+"/!v/iven2",start:857763,end:858042},{filename:u+"/!v/iven3",start:858042,end:858304},{filename:u+"/!v/iven4",start:858304,end:858565},{filename:u+"/!v/john",start:858565,end:861751},{filename:u+"/!v/kaukovalta",start:861751,end:862112},{filename:u+"/!v/klatt",start:862112,end:862150},{filename:u+"/!v/klatt2",start:862150,end:862188},{filename:u+"/!v/klatt3",start:862188,end:862227},{filename:u+"/!v/klatt4",start:862227,end:862266},{filename:u+"/!v/klatt5",start:862266,end:862305},{filename:u+"/!v/klatt6",start:862305,end:862344},{filename:u+"/!v/linda",start:862344,end:862694},{filename:u+"/!v/m1",start:862694,end:863029},{filename:u+"/!v/m2",start:863029,end:863293},{filename:u+"/!v/m3",start:863293,end:863593},{filename:u+"/!v/m4",start:863593,end:863883},{filename:u+"/!v/m5",start:863883,end:864145},{filename:u+"/!v/m6",start:864145,end:864333},{filename:u+"/!v/m7",start:864333,end:864587},{filename:u+"/!v/m8",start:864587,end:864871},{filename:u+"/!v/marcelo",start:864871,end:865122},{filename:u+"/!v/max",start:865122,end:865347},{filename:u+"/!v/michel",start:865347,end:865751},{filename:u+"/!v/miguel",start:865751,end:866133},{filename:u+"/!v/mike2",start:866133,end:866321},{filename:u+"/!v/norbert",start:866321,end:869510},{filename:u+"/!v/pablo",start:869510,end:872652},{filename:u+"/!v/paul",start:872652,end:872936},{filename:u+"/!v/pedro",start:872936,end:873288},{filename:u+"/!v/quincy",start:873288,end:873642},{filename:u+"/!v/rob",start:873642,end:873907},{filename:u+"/!v/robert",start:873907,end:874181},{filename:u+"/!v/robosoft",start:874181,end:874632},{filename:u+"/!v/robosoft2",start:874632,end:875086},{filename:u+"/!v/robosoft3",start:875086,end:875541},{filename:u+"/!v/robosoft4",start:875541,end:875988},{filename:u+"/!v/robosoft5",start:875988,end:876433},{filename:u+"/!v/robosoft6",start:876433,end:876720},{filename:u+"/!v/robosoft7",start:876720,end:877130},{filename:u+"/!v/robosoft8",start:877130,end:877373},{filename:u+"/!v/sandro",start:877373,end:877903},{filename:u+"/!v/shelby",start:877903,end:878183},{filename:u+"/!v/steph",start:878183,end:878547},{filename:u+"/!v/steph2",start:878547,end:878914},{filename:u+"/!v/steph3",start:878914,end:879291},{filename:u+"/!v/travis",start:879291,end:879674},{filename:u+"/!v/victor",start:879674,end:879927},{filename:u+"/!v/whisper",start:879927,end:880113},{filename:u+"/!v/whisperf",start:880113,end:880505},{filename:u+"/!v/zac",start:880505,end:880780},{filename:u+"/mb/mb-af1",start:880780,end:880868},{filename:u+"/mb/mb-af1-en",start:880868,end:880951},{filename:u+"/mb/mb-ar1",start:880951,end:881035},{filename:u+"/mb/mb-ar2",start:881035,end:881119},{filename:u+"/mb/mb-br1",start:881119,end:881251},{filename:u+"/mb/mb-br2",start:881251,end:881387},{filename:u+"/mb/mb-br3",start:881387,end:881519},{filename:u+"/mb/mb-br4",start:881519,end:881655},{filename:u+"/mb/mb-ca1",start:881655,end:881760},{filename:u+"/mb/mb-ca2",start:881760,end:881865},{filename:u+"/mb/mb-cn1",start:881865,end:881957},{filename:u+"/mb/mb-cr1",start:881957,end:882068},{filename:u+"/mb/mb-cz1",start:882068,end:882138},{filename:u+"/mb/mb-cz2",start:882138,end:882220},{filename:u+"/mb/mb-de1",start:882220,end:882364},{filename:u+"/mb/mb-de1-en",start:882364,end:882460},{filename:u+"/mb/mb-de2",start:882460,end:882588},{filename:u+"/mb/mb-de2-en",start:882588,end:882668},{filename:u+"/mb/mb-de3",start:882668,end:882767},{filename:u+"/mb/mb-de3-en",start:882767,end:882863},{filename:u+"/mb/mb-de4",start:882863,end:882992},{filename:u+"/mb/mb-de4-en",start:882992,end:883073},{filename:u+"/mb/mb-de5",start:883073,end:883309},{filename:u+"/mb/mb-de5-en",start:883309,end:883399},{filename:u+"/mb/mb-de6",start:883399,end:883521},{filename:u+"/mb/mb-de6-en",start:883521,end:883595},{filename:u+"/mb/mb-de6-grc",start:883595,end:883678},{filename:u+"/mb/mb-de7",start:883678,end:883828},{filename:u+"/mb/mb-de8",start:883828,end:883899},{filename:u+"/mb/mb-ee1",start:883899,end:883996},{filename:u+"/mb/mb-en1",start:883996,end:884127},{filename:u+"/mb/mb-es1",start:884127,end:884241},{filename:u+"/mb/mb-es2",start:884241,end:884349},{filename:u+"/mb/mb-es3",start:884349,end:884453},{filename:u+"/mb/mb-es4",start:884453,end:884541},{filename:u+"/mb/mb-fr1",start:884541,end:884707},{filename:u+"/mb/mb-fr1-en",start:884707,end:884811},{filename:u+"/mb/mb-fr2",start:884811,end:884914},{filename:u+"/mb/mb-fr3",start:884914,end:885014},{filename:u+"/mb/mb-fr4",start:885014,end:885141},{filename:u+"/mb/mb-fr4-en",start:885141,end:885248},{filename:u+"/mb/mb-fr5",start:885248,end:885348},{filename:u+"/mb/mb-fr6",start:885348,end:885448},{filename:u+"/mb/mb-fr7",start:885448,end:885531},{filename:u+"/mb/mb-gr1",start:885531,end:885625},{filename:u+"/mb/mb-gr2",start:885625,end:885719},{filename:u+"/mb/mb-gr2-en",start:885719,end:885807},{filename:u+"/mb/mb-hb1",start:885807,end:885875},{filename:u+"/mb/mb-hb2",start:885875,end:885958},{filename:u+"/mb/mb-hu1",start:885958,end:886060},{filename:u+"/mb/mb-hu1-en",start:886060,end:886157},{filename:u+"/mb/mb-ic1",start:886157,end:886245},{filename:u+"/mb/mb-id1",start:886245,end:886346},{filename:u+"/mb/mb-in1",start:886346,end:886415},{filename:u+"/mb/mb-in2",start:886415,end:886500},{filename:u+"/mb/mb-ir1",start:886500,end:887253},{filename:u+"/mb/mb-it1",start:887253,end:887337},{filename:u+"/mb/mb-it2",start:887337,end:887424},{filename:u+"/mb/mb-it3",start:887424,end:887566},{filename:u+"/mb/mb-it4",start:887566,end:887711},{filename:u+"/mb/mb-jp1",start:887711,end:887782},{filename:u+"/mb/mb-jp2",start:887782,end:887883},{filename:u+"/mb/mb-jp3",start:887883,end:887970},{filename:u+"/mb/mb-la1",start:887970,end:888053},{filename:u+"/mb/mb-lt1",start:888053,end:888140},{filename:u+"/mb/mb-lt2",start:888140,end:888227},{filename:u+"/mb/mb-ma1",start:888227,end:888325},{filename:u+"/mb/mb-mx1",start:888325,end:888445},{filename:u+"/mb/mb-mx2",start:888445,end:888565},{filename:u+"/mb/mb-nl1",start:888565,end:888634},{filename:u+"/mb/mb-nl2",start:888634,end:888730},{filename:u+"/mb/mb-nl2-en",start:888730,end:888821},{filename:u+"/mb/mb-nl3",start:888821,end:888906},{filename:u+"/mb/mb-nz1",start:888906,end:888974},{filename:u+"/mb/mb-pl1",start:888974,end:889073},{filename:u+"/mb/mb-pl1-en",start:889073,end:889155},{filename:u+"/mb/mb-pt1",start:889155,end:889286},{filename:u+"/mb/mb-ro1",start:889286,end:889373},{filename:u+"/mb/mb-ro1-en",start:889373,end:889454},{filename:u+"/mb/mb-sw1",start:889454,end:889552},{filename:u+"/mb/mb-sw1-en",start:889552,end:889645},{filename:u+"/mb/mb-sw2",start:889645,end:889747},{filename:u+"/mb/mb-sw2-en",start:889747,end:889846},{filename:u+"/mb/mb-tl1",start:889846,end:889931},{filename:u+"/mb/mb-tr1",start:889931,end:890016},{filename:u+"/mb/mb-tr2",start:890016,end:890130},{filename:u+"/mb/mb-us1",start:890130,end:890300},{filename:u+"/mb/mb-us2",start:890300,end:890478},{filename:u+"/mb/mb-us3",start:890478,end:890658},{filename:u+"/mb/mb-vz1",start:890658,end:890802}]})})();var _3=Object.assign({},Z),P1="./this.program",br=Z.print||console.log.bind(console),P2=Z.printErr||console.warn.bind(console);Object.assign(Z,_3),_3=null,Z.arguments&&Z.arguments,Z.thisProgram&&(P1=Z.thisProgram),Z.quit&&Z.quit,Z.wasmBinary&&Z.wasmBinary,Z.noExitRuntime;var Ir,S2={Memory:function(i){this.buffer=new ArrayBuffer(65536*i.initial)},Module:function(i){},Instance:function(i,o){this.exports=(function(u){for(var d,p=new Uint8Array(123),k=25;k>=0;--k)p[48+k]=52+k,p[65+k]=k,p[97+k]=26+k;function h(V,W,j){for(var l,B,A=0,C=W,y=j.length,aA=W+(3*y>>2)-(j[y-2]=="=")-(j[y-1]=="=");A<y;A+=4)l=p[j.charCodeAt(A+1)],B=p[j.charCodeAt(A+2)],V[C++]=p[j.charCodeAt(A)]<<2|l>>4,C<aA&&(V[C++]=l<<4|B>>2),C<aA&&(V[C++]=B<<6|p[j.charCodeAt(A+3)])}p[43]=62,p[47]=63;var w=new ArrayBuffer(16),x=new Int32Array(w),G=new Float32Array(w),z=new Float64Array(w);function M(V){return x[V]}function N(V,W){x[V]=W}function H(){return z[0]}function S(V){z[0]=V}function K(){throw new Error("abort")}function X(V){G[2]=V}return(function(V){var W=V.a,j=W.a.buffer,l=new Int8Array(j),B=new Int16Array(j),A=new Int32Array(j),C=new Uint8Array(j),y=new Uint16Array(j),aA=new Uint32Array(j),Q=new Float64Array(j),T=Math.imul,wA=Math.fround,sA=Math.abs,oA=Math.clz32,PA=Math.min,vA=Math.floor,mA=Math.ceil,ZA=W.b,BA=W.c,i0=W.d,gA=W.e,CA=W.f,zA=W.g,jA=W.h,E0=W.i,ue=W.j,h2=W.k,x0=W.l,p0=W.m,he=W.n,L1=W.o,V1=W.p,HC=W.q,PC=W.r,SC=W.s,FC=W.t,RC=W.u,F=294656,Z2=0,L2=0,_=0;function U1(e){var t,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0,o0=0,g0=0,d0=0,b0=0,B0=0,Q0=0,S0=0,K0=0,U0=0,_0=0,ze=0,Ye=0,Ne=0,at=0,Rt=0,it=0,Wt=0,Kt=0,Ll=0,Vl=0,Ul=0,Xl=0;if(F=t=F-16|0,(0|e)!=2)if(e=A[33283],A[e>>2]!=A[e+4>>2]){if(W0(A[A[32972]+60>>2]),Y=A[47192],U0=t+12|0,at=t+8|0,F=c=F-6832|0,A[c+6816>>2]=0,A[c+6808>>2]=32,A[c+6800>>2]=0,Y){A[47351]=0,A[47350]=0,A[47352]=0,l[189076]=0,e=A[33284],A[47353]=(0|e)>0?e:0,A[47355]=A[47354]+1,QA(iA=c+5184|0,0,1600),Q0=c+6800|0,F=g=F-2608|0,A[g+2156>>2]=32,A[g+2148>>2]=0,C[134760]&&(l[190280]=0,l[134760]=0),A[Y+8216>>2]=0,A[Y+8220>>2]=0,A[Y+288>>2]=0,A[c+780>>2]=0,l[189360]=0;A:if(e=A[33691])A[g+2152>>2]=e;else{e:{r:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2]){A[g+2152>>2]=0;break A}if(!(r=A[33285]))break r}A[33285]=0;break e}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}A[g+2152>>2]=r}Kt=iA+2|0,$=32;A:{for(;;){q=$;e:{r:{i:{if(r=A[33691],(s=A[33285])?e=0:(s=A[33285],e=A[33283],e=A[e>>2]==A[e+4>>2]),r|!e|s||!(A[32524]<0)){if(!Fr(A[g+2156>>2])){if((s=(0|(e=A[49828]))>0)&(0|(r=e))<(0|(e=A[33284])))break i;if(!((0|(r=A[49845]))<=0|(0|e)<(0|r))){A[49845]=0,l[134760]=1,A[33285]=A[g+2152>>2],a=16384;break A}}$=A[g+2156>>2],A[g+2156>>2]=A[g+2152>>2];s:{o:{f:{u:{g:{if((0|(r=A[32524]))>=0){if(C[r+134736|0])break g;A[32524]=-1}if(r=A[33285])break f;if(e=A[33283],A[e>>2]!=A[e+4>>2])break u;r=32;break s}A[33691]|r||(A[g+2156>>2]=l[134736],r=1),A[32524]=r+1,r=l[r+134736|0];break s}if(!(r=A[33285]))break o}A[33285]=0;break s}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}A[g+2152>>2]=r,A[33691]=0;s:if(!(I|!A[47203])){o:{if((0|(e=A[g+2156>>2]))!=60){if((0|r)!=35&r-97>>>0>25|(0|e)!=38)break s;for(s=A[33285],n=0;;){f:{if(A[g+2156>>2]=r,!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break f;r=A[g+2156>>2]}if(!(!((r=!!(0|Fr(r)))|(0|(e=A[g+2156>>2]))==35)|n>>>0>19)){l[(g+112|0)+n|0]=e,n=n+1|0,(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e),s=A[33285]);continue}}break}l[(g+112|0)+n|0]=0;f:{u:{if(!(r=A[33285])){if(r=0,e=A[33283],A[e>>2]==A[e+4>>2])break f;if(!(r=A[33285]))break u}A[33285]=0;break f}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}A[g+2152>>2]=r,A[g+100>>2]=A[g+2156>>2],A[g+104>>2]=r,A[g+96>>2]=g+112,nA(134736,84252,g+96|0);f:{if(A[g+2156>>2]==59){n=g+2156|0,D=g+2152|0,F=s=F-32|0;u:if(C[0|(r=g+112|0)]!=35)e=-1,(0|(r=Le(130752,r)))!=-1&&(A[n>>2]=r,A[D>>2]||(A[D>>2]=32),e=r);else{if(C[0|(e=r+1|0)]==120){A[s>>2]=n,e=qA(r+2|0,90005,s);break u}A[s+16>>2]=n,e=qA(e,90070,s+16|0)}if(F=s+32|0,(0|e)>0)break f}A[32524]=0,A[g+2156>>2]=38,A[g+2152>>2]=32;break s}if((0|(e=A[g+2156>>2]))>32)break s;if(!(r=A[33692]-20|0)|(0|r)==16)break o;break s}if((0|r)!=47&&!De(r)&&(0|(e=A[g+2152>>2]))!=63&&(0|e)!=33)break s;if((0|(e=A[g+2148>>2]))>780){A[33691]=A[g+2156>>2],l[0|(e=e+189424|0)]=32,l[e+1|0]=0,A[33285]=A[g+2152>>2],a=16384;break A}for(D=A[33285],n=0,r=A[g+2152>>2];A[g+2156>>2]=r,s=0,D||(e=A[33283],s=A[e>>2]==A[e+4>>2],r=A[g+2156>>2]),!((0|r)==62|s|n>>>0>499);)A[(g+144|0)+(n<<2)>>2]=r,n=n+1|0,(r=A[33285])?(D=0,A[33285]=0):(A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e),D=A[33285]);A[(s=g+144|0)+(n<<2)>>2]=0,A[g+2152>>2]=32,AA=g+2148|0,q=A[32525],r=0,F=J=F-560|0;f:if(El(s,84333,3)&&El(s,84477,4)){for(e=(s+(Ml(s)<<2)|0)-4|0,(0|(fA=A[e>>2]))==47&&(A[e>>2]=32);;){if(e=A[s+(r<<2)>>2]){if(v0(e))e=r;else if(l[(J+512|0)+r|0]=We(e<<24>>24),e=39,(0|(r=r+1|0))!=39)continue}else e=r;break}if(l[(J+512|0)+e|0]=0,C[J+512|0]!=47){if((0|(D=Le(130480,J+512|0)))!=16&&(r=A[AA>>2],A[AA>>2]=r+1,l[r+189424|0]=32),(0|fA)==47&&(r=0,!(502241>>>D&1)))break f}else(0|(r=Le(130480,J+512|1)))!=16&&(n=A[AA>>2],A[AA>>2]=n+1,l[n+189424|0]=32),D=r+32|0;n=s+(e<<2)|0,e=A[33708],I=T(e,76)+133076|0,r=262174;u:{g:{n:{d:switch(D-1|0){case 33:p:if(!((0|e)<=1)){for(;;){if(A[T(r=e-1|0,76)+133152>>2]==2)break p;if(A[33708]=r,s=e>>>0>2,e=r,!s)break}e=1}r=ke(n,34,e);break f;case 32:p:if(!((0|e)<=1)){for(;;){if(A[T(r=e-1|0,76)+133152>>2]==1)break p;if(A[33708]=r,s=e>>>0>2,e=r,!s)break}e=1}r=ke(n,33,e)+524328|0;break f;case 9:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=(I=r<<6)+134912|0)>>2]=10,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,e=w0(n,88301),s=w0(n,88390),dl(e,88479)?dl(e,88528)||(A[28+(134912+(r<<6)|0)>>2]=G2(s,130224)):A[24+(I+134912|0)>>2]=G2(s,130192),X2(AA,A[33709]);break n;case 2:for((0|(e=A[33709]))<=18&&(A[33709]=e+1),A[(e=(Rt=e<<6)+134912|0)>>2]=3,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,$A=1;;){if(s=w0(n,A[(o0=$A<<2)+130448>>2])){fA=0,e=A[o0+131072>>2];p:if(D=A[e>>2])for(;;){for(r=0;I=l[r+D|0],(q=A[(r<<2)+s>>2])&&(r=r+1|0,(0|I)==(0|q)););I:switch(q-34|0){case 0:case 5:if(!I)break p;break;default:break I}if(!(D=A[e+((fA=fA+1|0)<<3)>>2]))break}Ll=o0+(Rt+134912|0)|0;p:if((0|(e=A[4+(e+(fA<<3)|0)>>2]))>=0)e=(0|T(e,A[4+(o0+134912|0)>>2]))/100|0;else{for(;s=(e=s)+4|0,v0(A[e>>2]););for(it=A[e>>2]==43,s=((Wt=A[(e=e+(it<<2)|0)>>2]==45)<<2)+e|0,fA=J+96|0,F=D=(F=I=F-16|0)-224|0,QA(D+16|0,0,144),e=D+160|4,A[D+24>>2]=e,A[D+60>>2]=e,A[D+92>>2]=-1,A[D+64>>2]=60,A[D+20>>2]=e,A[D+48>>2]=19,r=s;r=(e=r)+4|0,q=(q=A[e>>2])?G0(124960,q):0;);A[D+100>>2]=e,Be(r=D+16|0,0,0),p8(D,r,1,1),r=A[D+8>>2],Vl=A[D+12>>2],q=A[D>>2],Ul=A[D+4>>2],fA&&(Xl=fA,fA=A[D+136>>2]+(A[D+20>>2]-A[D+60>>2]|0)|0,A[Xl>>2]=fA?e+(fA<<2)|0:s),A[(e=I)+8>>2]=r,A[e+12>>2]=Vl,A[e>>2]=q,A[e+4>>2]=Ul,F=D+224|0,U=ii(A[e>>2],A[e+4>>2],A[e+8>>2],A[e+12>>2]),F=e+16|0;I:{r=100;h:if((0|(e=s))!=(0|(s=A[J+96>>2]))){r=Wt?-1:it;b:{if((0|(e=A[s>>2]))!=115){if((0|e)!=37)break b;if(sA(U=r?+(0|r)*U+100:U)<2147483648){r=~~U;break h}r=-2147483648;break h}if(A[s+4>>2]==116){S(+(RA=U*+(0|r)/12)),e=0|M(1),M(0);v:{if((r=(e=e>>>20&2047)-969|0)>>>0>=63){if(U=RA+1,(0|r)<0)break v;if(S(+RA),r=0|M(1),s=0|M(0),!(e>>>0<1033)){if(U=0,!s&(0|r)==-1048576||(U=RA+1,e>>>0>=2047))break v;if((0|r)>0|(0|r)>=0){Q[(e=F-16|0)+8>>3]=3105036184601418e216,U=3105036184601418e216*Q[e+8>>3];break v}if(!(r>>>0<3230714880)){Q[(e=F-16|0)+8>>3]=12882297539194267e-247,U=12882297539194267e-247*Q[e+8>>3];break v}}I=e,e=!(s<<1)&(0|(e=r<<1|s>>>31))==-2129002496|e>>>0<2165964800?I:0}_0=(RA=(U=RA-((S0=(U=Q[14416])+RA)-U))*U)*RA*(U*Q[14421]+Q[14420]),RA*=U*Q[14419]+Q[14418],U*=Q[14417],S(+S0),M(1),I=0|M(0),U=_0+(RA+(U+Q[(s=I<<4&2032)+115376>>3])),q=A[(s=s+115384|0)>>2],D=A[s+4>>2],s=(r=q)+(q=0)|0,r=(I<<13)+D|0,r=s>>>0<q>>>0?r+1|0:r,e?(N(0,0|s),N(1,0|r),U=(RA=+H())*U+RA):-2147483648&I?(N(0,0|s),N(1,r+1071644672|0),(U=(S0=(RA=+H())*U)+RA)<1&&(A[(e=F-16|0)+8>>2]=0,A[e+12>>2]=1048576,Q[e+8>>3]=22250738585072014e-324*Q[e+8>>3],U=(U=(_0=U+1)+(S0+(RA-U)+(U+(1-_0)))+-1)==0?0:U),U*=22250738585072014e-324):(N(0,0|s),N(1,r+-1048576|0),U=(RA=+H())*U+RA,U+=U)}if(sA(U*=100)<2147483648){r=~~U;break h}r=-2147483648;break h}}if((0|$A)!=1)break I;if(r)r=(e=sA(U=U*+(0|r)*100)<2147483648?~~U:-2147483648)+100|0;else{if(sA(U*=100)<2147483648){r=~~U;break h}r=-2147483648}}e=(0|T(r,A[o0+134848>>2]))/100|0;break p}e=sA(U)<2147483648?~~U:-2147483648,r&&(e=A[o0+134848>>2]+T(e,r)|0)}A[Ll+4>>2]=e}if((0|($A=$A+1|0))==5)break}X2(AA,A[33709]);break n;case 11:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=134912+(r<<6)|0)>>2]=12,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1,e=(e=w0(n,88658))?G2(e,130400):3,s=134912+(r<<6)|0,A[A[47192]+148>>2]!=1?(A[52+(134912+(r<<6)|0)>>2]=e,e=C[e+102776|0]):(A[20+(134912+(r<<6)|0)>>2]=C[e+102764|0],e=C[e+102770|0]),A[s+12>>2]=e,X2(AA,A[33709]);break n;case 34:case 41:case 43:if(!((0|(e=A[33709]))<=0)){if(n=D-32|0,D=0,s=0,r=0,e>>>0>=4)for(I=-4&e,fA=0;$A=2|r,o0=1|r,s=(0|n)==A[134912+((q=3|r)<<6)>>2]?q:(0|n)==A[134912+($A<<6)>>2]?$A:(0|n)==A[134912+(o0<<6)>>2]?o0:(0|n)==A[134912+(r<<6)>>2]?r:s,r=r+4|0,(0|I)!=(0|(fA=fA+4|0)););if(I=3&e)for(;s=(0|n)==A[134912+(r<<6)>>2]?r:s,r=r+1|0,(0|I)!=(0|(D=D+1|0)););(0|s)<=0||(A[33709]=s,e=s)}X2(AA,e);break n;case 7:if(e=w0(n,88741),r=w0(n,88860),(0|G2(e,130176))!=1)break n;e=A[AA>>2],A[AA>>2]=e+1,l[e+189424|0]=91,e=A[AA>>2],A[AA>>2]=e+1,l[e+189424|0]=91,e=Mt((e=A[AA>>2])+189424|0,r,800-e|0)+A[AA>>2]|0,A[AA>>2]=e+1,l[e+189424|0]=93,e=A[AA>>2],A[AA>>2]=e+1,l[e+189424|0]=93;break n;case 35:A[33692]==36&&(l[A[AA>>2]+189424|0]=0,(s=Le(131104,r=(e=A[33707])+189424|0))&&(A[AA>>2]=k0(s,r)+e)),e=A[AA>>2],A[AA>>2]=e+1,l[e+189424|0]=1,e=A[AA>>2],A[AA>>2]=e+1,l[e+189424|0]=89,A[33692]=0;break n;case 8:if(!(e=w0(n,89299)))break n;l[134824]=1,r=A[AA>>2],A[AA>>2]=Mt(r+189424|0,e,800-r|0)+A[AA>>2];break n;case 13:l[134824]=1;break n;case 40:case 45:l[134824]=0;break n;case 4:if(!(e=w0(n,89360)))break n;if(Mt(J+352|0,e,160),C[J+352|0]&&!c0(199328,J+352|0)){l[134760]=1,l[199328]=0,r=16384;break f}if((0|(e=mi(J+352|0)))<0)break n;A[J+20>>2]=e,A[J+16>>2]=1,nA(e=J+352|0,89460,J+16|0),cA(A[AA>>2]+189424|0,e),A[AA>>2]=A[AA>>2]+lA(e);break n;case 10:(0|(r=A[33709]))<=18&&(A[33709]=r+1),A[(e=134912+(r<<6)|0)>>2]=11,A[e+4>>2]=-1,A[e+8>>2]=-1,A[e+52>>2]=-1,A[e+56>>2]=-1,A[e+44>>2]=-1,A[e+48>>2]=-1,A[e+36>>2]=-1,A[e+40>>2]=-1,A[e+28>>2]=-1,A[e+32>>2]=-1,A[e+20>>2]=-1,A[e+24>>2]=-1,A[e+12>>2]=-1,A[e+16>>2]=-1,A[e+60>>2]=-1;p:if(e=w0(n,89514)){if(Mt(J+352|0,e,160),A[34441]){if((0|(e=mi(J+352|0)))<0||0|xA[A[34441]](1,e+A[33282]|0,q))break p;A[J+68>>2]=e,A[J+64>>2]=1,nA(J+352|0,89658,J- -64|0)}else{if(!q|C[J+352|0]==47?e=il(J+352|0):(A[J+48>>2]=q,A[J+52>>2]=J+352,nA(e=J+96|0,89564,J+48|0),e=il(e)),(0|e)<0)break p;A[J+36>>2]=e,A[J+32>>2]=1,nA(J+352|0,89623,J+32|0)}e=J+352|0,cA(A[AA>>2]+189424|0,e),A[AA>>2]=A[AA>>2]+lA(e),A[4+(134912+(r<<6)|0)>>2]=1}if(X2(AA,A[33709]),(0|fA)==47){_8(11,AA),r=16384;break f}l[134772]=1,r=16384;break f;case 42:_8(43,AA),l[134772]=0,r=16384;break f;case 12:p:{if(e=w0(n,89714)){if(r=16384,(I=(0|(e=G2(e,130336)))<0?2:e)>>>0<=2&&(e=A[AA>>2],A[J+84>>2]=I,A[J+80>>2]=1,nA(e+189424|0,89770,J+80|0),A[AA>>2]=A[AA>>2]+3,r=0),e=A[102784+(I<<2)>>2],!(s=w0(n,89907)))break p;break g}if(r=16384,s=w0(n,89907))break g;e=21;break u}if(I>>>0<3)break n;break u;case 0:(e=w0(n,89965))&&(Mt(r=J+352|0,e,160),mi(r)),r=ke(n,1,A[33708])?147456:0;break f;case 1:r=ke(n,2,e)?147456:0;break f;case 5:r=0,A[I>>2]==6&&(r=ke(n,38,e),e=A[33708]),r=524358+(ke(n,6,e)|r)|0;break f;case 6:r=0,(0|(s=A[I>>2]))==6&&(r=ke(n,38,e),s=A[I>>2]),(0|s)==7&&(r=ke(n,39,A[33708])|r),r=524358+(r|ke(n,7,A[33708]))|0;break f;case 37:if(r=524328,A[I>>2]!=6)break f;r=ke(n,38,e)+524328|0;break f;case 38:if(r=524358,(-2&A[I>>2])!=6)break f;r=ke(n,39,e)+524358|0;break f;case 14:case 46:break f;case 3:break d;default:break n}e=w0(n,88893),r=w0(n,88992),s=w0(n,89153),n=G2(e,130272),r=G2(r,130320),e=hl(s,0),A[J>>2]=1,s=(0|e)<2?193:e- -64|0,r=(0|(e=(0|r)==1?19:n))==64?s:e,A[J+4>>2]=r,nA(e=J+352|0,89230,J),cA(A[AA>>2]+189424|0,e),e=A[AA>>2]+lA(e)|0,A[AA>>2]=e,A[33707]=e,A[33692]=r}r=0;break f}e=hl(s,1),s=A[33722],Ei(1,A[33713]),(0|(e=(0|(s=(0|T(e,s))/100<<8))/(0|T(A[36429],10))|0))<=199&&(e=(0|s)/(0|T(A[36428],10))|0),r=r||16384}s=e>>>5|0,n=e,r=((e=(0|e)>4095)?s>>>0>=4095?4095:s:n)+(e?8388608|r:r)|0}if(F=J+560|0,r){if(e=A[g+2148>>2]+189424|0,l[0|e]=32,l[e+1|0]=0,!(131072&r)){a=r;break A}cA(189360,134784),a=r;break A}A[g+2156>>2]=32;f:{u:{if(!(r=A[33285])){if(I=0,e=A[33283],A[e>>2]==A[e+4>>2])continue;if(!(r=A[33285]))break u}A[33285]=0;break f}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}A[g+2152>>2]=r,I=0;continue}A[g+2156>>2]=e+57344}if(C[134824])continue;if(s=A[g+2156>>2],!((0|(e=A[g+2152>>2]))!=10|A[47268]!=-1)){(0|(a=Er(s)))==16384?(e=A[g+2148>>2],B[iA+(e<<1)>>1]=A[33284]-A[47353],A[Q0>>2]=e,a=524328,e=k0(A[g+2156>>2],e+189424|0)+A[g+2148>>2]|0):e=A[g+2148>>2],l[0|(e=e+189424|0)]=32,l[e+1|0]=0;break A}s:if((0|s)==1){if((0|e)!=66){if((0|e)!=86)break s;for(e=A[g+2148>>2],A[g+2148>>2]=e+1,l[e+189424|0]=0;;){o:{f:{u:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])break o;if(!(r=A[33285]))break u}A[33285]=0;break f}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}if(A[g+2156>>2]=r,!(v0(r)||(0|(e=A[g+2148>>2]))>=799)){A[g+2148>>2]=e+1,l[e+189424|0]=A[g+2156>>2];continue}}break}l[A[g+2148>>2]+189424|0]=0,a=147456;break A}r=A[g+2148>>2],l[0|(e=r+189424|0)]=32,l[e+1|0]=32,l[e+2|0]=32,l[e+3|0]=0,A[g+2148>>2]=r+3;o:{f:{u:{g:{n:{d:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])break g;if(!(r=A[33285]))break d}A[33285]=0;break n}A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e)}if(A[g+2152>>2]=r,s=0,(0|r)!=48)break u;break f}r=A[g+2152>>2]}if(A[47208]=0,A[47201]=1,(0|r)==49)break o;for(s=A[33285],n=0;;){u:{if(!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break u;r=A[g+2152>>2]}if(!(v0(r)|n>>>0>58)){A[188832+(n<<2)>>2]=A[g+2152>>2],(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e),s=A[33285]),n=n+1|0,A[g+2152>>2]=r,e=A[g+2148>>2],A[g+2148>>2]=e+1,l[e+189424|0]=32;continue}}break}s=2,A[188832+(n<<2)>>2]=0}A[47201]=s}o:{if(!(r=A[33285])){if(e=A[33283],A[e>>2]==A[e+4>>2])continue;if(!(r=A[33285]))break o}A[33285]=0,A[g+2152>>2]=r;continue}A[33284]=A[33284]+1,e=A[33283],A[g+2152>>2]=xA[A[e+8>>2]](e);continue}d0=d0+1|0,r=0,e=A[Y+340>>2];s:if(n=y[e>>1]){for(;;){if((65535&n)!=(0|s)){if(n=y[e+((r=r+2|0)<<1)>>1])continue;break s}break}o:switch(0|(e=y[e+(r<<1|2)>>1])){case 1:continue;case 0:break s;default:break o}A[g+2156>>2]=e,s=e}Fr(s)?(R=1,r=A[g+2156>>2]):pA?(A[33285]=A[g+2152>>2],r=1328,A[g+2156>>2]=1328,A[g+2152>>2]=32,pA=0):(0|(r=A[g+2156>>2]))!=3851?(pA=0,(0|r)!=3405|A[g+2152>>2]!=8205||(r=3406,A[g+2156>>2]=3406)):(r=32,A[g+2156>>2]=32,pA=0);s:if(Ze(r)){if(A[Y+8216>>2]=A[Y+8216>>2]+1,A[33692]|A[47200]!=2||Ze($)||(A[g+2544>>2]=0,A[g+2548>>2]=0,A[g+2304>>2]=84731,!N0(Y,g+2304|0,g+2160|0,g+2544|0,0,0))||(me(Y,e=g+2160|0,g+2544|0,-1,0),$e(r=e,e=g+2336|0),A[g+80>>2]=e,nA(r=g+2240|0,85451,g+80|0),e=A[g+2148>>2],(0|(r=lA(r)+e|0))>=800))break s;cA(e+189424|0,g+2240|0),A[g+2148>>2]=r}else De(A[g+2156>>2])&&(A[Y+8220>>2]=A[Y+8220>>2]+1);if(r=A[g+2152>>2],e=A[g+2156>>2],A[47204])if((0|I)>0)I=I-1|0;else{if(!((0|e)!=91|(0|r)!=91)){s=0,I=-1;break e}I=(0|e)==93&&(0|r)==93?2:I}if((0|e)==10){for(s=A[33285],n=0;;){s:{if(!s){if(e=A[33283],A[e>>2]==A[e+4>>2])break s;r=A[g+2152>>2]}if(v0(r)){n=(A[g+2152>>2]==10)+n|0,(r=A[33285])?(A[33285]=0,s=0):(A[33284]=A[33284]+1,e=A[33283],r=0|xA[A[e+8>>2]](e),s=A[33285]),A[g+2152>>2]=r;continue}}break}if((0|n)>0){a&&QA(e=b0+189424|0,32,NA(g+2336|0,e)),e=A[g+2148>>2]+189424|0,l[0|e]=32,l[e+1|0]=0,A[33285]=A[g+2152>>2],a=A[47203]?524358:T((0|n)>=3?3:n,30)+524328|0;break A}if(e=A[47268]<(0|d0),d0=0,!e){e=A[g+2148>>2]+189424|0,l[0|e]=32,l[e+1|0]=0,A[33285]=A[g+2152>>2],a=262174;break A}}if(s=0,A[33692]|I)break e;if(e=0,!a)break r;if(v0(A[g+2156>>2])){e=a;break r}if(r0(A[g+2156>>2])&&At(A[g+2156>>2]))break r;A[33691]=A[g+2156>>2],l[0|(e=b0+189424|0)]=32,l[e+1|0]=0,A[33285]=A[g+2152>>2];break A}pA&&(A[g+2148>>2]=k0(1328,A[g+2148>>2]+189424|0)+A[g+2148>>2]),a&&QA(e=b0+189424|0,32,NA(g+2336|0,e)),e=A[g+2148>>2]+189424|0,l[0|e]=32,l[e+1|0]=0}a=589864;break A}if(!((0|(r=A[g+2156>>2]))!=46|A[g+2152>>2]!=46)){r:{i:{s:{if(!(r=A[33285])){if(r=A[33283],A[r>>2]==A[r+4>>2])break r;if(!(r=A[33285]))break s}A[33285]=0;break i}A[33284]=A[33284]+1,r=A[33283],r=0|xA[A[r+8>>2]](r)}if(f=r,(0|r)==46)for(A[g+2152>>2]=32,A[g+2156>>2]=8230,f=A[33285];;){i:{s:{if(!f){if(r=A[33283],A[r>>2]==A[r+4>>2]){f=46;break r}if(!(f=A[33285]))break s}A[33285]=0,r=0;break i}A[33284]=A[33284]+1,r=A[33283],f=0|xA[A[r+8>>2]](r),r=A[33285]}if((0|f)!=46)break r;A[g+2152>>2]=32,A[g+2156>>2]=8230,f=r}}(0|(r=A[g+2156>>2]))!=8230?A[33285]=f:(A[g+2152>>2]=f,r=8230)}if(fA=0,(0|(D=Er(r)))!=16384){r:if(536621&D)for(r=A[33285];;){if(!r&&(r=A[33283],A[r>>2]==A[r+4>>2])||!(536621&Er(A[g+2152>>2])))break r;(f=A[33285])?(A[33285]=0,r=0):(A[33284]=A[33284]+1,r=A[33283],f=0|xA[A[r+8>>2]](r),r=A[33285]),A[g+2152>>2]=f}if(1048576&D){A[c+780>>2]=D>>>12&15,pA=1,I=0,a=e;continue}(v0(A[g+2152>>2])|32768&D||tt(A[g+2152>>2])||(0|(r=A[g+2152>>2]))==63||(n=0,A[33285]||(r=A[33283],n=A[r>>2]==A[r+4>>2],r=A[g+2152>>2]),n||(0|r)==1))&&(fA=1)}if((0|(r=A[g+2156>>2]))==57404&&(A[g+2156>>2]=60,r=60),A[47201]){a=0;r:if(!(1<<(n=A2(r))&1879048255&&n>>>0<=30)){if(!((n=A2(r))>>>0>27)){if(116672&(I=1<<n))break r;if(134227968&I){a=!(1024&V2(r,n));break r}}a=1}if(!(C[134772]|!a)&&(A[47201]==1||G0(188832,A[g+2156>>2]))){A[Y+288>>2]=0,s=A[g+2156>>2],l[g+2336|0]=0,I=A[g+2152>>2],r=0;r:{i:if(!((0|(a=A[34064]))<=0))for(;;){if((0|s)==A[136272+(r<<4)>>2]){if(A[136276+(r<<4)>>2])break r;if(ei(0,r))break i;break r}if((0|a)==(0|(r=r+1|0)))break}r=-1}r:if((0|r)>=0)A[g>>2]=r,nA(g+2336|0,86007,g),A[33285]=I;else if((n=!fA)|(0|s)!=46|(0|I)==46||(A[g+2600>>2]=0,A[g+2604>>2]=0,A[g+2540>>2]=86036,!N0(Y,g+2540|0,g+2544|0,g+2600|0,0,0))?r=N8(g+2240|0,Y,s,0):(me(Y,r=g+2544|0,g+2600|0,-1,0),$e(a=r,r=g+2160|0),A[g+64>>2]=r,nA(r=g+2304|0,85451,g- -64|0)),a=r,n|!A[g+2148>>2]|2&C[Y+76|0]){for(r=A[33285],n=1;;){i:{s:{if(!r){if(r=A[33283],A[r>>2]==A[r+4>>2]|(0|s)==60|(0|s)!=(0|I))break i;if(n=n+1|0,I=A[33285])break s;A[33284]=A[33284]+1,r=A[33283],I=0|xA[A[r+8>>2]](r),r=A[33285];continue}if((0|s)==60|(0|s)!=(0|I))break i;I=r,n=n+1|0}r=0,A[33285]=0;continue}break}if(A[g+2152>>2]=I,fA&&(A[33285]=I),(0|n)==1){A[g+16>>2]=a,nA(g+2336|0,86219,g+16|0);break r}if((0|n)<=3){if(l[g+2336|0]=0,(0|(r=A[50786]))<=299&&(A[g+2336>>2]=C[86728]|C[86729]<<8|C[86730]<<16|C[86731]<<24,B[g+2340>>1]=C[86732]|C[86733]<<8),(0|n)>0){for(;A[g+32>>2]=a,nA(r=g+2160|0,86219,g+32|0),I=n>>>0>1,P0(g+2336|0,r),n=n-1|0,I;);r=A[50786]}if((0|r)>299)break r;A[g+2160>>2]=C[86857]|C[86858]<<8|C[86859]<<16|C[86860]<<24,r=C[86860]|C[86861]<<8|C[86862]<<16|C[86863]<<24,l[g+2163|0]=r,l[g+2164|0]=r>>>8,l[g+2165|0]=r>>>16,l[g+2166|0]=r>>>24,P0(g+2336|0,g+2160|0);break r}A[g+56>>2]=a,A[g+52>>2]=n,A[g+48>>2]=a,nA(g+2336|0,86932,g+48|0)}else A[33691]=s,A[33285]=I,B[g+2336>>1]=32;if(n=lA(a=g+2336|0),cA((r=A[g+2148>>2])+189424|0,a),A[g+2148>>2]=r+n,fA){if((0|s)==45){a=16384;break A}if(a=Er(s),!(2&C[Y+76|0]|(0|r)<=0)){a=(-32769&a)==266270?262148:(28672&a)==4096?266244:262148;break A}if(!(524288&a)){a=(28672&a)==4096?266244:262148;break A}if((0|a)>=0)break A}s=A[g+2156>>2]}}if(s|!(2097152&D)||(r=cA(A[g+2148>>2]+189424|0,N8(g+2336|0,Y,A[g+2156>>2],1)),C[0|r]?(A[g+2148>>2]=A[g+2148>>2]+lA(r),D&=-28673,s=A[g+2156>>2]):s=0),I=0,fA){r:if(v0(f=A[g+2152>>2]))for(n=A[33285],r=0;;){if(!n&&(a=A[33283],A[a>>2]==A[a+4>>2])||!v0(f))break r;r=((0|f)==10)+r|0,(f=A[33285])?(A[33285]=0,n=0):(A[33284]=A[33284]+1,a=A[33283],f=0|xA[A[a+8>>2]](a),n=A[33285])}else r=0;a=(0|(I=A[g+2156>>2]))==46&&(0|r)<2?4194304|D:D;r:{if(!r){n=1,(0|I)!=44|(0|$)!=46|A[Y+212>>2]!=26741|q-48>>>0>=10||f-48>>>0>=10&&!At(f)||(A[g+2156>>2]=1367,n=0),(0|(D=A[g+2156>>2]))!=46|(0|f)!=39||(I=n,D=A[33283],(0|(J=A[D>>2]))==A[D+4>>2]?n=0:(n=0|xA[A[D+8>>2]](D),A[D>>2]=J),D=A[g+2156>>2],n=(0|n)!=115&I);i:if((0|D)!=46)n&=R;else{s:if(1&l[Y+106|0]){if(!($-48>>>0<10)&&((I=$-73|0)>>>0>15|!(1<<I&40969)||!(1<<(I=q-73|0)&40969&&I>>>0<=15||v0(q))))break s;n=$-48>>>0>=10?0:!At(f)&(0|f)!=45&n}if(At(f)&&(n=C[Y+208|0]!=0&n),R){D=A[g+2156>>2];break i}D=32,A[g+2156>>2]=32,n=0}if(!(!n|(0|D)!=46|!A[47203]|(0|f)!=60)){b0=A[g+2148>>2],e=a;break r}if(!n)break r}if(e=A[g+2148>>2]+189424|0,l[0|e]=32,l[e+1|0]=0,A[33285]=f,$-48>>>0<10&&(a=r0(f)?a:-4194305&a),(0|r)<2)break A;a=(0|a)==536621?536656:(0|a)==532520?532555:524358;break A}(A[33285]||(I=0,r=A[33283],A[r>>2]!=A[r+4>>2]))&&(I=0,v0(A[g+2152>>2])&&(A[33285]=f))}a=e}if(A[33712]!=1){if((0|s)!=(0|(r=A[g+2156>>2])))n=A[g+2148>>2],(0|r)==57404&&(r=60,A[g+2156>>2]=60);else{e:{if(tt(s))r=57384;else{if(r=45,A[g+2156>>2]==45)break e;r=32}A[g+2156>>2]=r}n=A[g+2148>>2]}A[g+2148>>2]=k0(r,n+189424|0)+A[g+2148>>2],v0(A[g+2156>>2])||tt(A[g+2156>>2])||(e=A[g+2148>>2],B[iA+(e<<1)>>1]=A[33284]-A[47353],(0|e)<=(n+1|0)||QA(Kt+(n<<1)|0,255,e+~n<<1)),r=A[g+2148>>2],A[Q0>>2]=r;e:{r:{if((0|r)>725){if(!r0(A[g+2156>>2]))break r;r=A[g+2148>>2]}if((0|r)<796)continue;break e}if(r=A[g+2148>>2],!(A[g+2156>>2]-48>>>0>=10)&&(0|r)<796)continue}break}}l[0|(e=r+189424|0)]=32,l[e+1|0]=0,A[33285]=A[g+2152>>2],a=16384}F=g+2608|0,pA=a,U0&&(e=A[c+780>>2],A[U0>>2]=e||pA>>>12&7),e=(c+5184|0)+(A[c+6800>>2]<<1)|0,B[e+6>>1]=0,B[e+2>>1]=0,B[e+4>>1]=32767,D=T(4095&pA,8388608&pA?320:10),a=189424;A:{e:{r:if(e=C[189424]){for(;;){if(!!(255&(e=e<<24>>24))&e>>>0<33){if(e=C[0|(a=a+1|0)])continue;break r}break}if(C[0|a])break e}D=(0|(r=D-(e=A[47566])|0))>0?r:0,A[47566]=D+e,pA=C[190268]?524288|pA:pA,A[Y+8240>>2]=pA;break A}A[47566]=D,e=C[190268],A[Y+8240>>2]=pA,e&&(GA=1,A[47568]=A[47568]+1,(0|(e=A[47569]))<=0||(e=e-1|0,A[47569]=e,e||(l[190280]=0)))}A[49572]=1,A[47572]=655360,A[47573]=0,A[Y+8184>>2]=0,A[Y+8188>>2]=0,e=0,A[Y+288>>2]=0,A[(r=Y- -8192|0)>>2]=0,A[r+4>>2]=0,A[Y+8200>>2]=0,A[Y+8224>>2]=0,A[Y+8228>>2]=0,A[(r=Y+8232|0)>>2]=0,A[r+4>>2]=0,l[c+786|0]=32,B[c+784>>1]=8192,A[c+6812>>2]=32,B[c+1588>>1]=3,A[c+1584>>2]=0,a=0;A:if(!((0|(r=A[c+6800>>2]))<=0)){for(;;){if(B[(c+5184|0)+(a<<1)>>1]>0)break A;if((0|r)==(0|(a=a+1|0)))break}a=r}if(r=y[(c+5184|0)+(a<<1)>>1],B[c+1592>>1]=r,r)for(;e=!!(65535&~r)+e|0,r=y[(c+5184|0)+((a=a+1|0)<<1)>>1];);for(l[c+1594|0]=e,n=3,iA=1,a=0;;){q=A[c+6808>>2],Nr(c+6808|0,(AA=(c+784|0)+n|0)-1|0),!C[Y+170|0]|A[c+6808>>2]-48>>>0>=10||r0(q)&&(A[c+6808>>2]=97),L?A[c+6812>>2]=L:m&&Nr(c+6812|0,m+189423|0),r=m;A:{e:if(a||(r=NA(c+6816|0,m+189424|0)+m|0,a=A[c+6816>>2])){if(R=NA(c+6804|0,e=r+189424|0),(0|a)==1){if(s=r-1|0,L=32,$=0,A[c+6812>>2]!=32){r=s,e=32;break e}m=0,a=r;r:{i:switch(C[0|e]-43|0){case 0:a=r+1|0,m=64;break r;case 2:break i;default:break r}a=r+1|0,m=96}if(l[0|(e=a+189424|0)]-48>>>0>=10)f=a+1|0,R=-1;else{for(R=y2(e);a=(e=a)+1|0,l[e+189424|0]-48>>>0<10;);f=a,a=e}if((0|(L=A[47350]))>247)e=0;else if(e=0,!((0|(a=l[a+189424|0]))<0)&&(a=j2(84868,255&a,14))){r=(e=a-84868|0)+1|0,(0|R)==-1&&(R=A[105536+(r<<2)>>2],m=0);r:{i:switch(e-8|0){case 0:A[49574]=0,A[49573]=R;break r;case 4:break i;default:break r}(0|R)>=3?l[199304]=1:l[199304]=0}e=1,A[47350]=L+1,A[198304+(L<<2)>>2]=(r+m|0)+(R<<8),r=f}L=A[c+6812>>2],QA(s+189424|0,32,r-s|0),K0=e+K0|0,a=0;break A}L=0,(0|a)==32|A[49573]!=36?($=0,e=a):(A[c+6812>>2]!=32|A[c+6804>>2]!=32||(A[49573]=20),$=0,e=Pt(a,Y))}else A[c+6804>>2]=32,$=1,L=0,R=0,e=32;e:if(g0){if(g0=1,iA=8,a=0,(0|e)!=93|A[c+6804>>2]!=93)break e;r=r+1|0,e=32,g0=0}else if((240&(a=A[49573]))!=64)if(g0=0,16&a)a=0;else{r:{i:{s:{o:{if(!((0|(f=(0|e)==8242||(0|e)==8217||(0|e)==146||(0|e)==180?39:e))!=8216&(0|f)!=63))if(r0(A[c+6808>>2])){if(f=e,r0(A[c+6804>>2])){f=39;break o}}else f=e;f:{if((0|f)!=1367){if((0|f)==1328){v|=1024,f=32;break o}if((e=f-44032|0)>>>0>11183)break o;if(s=((a=((I=65535&e)>>>0)/28|0)>>>0)%21|0,e=e-T(a,28)&65535,f-50500>>>0>587)break f;a=e?e+4519|0:0,s=s+4449|0;break i}v|=131072,b0=A[c+6804>>2],e=A[c+6812>>2],f=32;break s}a=50500+(e+T(s,28)|0)|0,s=(I>>>0)/588|4352;break i}if(b0=A[c+6804>>2],e=A[c+6812>>2],!((a=f-12592|0)>>>0>51)){s=4352|C[a+103296|0],a=0;break i}}g=r+189424|0;s:if(!((0|(a=A[Y+212>>2]))!=28268&(0|a)!=24934|(0|f)!=39)&&!De(e)&&(NA(c+6820|0,g+1|0),et(A[c+6820>>2]))){s=601,a=0;o:switch(b0-110|0){case 6:break i;case 0:break o;default:break s}if(A[Y+212>>2]!=24934)break i;l[0|g]=32;break i}if(A[c+6824>>2]=32,(0|(e=A[49897]))>0)A[49897]=e-1,a=0;else{if(!f){a=0,s=0;break r}s:{o:{f:{u:if((fA=A[Y+180>>2])&&(I=f,(J=Ze(f))&&(I=Pt(f,Y)),!zi(fA)))for(;;){A[c+16>>2]=0,A[c+624>>2]=I,e=NA(c+16|0,fA)+fA|0;g:if(A[c+624>>2]==A[c+16>>2]){if(C[0|e]){for(s=1,$A=0,a=g;o0=NA(c+16|0,e),d0=NA(c+624|0,a),Q0=Pt(A[c+624>>2],Y),A[c+624>>2]=Q0,a=a+d0|0,$A=(d0=(0|Q0)==A[c+16>>2])+$A|0,s&=d0,C[0|(e=e+o0|0)];);if(!s)break g;A[49897]=$A}if(!(e=e+1|0))break u;if(8&C[188788]&&(A[c>>2]=fA,A[c+4>>2]=e,n0(A[47195],85187,c)),e=NA(c+6828|0,e)+e|0,C[0|e])break f;a=0;break o}for(;a=e,e=e+1|0,C[0|a];);for(;C[0|(a=(e=a)+1|0)];);if(zi(fA=e+2|0))break}a=0,s=f;break s}NA(c+6824|0,e),J&&Ze(b0)&&(A[c+6824>>2]=hi(A[c+6824>>2])),a=A[c+6824>>2]}s=A[c+6828>>2],v|=2097152,J&&(s=hi(s))}if((0|s)!=8)break i}s=r;break A}a?A[c+6804>>2]=a:a=0}r0(s)||et(s)||G0(A[Y+336>>2],s)||!r0(A[c+6808>>2])|!(!C[Y+170|0]|s-48>>>0>=10)&A[c+6804>>2]-48>>>0>=10||(s=32,tA=1);r:{i:{s:{o:{f:{if(A[c+6808>>2]-48>>>0<10){if(s-48>>>0<10){e=E;break f}if(1<<(e=s-32|0)&20481&&e>>>0<=14)break o;tA=1}else if(e=0,A[c+6812>>2]!=44||(e=E,(0|s)!=44))break f;s=32;break o}if((0|s)==91&&((0|(f=A[c+6804>>2]))==2||(s=91,(0|f)==91&&A[47204])))break s;E=e}if(r0(s)){o:{f:{u:{if(r0(A[c+6808>>2])){if(!C[Y+171|0]||(e=A[c+6808>>2],!((0|s)>12352)&&(0|e)<12353))break u}else e=A[c+6808>>2];if(B0=G0(A[Y+336>>2],e)?B0:0,(0|(e=A[c+6808>>2]))!=32&&!G0(A[Y+336>>2],e)){e=32,O=tt(A[c+6808>>2])?O:256|O;break f}v=Ze(s)?2|v:v,A[c+6808>>2]!=32|l[AA-2|0]-48>>>0>=10|A[c+6812>>2]-48>>>0<10||(l[(c+784|0)+n|0]=32,e=1588+(T(bA,12)+c|0)|0,B[e>>1]=y[e>>1]+1,n=n+1|0)}if(e=32,(0|s)==32)break o;if(B0=B0+1|0,(0|(f=A[Y+600>>2]))<=0){e=s;break o}if(!((0|s)<=591&(0|(I=A[c+6808>>2]))>=(0|f))){if((0|s)<(0|f)){e=s;break o}if((0|B0)<2){e=s;break o}if(!((0|I)<=591)){e=s;break o}}if(!r0(I)){e=s;break o}v|=16384,O|=128}tA=1}if(ze=ze+1|0,Ze(e)){if(f=Pt(e,Y),A[Y- -64>>2]){e=Ye?f:712,a=Ye?a:f,Ye=1;break e}if(At(A[c+6812>>2])){if(A[c+6808>>2]==32){e=f;break e}if(e=32,A[Y+212>>2]!=26465)break r;for(s=85240,I=(c+784|0)+n|0,R=0;;){if(g=lA(s),C[0|(q=I-g|0)]==32&&!F0(q+1|0,s,g=g-1|0)){if((0|(s=l[s+g|0]))==(0|f)){e=f;break e}if((0|s)==65&&ll(Y,f)){e=f;break e}}if(s=A[131184+((R=R+1|0)<<2)>>2],(0|R)==11)break}break r}if(e=32,(0|f)==32)break e;if(!Ze(A[c+6812>>2])){e=f;break e}if(!At(A[c+6804>>2])){e=f;break e}if(NA(c+16|0,189424+(r+R|0)|0),!(A[Y+212>>2]!=28268|(0|B0)!=2|(0|f)!=106|A[c+6812>>2]!=73)){e=f;break e}if(A[c+6808>>2]==32){e=f;break e}if(!r0(A[c+16>>2])){e=f;break e}O|=256,L=32,tA=1;break e}if(!iA){iA=0;break e}if((0|B0)<3){iA=0;break e}if((0|e)!=115){iA=0;break e}if(A[Y+212>>2]!=25966){iA=0;break e}if(A[c+6804>>2]!=32){iA=0;break e}if(iA|=4,e=32,C[(s=n+c|0)+783|0]!=39)break e;l[s+783|0]=32;break e}e=32;o:{f:{u:{g:{n:switch(s-39|0){default:if((0|s)==95)break e;case 1:case 2:case 3:case 4:case 5:if(s-48>>>0>=10||C[Y+170|0]&&r0(A[c+6808>>2])&&!((f=A[c+6804>>2])-48>>>0<10|f-2406>>>0<10))break o;if((0|(I=A[c+6808>>2]))==32)break f;if(f=A[c+6808>>2],I-48>>>0<10)break u;if((0|(I=f))==(0|(f=A[Y+128>>2])))break g;tA=1;break e;case 6:if(!et(A[c+6812>>2])&&r0(A[c+6804>>2])){if(A[c+6808>>2]!=32){tA=1;break e}if(v|=128,(0|bA)<=0)break e;s=1572+(T(bA,12)+c|0)|0,A[s>>2]=16384|A[s>>2];break e}if(s=A[c+6804>>2],!(A[c+6812>>2]!=32|(0|s)!=32)){VA=4;break e}if((0|s)==45){r=r+1|0,VA=4;break e}if(e=45,A[c+6808>>2]!=32||!r0(q)||r0(A[c+6812>>2]))break e;l[(c+784|0)+n|0]=32,s=1588+(T(bA,12)+c|0)|0,B[s>>1]=y[s>>1]+1,n=n+1|0;break e;case 7:if(A[c+6808>>2]==46){tA=1;break e}if(e=46,(0|bA)<=0||(s=1572+(T(bA,12)+c|0)|0,1&l[s+1|0])||!r0(A[c+6812>>2]))break e;A[s>>2]=65536|A[s>>2],e=(e=et(A[c+6804>>2]))||A[c+6804>>2]==45?32:46;break e;case 0:break n}n:{if((0|(f=A[c+6812>>2]))!=46||(s=115,A[c+6804>>2]!=115)){if(!Fr(f))break n;s=A[c+6804>>2]}if(r0(s))break i}if(1&(s=A[Y+88>>2])){if(r0(A[c+6804>>2]))break i;s=A[Y+88>>2]}if(2&s&&r0(A[c+6812>>2]))break i;if(!(!G0(A[Y+332>>2],A[c+6812>>2])|(0|q)!=32)){r=(A[c+6804>>2]==32)+r|0;break i}if(f=(0|(s=A[c+6808>>2]))!=115|Ne,Ne=0,!(1&f))break e;Ne=!!(0|et(s)),VA=4;break e}if((0|f)==44&E){tA=1;break e}E=1;break o}if((0|f)!=32)break o}r0(q)&&(r0(A[c+6812>>2])||(l[(c+784|0)+n|0]=32,e=1588+(T(bA,12)+c|0)|0,B[e>>1]=y[e>>1]+1,n=n+1|0))}e=s;break e}g0=1,s=r+1|0,E=e;break A}e=39,Ne=0;break e}tA=1,L=32}else{if(e-48>>>0<10){a=0,s=(0|(f=A[49574]+1|0))>(15&A[49573]),A[49574]=s?0:f,e=s?32:e,tA|=s,g0=0;break e}a=0,A[49574]=0,e=(s=A[c+6808>>2]-48>>>0<10)?32:e,tA|=s,g0=0}if(et(e)){if(A[c+6808>>2]==32){v|=262144,s=r;break A}if(s=A[c+6816>>2]-9>>>0<2,I=1&tA){R=0;e:if(!((0|b)>(0|(e=r-1|0))))for(;;){if(!(f=B[(c+5184|0)+(e<<1)>>1]))break e;if(R=((0|f)>0)+R|0,!((0|b)<=(0|(e=e-1|0))))break}l[1594+(T(bA,12)+c|0)|0]=R}if(O=s?262144|O:O,l[(c+784|0)+n|0]=32,e=n+1|0,!((0|bA)>298||(s=(c+1584|0)+T(bA,12)|0,(0|(f=y[s+4>>1]))>=(0|e)))){if((0|K0)<=0?b=A[s>>2]:(b=198300+(A[47350]<<2)|0,A[b>>2]=128|A[b>>2],K0=0,b=64|A[s>>2]),g=A[47352],l[s+6|0]=g,A[s>>2]=b|(ze?iA:-2&iA)|(C[199304]?2048:0)|v,(0|g)>0){for(;v=(b=c+784|0)+e|0,b=b+(e=e-1|0)|0,l[0|v]=C[0|b],(0|e)>(0|f););l[0|b]=32,B[s+4>>1]=f+1,e=n+2|0}f=(c+1584|0)+T(bA=bA+1|0,12)|0,A[f>>2]=0,B[f+4>>1]=e,n=r;e:if(!((0|(s=A[c+6800>>2]))<=(0|r))){for(;;){if(B[(c+5184|0)+(n<<1)>>1]>0)break e;if((0|s)==(0|(n=n+1|0)))break}n=s}if(R=y[(c+5184|0)+(n<<1)>>1],B[f+8>>1]=R,ze=0,s=0,R)for(;s=!!(65535&~R)+s|0,R=y[(c+5184|0)+((n=n+1|0)<<1)>>1];);l[f+10|0]=s,A[47352]=0,iA=1,v=O,O=0,Ye=0}tA=0,a=I?0:a,s=I?m:r}else(0|n)>795?(s=r,r=b,e=n):(e=k0(e,(c+784|0)+n|0)+n|0,s=r,r=b);A[47352]<(0|VA)&&(A[47352]=VA),VA=0,b=r,n=e}if($||(m=s,!((0|n)<799)))break}(0|K0)<=0|bA||(e=198300+(A[47350]<<2)|0,A[e>>2]=128|A[e>>2],A[c+1584>>2]=64|A[c+1584>>2],bA=1),e=(c+784|0)+n|0,A[Y+8204>>2]=e-1,r=0,l[0|e]=0,l[c+1590|0]=0,l[1590+(T(bA,12)+c|0)|0]=8;A:if((0|bA)<=0)A[c+1584>>2]=512|A[c+1584>>2],n=A[49572];else{e=bA-1|0;e:if((0|bA)!=1)for(a=e;;){if(!tt(l[y[1588+(T(a,12)+c|0)>>1]+(c+784|0)|0])){r=a;break e}if(f=(0|a)>1,a=a-1|0,!f)break}if(r=(c+1584|0)+T(r,12)|0,A[r>>2]=16|A[r>>2],4194304&pA&&(e=(c+1584|0)+T(e,12)|0,256&(r=A[e>>2])||(A[e>>2]=65536|r)),A[c+1584>>2]=512|A[c+1584>>2],!((0|bA)<=0|(0|(n=A[49572]))>990))for(f=3|(e=c+624|0),I=2|e,L=c+754|0,$=!(4194304&pA),m=0,b=0;;){A[47354]=A[47354]+1;e:{if((0|(e=A[49827]))<=0||(e=e-1|0,A[49827]=e,e)){if(C[190280])break e}else l[190280]=0;e=y[1588+(T(m,12)+c|0)>>1]+(c+784|0)|0;r:if(!(l[0|e]-48>>>0>=10)&&(r=c+624|0,a=e,A[Y+112>>2]!=1227133512)){for(;;){i:{if(l[0|a]-48>>>0<10)l[0|r]=C[0|a],r=r+1|0,a=a+1|0;else{if(A[Y+124>>2]!=l[0|a]|C[a+1|0]!=32||(n=a+2|0,C[a+3|0]==32|l[0|n]-48>>>0>=10|C[a+4|0]==32))break i;m=m+1|0,a=n}if(r>>>0<L>>>0)continue;break r}break}QA(e+(r=r-(E=c+624|0)|0)|0,32,(a=(n=a-e|0)-r|0)>>>0<=n>>>0?a:0),MA(e,E,r)}for(r=0;a=r,r=r+1|0,l[e+a|0]-48>>>0<10;);r:if(a-5>>>0<=27){for(l[c+626|0]=32,B[c+624>>1]=8224,C[0|e]!=48&A[Y+132>>2]>=(0|a)||(r=(c+1584|0)+T(m,12)|0,A[r>>2]=524288|A[r>>2]),O=(c+1584|0)+T(m,12)|0,R=0,n=f;r=e,!((e=l[0|e])-48>>>0>=10&(0|e)!=A[Y+128>>2])&&(l[0|n]=e,e=n+1|0,E=a,(0|(a=a-1|0))<=0?n=e:A[Y+112>>2]>>>a&1?(g=A[O+4>>2],v=(c+16|0)+T(R,12)|0,A[v>>2]=A[O>>2],A[v+4>>2]=g,A[v+8>>2]=A[O+8>>2],R=R+1|0,(0|(v=A[Y+124>>2]))!=32&&(l[n+1|0]=v,e=n+2|0),l[0|e]=32,n=e+1|0,8&C[O+2|0]||((VA=A[Y+112>>2])>>>E-2&1&&(l[e+1|0]=48,l[e+2|0]=48,VA=A[Y+112>>2],n=e+3|0),VA>>>E-3&1&&(l[0|n]=48,n=n+1|0))):n=e,e=r+1|0,n>>>0<L>>>0););if(a=A[O+4>>2],e=(c+16|0)+T(R,12)|0,A[e>>2]=A[O>>2],A[e+4>>2]=a,a=A[O+20>>2],A[e+16>>2]=A[O+16>>2],A[e+20>>2]=a,a=A[O+12>>2],A[e+8>>2]=A[O+8>>2],A[e+12>>2]=a,a=1,(0|R)>0)for(;e=(c+16|0)+T(a,12)|0,A[e>>2]=-262209&A[e>>2],(0|R)>=(0|(a=a+1|0)););if(e=C[r+4|0]|C[r+5|0]<<8|C[r+6|0]<<16|C[r+7|0]<<24,a=C[0|r]|C[r+1|0]<<8|C[r+2|0]<<16|C[r+3|0]<<24,l[0|n]=a,l[n+1|0]=a>>>8,l[n+2|0]=a>>>16,l[n+3|0]=a>>>24,l[n+4|0]=e,l[n+5|0]=e>>>8,l[n+6|0]=e>>>16,l[n+7|0]=e>>>24,e=C[r+12|0]|C[r+13|0]<<8|C[r+14|0]<<16|C[r+15|0]<<24,r=C[r+8|0]|C[r+9|0]<<8|C[r+10|0]<<16|C[r+11|0]<<24,l[n+8|0]=r,l[n+9|0]=r>>>8,l[n+10|0]=r>>>16,l[n+11|0]=r>>>24,l[n+12|0]=e,l[n+13|0]=e>>>8,l[n+14|0]=e>>>16,l[n+15|0]=e>>>24,l[n+16|0]=0,n>>>0<=f>>>0)break r;for(e=C[O+6|0],R=0,a=f;;){for(b=J1(Y,a,(c+16|0)+T(R,12)|0,255&e);e=C[0|a],a=a+1|0,(0|e)!=32;);if(e=0,l[O+6|0]=0,R=R+1|0,!(a>>>0<n>>>0))break}}else{if(A[47352]=0,b=J1(Y,e,r=(c+1584|0)+T(m,12)|0,C[r+6|0]),(0|(a=A[47352]))>C[r+18|0]&&(l[r+18|0]=a,A[47352]=0),!(!(4096&b)|C[0|e]==32))for(;QA(c+624|0,0,150),A[c+624>>2]=538976288,A[c+628>>2]=538976288,l[c+632|0]=32,J1(Y,MA(I,e,a=NA(c+16|0,e)),r,0),C[0|(e=e+a|0)]!=32;);50331648&b&&(D=(e=$|(~A[33264]+bA|0)!=(0|m))?D:10,e|!U0||(A[U0>>2]=4,D=10))}if(128&b&&!((0|(r=A[33264]))<=0)){if(e=0,a=r,n=3&r)for(;E=(c+1584|0)+T(a+m|0,12)|0,A[E>>2]=1048576|A[E>>2],a=a-1|0,(0|n)!=(0|(e=e+1|0)););if(r>>>0>=4)for(;e=(c+1584|0)+T(a+m|0,12)|0,A[e>>2]=1048576|A[e>>2],A[(r=e-12|0)>>2]=1048576|A[r>>2],A[(r=e-24|0)>>2]=1048576|A[r>>2],A[(e=e-36|0)>>2]=1048576|A[e>>2],a=a-4|0;);A[33264]=a}}if(n=A[49572],(0|bA)<=(0|(m=m+1|0)))break A;if(!((0|n)<991))break}}if((0|(a=A[47351]))<(0|(f=A[47350]))){for(L=A[47202],$=A[49846],R=A[47352];;){e=(r=A[198304+(a<<2)>>2])>>8;A:{e:switch((31&r)-9|0){case 0:L=e;break A;case 4:$=e;break A;case 3:break e;default:break A}R=r>>>0>=256?e+R|0:0}if(!(!(128&r)&(0|f)>(0|(a=a+1|0))))break}A[47352]=R,A[47351]=a,A[49846]=$,A[47202]=L}A[49572]=n+2,A[(e=190288+(n<<3)|0)>>2]=589824,B[e+4>>1]=s,A[e+8>>2]=589824,B[e+12>>1]=s,r=bA&&A[47199]?D:10,A[33285]?e=0:(e=A[33283],e=A[e>>2]==A[e+4>>2]),D=e?r:D,m=GA,f=0,bA=0,F=I=F-32192|0,A[I+24>>2]=0,A[I+28>>2]=0,A[I+16>>2]=0,A[I+20>>2]=0,A[I+8>>2]=0,A[I+12>>2]=0,A[I>>2]=0,A[I+4>>2]=0,s=A[49572],g=y[190284+(s<<3)>>1];A:{if((0|(a=s-3|0))<0)e=a;else{for(;;){if(f=(0|(r=127&C[(e=190288+(a<<3)|0)+3|0]))<(0|f)?f:r,y[e+4>>1])e=a;else if(e=-1,r=(0|a)>0,a=a-1|0,r)continue;break}if(f>>>0>3)break A}for(;;){if((0|(e=e-1|0))<0)break A;if(64&C[0|(r=190288+(e<<3)|0)]){l[r+3|0]=4;break A}if(!(C[r+3|0]<4))break}}if(e=A[Y+292>>2],a=0,(0|s)<=0)f=0;else for(E=-1,f=0;;){r=e,A[Y+292>>2]!=(0|e)&&(B[(e=190288+(a<<3)|0)>>1]=32|y[e>>1]),(0|f)>0&&(O=A[(b=190288+(a<<3)|0)+4>>2],A[(n=(e=a-f<<3)+190288|0)>>2]=A[b>>2],A[n+4>>2]=O,(0|E)!=-1&&(B[4+(e+190288|0)>>1]=E),E=-1);A:{if(C[2+((n=a<<3)+190288|0)|0]==21){if(e=C[(b=n+190288|0)+7|0],2&C[0|b])break A;e:if((0|e)!=(0|r)){if(b=C[10+(n+190288|0)|0]-9|0){if((0|b)==12)break e;break A}if(C[18+(n+190288|0)|0]!=21)break A}(0|E)==-1&&(E=(e=y[4+(n+190288|0)>>1])||-1),f=f+1|0}e=r}if((0|s)==(0|(a=a+1|0)))break}if(A[49572]=s-f,W0(e),(r=A[Y+36>>2])&&!((0|(e=(f=A[49572])-1|0))<0))for(L=256&r,v=4&r,$=8&r,O=15&r,tA=16&r,GA=2&r,r=r>>>8&1,a=0;;){if(n=f,s=a,f=e,(0|(e=C[(b=(iA=e<<3)+190288|0)+2|0]))==21){A:{e:{if((0|(a=n-2|0))>=0)for(;;){if(C[2+((e=a<<3)+190288|0)|0]==21)break e;if(e=(0|a)>0,a=a-1|0,!e)break}e=A[Y+292>>2];break A}e=C[7+(e+190288|0)|0]}W0(e),e=C[b+2|0]}if(a=s,(e=A[144464+((255&e)<<2)>>2])&&(a=r,!(32&C[0|b]))){a=C[e+11|0],E=0,GA&&((0|(n=C[0|e]))!=118&(0|n)!=82||(s=tA?0:s,E=1));A:{e:{r:{i:switch((n=253&a)-4|0){case 1:break r;case 0:break i;default:break e}if(O&&(a=1,!s)||(0|(a=s))!=2||(a=2,!(e=C[e+13|0])))break A;l[b+2|0]=e;break A}if(O&&(a=2,!s)||(0|(a=s))!=1||(a=1,!(e=C[e+13|0])))break A;l[b+2|0]=e;break A}a=0,$&&(a=n?s:0)}a=e=E?0:a,y[4+(iA+190288|0)>>1]&&(a=e=v?0:e,L&&(a=e||1))}if(!((0|(e=f-1|0))>=0))break}if(W0(A[Y+292>>2]),A[49572]<=0)tA=-2,a=0;else{for(a=-1,s=0,b=0,$=0;;){e=b<<3,(0|a)!=-1&&(B[4+(e+190288|0)>>1]=a),C[(E=e+190288|0)+2|0]==21&&W0(C[7+(e+190288|0)|0]),O=A[49572];A:{if(!(32&C[0|(n=e+190288|0)])){s=(0|(r=O-1|0))>(0|b)?A[144464+(C[10+(e+190288|0)|0]<<2)>>2]:s,!(y[n+12>>1]|(0|r)==(0|b))&&(R=0,C[s+11|0]|!s)||(R=1),f=C[E+2|0];e:if(!((0|(tA=A[49848]))<=0))for(r=e+190288|0,a=0;;){if(L=T(a,3),C[L+199408|0]==(255&f)&&!((v=C[2+(L+199408|0)|0])&(1^R)|(4&C[r+3|0]?2&v:0)|(y[r+4>>1]?0:4&v))){if(f=C[1+(L+199408|0)|0],l[E+2|0]=f,!(2&C[A[144464+(f<<2)>>2]+4|0])|C[r+3|0]<2)break e;l[r+3|0]=0;break e}if((0|tA)==(0|(a=a+1|0)))break}if(!(255&f)){a=y[4+(e+190288|0)>>1];break A}}a=A[n+4>>2],e=(I+32|0)+($<<5)|0,r=A[n>>2],A[e>>2]=r,A[e+4>>2]=a,r=A[144464+(r>>>14&1020)>>2],A[e+8>>2]=r,l[e+17|0]=C[r+11|0],$=$+1|0,a=-1}if(!((0|$)<1e3&(0|O)>(0|(b=b+1|0))))break}if(f=0,a=0,!((0|(tA=$-2|0))<=0))for(;;){A:if(y[4+((I+32|0)+(f<<5)|0)>>1]){for(r=(0|f)>(0|tA)?f:tA,a=0,e=f;;){if((0|e)!=(0|r)){if(a=(0|a)>(0|(n=C[3+((s=I+32|0)+(e<<5)|0)|0]))?a:n,!y[4+(s+((e=e+1|0)<<5)|0)>>1])continue}else e=r;break}if((0|e)<=(0|f))break A;if(r=~f+e|0,s=0,n=e-f&7)for(;l[6+((I+32|0)+(f<<5)|0)|0]=a,f=f+1|0,(0|n)!=(0|(s=s+1|0)););if(r>>>0<7)break A;for(;l[(r=(I+32|0)+(f<<5)|0)+6|0]=a,l[r+38|0]=a,l[r+70|0]=a,l[r+102|0]=a,l[r+134|0]=a,l[r+166|0]=a,l[r+198|0]=a,l[r+230|0]=a,(0|(f=f+8|0))!=(0|e););}else e=f+1|0;if(f=e,!((0|tA)>(0|e)))break}}for(A[I+40>>2]=A[36125],W0(A[Y+292>>2]),q=(0|a)<4,b=1,L=1,O=0,r=0,a=0,GA=0;;){A:{e:{r:{i:{if(r){if(s=(e=I+32|0)+((E=a-1|0)<<5)|0,O=C[2+(e+(a<<5)|0)|0],(0|E)>0){if(e=b-(a=(0|b)>0)|0,E>>>0>=(f=a?b:2)>>>0)for(;n=(a=(I+32|0)+(f<<5)|0)-32|0,b=A[a+12>>2],A[n+8>>2]=A[a+8>>2],A[n+12>>2]=b,b=A[a+4>>2],A[n>>2]=A[a>>2],A[n+4>>2]=b,b=A[a+28>>2],A[n+24>>2]=A[a+24>>2],A[n+28>>2]=b,b=A[a+20>>2],A[n+16>>2]=A[a+16>>2],A[n+20>>2]=b,(0|E)>=(0|(f=f+1|0)););b=e}R=A[144464+(O<<2)>>2],A[s>>2]=0,A[s+4>>2]=0,A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,l[s+2|0]=r,e=A[144464+(r<<2)>>2],A[s+8>>2]=e,O=s}else{if((0|a)>=(0|tA)|(0|GA)>=997)break i;n=C[(s=(f=a<<5)+(I+32|0)|0)+2|0],e=A[144464+(n<<2)>>2],A[s+8>>2]=e,E=y[s+4>>1],(0|n)==21&&W0(C[7+(f+(I+32|0)|0)|0]),b=E?a:b,R=A[144464+(C[s+34|0]<<2)>>2],A[s+40>>2]=R,E=a}if(!e){r=0,a=E+1|0;continue}if(V0(Y,256,s,I+32040|0,I),(0|(a=A[I+32052>>2]))>0&&(f=(I+32|0)+(E<<5)|0,R=A[144464+(a<<2)>>2],A[f+40>>2]=R,l[f+34|0]=a,l[f+49|0]=C[R+11|0]),a=0,r)r=e;else if((0|(f=A[I+32056>>2]))<=0)r=e;else{r=A[144464+(f<<2)>>2],A[s+8>>2]=r,a=C[s+2|0],l[s+2|0]=f,f=y[s>>1];s:if(C[r+11|0]!=2)B[s>>1]=65531&f;else{if(B[s>>1]=4|f,C[e+11|0]==2)break s;l[s+3|0]=0}V0(Y,256,s,I+32040|0,I)}if((0|(n=A[I+32048>>2]))<=0)f=r;else{if(f=A[144464+(n<<2)>>2],l[s+2|0]=n,A[s+8>>2]=f,e=C[f+11|0],$=1,(0|n)==1){iA=(0|e)==2;break e}n=y[s>>1];s:if((0|e)!=2)B[s>>1]=65531&n;else{if(B[s>>1]=4|n,C[r+11|0]==2)break s;l[s+3|0]=0}V0(Y,256,s,I+32040|0,I)}if(iA=0,(0|(e=C[f+11|0]))!=2){$=0;break e}if(iA=1,$=0,e=2,C[s+3|0]>1){bA=0;break e}n=s+3|0,bA=bA+1|0,r=s;s:{if(8&(v=A[Y+12>>2])){for(;;){o:switch(v=r,r=r+32|0,C[v+49|0]){case 0:break e;case 2:break o;default:continue}break}if(C[0|(r=v+35|0)]>1)break e;if(C[s+6|0]<=3&&(l[0|n]=0),C[v+38|0]<4)break s;break e}if(1&bA|(0|bA)<2)break e;if(2&v)break r;if(q)r=n;else if(r=n,y[s+36>>1])break r}l[0|r]=0;break e}A[36423]=GA+2,B[(e=145840+(GA<<5)|0)>>1]=0,l[e+2|0]=9,l[e+20|0]=2,A[e+12>>2]=D,B[e+4>>1]=g,l[e+17|0]=0,l[e+18|0]=0,A[e+8>>2]=A[36125],B[e+32>>1]=0,l[e+34|0]=9,l[e+52|0]=0,A[e+44>>2]=0,B[e+36>>1]=0,l[e+49|0]=0,l[e+50|0]=0,A[e+40>>2]=A[36126],W0(A[Y+292>>2]),F=I+32192|0;break A}bA=1}if(!(8&(r=y[s+32>>1]))|(0|E)<=0||(n=C[R+11|0])>>>0>15|!(1<<n&457)||(a=C[R+10|0],B[s+32>>1]=8^r),J=y[s+36>>1]){e:if(r=A[Y+4>>2]){r:switch(0|e){default:a=512&r?11:a;break;case 0:break e;case 2:break r}if(C[R+11|0]==2){(n=12&r)&&(a=(0|n)!=12?23:11);r:if(iA){i:switch(3&r){case 2:a=10;break r;case 0:break r;default:break i}a=23}C[s+35|0]<4||(a=256&r?10:a)}}if(!((0|s)==(0|O)|(0|GA)<=0)){e:{r:{i:switch(0|(r=7&A[Y>>2])){case 0:break e;case 1:break i;default:break r}if(a-12>>>0>4294967293)break e}a=C[r+101916|0]}a=A[47205]>0?24:a}}if(A[s+72>>2]=A[144464+(C[s+66|0]<<2)>>2],r=A[I+32060>>2],r=a||r||a,!$){l[(n=(v=GA<<5)+145840|0)+17|0]=e,A[n+8>>2]=f,l[n+16|0]=0,B[n>>1]=y[s>>1],l[n+3|0]=15&C[s+3|0],l[n+6|0]=C[s+6|0],a=C[s+7|0],B[n+4>>1]=0,l[n+7|0]=a,$=C[f+10|0],l[n+2|0]=$;e:if(a=y[s+4>>1]){if(B[n+4>>1]=a,m=1&m?5:1,l[(s=v+145840|0)+20|0]=m,a=L,L=0,!a){m=0;break e}l[s+20|0]=8|m,m=0}else l[20+(v+145840|0)|0]=0;A[(a=v+145840|0)+12>>2]=A[I+32084>>2]<<1,!J|(0|$)!=24||(0|(s=A[47205]))<=0||(A[n+8>>2]=A[36126],A[a+12>>2]=T(s,14)),(1<<e&428?e>>>0<=8:0)|2&C[f+7|0]&&(A[a+12>>2]=128,l[n+16|0]=0),l[(e=v+145840|0)+21|0]=255,l[e+22|0]=255,B[e+18>>1]=5120,GA=GA+1|0}a=E+1|0;continue}break}B[88922]=1,A[44462]=0,K0&&(B[145776+(A[36423]<<5)>>1]=2,e=198304+(A[47350]<<2)|0,A[e>>2]=128,A[(e=e-4|0)>>2]=128|A[e>>2]),l[190268]=pA>>>19&1,at&&(A[at>>2]=pA<<14>>31&189360)}F=c+6832|0,tA=A[47192],iA=A[t+12>>2],r=0,n=0,b=0,v=0,O=0,VA=0,D=0,F=g=F-6e3|0;A:if(!((0|(s=(GA=A[36423])-1|0))<=0)){for(;l[2+(g+T(r,6)|0)|0]=0,4&C[(e=r<<5)+145840|0]?(a=g+T(v,6)|0,l[a+1|0]=0,e=e+145840|0,l[a+3|0]=C[e+49|0],e=C[e+3|0],l[0|a]=e,v=v+1|0,VA=(e>>>0>3)+VA|0):C[A[8+(e+145840|0)>>2]+10|0]!=27|(0|v)<=0||(e=(g+T(v,6)|0)-4|0,l[0|e]=4|C[0|e]),(0|s)!=(0|(r=r+1|0)););if(l[g+T(v,6)|0]=0,v)if(A[tA+148>>2]==1){if(!((0|GA)<=0)){for(e=-2&GA,a=1&GA,r=145840;b=C[r+17|0]==2&&C[r+3|0]>3?n:b,b=C[r+49|0]==2&&C[r+35|0]>3?1|n:b,r=r- -64|0,n=n+2|0,(0|e)!=(0|(O=O+2|0)););!a|C[r+17|0]!=2||(b=C[r+3|0]>3?n:b)}if(l[(f=(e=b<<5)+145840|0)+3|0]=7,A[tA+212>>2]==30313&&(C[(e=e+145840|0)+7|0]||(l[e+7|0]=q0(55),GA=A[36423])),!((0|GA)<=0)){for(O=0,r=145840,e=145840,n=E=A[36125],s=0,L=1;;){if(C[r+17|0]?m=A[36125]:(m=A[36125],E=(a=C[A[r+8>>2]+14|0]>50)?m:E,L|=a),a=C[r+20|0]?m:n,4&C[0|r]){m=C[r+7|0],n=A[144464+(m<<2)>>2];e:{if((0|(v=A[tA+212>>2]))==6840683){if(A[a>>2]!=49||(v=A[n>>2]-49|0)>>>0>5|!(1<<v&41))break e;l[e+7|0]=q0(50),v=A[tA+212>>2]}if(!((0|v)!=6516078&(0|v)!=31336)){v=0,m||(s=q0(1&(v=s|L)?13621:12593),l[r+7|0]=s,n=A[144464+(s<<2)>>2]),(0|b)!=(0|O)|(1024|A[n>>2])!=13621||(l[f+3|0]=6),A[E>>2]==3420466&&(l[e+7|0]=q0(A[n>>2]==3420466?13619:12594));r:{if(A[a>>2]==12597){if((0|(m=A[n>>2]))!=12597)break r;l[e+7|0]=q0(13109)}m=A[n>>2]}s=v,(0|m)==12593&&((0|(m=A[E>>2]))==13621&&(l[r+7|0]=q0(12850),m=A[E>>2]),(0|m)==13619&&(l[r+7|0]=q0(13107),m=A[E>>2]),(0|m)==3420466&&(l[r+7|0]=q0(13364)),l[r+3|0]=0)}}L=0,E=n,e=r}else n=a;if(r=r+32|0,!((0|(O=O+1|0))<(0|(a=A[36423]))))break}if(n=0,r=145840,!((0|a)<=0))for(;4&C[0|r]&&((e=C[r+7|0])||(l[r+7|0]=17,e=17),e=A[144464+(e<<2)>>2],l[r+21|0]=C[e+12|0],l[r+22|0]=C[e+13|0]),r=r+32|0,(0|a)!=(0|(n=n+1|0)););}}else{if(e=A[tA+152>>2],e=tA+T(q=(0|e)>7?1:e,6)|0,Y=C[0|(q?e+637:tA+157)],pA=C[0|(q?636+(e+iA|0):156+(tA+iA|0))],l[133068]=(0|iA)==4,!((0|v)<=0)){for($=v-1|0,R=iA-1>>>0>1,a=0,s=0;;){c=g+T(s,6)|0,D=((e=C[0|c])<<24>>24>3)+D|0;e:if((0|e)==6){e=s-3|0,r=s;r:{for(;;){if((0|r)<=(0|a)|(0|e)>=(0|r))break r;i:switch(f=g+T(r=r-1|0,6)|0,C[0|f]-4|0){case 2:break r;case 0:break i;default:continue}break}l[0|f]=3}r=s;r:{for(;;){if((0|v)<=(0|(r=r+1|0)))break r;i:switch(C[g+T(r,6)|0]-4|0){case 0:break r;case 2:break i;default:continue}break}l[c+2|0]=2,l[0|c]=5,e=a;break e}if(C[0|c]==6){l[c+2|0]=2,I=0;r:if((0|v)<=(0|(e=s+1|0)))f=s,g0=0;else if(g0=1,(0|(n=l[g+T(e,6)|0]))>4)f=s;else{for(b=(VA-D|0)>1,f=s;;){if(r=e,(255&n)==4&&(e=b+1|0,b=1,!((0|e)<=1))){e=r;break r}if(g0=(0|v)>(0|(e=r+1|0)),(0|e)==(0|v))break;if(f=r,(0|(n=l[g+T(e,6)|0]))>4)break r}f=$,e=v}n=-1,m=0,b=0,L=-1,O=0,E=-1;r:{if((0|(r=a))<(0|e)){for(;n=(J=(0|(E=l[g+T(r,6)|0]))>3)&&(0|n)<0?r-a|0:n,I=(O=(0|b)>(0|E))?I:(0|b)<(0|E)?r:m,L=J?r:L,m=O?m:r,J=(0|r)!=(0|f),b=O?b:E,r=r+1|0,J;);if(O=m,E=L,(0|n)>=0)break r}n=e,m=O,L=E}A[33269]=f-m,A[33268]=n,A[33270]=m,A[33271]=I;r:if(C[133068])A[33270]=e,A[33271]=e;else if((0|L)>=0){if((0|e)!=(0|v))break r;l[g+T(L,6)|0]=7}else l[g+T(m,6)|0]=7;j1(g,q,a,e,pA),!g0&!!(0|iA)||(pA=R?C[tA+156|0]:C[tA+157|0])}else e=a}else e=a;if((0|e)>=(0|s))a=e;else if(4&C[c+2|0]){for(a=s+1|0,n=-1,L=0,m=0,b=0,r=e,I=-1;n=(O=(0|(f=l[g+T(r,6)|0]))>3)&&(0|n)<0?r-e|0:n,L=(E=(0|f)<(0|b))?L:(0|f)>(0|b)?r:m,I=O?r:I,m=E?m:r,O=(0|r)!=(0|s),b=E?b:f,r=r+1|0,O;);A[33269]=s-m,A[33270]=m,A[33271]=L,A[33268]=(0|n)<0?a:n,C[133068]?(A[33270]=a,A[33271]=a):(0|I)>=0?l[g+T(I,6)|0]=7:l[g+T(m,6)|0]=7,j1(g,q,e,a,Y)}else a=e;if((0|v)==(0|(s=s+1|0)))break}if(!((0|a)>=(0|v))){for(n=-1,L=0,m=0,b=0,r=a,I=-1;n=(f=(0|(e=l[g+T(r,6)|0]))>3)&&(0|n)<0?r-a|0:n,L=(s=(0|e)<(0|b))?L:(0|e)>(0|b)?r:m,I=f?r:I,m=s?m:r,b=s?b:e,(0|v)!=(0|(r=r+1|0)););A[33270]=m,A[33271]=L,A[33269]=~m+v,A[33268]=(0|n)<0?v:n,C[133068]?(A[33270]=v,A[33271]=v):(0|I)>=0?l[g+T(I,6)|0]=7:l[g+T(m,6)|0]=7,j1(g,q,a,v,pA)}}if((0|GA)<=0)break A;for(r=0,O=0;;){if(E=a=(f=r<<5)+145840|0,e=g+T(O,6)|0,n=C[0|e],l[a+3|0]=n,4&C[0|a]){s=f+145840|0,a=C[e+4|0],l[s+21|0]=a,b=C[e+5|0],l[s+16|0]=0,l[s+22|0]=b;e:{if(1&(m=C[e+2|0]))e=2;else{if(n>>>0<6)break e;e=C[e+1|0]}l[s+16|0]=e}a>>>0<=(255&b)>>>0?(e=b,b=a):(l[s+21|0]=b,l[s+22|0]=a,e=a),(a=C[7+(f+145840|0)|0])&&(e=(255&e)+(255&b)>>>1|0,a=A[144464+(a<<2)>>2],l[s+22|0]=e+C[a+13|0],l[s+21|0]=e+C[a+12|0]),2&m&&(l[E+3|0]=8|n),O=O+1|0}if((0|GA)==(0|(r=r+1|0)))break}}}if(F=g+6e3|0,O=A[47192],r=0,R=0,I=0,D=0,F=g=F-160|0,A[36423]>=2)for(iA=A[30450],n=1;;){if(n=(e=n)+1|0,v=C[(s=(b=e<<5)+145840|0)+3|0],2&(m=y[s>>1])){for(;(31&(f=A[198304+(D<<2)>>2]))==2&&(ri(127&f,f>>>8|0),A[36432]=110,A[36433]=100,A[36434]=450,A[36430]=5,m=A[50786],E=A[32972],(0|(a=A[E+84>>2]))>0&&(m=(0|T(a,m))/100|0),L=C[((0|(a=(0|m)>=359?359:m))<=80?80:a)+101856|0],a=(0|(a=(0|m)>=450?450:m))>399?6:(0|a)>379?7:L,A[32526]=(0|T(a,A[E+72>>2]))/256,A[32527]=(0|T(a,A[E+76>>2]))/256,A[32528]=(0|T(a,A[E+80>>2]))/256,a>>>0>7||(E=a-1|0,A[32528]=E,A[32526]=a,A[32527]=E)),D=D+1|0,!(128&f););m=y[s>>1]}E=n<<5,L=e-1|0,a=7&v;A:{e:{r:{i:{s:{o:{f:{u:{g:{n:switch(pA=C[17+(b+145840|0)|0],0|(f=4&m?2:pA)){case 2:break s;case 3:case 8:break o;case 5:break f;case 6:case 7:break u;case 4:break g;case 0:break n;default:break A}r=0;break A}if((0|(e=C[17+(145840+(L<<5)|0)|0]))!=6?(a=(0|e)==4?60:A[34063]>0||a>>>0<4?48:60,l[18+(b+145840|0)|0]=a):(a=25,l[18+(b+145840|0)|0]=25),!(16&C[0|O])|!C[20+(b+145840|0)|0]||(l[18+(b+145840|0)|0]=60,a=60),64&C[A[8+(b+145840|0)>>2]+6|0]&&(a=a+30|0,l[18+(b+145840|0)|0]=a),r=0,!(8&m))break A;l[18+(b+145840|0)|0]=C[O+164|0]+a;break A}!(s=C[(e=b+145840|0)+20|0])|1&l[A[e+8>>2]+7|0]&C[17+(145840+(L<<5)|0)|0]==2||(l[18+(b+145840|0)|0]=15),a=C[17+(E+145840|0)|0],8&C[A[8+(b+145840|0)>>2]+4|0]|a|C[17+(145840+(L<<5)|0)|0]!=8||(l[18+(b+145840|0)|0]=25),64&C[A[8+((e=L<<5)+145840|0)>>2]+5|0]&&(l[18+(b+145840|0)|0]=30),!s|!(16&A[O>>2])||(l[18+(b+145840|0)|0]=30);u:if(C[20+(E+145840|0)|0]|!(32&C[A[8+(b+145840|0)>>2]+4|0])|(0|a)!=4)A[12+(b+145840|0)>>2]=256;else{if(s=b+145840|0,C[17+(e+145840|0)|0]==2){A[s+12>>2]=200;break u}A[s+12>>2]=150}if((0|f)!=7||(R|=(0|a)==2,(254&C[17+(e+145840|0)|0])!=2))break A;A[12+(b+145840|0)>>2]=A[12+(e+145840|0)>>2]+255>>>1;break A}(254&(a=C[17+((e=L<<5)+145840|0)|0]))==6|(0|a)==3|32&A[A[8+(e+145840|0)>>2]+4>>2]&&(l[18+(b+145840|0)|0]=30);f:if((254&(s=C[17+(E+145840|0)|0]))==2){R=C[20+(E+145840|0)|0]&&(0|s)!=2?R:1,l[(s=b+145840|0)+18|0]=40,v=0;u:{g:switch(0|a){case 0:if((e=A[12+(e+145840|0)>>2])>>>0>39)break u;v=40-e|0;break u;case 2:break u;default:break g}if(C[20+(b+145840|0)|0])break f;v=20;g:switch(a-3|0){case 1:if(v=0,!(8&C[A[8+(e+145840|0)>>2]+4|0]))break u;break f;case 0:break u;case 5:break g;default:break f}v=12}l[s+18|0]=v}if(!(16&C[0|O])|!C[20+(b+145840|0)|0]||C[(e=b+145840|0)+18|0]>19)break A;l[e+18|0]=20;break A}s=C[O+296|0],f=a=b+145840|0,A[a+12>>2]=256,l[a+19|0]=s;o:if(C[a+20|0]){m=25;f:switch(C[17+(145840+(L<<5)|0)|0]-2|0){case 0:if(m=12,1&l[A[8+(b+145840|0)>>2]+7|0])break o;break;case 1:break f;default:break o}l[18+(b+145840|0)|0]=m}if((0|(E=C[17+(E+145840|0)|0]))==2){I=1;break A}if(l[(s=b+145840|0)+22|0]=r,(254&C[17+((a=L<<5)+145840|0)|0])==2)break i;if(a=r,(0|(f=A[36423]))<=(0|e))break e;for(;;){if(C[17+((a=e<<5)+145840|0)|0]==2){a=C[22+(a+145840|0)|0],l[s+22|0]=a;break e}if((0|f)==(0|(e=e+1|0)))break}break r}if(tA=b+145840|0,$=a^a>>>0<2,a=(GA=8&v)?25:C[296+($+O|0)|0]-I|0,l[tA+19|0]=a,(A[36423]-3|0)>(0|e)||(0|(f=255&a))<=(0|(a=A[O+52>>2]))||(l[tA+19|0]=a),a=0,v=0,!(m=C[s+52|0]))for(;f=A[s+40>>2],v=C[s+49|0]==2?(~A[f+4>>2]>>>20&1)+v|0:v,a=C[f+10|0]==27?2:a,f=s,s=s+32|0,!(m=C[f+84|0]););f=tA+96|0,e=(q=e+2<<5)+145840|0,A[34063]=v,c=C[A[s+40>>2]+10|0],E=E+145840|0,C[17+(q+145840|0)|0]|C[A[E+8>>2]+10|0]!=23?(s=f,f=e,e=E):s=b+145968|0,E=C[A[f+8>>2]+15|0];s:if(v)E=C[A[O+96>>2]+(C[A[e+8>>2]+15|0]+T(E,10)|0)|0],C[e+17|0]!=8|(254&C[f+17|0])!=4||(E=8&C[A[s+8>>2]+4|0]?E-15|0:E);else{if(Y=A[O+100>>2],q=C[A[e+8>>2]+15|0],s=C[e+20|0],E=C[Y+(q+T(s|C[f+20|0]?(0|E)==1:E,10)|0)|0],!s|!(32&C[0|O]))break s;E=C[1+(Y+T(q,10)|0)|0]+E>>>1|0}s=m>>>1|0,q=!v,m=(0|(E=(0|T(A[130104+(v?(0|v)==1?4:8:0)>>2],E))/128|0))<=8?8:E;s:if((0|$)!=7)GA&&(m=A[O+200>>2]+m|0);else{if(m=(E=A[O+200>>2])+m|0,!GA)break s;m=((0|E)/2|0)+m|0}E=s&q|(0|c)==27,(s=y[304+(O+($<<1)|0)>>1])||(s=y[O+316>>1]),m=T(s<<16>>16,m),(v=C[(s=b+145840|0)+7|0])&&($=C[A[144464+(v<<2)>>2]+14|0])&&(m=(0|T(m,$))/100|0),(E|(0|a)==2)==1&&(2097152&(a=A[O+12>>2])||(m=(0|T(262144&a?282:256+((280-(C[A[8+(b+145840|0)>>2]+14|0]<<1)|0)/3|0)&65535,m))/256|0)),$=b+145840|0,a=T(A[32526],A[O+196>>2]),GA=(0|pA)!=2?256:(0|((0|a)>(0|m)?m:a))/128|0,A[$+12>>2]=GA,(a=C[$+16|0])>>>0>=19&&(Mi(84371,28,iA),l[$+16|0]=0,v=C[s+7|0],a=0),m=a+1|0,(a=255&v)?(pi(a,g+8|0),a=Di(A[g+132>>2])):a=A[129280+((255&m)<<2)>>2],E=b+145840|0,1&(I|R)&&(s=(b=L<<5)+145840|0,I=C[0|a],a=C[E+21|0],a=((0|T(I,C[E+22|0]-a|0))/256|0)+a|0,l[s+22|0]=a,r=(a-(r=(0|a)==255?255:r)|0)>16?a-16|0:r,l[s+21|0]=r,s=0,(0|r)<(0|a)&&(l[$+16|0]=m,s=2),A[(r=b+145840|0)+12>>2]=GA,l[r+16|0]=s,a=C[tA+19|0],l[r+19|0]=C[r+17|0]!=3&&a>>>0>18?18:a),r=(0|pA)!=2,s=-2&(a=y[e>>1]),B[e>>1]=s;s:{o:{f:switch(C[e+17|0]-3|0){case 5:if(C[f+17|0]==2)break s;s=1|a;break o;case 0:break f;default:break s}if(B[e>>1]=1|a,C[f+17|0]!=2&&A[A[e+8>>2]>>2]!=12146)break s}B[e>>1]=s}r?(0|(e=r<<4))<=((a=C[E+22|0])-(s=C[E+21|0])|0)||(s=(0|(e=a-e|0))>0?e:0,l[E+21|0]=s):(a=C[E+22|0],s=C[E+21|0]),e=255&s,r=((0|T(C[A[129280+(C[$+16|0]<<2)>>2]+127|0],a-e|0))/256|0)+e|0,I=0,R=0;break A}s=A[12+(a+145840|0)>>2],A[f+12>>2]=s,(0|pA)==3&&(s=A[32526],A[f+12>>2]=s),a=r;i:switch(E-5|0){case 0:A[f+12>>2]=(T(s,160)>>>0)/100;break r;case 2:break i;default:break e}A[f+12>>2]=(T(s,120)>>>0)/100}a=r}R=0,l[(e=b+145840|0)+16|0]=0,s=e,a=(e=255&a)-16|0,l[s+21|0]=e>>>0>=a>>>0?a:0}if(!(A[36423]>(0|n)))break}if(F=g+160|0,15&(s=A[47197])|A[36456]){e=0,f=0,F=a=F-80|0;A:if((r=A[33222])||(A[33223]=500,r=m0(500),A[33222]=r,r)){if(!((A[36423]-2|0)<2)){for(e=s>>8,O=128&s?0:e,v=e&s<<24>>31,E=2&s,s=a+32|1,b=1;;){if(B2(a,A[(n=(L=b<<5)+145840|0)+8>>2],n,E,a+72|0),e=a+32|0,(13&(r=C[n+20|0]))==1&&(l[a+32|0]=32,e=s),!O|(0|O)!=32&!!(0|r)|b>>>0<2||(NA(a+76|0,a),A[a+76>>2]-880>>>0>4294967103||(e=k0(O,e)+e|0)),4&C[0|n]&&((r=C[3+(L+145840|0)|0])>>>0<2||(r=r>>>0>=5?5:r,r=E?r>>>0>3?712:716:l[r+94144|0],A[a+76>>2]=r,e=k0(r,e)+e|0)),m=0,A[a+72>>2]=0,C[0|(r=a)])for(;r=NA(a+76|0,r)+r|0,A[a+72>>2]>>>m-1&1|!v|(0|m)<=0||(I=A[a+76>>2])-880>>>0>4294967103||Zr(I)&&(e=k0(v,e)+e|0),m=m+1|0,e=k0(A[a+76>>2],e)+e|0,C[0|r];);if(C[A[n+8>>2]+10|0]!=21&&(8&(r=y[n>>1])&&(e=B2(e,A[36128],n,E,0),r=y[n>>1]),!(4&r)|C[17+(L+145840|0)|0]==2||(e=B2(e,A[36136],n,E,0)),(r=C[7+(L+145840|0)|0])&&(e=B2(e,A[144464+(r<<2)>>2],n,E,0))),(e=(n=e-(a+32|0)|0)+f|0)>>>0<aA[33223])r=A[33222];else{if(r=e+500|0,A[33223]=r,!(r=Re(A[33222],r))){A[33223]=0,r=86135;break A}A[33222]=r}if(l[(m=n)+(n=a+32|0)|0]=0,cA(r+f|0,n),f=e,!((0|(b=b+1|0))<(A[36423]-2|0)))break}if(!r){r=86135;break A}}l[e+r|0]=0}else A[33223]=0,r=86135;F=a+80|0,15&C[188788]&&(A[t>>2]=r,n0(A[47195],84367,t)),(e=A[36456])&&xA[0|e](r)}C[190280]?(A[36423]=0,e=1):(I8(0),(e=A[t+8>>2])?(F=r=F+-64|0,A0(r,e,60),Or(r,1),a=0,(e=k2(r,0))&&(a=e,C[202976]&&(a=k2(202976,2))),F=r- -64|0,A[44468]=a):a=A[44468],e=1,a&&(r=A[32972],(a=m0(1344))&&(r=MA(a,r,1344),a=216192+(A[50758]<<4)|0,A[a>>2]=11,A[a+8>>2]=r,r=A[50758]+1|0,A[50758]=(0|r)<=169?r:0),A[44468]=0))}else e=0,l[190280]=0;else e=0,A[36423]=0,A[50758]=0,A[50757]=0;return F=t+16|0,e}function V2(e,t){var r=0,a=0,s=0,n=0;r=1073741825;A:{e:{r:{i:{s:{o:{f:{u:{g:{n:{d:{p:{I:{h:{b:{v:{m:{G:{S:{F:{U:{Q:{E:{Y:{N:{eA:{R:{_:{H:{oA:{W:{NA:{X:{C:{c:{rA:{w:{aA:{k:{a:{t0:{tA:{t:{dA:{K:{bA:{hA:{r0:{lA:{P:{TA:{x:{OA:{$:{mA:{kA:{HA:{PA:{SA:{FA:{RA:{WA:{KA:{wA:{a0:{iA:{ZA:{LA:{BA:{VA:{z:{EA:{Z:{b0:{I0:{p0:{h0:{m0:{k0:{w0:{B0:{E0:{x0:{v0:{G0:{Q0:{y0:{D0:{M0:{z0:{Y0:{N0:{T0:{O0:{H0:{P0:{S0:{F0:{R0:{W0:{K0:{Z0:{L0:switch(0|t){case 0:t=e-9>>>0<5?1073741825:0,t=(e=(0|e)==133)?1073741825:t;break N;case 1:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{if((0|(t=-256&e))<=2047){if(!t)break cA;if((0|t)==1536)break CA;if((0|t)!=1792||(r=0,a=1,(0|e)!=1807))break l;break t}if((0|t)<=69631){if((0|t)==2048)break gA;if((0|t)!=8192)break l;switch(r=131076,e-8204|0){case 1:break sA;case 0:break t;default:break AA}}if((0|t)==69632)break j;if((0|t)!=917504)break l;switch(r=8388608,e-917505|0){case 62:break M;case 58:break O;case 57:break y;case 45:break D;case 43:break J;case 32:break L;case 0:break t;default:break T}}if(r=16,(0|e)!=173)break l;break t}if(r=0,a=1,e-1536>>>0<6)break t;a=(0|e)==1757,t=(e=(0|e)==1564)?2:0;break Y}if(r=0,a=1,(0|e)!=2274)break l;break t}return _=64,4}if(r=1073741826,(-2&e)==8206)break t;if(e-8234>>>0<5)return _=0,2;if(r=128,e-8289>>>0<4||(r=2,e-8294>>>0<4))break t;if(r=8388608,e-8298>>>0>=6)break l;break t}t=!(e-69821&-17),e=0;break E}_=536870976;break Q}_=268435520;break Q}_=-2147483584;break Q}_=134217792;break Q}_=67108928;break Q}_=1073741888;break Q}if(r=131072,a=64,e-917536>>>0<96)break t}break a;case 2:l:{T:{M:{O:{y:{D:{J:{if((0|(t=-256&e))<=130303){if((0|t)<=127743){if((0|t)<=64767){if((0|t)<=11007){if((0|t)==8192)break J;if((0|t)!=9216)break l;if(e-9255>>>0>=25)break D;break k}if((0|t)==11008)break y;if((0|t)!=11776||(r=-2147483648,e-11845>>>0>=59))break l;break t}if((0|t)<=126975){if((0|t)==64768)break O;if((0|t)!=65280||(r=4194304,e-65520>>>0>=9))break l;break t}if((0|t)==126976|(0|t)==127232|(0|t)==127488)break tA;break l}if((0|t)<=129023){if((0|t)<=128255){if((0|t)==127744|(0|t)==128e3)break tA;break l}if((0|t)==128256|(0|t)==128512|(0|t)==128768)break tA;break l}if((0|t)<=129535){if((0|t)==129024|(0|t)==129280)break tA;break l}if((0|t)==129536|(0|t)==129792|(0|t)==130048)break tA;break l}if((0|t)<=919039){if((0|t)<=917759){if((0|t)<=130815){if((0|t)==130304)break tA;if((0|t)!=130560)break l;break tA}if((0|t)==130816)break tA;if((0|t)!=917504)break l;if((-128&e)!=917632)break M;break aA}if((0|t)<=918271){if((0|t)==917760)break T;if(r=4194304,(0|t)!=918016)break l;break t}if((0|t)==918272|(0|t)==918528)break aA;if(r=4194304,(0|t)!=918784)break l;break t}if((0|t)<=920319){if((0|t)<=919551){if((0|t)==919040)break aA;if(r=4194304,(0|t)!=919296)break l;break t}if((0|t)==919552|(0|t)==919808)break aA;if(r=4194304,(0|t)!=920064)break l;break t}if((0|t)<=920831){if((0|t)==920320)break aA;if(r=4194304,(0|t)!=920576)break l;break t}if((0|t)==920832|(0|t)==921088)break aA;if(r=4194304,(0|t)!=921344)break l;break t}if(r=4194304,(0|e)!=8293)break l;break t}if(r=-2147483648,e-9291>>>0>=21)break l;break t}if((-16&e)==11248|e-11219>>>0<25|(0|e)==11209|e-11194>>>0<3||(0|(t=-2&e))==11124)break k;if(r=-2147483648,(0|t)!=11158)break l;break t}if(r=65536,e-64976>>>0>=32)break l;break t}if((0|e)==917504)break aA;if(r=4194304,e-917506>>>0>=30)break l;break t}if(r=4194304,e>>>0>917999)break t}t=(e=!(65534&~e))>>>16|0,e<<=16;break E;case 6:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{if((0|(t=-256&e))<=7679){if((0|t)<=767){if(!t)break gA;if((0|t)==256)break sA;if((0|t)!=512)break a;if((0|e)!=585)break AA;break U}if((0|t)==768)break j;if((0|t)==1024)break L;if((0|t)!=7424||(r=16777216,(0|e)!=7574))break a;break t}if((0|t)<=119807){if((0|t)==7680)break J;if((0|t)==8448)break D;if((0|t)!=65280||(r=256,e-65345>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break y;if((0|t)!=120064)break a;if(e>>>0>=120070)break O;break w}if((0|t)==120320)break M;if((0|t)!=120576)break a;if(e>>>0>=120597)break T;break w}if(r=768,e-97>>>0<6)break t;if(r=16777216,e-105>>>0>=2)break a;break t}r=(t=(0|e)==329)>>>9|0,t=(e=(0|e)==303)?16777216:t<<23;break F}if((0|e)==616)break U;if(r=16777216,(0|e)!=669)break a;break t}r=128;j:switch(e-976|0){case 35:break l;case 0:case 1:case 2:case 5:case 32:case 33:break t;default:break j}if((-2&e)!=1012)break a;break t}a=(e=!(e-1110&-3))>>>8|0,e<<=24;break S}a=(t=(0|e)==7883)>>>8|0,t=(e=(0|e)==7725)?16777216:t<<24;break Y}if(e-8458>>>0<10)break w;if((t=e-8495|0)>>>0<11)break Z0;break dA}if((0|(t=-2&e))==119842)break rA;if(e-119808>>>0<85)break w;if(e-119894>>>0<2|e-119946>>>0<2)break rA;if((0|e)==119995|e-119896>>>0<69|e-119982>>>0<12)break w;if((0|t)==119998)break rA;if(e-119997>>>0<7)break w;if(r=16777344,(0|t)==120050)break t;if(r=128,e>>>0<=120004)break a;break t}if((-2&e)==120102)break rA;if(e-120094>>>0<28)break w;O:{if((0|e)<=120257){if(e-120154>>>0<2)break rA;if(r=16777344,e-120206>>>0>=2)break O;break t}if(e-120258>>>0<2)break rA;if(r=16777344,e-120310>>>0<2)break t}if(r=128,e>>>0<=120145)break a;break t}if(e-120362>>>0<2|e-120414>>>0<2)break rA;if(r=16777344,e-120466>>>0<2)break t;if(e-120540>>>0<31|e>>>0>120571|e>>>0<120486)break w;if(r=128,e-120514>>>0>=25)break a;break t}if(e-120772>>>0<8|e-120746>>>0<25|e-120714>>>0<31|e-120688>>>0<25||(0|e)!=120597&e>>>0<120629|e-120656>>>0<31)break w;if(r=128,e-120630>>>0<25)break t;break a}break U;case 7:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{B:{fA:{q:{V:{nA:{uA:{xA:{vA:{if((0|(t=-256&e))<=11263){if((0|t)<=3583){if((0|t)<=1535){if((0|t)==512)break vA;if((0|t)==768)break xA;if((0|t)!=1280||(r=4096,(0|e)!=1369))break a;break t}if((0|t)==1536)break uA;if((0|t)==1792)break nA;if((0|t)!=2304||(r=4096,(0|e)!=2417))break a;break t}if((0|t)<=7167){if((0|t)==3584)break V;if((0|t)==6144)break q;if((0|t)!=6656||(r=8192,(0|e)!=6823))break a;break t}if((0|t)==7168)break fA;if((0|t)==7424)break B;if((0|t)!=8192)break a;if(r=16793600,!(t=e-8305|0))break t;if((0|t)==14)break cA;break CA}if((0|t)<=43263){if((0|t)<=40959){if((0|t)==11264)break gA;if((0|t)==11776)break sA;if((0|t)!=12288)break a;switch(r=8192,e-12293|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:break j;case 0:case 44:case 45:case 46:case 47:case 48:break t;default:break AA}}if((0|t)==40960)break L;if((0|t)==42496)break J;if((0|t)!=42752)break a;if(e-42775>>>0>=9)break D;break c}if((0|t)<=65279){if((0|t)==43264)break y;if((0|t)==43520)break O;if((0|t)!=43776||(r=20480,(-4&e)!=43868))break a;break t}if((0|t)==65280)break M;if((0|t)==92928)break T;if((0|t)!=93952)break a;if(r=4096,e-94099>>>0<13)break t;if(r=8192,(-2&e)!=94176)break a;break t}if(r=16797696,(0|e)==690)break t;if(e-688>>>0<9)return _=0,20480;if(e-697>>>0<7)break c;if((0|(t=-2&e))==704)return _=0,20480;if(r=4096,e-710>>>0<10||(r=12288,(0|t)==720)||(r=20480,e-736>>>0<5))break t;r=(e=(-3&e)==748)>>>20|0,e<<=12;break G}t=(0|e)==890?20480:0,t=(e=(0|e)==884)?4096:t;break N}if(r=8192,(0|e)==1600)break t;if(r=4096,e-1765>>>0>=2)break a;break t}if(r=4096,(-2&e)==2036)break t;if(r=8192,(0|e)!=2042)break a;break t}t=(e=!(e-3654&-129))>>>19|0,e<<=13;break E}if(r=8192,(0|e)!=6211)break a;break t}if(r=12288,(0|e)==7291)break t;if(r=4096,e-7288>>>0>=6)break a;break t}if(r=16797696,(0|e)==7522||(r=20480,e-7468>>>0<63))break t;r=16384;B:switch(e-7588|0){default:if((0|e)==7544)break t;case 1:case 2:case 3:if(e-7579>>>0>=37)break a;break t;case 0:case 4:break B}return _=0,16793600}return _=0,16384}if(r=16384,e-8336>>>0>=13)break a;break t}t=(r=(0|e)==11389)>>>18|0,r=(e=(0|e)==11388)?16793600:r<<14;break m}if(r=-2147479552,(0|e)!=11823)break a;break t}if(e-12445>>>0<2)break t;if((0|e)==12540)break l}if(e-12541>>>0>=2)break a;break t}if(r=8192,(0|e)!=40981)break a;break t}if((0|e)==42508)break v;if((0|e)==42623)break c;if(r=20480,(-2&e)!=42652)break a;break t}if((0|e)==42864)return _=0,16384;if((0|e)==42888)break c;if(r=20480,(-2&e)!=43e3)break a;break t}r=(t=(0|e)==43494)>>>19|0,t=(e=(0|e)==43471)?8192:t<<13;break F}if((0|e)==43632||(0|e)==43741)break v;if(r=8192,e-43763>>>0>=2)break a;break t}if(r=12288,(0|e)==65392)break t;if(r=135168,(-2&e)!=65438)break a;break t}if(r=8192,(-2&e)==92994)break t;break a}return _=0,12288;case 8:r=128;l:{T:{M:{O:{y:{D:{J:{L:{j:{if((0|(t=-256&e))<=12543){if((0|t)<=5887){if((0|t)<=3583){if(!t)break j;if((0|t)!=1536||(t=8388608,(0|e)!=1651))break x;break lA}if((0|t)==3584)break L;if((0|t)!=4352||(r=4194304,e-4447>>>0>=2))break x;break P}if((0|t)<=8447){if((0|t)==5888)break J;if((0|t)!=6400||(t=e-6581|0)>>>0>=6)break x;r=A[(t=81432+(t<<3)|0)>>2],a=A[t+4>>2];break P}if((0|t)==8448)break D;if((0|t)!=12288||(t=2048,(0|e)!=12294))break x;break lA}if((0|t)<=68863){if((0|t)<=63999){if((0|t)==12544)break y;if((0|t)!=43520)break x;if((t=e-43701|0)>>>0<8)break T;break TA}if((0|t)==64e3)break l;if((0|t)!=65280||(t=4194304,(0|e)!=65440))break x;break lA}if((0|t)<=100095){if((0|t)==68864)break O;if((0|t)!=70400||(r=8192,(0|e)!=70493))break x;break hA}if((0|t)==100096)break M;if((0|t)!=126464)break x;break P}a=(t=!(e-170&-17))>>>18|0,r=t<<14;break P}if(r=33554432,e-3648>>>0<5)break P;if(t=0,n=33554432,(0|e)==3759)break lA;if(e-3776>>>0>=5)break x;break P}if(r=8388608,e-6051>>>0>=2)break x;break P}if(e-8501>>>0>=4)break x;break P}if(t=4194304,(0|e)!=12644)break x;break lA}if(r=4096,(-2&e)!=68898)break x;break P}if(r=2048,e-100333>>>0<5)break P;break x}if(r=33554432,!(211>>>t&1))break TA;break P}if((t=e-64014|0)>>>0>=28)break x;r=A[(t=81480+(t<<3)|0)>>2],a=A[t+4>>2];break P;case 10:l:{T:{M:{O:{y:{D:{if((0|(t=-256&e))<=119807){if((0|t)<=8447){if(!t)break D;if((0|t)!=768)break a;switch(r=128,e-976|0){case 0:case 1:case 2:case 36:case 37:break t;default:break a}}if((0|t)==8448)break y;if((0|t)!=65280||(r=256,e-65313>>>0>=6))break a;break t}if((0|t)<=120319){if((0|t)==119808)break O;if((0|t)!=120064)break a;if(e>>>0>=120070)break M;break w}if((0|t)==120320)break T;if((0|t)!=120576)break a;if(e-120772>>>0>=8)break l;break w}if(r=768,e-65>>>0>=6)break a;break t}r=128;y:switch(e-8450|0){case 0:case 5:break t;default:break y}if(e-8458>>>0<10)break w;if((t=e-8469|0)>>>0<20)break K0;if((-4&e)==8508)break t;break OA}if(e-119982>>>0<12|e>>>0>120004|e-119977>>>0<4|e-119973>>>0<2||(0|e)==119970|(-2&e)==119966|e-119808>>>0<85)break w;if(r=128,e-119894>>>0>=71)break a;break t}if(e-120138>>>0<7|e>>>0>120145|(0|e)==120134|e-120128>>>0<5||e-120123>>>0<4|e-120094>>>0<28|(0|e)!=120070&e>>>0<120075|e-120086>>>0<7)break w;if(r=128,e-120077>>>0>=8)break a;break t}if(e-120540>>>0<31|e>>>0<120486)break w;if(r=128,e-120488>>>0>=25)break a;break t}if(e-120714>>>0<31|e-120598>>>0<31)break w;if(r=128,e-120656>>>0<31)break t;break a;case 11:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{B:{fA:{q:{if((0|(t=-256&e))<=43263){if((0|t)<=3839){if((0|t)<=3071){if((0|t)==2304)break q;if((0|t)!=2816)break C;if((0|e)>3005)break B;if((0|e)!=2878)break fA;return _=0,132096}if((0|t)==3072)break cA;if((0|t)!=3328)break C;switch(r=132096,e-3535|0){case 0:case 16:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break C;default:break CA}}if((0|t)<=6911){if((0|t)==3840)break gA;if((0|t)!=4096)break C;if(r=1024,e-4139>>>0<2)break t;switch(e-4145|0){case 0:case 7:case 10:case 11:case 37:case 38:case 49:case 54:case 55:case 82:case 83:break t;case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 105:case 106:break l;default:break sA}}if((0|t)==6912)break AA;if((0|t)==7168)break j;if((0|t)!=12288||(r=135168,(-2&e)!=12334))break C;break t}if((0|t)<=70399){if((0|t)<=43775){if((0|t)==43264)break L;if((0|t)!=43520)break C;return _=0,e-43643&-3?1024:4096}if((0|t)==43776)break J;if((0|t)==69888)break D;if((0|t)!=70144||(r=4096,(0|e)!=70197))break C;break t}if((0|t)<=70911){if((0|t)==70400)break y;if((0|t)!=70656)break C;t=(0|e)==70845?132096:1024,t=(e=(0|e)==70832)?132096:t;break N}if((0|t)==70912)break O;if((0|t)==71168)break M;if((0|t)!=119040)break C;switch(r=131072,e-119141|0){case 8:break c;case 1:break a;case 0:break t;default:break T}}t=(0|e)==2519?132096:1024,t=(e=(0|e)==2494)?132096:t;break N}if(r=132096,(0|e)!=2903)break C;break t}if((0|e)==3006)return _=0,132096;if(r=132096,(0|e)!=3031)break C;break t}if((e=e-3266|0)>>>0>20||(r=132096,!(1<<e&1572865)))break C;break t}if((0|e)==3390)break t;if((0|e)!=3415)break C;break t}if(r=4096,(-2&e)!=3902)break C;break t}r=(e=(0|e)==4252)>>>22|0,e<<=10;break G}r=1024;AA:switch(e-6965|0){default:if((0|e)==6916)break t;break;case 0:case 6:break t;case 1:case 2:case 3:case 4:case 5:break AA}if(e-6973>>>0<5)break t;AA:switch(e-6979|0){case 1:break c;case 0:break t;default:break AA}if((0|e)==7042|(0|e)==7073|(-2&e)==7078)break t;if((0|e)==7082)break c;if((0|e)==7143|e-7146>>>0<3)break t;r=(e=(0|e)==7150)>>>22|0,e<<=10;break G}t=(0|e)==7415?4096:1024,t=(e=(0|e)==7393)?4096:t;break N}t=(0|e)==43456?4096:1024,t=(e=(0|e)==43347)?4096:t;break N}if(r=4096,(0|e)!=44012)break C;break t}if(r=4096,(0|e)!=70080)break C;break t}r=132096;y:switch(e-70462|0){case 0:case 25:break t;case 15:break y;default:break C}break c}if(r=132096,(0|e)!=71087)break C;break t}if(r=4096,(0|e)!=71350)break C;break t}if(r=135168,e-119150>>>0<5)break t;break C}break c;case 12:t=((0|e)==8419)<<6,e=0;break E;case 13:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{B:{fA:{q:{V:{nA:{uA:{xA:{vA:{UA:{GA:{XA:{i0:{JA:{s0:{jA:{n0:{o0:{QA:{qA:{_A:{g0:{yA:{DA:{f0:{$A:{u0:{A0:{IA:{MA:{zA:{YA:{e0:{l0:{pA:{C0:{c0:{d0:{if((0|(t=-256&e))<=43775){if((0|t)<=5887){if((0|t)<=2559){if((0|t)<=1535){if((0|t)==768)break d0;if((0|t)==1024)break c0;if((0|t)!=1280)break a;if(e-1425>>>0>=17)break C0;break c}if((0|t)<=2047){if((0|t)==1536)break pA;if((0|t)!=1792)break a;if(r=1024,(0|e)==1809)break t;if((-16&e)!=1840)break l0;return _=0,5120}if((0|t)==2048)break e0;if((0|t)!=2304)break a;if(e>>>0>=2307)break YA;break C}if((0|t)<=3583){if((0|t)<=3071){if((0|t)==2560)break zA;if((0|t)!=2816)break a;switch(r=1024,e-2876|0){case 0:break c;case 3:break t;case 1:case 2:break IA;default:break MA}}if((0|t)==3072)break A0;if((0|t)!=3328)break a;if((0|(t=-2&e))!=3328)break u0;break C}if((0|t)<=4095){if((0|t)==3584)break $A;if((0|t)!=3840)break a;if((0|(t=-2&e))!=3864)break f0;break c}if((0|t)==4096)break DA;if((0|t)!=4864||(r=1024,(0|e)!=4959))break a;break t}if((0|t)<=8191){if((0|t)<=6655){if((0|t)==5888)break yA;if((0|t)==6144)break g0;if((0|t)!=6400)break a;if((t=e-6432|0)>>>0<=18&&(r=1024,1<<t&262535))break t;if(r=4096,e-6457>>>0>=3)break a;break t}if((0|t)<=7167){if((0|t)==6656)break _A;if((0|t)!=6912)break a;if(r=1024,(-4&e)==6912)break t;if((0|e)!=6964)break qA;break c}if((0|t)==7168)break QA;if((0|t)!=7424)break a;if(r=4096,e-7620>>>0<12||(r=1024,e-7655>>>0<14))break t;if((e=e-7669|0)>>>0>=11)break a;t=A[(e=82104+(e<<3)|0)>>2];break b}if((0|t)<=42495){if((0|t)<=11519){if((0|t)==8192)break o0;if((0|t)!=11264||(r=4096,e-11503>>>0>=3))break a;break t}if((0|t)==11520)break n0;if((0|t)!=12288)break a;if(e-12330>>>0>=4)break jA;break c}if((0|t)<=43263){if((0|t)==42496)break s0;if((0|t)!=43008)break a;if(e-43045>>>0>=2)break JA;break C}if((0|t)==43264)break i0;if((0|t)!=43520)break a;switch(r=1024,e-43561|0){case 83:case 150:case 152:break c;case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:case 12:case 13:case 26:case 35:case 135:case 137:case 138:case 139:case 142:case 143:case 149:break t;default:break XA}}if((0|t)<=71423){if((0|t)<=69375){if((0|t)<=66047){if((0|t)==43776)break GA;if((0|t)==64256)break UA;if((0|t)!=65024)break a;if(r=536870912,e-65024>>>0<15||(a=64,(0|e)==65039))break t;if(r=4096,a=0,(-16&e)!=65056)break a;break t}if((0|t)<=68095){if((0|t)==66048)break vA;if((0|t)!=66304||(r=1024,e-66422>>>0>=5))break a;break t}if((0|t)==68096)break xA;if((0|t)!=68864||(r=5120,(-4&e)!=68900))break a;break t}if((0|t)<=70399){if((0|t)<=69887){if((0|t)==69376)break uA;if((0|t)!=69632)break a;if(e-69688>>>0>=14)break nA;break C}if((0|t)==69888)break V;if((0|t)!=70144)break a;if(r=1024,e-70191>>>0<3)break t;switch(e-70196|0){case 2:break c;case 0:case 3:case 10:break t;case 1:case 4:case 5:case 6:case 7:case 8:case 9:break fA;default:break q}}if((0|t)<=70911){if((0|t)==70400)break B;if((0|t)!=70656)break a;if((-8&e)!=70712)break cA;break C}if((0|t)==70912)break CA;if((0|t)!=71168)break a;if(r=1024,e-71219>>>0<8)break t;switch(e-71229|0){case 2:break c;case 0:case 3:break t;case 1:break sA;default:break gA}}if((0|t)<=92927){if((0|t)<=72703){if((0|t)==71424)break H0;if((0|t)==71680)break AA;if((0|t)!=72192)break a;if(e-72193>>>0>=10)break j;break C}if((0|t)<=73215){if((0|t)==72704)break L;if((0|t)!=72960)break a;if((t=e-73009|0)>>>0<19)break T0;break $}if((0|t)==73216)break J;if((0|t)!=92672||(r=4096,e-92912>>>0>=5))break a;break t}if((0|t)<=122879){if((0|t)<=113663){if((0|t)==92928)break D;if((0|t)!=93952||(r=4096,e-94095>>>0>=4))break a;break t}if((0|t)==113664)break y;if((0|t)!=119040)break a;switch(r=4096,e-119143|0){case 0:case 1:case 2:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 67:case 68:case 69:case 70:break t;default:break a}}if((0|t)<=125183){if((0|t)==122880)break O;if((0|t)!=124928||(r=4096,e-125136>>>0>=7))break a;break t}if((0|t)==125184)break M;if((0|t)!=917760||(r=536870912,e-917760>>>0>=240))break a;break t}if(e-768>>>0<69)break c;if(r=21504,(0|e)==837)break t;if(e-838>>>0<9)break c;if(r=4194304,(0|e)==847)break t;if((-8&e)==848)break c;if(r=4096,e-861>>>0>=6)break a;break t}if(r=4096,e-1155>>>0>=5)break a;break t}if(r=4096,e-1443>>>0<13||(r=5120,e-1456>>>0<14))break t;if((e=e-1471|0)>>>0>=9)break a;t=A[(e=81944+(e<<3)|0)>>2];break b}if(e-1552>>>0<11)break C;if(r=5120,e-1611>>>0<8)break t;if(e-1619>>>0<4)break C;pA:switch(e-1623|0){case 1:break c;case 0:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 25:case 127:case 128:case 129:case 130:case 131:case 132:case 133:break C;default:break pA}if(r=4096,e-1759>>>0<2)break t;if((t=e-1761|0)>>>0<8)break W0;break mA}if(e-1856>>>0<11)break c;if(r=5120,e-1958>>>0<11)break t;if(r=4096,e-2027>>>0>=9)break a;break t}r=1024;e0:switch((-2&e)-2070|0){case 2:break c;case 0:break t;default:break e0}if(e-2260>>>0<12|e-2089>>>0<4|e-2075>>>0<9|e-2085>>>0<3)break C;if(e-2275>>>0<7)return _=0,5120;if(r=4096,e-2282>>>0<6||(r=5120,e-2288>>>0<15))break t;if(r=1024,(0|e)!=2303)break a;break t}r=1024;YA:switch(e-2362|0){case 2:break c;case 0:break t;default:break YA}if(e-2369>>>0<8)break C;r=4096;YA:switch(e-2381|0){case 0:case 4:case 5:case 6:case 7:case 111:break t;case 8:case 9:case 10:case 21:case 22:case 52:break C;default:break YA}if(e-2497>>>0<4)break C;if((0|e)==2509)break t;if(r=1024,(-2&e)!=2530)break a;break t}if(e-2561>>>0<2)break C;r=4096;zA:switch(e-2620|0){case 0:case 17:case 128:case 145:break t;case 5:case 6:case 11:case 12:case 15:case 16:case 21:case 52:case 53:case 57:case 69:case 70:case 133:case 134:case 135:case 136:case 137:case 139:case 140:case 166:case 167:case 190:case 191:case 192:break C;default:break zA}if(e-2813>>>0>=3)break a;break t}if((0|e)==2817)break C}if(e-2881>>>0<4)break C;r=4096;IA:switch(e-2893|0){case 0:break t;case 9:break C;default:break IA}if((-2&e)==2914)break C;r=1024;IA:switch(e-3008|0){default:if((0|e)!=2946)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:break a;case 0:break t;case 13:break IA}break c}r=1024;A0:switch(e-3072|0){case 77:case 188:case 205:break c;case 0:case 62:case 63:case 64:case 70:case 71:case 72:case 74:case 75:case 76:case 85:case 86:case 98:case 99:case 129:case 191:case 198:case 204:break t;default:break A0}if((-2&e)!=3298)break a;break t}if(r=4096,e-3387>>>0<2)break t;if(e-3393>>>0<4)break C;if((0|e)==3405)break t;if((0|t)==3426)break C;switch(e-3530|0){case 0:break t;case 8:case 9:case 10:case 12:break C;default:break a}}if((t=e-3633|0)>>>0<10)break R0;break kA}if((r=e-3893|0)>>>0>4|!(1<<r&21))break HA;break c}r=1024;DA:switch(e-4141|0){case 10:case 12:case 13:break c;case 0:case 1:case 2:case 3:case 5:case 6:case 7:case 8:case 9:case 16:case 17:case 43:case 44:case 49:case 50:case 51:case 68:case 69:case 70:case 71:case 85:case 88:case 89:break t;default:break DA}t=(r=(0|e)==4253)>>>22|0,r=(e=(0|e)==4237)?4096:r<<10;break m}r=1024;yA:{DA:switch(e-5906|0){case 0:case 1:case 32:case 33:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:break yA;default:break DA}switch(e-5970|0){case 0:case 1:case 32:case 33:break t;default:break yA}}if(r=4194304,(-2&e)==6068)break t;if((t=e-6071|0)>>>0<16)break F0;break PA}if(r=536870912,e-6155>>>0<3||(r=67109888,e-6277>>>0<2))break t;if(r=1024,(0|e)!=6313)break a;break t}if(e-6679>>>0<2)break C;r=1024;_A:switch(e-6683|0){case 0:case 59:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 71:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 88:case 89:break t;default:break _A}if(r=4096,e-6832>>>0<14)break t;if((e=e-6773|0)>>>0>=11)break a;t=A[(e=82016+(e<<3)|0)>>2];break b}if(e-6966>>>0<5)break t;qA:switch(e-6972|0){case 0:case 6:break t;default:break qA}if(e-7019>>>0<9)break c;switch(e-7040|0){case 43:break c;case 0:case 1:case 34:case 35:case 36:case 37:case 40:case 41:case 44:case 45:case 104:case 105:case 109:case 111:case 112:case 113:break t;default:break a}}if(r=1024,e-7212>>>0<8)break t;r=12288;QA:switch(e-7222|0){case 1:break c;case 0:break t;default:break QA}if(e-7380>>>0<13)break c;r=4096;QA:switch(e-7376|0){case 0:case 1:case 2:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 29:case 36:break t;default:break QA}if((-2&e)!=7416)break a;break t}if(r=128,e-8400>>>0<13)break t;if((e=e-8417|0)>>>0>=15)break a;t=A[(e=82192+(e<<3)|0)>>2];break b}if(r=1024,(-32&e)!=11744)break a;break t}if(r=4096,e-12441>>>0>=2)break a;break t}if((0|e)==42607)break c;if(e-42612>>>0<8)break C;if((0|(e&=-2))==42620)break c;if((0|e)==42654)break l;if(r=4096,(0|e)!=42736)break a;break t}r=4096;JA:switch(e-43204|0){case 0:break t;case 1:break C;default:break JA}if(e-43232>>>0>=18)break a;break t}if(e-43302>>>0<5)break C;if(e-43307>>>0<3)break c;if(e-43335>>>0<11|e-43392>>>0<3)break C;if(r=4096,(0|e)==43443||(r=1024,e-43446>>>0<4))break t;a=(t=(0|e)==43493)>>>20|0,t=(e=(0|e)==43452)?1024:t<<12;break Y}if((-2&e)==43756)break t;if(r=4096,(0|e)!=43766)break a;break t}r=1024;GA:switch(e-44005|0){case 0:case 3:break t;case 8:break GA;default:break a}break c}if(r=5120,(0|e)!=64286)break a;break t}if(r=4096,(0|e)!=66272)break a;break t}if((-4&e)==68108)break C;if((t=e-68097|0)>>>0<6)break S0;break SA}if(r=4096,e-69446>>>0>=11)break a;break t}if(e-69811>>>0<4)break C;if(r=1024,(0|e)==69633)break t;if(r=4096,e-69817>>>0>=2)break a;break t}r=1024;V:switch(e-69888|0){case 51:case 52:case 115:break c;case 0:case 1:case 2:case 39:case 40:case 41:case 42:case 43:case 45:case 46:case 47:case 48:case 49:case 50:break t;default:break V}if((-2&e)==70016|e-70070>>>0<9)break t;if(r=4096,e-70090>>>0>=3)break a;break t}if((0|e)==70367)break t}if(e-70371>>>0<6)break t;if(r=4096,e-70377>>>0>=2)break a;break t}if((-2&e)==70400)break C;r=4096;B:switch(e-70460|0){case 0:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 52:case 53:case 54:case 55:case 56:break t;case 4:break B;default:break a}break C}if((0|e)==70722)break c;if(e-70723>>>0<2)break C;if((t=e-70835|0)>>>0<=13)break T;break FA}if((t=e-71090|0)>>>0<12)break P0;break RA}switch(e-71339|0){case 0:case 2:break t;default:break sA}}if(e-71344>>>0<6)break t;if(r=4096,(0|e)!=71351)break a;break t}if(r=1024,e-71727>>>0<10)break t;if(r=4096,e-71737>>>0>=2)break a;break t}if((0|e)==72244)break c;if(e-72245>>>0<10)break C;if(r=4096,(0|e)==72263)break t;if(e-72273>>>0<11)break C;if(r=1024,e-72330>>>0<13)break t;r=(t=(0|e)==72345)>>>20|0,t=(e=(0|e)==72344)?8192:t<<12;break F}if((t=e-72752|0)>>>0<16)break O0;break WA}if(r=1024,e-73459>>>0>=2)break a;break t}if(r=1024,e-92976>>>0>=7)break a;break t}if(r=1024,(0|e)!=113822)break a;break t}if(r=1024,e-122888>>>0<17)break t;if((e=e-122880|0)>>>0>=43)break a;t=A[(e=82816+(e<<3)|0)>>2];break b}if(r=12288,e-125252>>>0<3||(r=1024,(0|e)==125255)||(r=4096,e-125256>>>0<3))break t;break a}if(!(1<<t&12479))break FA;break C}break C;case 14:l:{if((0|(t=-256&e))!=120576){if((0|t)!=65280){if(t||(r=768,a=66,e-48>>>0>=10))break l;break t}if(r=256,e-65296>>>0>=10)break l;break t}if(r=128,e-120782>>>0<50)break t}break a;case 15:l:{if((0|(t=-256&e))!=12288){if((0|t)!=8448)break l;t=(e=(0|(r=-16&e))==8560)>>>18|0,a=e<<14,r=(e=(0|r)==8544)?32768:a;break m}if(e-12321>>>0<9||e-12344>>>0<3)return _=0,2048;if(r=2048,(0|e)==12295)break t}break a;case 16:l:{T:{M:{if((0|(t=-256&e))<=9215){if((0|t)==4864)break M;if((0|t)!=6400||(r=134217728,(0|e)!=6618))break l;break t}if((0|t)==9216)break T;if((0|t)!=127232)break l;if(r=0,a=-2147483648,(0|e)==127232)break t;if(a=268435456,e-127233>>>0>=10)break l;break t}if(r=134217728,e-4969>>>0>=9)break l;break t}if(r=0,a=-2147483648,e-9352>>>0<20)break t}break a;case 17:a=(e=(0|e)==8256)>>>25|0,e<<=7;break S;case 18:l:{T:{M:{O:{if((0|(t=-256&e))<=11775){if((0|t)<=6143){if(r=-2147483624,!t)break t;if((0|t)!=1280||(r=24,(0|e)!=1418))break l;break t}if((0|t)==6144)break O;if((0|t)!=8192)break l;if(r=-2147483624,(-2&e)==8208)break t;e=e-8211>>>0<2,t=-2147483640;break h}if((0|t)<=65023){if((0|t)==11776)break M;if((0|t)!=12288)break l;t=(0|e)==12336,r=(e=(0|e)==12316)||t?-2147483640:8,_=e?0:t?130:0;break I}if((0|t)==65024)break T;if((0|t)!=65280||(r=24,(0|e)!=65293))break l;break t}if(r=24,(0|e)!=6150)break l;break t}if(r=-2147483624,(0|e)==11799)break t;e=(-2&e)==11834,t=-2147483640;break h}if(r=8,a=8388608,e-65073>>>0<2||(r=152,a=0,(0|e)==65123))break t}return _=0,8;case 19:l:{T:{M:{O:{y:{D:{if((0|(t=-256&e))<=11775){if((0|t)<=8959){if(t)break D;break k}if((0|t)==8960)break y;if((0|t)==9984)break O;if((0|t)!=10496)break a;break X}if((0|t)<=64767){if(r=-2147483648,(0|t)==11776)break t;if((0|t)!=12288)break a;switch(r=-2147483616,e-12301|0){case 0:case 2:break t;default:break M}}if((0|t)==64768)break T;if((0|t)==65024)break l;if((0|t)!=65280)break a;if(r=32,(0|e)==65379)break t;break a}if((0|t)!=8192)break a;D:switch(e-8318|0){default:if(r=-2147483648,(0|e)!=8262)break a;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:break D}break w}r=-2147483520;y:switch(e-8969|0){case 1:break a;case 0:case 2:break t;default:break y}if((0|e)!=9002)break a;return _=0,-2139095040}if(r=-2147483520,(0|e)==10182)break t;break NA}return _=0,(-2&e)==12318?-2147483616:-2147483648}if(r=-2147483648,(0|e)!=64830)break a;break t}a=(e=!(e-65090&-3))>>>27|0,e<<=5;break S;case 20:case 21:if(!(e&=-256))break p;if(r=-2147483616,(0|e)==8192)break t;break t0;case 22:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{B:{fA:{q:{V:{nA:{uA:{xA:{vA:{UA:{GA:{XA:{i0:{JA:{s0:{jA:{n0:{o0:{QA:{qA:{_A:{g0:{yA:{DA:{f0:{$A:{u0:{A0:{IA:{MA:{zA:{YA:{e0:{l0:{pA:{if((0|(t=-256&e))<=43519){if((0|t)<=5887){if((0|t)<=2303){if((0|t)<=1535){if(!t)break pA;if((0|t)==768)break l0;if((0|t)!=1280)break a;if(r=0,a=538968064,e-1371>>>0<2)break t;switch(a=268435456,e-1373|0){case 0:break t;case 1:break YA;default:break e0}}if((0|t)==1536)break MA;if((0|t)==1792)break IA;if((0|t)!=2048)break a;if((t=e-2103|0)>>>0<8)break Y0;break KA}if((0|t)<=3839){if((0|t)==2304)break A0;if((0|t)==3328)break u0;if((0|t)!=3584||(r=64,(-2&e)!=3674))break a;break t}if((0|t)<=4863){if((0|t)==3840)break $A;if((0|t)!=4096)break a;if(r=268435520,(-2&e)==4170)break t;if(r=0,a=16777216,(0|e)!=4347)break a;break t}if((0|t)==4864)break f0;if((0|t)!=5632)break a;switch(r=64,e-5741|0){case 1:break s;case 0:break t;default:break DA}}if((0|t)<=11263){if((0|t)<=6655){if((0|t)==5888)break yA;if((0|t)==6144)break M0;if((0|t)!=6400)break a;t=(0|e)==6469,r=(e=(0|e)==6468)||t?268435520:0,_=e?536870912:t?1073741824:0;break I}if((0|t)<=7167){if((0|t)==6656)break g0;if((0|t)!=6912)break a;if((0|(t=-2&e))!=7002)break _A;break W}if((0|t)==7168)break qA;if((0|t)!=8192)break a;switch(r=-2147483520,e-8214|0){case 1:break k;case 0:break t;case 16:break QA;default:break o0}}if((0|t)<=41983){if((0|t)==11264)break n0;if((0|t)==11776)break jA;if((0|t)!=12288)break a;switch(r=-2147483584,a=272629760,e-12289|0){case 2:break k;case 0:break t;case 1:break JA;default:break s0}}if((0|t)<=43007){if((0|t)==41984)break i0;if((0|t)!=42496)break a;switch(r=64,a=268435456,e-42739|0){case 4:break o;case 0:break s;case 3:break r;case 2:break t;case 1:break GA;default:break XA}}if((0|t)==43008)break UA;if((0|t)!=43264)break a;switch(r=4096,e-43310|0){case 0:break t;case 1:break W;default:break vA}}if((0|t)<=70655){if((0|t)<=67839){if((0|t)<=65279){if((0|t)==43520)break xA;if((0|t)==43776)break uA;if((0|t)!=65024)break a;if(r=0,a=268435456,(0|(n=-2&e))==65040)break t;if((t=e-65042|0)>>>0<8)break y0;break wA}if((0|t)==65280)break nA;if((0|t)==66304)break V;if((0|t)!=67584||(r=64,(0|e)!=67671))break a;break t}if((0|t)<=69375){if((0|t)==67840)break q;if((0|t)==68096)break fA;if((0|t)!=68352)break a;switch(r=64,e-68410|0){case 0:case 1:case 2:case 3:case 4:case 5:case 95:case 96:case 97:case 98:break t;default:break a}}if((0|t)<=69887){if((0|t)==69376)break B;if((0|t)!=69632)break a;if(e-69703>>>0>=2)break cA;break W}if((0|t)==69888)break CA;if((0|t)!=70144)break a;if((t=e-70200|0)>>>0<=4)break gA;if((0|e)!=70313)break a;break W}if((0|t)<=74751){if((0|t)<=71423){if((0|t)==70656)break sA;if((0|t)==70912)break AA;if((0|t)!=71168||(r=268435520,e-71233>>>0>=2))break a;break t}if((0|t)<=72703){if((0|t)==71424)break j;if((0|t)!=72192)break a;if(e-72258>>>0>=2)break L;break W}if((0|t)==72704)break J;if((0|t)!=73216||(r=268435520,e-73463>>>0>=2))break a;break t}if((0|t)<=93695){if((0|t)==74752)break D;if((0|t)==92672)break O;if((0|t)!=92928)break a;if(r=268435520,e-92983>>>0<2)break t;t=(0|e)==92996?268435520:0,t=(e=(0|e)==92985)?64:t;break N}if((0|t)<=121343){if((0|t)==93696)break y;if((0|t)!=113664||(r=268435520,a=-2147483648,(0|e)!=113823))break a;break t}if((0|t)==121344)break Q0;if((0|t)!=125184)break a;r=((0|e)==125279)<<30,t=0,_=(e=(0|e)==125278)?536870912:r;break n}r=-1879048128,a=536870912;pA:{C0:{c0:{d0:{V0:switch(e-33|0){default:switch(e-183|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break pA;case 8:break c0;case 0:break d0;default:break C0}case 2:case 9:_=66;break u;case 11:return _=268435456,-2147483584;case 13:return _=-2147483648,-1879048128;case 25:return _=134217728,-2147483584;case 26:return _=67108864,-2147483584;case 1:case 6:break p;case 0:break t;case 3:case 4:case 5:case 7:case 8:case 10:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 27:case 28:case 29:break pA;case 30:break V0}return _=1073741824,-1879048128}return _=0,134230016}_=1078984704;break u}if((0|e)==161)break a0}break k}t=(0|e)==903,r=(e=(0|e)==894)?64:t?134217792:0,_=e?1073741824:t?67108864:0;break I}if((0|e)==1417)break zA;if((0|e)!=1475)break a;break oA}_=1075838976;break f}_=-2143289344;break i}r=64,a=268435456;MA:switch(e-1548|0){case 15:break r;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 16:case 17:break a;case 0:break t;case 19:break MA;case 18:break W;default:break M}break o}if((t=e-1792|0)>>>0<6)break N0;if(r=64,a=134217728,(-2&e)==1798)break t;a=67108864;IA:{MA:{zA:switch(e-1800|0){default:switch(e-2040|0){case 1:break IA;case 0:break MA;default:break a}case 3:break a;case 0:break t;case 1:break zA;case 2:case 4:break oA}_=1073741824;break e}_=268435456;break e}_=536870912;break i}t=(0|e)==2405,r=(e=(0|e)==2404)||t?268435520:0,_=e?-2143289344:t?16777216:0;break I}if(r=0,a=-2143289344,(0|e)!=3572)break a;break t}r=64;$A:switch(e-3848|0){case 5:_=-2143289344;break e;case 6:_=16777216;break e;case 0:break t;default:break $A}if(e-3854>>>0<5)break t;if(r=0,a=268435456,(0|e)!=3860)break a;break t}if((t=e-4961|0)>>>0<4)break z0;if(r=64,a=134217728,e-4965>>>0<2)break t;t=(0|e)==4968,r=(e=(0|e)==4967)||t?268435520:0,_=e?1073741824:t?16777216:0;break I}if(e-5867>>>0>=3)break a;break t}if(r=268435520,e-5941>>>0<2)break t;if((e=e-6100|0)>>>0>=7)break a;t=A[(e=83240+(e<<3)|0)>>2];break b}if(r=268435520,(-4&e)!=6824)break a;break t}if(r=64,(0|e)==7005)break t;if(r=268435520,(0|t)!=7006)break a;break t}if(e-7227>>>0<2)break W;if(r=64,e-7229>>>0<3||(r=268435520,(-2&e)==7294))break t;if(r=4096,(0|e)!=7379)break a;break t}_=33554432;break u}if((-8&e)==8224)break k;if(e-8242>>>0<3)break t;if(e-8240>>>0<9)break k;if((t=e-8251|0)>>>0<21)break D0;break iA}if((0|e)==11513){_=-2147483648;break f}if(r=0,a=1073741824,(-2&e)==11514)break t;if(a=-2147483648,(0|e)!=11518)break a;break t}r=-1879048128;jA:switch(e-11822|0){case 4:case 6:_=268435456;break u;case 5:_=-2147483648;break u;case 7:_=67108864;break u;case 14:return _=-2147483648,-1879048128;case 19:return _=268435456,-2147483584;case 30:case 32:return _=0,-2147483584;case 0:break t;default:break jA}break k}if((0|e)==12349)break H;if((0|e)!=12539)break a;return _=0,16}return _=-2143289344,-1879048128}t=(0|e)==42239,r=(e=(0|e)==42238)?64:t?268435520:0,_=e?268435456:t?-2147483648:0;break I}XA:switch(e-42509|0){case 1:break s;case 0:break t;case 2:break XA;default:break a}break o}_=134217728;break e}if(e-43126>>>0<2)break W;if(r=268435520,e-43214>>>0>=2)break a;break t}if((0|e)==43463)break oA;if(r=268435520,(-2&e)!=43464)break a;break t}if(e-43613>>>0<3)break W;if(r=64,(0|e)==43743)break t;if(r=268435520,(-2&e)!=43760)break a;break t}if(r=268435520,(0|e)!=44011)break a;break t}r=268435520,a=541065216;nA:switch(e-65281|0){case 1:case 6:return _=0,32;case 11:_=272629760;break e;case 13:_=-2143289344;break i;case 100:return _=0,16;case 25:_=138412032;break e;case 26:_=71303168;break e;case 30:_=1077936128;break i;case 96:break s;case 59:break w;case 0:break t;case 99:break nA;default:break a}_=268435456;break e}r=(t=(0|e)==66512)>>>26|0,t=(e=(0|e)==66463)?64:t<<6;break F}if(r=64,(0|e)!=67871)break a;break t}if(r=268435520,(-2&e)==68182)break t;if(r=64,e-68336>>>0>=6)break a;break t}if(r=268435520,e-69461>>>0>=5)break a;break t}if(r=64,e-69705>>>0<5)break t;if(r=268435520,e-69822>>>0>=4)break a;break t}if(e-69953>>>0<2)break W;if((t=e-70085|0)>>>0<=26)break T;break ZA}if((0|t)!=2)break W;break oA}if(r=268435520,e-70731>>>0<2)break t;a=(t=(0|e)==70747)>>>26|0,t=(e=(0|e)==70733)?64:t<<6,_=e?268435456:a;break n}r=268435520;AA:switch((-2&e)-71106|0){case 0:break t;case 2:break l;default:break AA}if(r=8192,e-71110>>>0<3)break t;if(r=268435520,e-71113>>>0>=15)break a;break t}if(r=268435520,e-71484>>>0>=3)break a;break t}if(r=268435520,e-72347>>>0<2)break t;if(r=64,e-72353>>>0>=2)break a;break t}if(r=268435520,e-72769>>>0<2)break t;r=(t=(0|e)==72817)>>>26|0,t=(e=(0|e)==72771)?64:t<<6;break F}if(r=64,a=134217728,e-74865>>>0<2)break t;if(a=0,e-74864>>>0>=5)break a;break t}t=(0|e)==93848?268435520:0,t=(e=(0|e)==93847)?64:t;break N}if(r=268435520,(-2&e)==92782)break t;if(a=-2147483648,(0|e)!=92917)break a;break t}if((0|e)==1748)break s;break a}if(!(1<<t&100663555))break ZA;break W}break oA;case 23:l:{T:{M:{O:{y:{D:{if((0|(t=-256&e))<=11775){if((0|t)<=8959){if(t)break D;break k}if((0|t)==8960)break y;if((0|t)==9984)break O;if((0|t)!=10496)break a;break X}if((0|t)<=64767){if((0|t)==11776)break M;if((0|t)!=12288)break a;if((e=e-12300|0)>>>0<=17&&(r=-2147483616,1<<e&131077))break t;break k}if((0|t)==64768)break T;if((0|t)==65024)break l;if((0|t)!=65280)break a;if(r=32,(0|e)==65378)break t;break a}if((0|t)!=8192)break a;r=-2147483616;D:switch(e-8218|0){case 1:case 2:case 3:break a;case 0:case 4:break t;default:break D}D:switch(e-8317|0){default:if((0|e)!=8261)break a;break k;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break a;case 0:case 16:break D}break w}r=-2147483520;y:switch(e-8968|0){case 1:break a;case 0:case 2:break t;default:break y}if((0|e)!=9001)break a;return _=0,-2139095040}if(r=-2147483520,(0|e)==10181)break t;break NA}return _=0,(0|e)==11842?-2147483616:-2147483648}if(r=-2147483648,(0|e)!=64831)break a;break t}r=(e=!(e-65089&-3))>>>27|0,e<<=5;break G;case 24:r=(e=e>>>0<256)>>>1|0,e<<=31;break G;case 25:l:{T:{M:{O:{y:{D:{J:{L:{if((0|(t=-256&e))<=12287){if((0|t)<=767){if(!t)break L;if((0|t)!=512)break l;if(e-751>>>0>=17)break J;break c}if((0|t)==768)break D;if((0|t)!=7936)break l;switch(r=4096,e-8125|0){case 0:case 2:case 3:case 4:case 16:case 17:case 18:case 32:case 33:case 34:case 48:case 49:case 50:case 64:case 65:break t;default:break l}}if((0|t)<=43775){if((0|t)==12288)break y;if((0|t)!=42752||(r=4096,(-2&e)!=42784))break l;break t}if((0|t)==43776)break O;if((0|t)==65280)break M;if(r=0,a=78,(0|t)!=127744)break l;break t}L:switch(e-168|0){default:r=-2147479424;j:switch(e-94|0){case 0:break t;case 2:break j;default:break l}return _=0,-2147479552;case 0:case 7:break c;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:case 13:case 14:case 15:break l;case 12:case 16:break L}break c}if((0|e)==749|e-741>>>0<7)break c;if(e-706>>>0>=4)break T;break c}if((e=e-885|0)>>>0>16||(r=4096,!(1<<e&98305)))break l;break t}if(r=67112960,e-12443>>>0>=2)break l;break t}if(r=4096,(0|e)!=43867)break l;break t}r=4224;M:switch(e-65342|0){default:if((0|e)!=65507)break l;break;case 0:break t;case 1:break l;case 2:break M}break c}if(r=4096,e-722>>>0<14)break t}break a;case 26:l:{T:{M:{O:{y:{D:{if((0|(t=-256&e))<=9471){if((0|t)<=8447){if(t)break l;break k}if((0|t)==8448)break D;if((0|t)==8704)break y;if(r=-2147483648,(0|t)!=8960)break a;break t}if((0|t)<=10495){if((0|t)==9472)break O;if((0|t)==9728)break M;if((0|t)==9984)break k;break a}if((0|t)==10496)break T;if((0|t)==10752)break k;if(r=-2147483648,(0|t)!=11008)break a;break t}if((0|e)==8472)return _=0,67108864;if((0|e)==8596)break _;if(r=-2147483648,e>>>0<=8591)break a;break t}if(r=-2147483640,(0|e)==8722)break t;t=-2147483648,_=(e=e-8942>>>0<4)?33554432:0;break n}if(r=-2147483648,a=130,e-9723>>>0<2)break t;t=-2147483648,_=(e=e-9725>>>0<2)?134:0;break n}if(r=-2147483648,a=128,(0|e)==9839)break t;break k}if(r=-2147483648,a=130,(-2&e)==10548)break t;t=-2147483648,_=(e=(0|e)==10626)?134217728:0;break n}if((0|t)==8192)break LA;break a;case 27:l:{T:{M:{O:{y:{D:{J:{L:{j:{AA:{sA:{gA:{CA:{cA:{B:{fA:{q:{V:{nA:{uA:{xA:{vA:{UA:{GA:{if((0|(t=-256&e))<=12287){if((0|t)<=9727){if((0|t)<=8959){if(!t)break GA;if((0|t)!=8448)break a;switch(r=0,a=130,e-8482|0){case 7:break w;case 0:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:break uA;case 12:break vA;default:break UA}}if((0|t)==8960)break nA;if((0|t)==9216)break V;if((0|t)!=9472)break a;switch(r=-2147483520,(-2&e)-9632|0){case 0:break t;case 10:break _;default:break q}}if((0|t)<=11007){if((0|t)==9728)break fA;if((0|t)==9984)break B;if(r=-2147483648,(0|t)!=10240)break a;break t}if((0|t)==11008)break cA;if((0|t)==11776)break CA;if((0|t)!=12032)break a;if(r=1048576,e>>>0<12246)break t;switch(r=262144,(-2&e)-12272|0){case 0:break t;case 2:break l;default:break gA}}if((0|t)<=127999){if((0|t)<=127231){if((0|t)==12288)break sA;if((0|t)==12800)break AA;if((0|t)!=126976)break a;t=(0|e)==127183,r=0,_=(e=(0|e)==126980)||t?134:128;break I}if((0|t)==127232)break j;if((0|t)==127488)break L;if((0|t)!=127744)break a;if(e>>>0>=127777)break J;break R}if((0|t)<=128767){if((0|t)==128e3)break D;if((0|t)==128256)break y;if((0|t)!=128512)break a;if((t=e-128581|0)>>>0<11)break p0;break BA}if((0|t)==128768)break O;if((0|t)==129280)break M;if((0|t)!=129536)break a;_=128;break f}t=(0|e)==174,r=-2147483648,_=(e=(0|e)==169)||t?130:0;break I}switch(e-8616|0){case 0:break k;case 1:case 2:break xA;default:break uA}}return _=0,67108864}return _=130,-2147483520}if(r=-2147483520,e-8597>>>0<5)break t;if(e-8604>>>0<18)break X;if((t=e-8624|0)>>>0<8)break G0;break VA}if(e>>>0<8968)break k;if((0|(t=-2&e))==8986)break g;if(e-8972>>>0<20|e-8994>>>0<6)break k;if((0|e)==9e3)break _;if(e-9003>>>0<81)break k;if(r=-2147483648,a=128,(0|e)==9096)break t;if(e-9085>>>0<30)break k;if(r=-2147483520,a=0,(0|t)==9140)break t;nA:switch(e-9143|0){case 0:case 25:break t;case 24:break _;default:break nA}if(e-9140>>>0<40)break k;if((0|e)==9186)break t;if((t=e-9193|0)>>>0<4)break g;r=-2147483648,a=134;nA:switch(e-9200|0){case 0:case 3:break t;default:break nA}if(t>>>0<11)break _;if(a=130,e-9208>>>0<3)break t;if(a=0,e>>>0<=9186)break a;break t}if(r=-2147483648,e-9216>>>0<75||(r=33792,a=130,(0|e)==9410)||(a=0,e-9398>>>0<26))break t;if(r=17408,e-9424>>>0>=26)break a;break t}if(e-9646>>>0<8)break X;if(a=130,(0|e)==9654)break t;if((-4&e)==9660)break X;q:switch(e-9664|0){case 0:break t;case 6:case 7:case 10:case 11:case 15:case 16:case 17:case 18:case 19:case 34:case 36:break X;default:break q}return _=0,e-9703>>>0<6?-2147483520:-2147483648}fA:switch((-16&e)-9728>>>4|0){case 0:if(e>>>0<9733)break _;r=-2147483520,a=128;q:switch(e-9733|0){case 0:break t;case 9:break q;case 1:break X;default:break z}break _;case 2:if((t=e-9760|0)>>>0<11)break x0;if(r=-2147483648,a=130,e>>>0<=9773)break z;break t;case 3:if(r=-2147483648,a=130,e-9784>>>0>=3)break z;break t;case 4:r=-2147483520,a=130;q:switch(e-9792|0){case 0:case 2:break t;default:break q}if(r=-2147483648,a=134,e>>>0<=9799)break z;break t;case 5:if(r=-2147483648,a=134,e>>>0<9812)break t;if(a=130,(0|e)!=9823)break z;break t;case 6:if((0|e)==9734)break X;if((0|e)==9824)return _=130,-2147483520;if(r=-2147483520,a=128,e-9825>>>0<2)break t;if((t=e-9827|0)>>>0<6)break E0;break EA;case 8:if(r=-2147483648,e>>>0<=9861)break z;break t;case 10:r=-2147483648,a=130;q:switch(e-9888|0){case 1:break g;case 0:break t;default:break q}if(a=134,(-2&e)!=9898)break z;break t;case 11:if(r=-2147483648,a=130,(-2&e)==9904)break t;if(a=134,e-9917>>>0>=2)break z;break t;case 12:if((-2&e)==9924)break g;r=-2147483648,a=130;q:switch(e-9928|0){case 0:case 7:break t;case 6:break q;default:break z}break g;case 14:t=(0|e)==9962,r=-2147483648,_=(e=(0|e)==9961)?130:t?134:128;break I;case 13:break k0;case 9:break w0;case 15:break fA;case 7:break B0;case 1:break v0;default:break z}if((0|e)==9972|e>>>0<9970)break _;if(r=-2147483648,a=134,e>>>0<9974||(0|e)!=9974&&(a=130,e>>>0<9977))break t;if((e=e-9977|0)>>>0<5)break m0;break z}B:{fA:{q:{V:{nA:switch((-16&e)-9984>>>4|0){case 0:if(r=0,a=130,(0|e)==9986||(a=128,e>>>0<9989)||(a=134,(0|e)==9989))break B;a=150;uA:switch((-2&e)-9994|0){case 0:break B;case 2:break q;default:break uA}if(a=130,e-9992>>>0<6)break B;t=(0|e)==9999,r=0,a=(e=(0|e)==9998)?128:t?130:0;break B;case 1:if(r=0,a=128,e>>>0<10002)break B;if((e=e-10002|0)>>>0>11||(a=130,!(1<<e&2069)))break V;break B;case 2:t=(0|e)==10024,r=0,a=(e=(0|e)==10017)?130:t?134:0;break B;case 4:r=0,a=130;uA:switch(e-10052|0){case 0:case 3:break B;case 8:case 10:break uA;default:break V}a=134;break B;case 5:if(r=0,a=1073741958,e-10067>>>0<2)break B;a=(e=e-10069&-3)?0:536871046;break B;case 6:if((t=e-10082|0)>>>0<3)break fA;if(r=0,a=128,e>>>0<=10084)break V;break B;case 9:if(r=0,a=134,e-10133>>>0>=3)break V;break B;case 10:if(r=0,a=130,(0|e)!=10145)break V;break B;case 11:t=(0|e)==10175,r=0,a=(e=(0|e)==10160)||t?134:0;break B;case 3:break nA;default:break V}if(r=0,a=130,e-10035>>>0<2)break B}r=0,a=0;break B}a=146;break B}r=A[(e=83992+(t<<3)|0)>>2],a=A[e+4>>2]}return _=a,-2147483648|r}if(r=-2147483648,a=130,e-11013>>>0<3||(a=134,e-11035>>>0<2))break t;t=(0|e)==11093,r=-2147483648,_=(e=(0|e)==11088)||t?134:0;break I}if(e-11904>>>0>=26)break T;return _=0,1048576}if(e-12276>>>0>=8)break a;break t}if((e=e-12306|0)>>>0>14||(r=-2147483648,!(1<<e&16387)))break a;break t}t=0,_=(e=e-12951&-3)?0:130;break n}if(r=0,a=128,(0|e)==127279)break t;if(e-127280>>>0<26||e-127312>>>0<26)return _=0,33792;if((t=e-127344|0)>>>0<=15&&(r=33792,a=130,1<<t&49155)||(r=33792,a=0,t>>>0<26))break t;if((0|e)==127374)break R;if(r=0,a=134,e-127377>>>0<10)break t;if(a=102,e>>>0<=127461)break a;break t}r=0,a=134;L:{j:switch(e-127489|0){case 0:case 25:break t;case 1:break H;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:break L;default:break j}switch(e-127535|0){case 0:break t;case 8:break H;default:break L}}if((-2&e)==127568|e-127538>>>0<9)break t;if(a=128,e>>>0<=127583)break a;break t}if((0|e)==127777)break H;if(e-127789>>>0<9|e-127799>>>0<70)break R;if((0|e)==127877)break eA;if(e-127870>>>0<22)break R;if(e-127780>>>0<112)break H;r=0,a=130;J:switch(e-127894|0){case 44:case 45:case 46:case 49:break eA;case 0:case 1:case 3:case 4:case 5:break t;default:break J}if(e-127904>>>0<42)break R;if(a=150,(0|e)==127946||(a=146,e-127947>>>0<2))break t;if(e-127951>>>0<5)break R;if(a=134,e-127968>>>0<17||(a=130,e-127902>>>0<83))break t;if((t=e-127987|0)>>>0<5)break h0;break Z}r=0,a=130;D:switch(e-128063|0){case 0:case 2:break t;default:break D}if((0|e)==128124|(-5&e)-128129>>>0<3|(0|e)==128110|e-128112>>>0<9||(-2&e)==128066|e-128102>>>0<4|e-128070>>>0<11)break eA;D:switch(e-128253|0){case 1:_=128;break f;case 0:break H;default:break D}if(a=150,(0|e)==128170)break t;break R}if(e>>>0<128318)break R;if(r=0,e>>>0<128326)break t;if(e-128329>>>0<2)break H;if(e-128331>>>0<4|e-128336>>>0<24)break R;if(e-128367>>>0<2)break H;if((-2&e)==128372){_=146;break f}if(e-128371>>>0<7)break H;if(a=150,!(t=e-128378|0))break t;if((0|t)==13|e-128394>>>0<4)break H;if(a=146,(0|e)==128400||(a=150,e-128405>>>0<2))break t;a=134;y:switch(e-128420|0){case 0:break t;case 1:case 4:case 13:case 14:case 24:case 30:case 31:case 32:case 45:case 46:case 47:case 56:case 57:case 58:case 61:case 63:case 68:case 75:case 79:case 86:break H;default:break y}e=e>>>0>128506,t=0;break d}if(r=0,a=128,e-128981>>>0>=4)break a;break t}if(e>>>0<129292)break a;if(e-129328>>>0<10)break eA;r=0,a=150;M:switch(e-129304|0){case 35:break a;case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 14:break t;default:break M}if(e-129341>>>0<2)break eA;if(a=0,(0|e)==129350||(a=198,(-4&e)==129456))break t;if((t=e-129461|0)>>>0<5)break I0;break b0}if(r=1048576,e-11931>>>0<89)break t;break a}return _=0,524288;case 29:return _=16777216,1073741825;case 28:break t;case 30:break L0;default:break a}return _=0,(0|e)==32?1073741825:1}if(!(1079>>>t&1))break dA;t=A[(e=81344+(t<<3)|0)>>2];break b}if(557553>>>t&1)break w;if((-4&e)!=8508)break OA;break t}if(!(207>>>t&1))break mA;break C}if(r=1024,!(1017>>>t&1))break kA;break t}if(r=1024,!(32895>>>t&1))break PA;break t}if(r=1024,!(55>>>t&1))break SA;break t}if(r=1024,!(3087>>>t&1))break RA;break t}if((e=e-71453|0)>>>0>=15)break a;t=A[(e=82312+(e<<3)|0)>>2];break b}if(!(49023>>>t&1))break WA;t=A[(e=82432+(t<<3)|0)>>2];break b}if(!(514623>>>t&1))break $;t=A[(e=82664+(t<<3)|0)>>2];break b}t=A[(e=83160+(t<<3)|0)>>2];break b}if(r=268435520,!(197>>>t&1))break KA;break t}t=A[(e=83208+(t<<3)|0)>>2];break b}if((e=e-6145|0)>>>0>=10)break a;t=A[(e=83296+(e<<3)|0)>>2];break b}if(!(1077711>>>t&1))break iA;t=A[(e=83376+(t<<3)|0)>>2];break b}if(!(159>>>t&1))break wA;t=A[(e=83544+(t<<3)|0)>>2];break b}if((e=e-121479|0)>>>0>=4)break a;t=A[(e=83608+(e<<3)|0)>>2];break b}if(!(195>>>t&1))break VA;break X}if((e=e-9745|0)>>>0>=13)break z;t=A[(e=83640+(e<<3)|0)>>2];break b}if(1101>>>t&1)break _;if(r=-2147483648,a=130,e>>>0<=9773)break z;break t}if(!(45>>>t&1))break EA;t=A[(e=83744+(t<<3)|0)>>2];break b}if((e=e-9851|0)>>>0>=5)break z;t=A[(e=83792+(e<<3)|0)>>2];break b}if((e=e-9874|0)>>>0>=11)break z;t=A[(e=83832+(e<<3)|0)>>2];break b}if((e=e-9937|0)>>>0>=4)break z;t=A[(e=83920+(e<<3)|0)>>2];break b}t=A[(e=83952+(e<<3)|0)>>2];break b}if(!(23>>>t&1))break Z;t=A[(e=84016+(t<<3)|0)>>2];break b}if(r=0,a=150,!(1991>>>t&1))break BA;break t}if(a=150,27>>>t&1)break t}t=0,_=(e=e-129489>>>0<13)?150:134;break n}e=e-127992>>>0<3,t=0;break d}if(e-9837>>>0<2)break t}_=128;break u}if(e-8623>>>0<13)break k;if(e-8636>>>0<18)break X;if((t=e-8656|0)>>>0<22&&(a=0,3157995>>>t&1)||(r=-2147483648,a=0,e-8661>>>0<31))break t;break a}if(e>>>0<128592)break R;if(r=0,a=0,e>>>0<128640)break t;if(!((t=e-128675|0)>>>0>29|!(1<<t&537788417)))break eA;if(e>>>0<128710)break R;if(a=150,(0|e)==128716)break t;if(e-128715>>>0<5)break H;if(e-128720>>>0<3)break R;if(!((t=e-128736|0)>>>0>=10|!(575>>>t&1)))break H;if(a=134,e-128747>>>0<2)break t;a=130;BA:switch(e-128752|0){case 0:case 3:break t;default:break BA}e=e-128756>>>0<6,t=0;break d}r=-2147483648;LA:switch(e-8260|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:break a;case 0:case 14:break t;default:break LA}if((0|(e=e-8315|0))!=16&&e)break a;return _=0,8}if(r=268435520,a=1073741824,(0|e)!=69955)break a;break t}if(e-8266>>>0<8)break k;if(r=-2147483640,(0|e)==8275)break t;if(r=-2147483648,e-8277>>>0>=10)break a;break t}_=542113792;break u}if(r=-2147483648,a=0,e-65093>>>0<2||(r=64,a=268435456,(0|n)==65104))break t;r=268435520,a=-2147483648;wA:switch(e-65106|0){case 3:_=134217728;break e;case 5:_=536870912;break i;case 4:break o;case 2:break r;case 0:break t;case 15:case 22:break wA;default:break a}break w}if((0|e)==2142)break oA;if(r=64,e-2096>>>0<15)break t;break a}if(r=1024,e-72850>>>0<22)break t;if((e=e-72874|0)>>>0>=13)break a;t=A[(e=82560+(e<<3)|0)>>2];break b}if(r=4096,e-71103>>>0<2)break t;if(r=1024,(-2&e)!=71132)break a;break t}if((0|e)==70726)break c;if(r=4096,(-2&e)!=70850)break a;break t}if(r=4096,e-68325>>>0>=2)break a;break t}if((0|e)==6109)break c;if(r=4096,e-6089>>>0>=11)break a;break t}HA:switch(e-3959|0){case 0:case 2:return _=0,8389632;default:break HA}if((0|t)==3968|e-3953>>>0<14)break C;if(!((t=e-3970|0)>>>0>=6|!(55>>>t&1)))break c;if(e-3981>>>0<11)break C;if(r=1024,e-3993>>>0<36)break t;if(r=4096,(0|e)!=4038)break a;break t}if(e-3655>>>0<6)break c;if(!((t=e-3761|0)>>>0>11|!(1<<t&3577)))break C;r=1024;kA:switch(e-3661|0){case 1:break c;case 0:break t;default:break kA}if(r=4096,e-3784>>>0<5)break t;if(r=1024,(0|e)!=3789)break a;break t}if(e-1770>>>0<3)break t;if(r=1024,(0|e)!=1773)break a;break t}if((-2&e)==73028)break c;r=1024;$:switch(e-73104|0){default:if((0|e)!=73031)break a;break t;case 2:case 3:case 4:case 6:break a;case 0:case 1:case 5:break t;case 7:break $}break c}if((e=e-8492|0)>>>0>=30)break a;t=A[(e=81704+(e<<3)|0)>>2];break b}r=0;break P}a=(t=(-3&e)==43712)>>>20|0,r=t<<12}if((0|(s=-65536&e))==131072)break r0;if((0|s)==65536)break hA;if(t=r,n=a,s)break bA}if(e-13312>>>0<6582||e-19968>>>0<20976)break A;if(s=2048,e-63744>>>0<366)return _=n,2048|t;if(r=t,a=n,e-64112>>>0>=106)break bA;break K}if(s=2099200,e-183984>>>0<7473|e-178208>>>0<5762|e-177984>>>0<222|e-131072>>>0<42711||e-173824>>>0<4149||(s=2048,e-194560>>>0<542))break K;break bA}if(s=2048,e-110960>>>0<396|e-94208>>>0<6125|e-100352>>>0<755)break K}s=0}return _=a,r|s}if((-4&e)==8508)break w;if(r=128,!(e-8517>>>0<3)&&(r=16777344,(-2&e)!=8520))break a}_=a;break I}t=(e=e>>>0>131069)?65536:0,_=e?0:128;break n}if((0|e)==11776)break k}_=0;break f}_=0;break u}return _=0,4194304}return _=0,128}return _=0,16777344}return _=0,4096}return _=0,1024}return _=0,-2147483520}return _=0,e-10214>>>0<10?-2147483520:-2147483648}_=0;break i}_=0;break e}_=130;break f}_=130;break u}_=134;break f}return _=150,0}_=0;break n}_=e?0:a;break n}return _=t,e}return 131072}return _=0,16777216}_=e?0:r;break n}return _=a,e}return _=r,e}_=e?0:t;break I}return _=0,8192}_=A[e+4>>2];break n}_=e?8388608:0;break n}return r}return _=0,-2147483616}_=e?134:128}return t}_=134}return-2147483648}return 0}_=1073741824;break i}_=-2147483648}return 268435520}_=67108864}return 64}return _=n,2099200|t}function X1(e){var t,r=0,a=0,s=0,n=0,g=0;(t=m0(8244))&&(A[t+328>>2]=2,l[132848]=0,A[t+684>>2]=0,A[t+688>>2]=0,A[t+320>>2]=0,A[t+324>>2]=0,l[t+268|0]=0,l[t+228|0]=0,A[t+8216>>2]=0,A[t+8220>>2]=0,A[t+224>>2]=104944,A[t+216>>2]=383,A[t+220>>2]=96,QA(t+344|0,0,292),A[t+8196>>2]=0,A[(r=t+8188|0)>>2]=0,A[r+4>>2]=0,A[t+8180>>2]=0,A[t+8184>>2]=0,l[t+460|0]=22,l[t+461|0]=129,l[t+466|0]=38,l[t+462|0]=38,l[t+463|0]=36,l[t+464|0]=22,l[t+465|0]=224,l[t+456|0]=22,l[t+457|0]=22,l[t+458|0]=44,l[t+459|0]=22,l[t+454|0]=46,l[t+455|0]=129,l[t+446|0]=22,l[t+447|0]=38,l[t+448|0]=28,l[t+449|0]=193,l[t+450|0]=38,l[t+451|0]=22,l[t+452|0]=46,l[t+453|0]=46,l[t+441|0]=129,l[t+442|0]=38,l[t+443|0]=22,l[t+444|0]=38,l[t+445|0]=193,A[t+332>>2]=104912,A[t+336>>2]=104916,A[t+340>>2]=105232,l[t+296|0]=18,l[t+297|0]=18,B[t+304>>1]=182,B[t+306>>1]=140,l[t+298|0]=20,B[t+308>>1]=220,B[t+310>>1]=220,B[t+312>>1]=220,l[t+299|0]=20,l[t+300|0]=20,B[t+314>>1]=240,l[t+301|0]=22,B[t+316>>1]=260,B[t+318>>1]=280,l[t+302|0]=22,l[t+303|0]=20,r=QA(t,0,212),A[r+200>>2]=20,A[r+192>>2]=25966,A[r+196>>2]=500,A[r+80>>2]=95,A[r+16>>2]=1,A[r+20>>2]=3,A[r+8>>2]=2,A[r+52>>2]=19,l[r+168|0]=3,A[r+92>>2]=2,A[r+72>>2]=4,A[r+40>>2]=115,A[r+44>>2]=95,A[r+140>>2]=105244,vi(r,201),A[r+120>>2]=2,A[r+124>>2]=44,A[r+164>>2]=100,A[r+128>>2]=46,A[r+132>>2]=14,A[r+112>>2]=1227133512,A[r+116>>2]=49,A[r+104>>2]=1,a=A[26313],A[r+636>>2]=A[26312],A[r+640>>2]=a,a=A[26315],A[r+644>>2]=A[26314],A[r+648>>2]=a,a=A[26317],A[r+652>>2]=A[26316],A[r+656>>2]=a,a=A[26319],A[r+660>>2]=A[26318],A[r+664>>2]=a,a=A[26321],A[r+668>>2]=A[26320],A[r+672>>2]=a,a=A[26323],A[r+676>>2]=A[26322],A[r+680>>2]=a,a=C[104928]|C[104929]<<8,l[r+160|0]=a,l[r+161|0]=a>>>8,a=C[104924]|C[104925]<<8|C[104926]<<16|C[104927]<<24,l[r+156|0]=a,l[r+157|0]=a>>>8,l[r+158|0]=a>>>16,l[r+159|0]=a>>>24),s=cA(t+228|0,e),r=0;A:{e:if(a=C[0|e]){for(;r=(a<<24>>24)+(r<<8)|0,a=C[0|(e=e+1|0)];);r:{i:{s:{o:{f:{u:{g:{n:{d:{p:{I:{h:{b:{v:{m:{G:{S:{F:{U:{Q:{E:{Y:{N:{eA:{R:{_:{H:{oA:{W:{NA:{X:{C:{c:{rA:{w:{aA:{k:{a:{t0:{tA:{t:{dA:{K:{bA:{hA:{r0:{lA:{P:{TA:{x:{OA:{$:{mA:{kA:{HA:{PA:{SA:{FA:{RA:{WA:{KA:{wA:{a0:{iA:{ZA:{LA:{BA:{VA:{z:{EA:{if((0|r)<=28008){if((0|r)<=26464){if((0|r)<=25696){Z:switch(r-24934|0){case 20:break n;case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 14:case 15:case 16:case 17:case 18:case 19:break e;case 8:break $;case 12:break KA;case 7:break wA;case 0:break a0;case 13:break EA;default:break Z}Z:switch(r-25189|0){case 1:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:break e;case 14:break dA;case 2:break RA;case 0:break WA;case 9:break EA;default:break Z}switch(r-25441|0){case 18:break G;case 0:break $;case 24:break SA;default:break e}}Z:switch(r-25964|0){case 1:case 4:case 5:case 6:break e;case 8:break TA;case 9:break OA;case 7:break $;case 3:break mA;case 2:break kA;case 0:break VA;default:break Z}Z:switch(r-26209|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:break e;case 17:break lA;case 8:break P;case 0:break x;default:break Z}switch(r-25697|0){case 4:break HA;case 0:break PA;default:break e}}if((0|r)<=27488){Z:switch(r-26729|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 13:case 14:case 15:break e;case 16:break t0;case 12:break tA;case 11:break t;case 9:break dA;case 0:break K;default:break Z}Z:switch(r-26977|0){case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 16:case 17:break e;case 19:break w;case 18:break aA;case 3:break k;case 14:break a;case 0:break $;default:break Z}switch(r-26465|0){case 20:break K;case 13:break bA;case 0:case 3:break hA;default:break e}}Z:switch(r-27489|0){case 13:break d;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 12:case 15:case 16:case 17:case 18:case 19:case 21:case 22:case 23:break e;case 24:break oA;case 20:break W;case 14:break NA;case 11:break X;case 10:break C;case 0:break c;default:break Z}switch(r-27745|0){case 19:break _;case 0:break H;case 21:break LA;default:break e}}if((0|r)<=29792){if((0|r)<=28768){Z:switch(r-28009|0){case 3:break d;case 11:break eA;case 2:break R;case 1:case 4:case 5:case 6:case 7:case 8:case 12:case 13:case 14:case 15:break e;case 10:break k;case 9:break K;case 0:case 16:break iA;default:break Z}Z:switch(r-28258|0){case 0:break Y;case 10:break N;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:break e;case 3:break K;default:break Z}switch(r-28525|0){case 0:break E;case 5:break K;default:break e}}if((0|r)<=29539){Z:switch(r-28769|0){case 19:break U;case 11:break Q;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 20:case 21:case 22:case 23:break e;case 0:break K;case 24:break iA;default:break Z}Z:switch(r-29295|0){case 6:break S;case 0:break F;case 1:case 2:case 3:case 4:case 5:break e;default:break Z}if((0|r)==29045)break iA;break e}switch(r-29540|0){case 19:break p;case 18:break I;case 13:break h;case 8:break v;case 5:break m;case 7:break G;case 14:break dA;case 0:break f;default:break e}}if((0|r)>6514801)break z;if((0|r)<=30058)switch(r-29793|0){case 19:break g;case 17:break n;case 0:case 4:break d;case 13:break p;case 7:break iA;default:break e}if((0|r)<=30312)switch(r-30059|0){case 0:break u;case 15:break iA;case 7:break f;default:break e}if((0|r)==30313)break o;if((0|r)==31336)break s;if((0|r)!=6451321)break e}if(A[t+296>>2]=303174162,A[t+300>>2]=370545684,A[t+600>>2]=2432,A[t+8>>2]=0,A[t+12>>2]=65540,A[t+100>>2]=A[t+96>>2],e=A[25889],A[t+304>>2]=A[25888],A[t+308>>2]=e,e=A[25891],A[t+312>>2]=A[25890],A[t+316>>2]=e,U2(t),l[t+345|0]=2|C[t+345|0],l[t+406|0]=16|C[t+406|0],l[t+407|0]=16|C[t+407|0],l[t+408|0]=16|C[t+408|0],l[t+409|0]=16|C[t+409|0],l[t+410|0]=16|C[t+410|0],l[t+411|0]=16|C[t+411|0],l[t+412|0]=16|C[t+412|0],l[t+413|0]=16|C[t+413|0],l[t+414|0]=16|C[t+414|0],l[t+415|0]=16|C[t+415|0],l[t+416|0]=16|C[t+416|0],l[t+417|0]=16|C[t+417|0],l[t+418|0]=16|C[t+418|0],l[t+419|0]=16|C[t+419|0],l[t+420|0]=16|C[t+420|0],l[t+456|0]=4|C[t+456|0],l[t+457|0]=4|C[t+457|0],A[t+112>>2]=613567144,A[t+104>>2]=16,(0|r)!=6451321)break A;A[t+104>>2]=1,A[t+108>>2]=512,r=6451321;break A}if((0|r)>7364975)break ZA;if((0|r)>6840682)break BA;if((0|r)==6514802)break FA;if((0|r)==6516078)break s;if((0|r)!=6779491)break e}if(A[t+600>>2]=896,A[t+328>>2]=8,A[t+296>>2]=336858127,A[t+300>>2]=353768980,A[t+332>>2]=103632,e=A[25905],A[t+304>>2]=A[25904],A[t+308>>2]=e,e=A[25907],A[t+312>>2]=A[25906],A[t+316>>2]=e,QA(t+344|0,0,256),l[t+388|0]=129,l[t+389|0]=129,l[t+390|0]=129,l[t+391|0]=129,l[t+420|0]=129,l[t+421|0]=129,l[t+422|0]=129,l[t+423|0]=129,l[t+360|0]=129,l[t+392|0]=129,l[t+393|0]=129,l[t+417|0]=129,l[t+418|0]=129,l[t+419|0]=129,l[t+420|0]=129,l[t+408|0]=6,l[t+409|0]=4,l[t+410|0]=6,l[t+411|0]=6,l[t+412|0]=6,l[t+413|0]=193,l[t+414|0]=6,l[t+415|0]=6,l[t+406|0]=6,l[t+407|0]=129,l[t+398|0]=4,l[t+399|0]=193,l[t+400|0]=6,l[t+401|0]=193,l[t+402|0]=6,l[t+403|0]=4,l[t+404|0]=4,l[t+405|0]=4,l[t+394|0]=4,l[t+395|0]=4,l[t+396|0]=4,l[t+397|0]=193,A[t+44>>2]=130,A[t+8>>2]=2,A[t+12>>2]=6,A[t+16>>2]=0,A[t+20>>2]=2,A[t+104>>2]=264,A[t+108>>2]=6146,l[t+391|0]=193,l[t+389|0]=193,l[t+390|0]=193,l[t+421|0]=193,A[t+100>>2]=A[t+96>>2],l[t+416|0]=4|C[t+416|0],(0|r)!=6779491)break A;A[t+40>>2]=1,r=6779491;break A}if((0|r)==6840683)break r0;if((0|r)==6972015)break rA;if((0|r)!=7107687)break e}A[t+296>>2]=134875662,A[t+300>>2]=252968960,A[t+328>>2]=5,l[t+169|0]=1,A[t+132>>2]=33,A[t+104>>2]=99336,A[t+8>>2]=0,A[t+12>>2]=262182,e=A[26069],A[t+304>>2]=A[26068],A[t+308>>2]=e,e=A[26071],A[t+312>>2]=A[26070],A[t+316>>2]=e;break A}if((0|r)<=7564649){if((0|r)==7364976)break $;if((0|r)==7435619)break iA;if((0|r)!=7563374)break e;A[t+148>>2]=1,A[t+112>>2]=24,A[t+104>>2]=1,A[t+100>>2]=A[t+96>>2],r=7563374;break A}if((0|r)==7564650)break b;if((0|r)==7959909)break s;if((0|r)!=1885958500)break e}A[t+104>>2]=0;break A}A[t+4>>2]=48,A[t+8>>2]=0,A[t+144>>2]=1,A[t+104>>2]=16779472,A[t+32>>2]=1,A[t+24>>2]=1,e=A[25881],A[t+304>>2]=A[25880],A[t+308>>2]=e,e=A[25883],A[t+312>>2]=A[25882],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=24934;break A}A[t+600>>2]=4608,A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+8>>2]=0,A[t+12>>2]=36,A[t+104>>2]=1024,A[t+100>>2]=A[t+96>>2],A[t+40>>2]=1,e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,r=24941;break A}for(A[t+600>>2]=1536,A[t+224>>2]=0,A[t+216>>2]=1631,A[t+220>>2]=1536,A[t+104>>2]=2884720,A[t+328>>2]=7,A[t+40>>2]=1,F=r=F-16|0,A[r+12>>2]=-1,e=89684;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=1|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89743;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=2|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89795;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=4|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=89941;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=16|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=32|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=8|C[0|n]),e=e+s|0,a;);for(A[r+12>>2]=-1,e=90045;s=NA(r+12|0,e),(0|(a=A[r+12>>2]))>=33&&(l[0|(n=(t+a|0)-1192|0)]=64|C[0|n]),e=e+s|0,a;);F=r+16|0,r=24946;break A}A[t+600>>2]=1056,A[t+12>>2]=34,A[t+216>>2]=1118,A[t+220>>2]=1072,QA(t+344|0,0,256),l[t+406|0]=4,l[t+366|0]=4,l[t+367|0]=4,l[t+369|0]=4,l[t+370|0]=4,l[t+371|0]=4,l[t+372|0]=4,l[t+361|0]=4,l[t+362|0]=4,l[t+363|0]=4,l[t+364|0]=4,l[t+373|0]=4,l[t+380|0]=4,l[t+381|0]=4,l[t+382|0]=4,l[t+383|0]=4,l[t+375|0]=4,l[t+376|0]=4,l[t+377|0]=4,l[t+378|0]=4,l[t+384|0]=4,l[t+360|0]=129,A[t+328>>2]=6,A[t+296>>2]=134744588,A[t+300>>2]=286261248,A[t+40>>2]=1,A[t+8>>2]=0,A[t+104>>2]=1032,A[t+108>>2]=66,e=A[25885],A[t+304>>2]=A[25884],A[t+308>>2]=e,e=A[25887],A[t+312>>2]=A[25886],A[t+316>>2]=e,r=25189;break A}ti(t),A[t+328>>2]=6,A[t+56>>2]=2,A[t+36>>2]=263,A[t+40>>2]=1074,A[t+124>>2]=32,A[t+104>>2]=184554728,A[t+8>>2]=2,l[t+386|0]=64&C[t+386|0]|129,r=25191;break A}A[t+12>>2]=262182,A[t+40>>2]=1,r=6514802;break A}A[t+328>>2]=14,A[t+296>>2]=303173393,A[t+300>>2]=336986112,A[t+104>>2]=1024,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=22,A[t+44>>2]=120,e=A[25893],A[t+304>>2]=A[25892],A[t+308>>2]=e,e=A[25895],A[t+312>>2]=A[25894],A[t+316>>2]=e,l[t+463|0]=64&C[t+463|0]|129,l[t+465|0]=64&C[t+465|0]|129,r=25465;break A}A[t+8>>2]=0,A[t+104>>2]=184618072,A[t+32>>2]=1,e=A[26101],A[t+304>>2]=A[26100],A[t+308>>2]=e,e=A[26103],A[t+312>>2]=A[26102],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=25697;break A}A[t+296>>2]=336860180,A[t+300>>2]=336991764,A[t+8>>2]=0,A[t+104>>2]=16846872,A[t>>2]=8,A[t+4>>2]=48,A[t+80>>2]=87,A[t+32>>2]=1,A[t+36>>2]=256,A[t+40>>2]=2,e=A[25897],A[t+304>>2]=A[25896],A[t+308>>2]=e,e=A[25899],A[t+312>>2]=A[25898],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=25701;break A}A[t+132>>2]=33,A[t+104>>2]=16779328,A[t+8>>2]=0,A[t+12>>2]=8,A[t+204>>2]=101,A[t+60>>2]=2,A[t+40>>2]=2,e=A[25901],A[t+304>>2]=A[25900],A[t+308>>2]=e,e=A[25903],A[t+312>>2]=A[25902],A[t+316>>2]=e,l[t+441|0]=64|C[t+441|0],l[t+445|0]=64|C[t+445|0],l[t+449|0]=64|C[t+449|0],l[t+455|0]=64|C[t+455|0],l[t+461|0]=64|C[t+461|0],l[t+465|0]=64|C[t+465|0],r=25966;break A}A[t+328>>2]=4,A[t+296>>2]=336858640,A[t+300>>2]=353768980,A[t+104>>2]=16782344,A[t+20>>2]=2,A[t+12>>2]=22,A[t+4>>2]=2,A[t+8>>2]=2,A[t+332>>2]=103640,e=A[25997],A[t+304>>2]=A[25996],A[t+308>>2]=e,e=A[25999],A[t+312>>2]=A[25998],A[t+316>>2]=e,r=25967;break A}A[t+296>>2]=269422096,A[t+300>>2]=370545684,A[t+104>>2]=86017320,A[t+108>>2]=6144,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=534,A[t+100>>2]=A[t+96>>2],A[t+44>>2]=120,e=A[25913],A[t+304>>2]=A[25912],A[t+308>>2]=e,e=A[25915],A[t+312>>2]=A[25914],A[t+316>>2]=e;$:{mA:{if((0|r)<=26976){if((0|r)==24942)break mA;if((0|r)!=25441)break $;A[t+12>>2]=566,A[t+336>>2]=103664,r=25441;break A}if((0|r)!=26977){if((0|r)!=7364976)break $;A[t+8>>2]=3,A[t+12>>2]=310,r=7364976;break A}A[t+104>>2]=85984264,r=26977;break A}A[t+104>>2]=153093416,A[t+108>>2]=2048,A[t+140>>2]=103676,r=24942;break A}A[t+40>>2]=2;break A}A[t+296>>2]=303173648,A[t+300>>2]=303174162,A[t+104>>2]=3147080,A[t+12>>2]=65792,A[t+84>>2]=1,e=A[25921],A[t+304>>2]=A[25920],A[t+308>>2]=e,e=A[25923],A[t+312>>2]=A[25922],A[t+316>>2]=e,r=25973;break A}A[t+600>>2]=1536,A[t+216>>2]=1740,A[t+220>>2]=1568,A[t+104>>2]=96,A[t+224>>2]=103696,A[t+340>>2]=103872,A[t+40>>2]=1,r=26209;break A}A[t+328>>2]=5}A[t+104>>2]=86024,A[t+164>>2]=130,l[t+465|0]=64&C[t+465|0]|129;break A}A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+8>>2]=3,A[t+12>>2]=36,A[t+144>>2]=2,A[t+104>>2]=118658312,A[t+28>>2]=1,A[t+100>>2]=A[t+96>>2],e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=26226;break A}B[t+170>>1]=257,A[t+148>>2]=1,A[t+12>>2]=2,r=6840683;break A}A[t+144>>2]=2,A[t+104>>2]=2098176,A[t+8>>2]=0,A[t+12>>2]=32,A[t+40>>2]=3,A[t+28>>2]=1;break A}A[t+8>>2]=3,A[t+100>>2]=A[t+96>>2],r=26478;break A}A[t+328>>2]=18,A[t+296>>2]=320081425,A[t+300>>2]=353768980,A[t+600>>2]=2304,A[t+112>>2]=84648,A[t+104>>2]=16,A[t+8>>2]=6,A[t+12>>2]=65540,A[t+100>>2]=A[t+96>>2],e=A[25973],A[t+304>>2]=A[25972],A[t+308>>2]=e,e=A[25975],A[t+312>>2]=A[25974],A[t+316>>2]=e;K:{bA:{hA:{if((0|r)<=28529){if((0|r)==26485)break hA;if((0|r)!=28261)break K;e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+132>>2]=22,A[t+112>>2]=-1431655768,A[t+108>>2]=32768|A[t+108>>2],U2(t);break A}if((0|r)==28530)break bA;if((0|r)!=28769)break K;A[t+600>>2]=2560,U2(t);break A}e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,A[t+600>>2]=2688,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+8>>2]=2,U2(t);break A}A[t+600>>2]=2816}U2(t);break A}l[0|s]=104,l[s+1|0]=98,l[s+2|0]=115,l[s+3|0]=0,(0|r)!=29554?(e=A[26093],A[t+304>>2]=A[26092],A[t+308>>2]=e,e=A[26095],A[t+312>>2]=A[26094],A[t+316>>2]=e):(e=A[25977],A[t+304>>2]=A[25976],A[t+308>>2]=e,e=A[25979],A[t+312>>2]=A[25978],A[t+316>>2]=e),A[t+328>>2]=3,A[t+296>>2]=336859409,A[t+300>>2]=353768980,B[t+168>>1]=261,A[t+8>>2]=0,A[t+12>>2]=16,A[t+144>>2]=1,A[t+184>>2]=1056,A[t+104>>2]=33572172,A[t+108>>2]=330,A[t+36>>2]=3,l[t+465|0]=64&C[t+465|0]|129,l[t+458|0]=64&C[t+458|0]|129;break A}A[t+104>>2]=17990912,A[t+8>>2]=3,A[t+12>>2]=36,r=26740;break A}A[t+328>>2]=3,A[t+296>>2]=320016657,A[t+300>>2]=353768980,A[t+124>>2]=32,A[t+128>>2]=44,A[t+104>>2]=186758144,A[t+12>>2]=1081398,A[t+16>>2]=2,A[t+4>>2]=32,A[t+8>>2]=0,A[t+116>>2]=899,A[t+120>>2]=1,l[t+169|0]=1,A[t+76>>2]=2,e=A[25981],A[t+304>>2]=A[25980],A[t+308>>2]=e,e=A[25983],A[t+312>>2]=A[25982],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,vi(t,3),r=26741;break A}for(A[t+600>>2]=1328,A[t+8>>2]=3,e=A[25985],A[t+304>>2]=A[25984],A[t+308>>2]=e,e=A[25987],A[t+312>>2]=A[25986],A[t+316>>2]=e,s=QA(t+344|0,0,256),l[t+429|0]=129,l[t+416|0]=129,l[t+403|0]=129,l[t+399|0]=129,l[t+400|0]=129,l[t+397|0]=129,l[t+393|0]=129,a=103952,n=50,g=50;l[0|(e=s+g|0)]=2|C[0|e],e=s+C[a+1|0]|0,l[0|e]=2|C[0|e],e=s+C[a+2|0]|0,l[0|e]=2|C[0|e],g=C[0|(a=a+3|0)],e=103952,(0|a)!=103982;);for(a=t+344|0;l[0|(s=a+n|0)]=4|C[0|s],s=a+C[e+1|0]|0,l[0|s]=4|C[0|s],s=a+C[e+2|0]|0,l[0|s]=4|C[0|s],n=C[0|(e=e+3|0)],(0|e)!=103982;);l[t+168|0]=6,A[t+104>>2]=5128,l[t+413|0]=4|C[t+413|0];break A}A[t+328>>2]=4,A[t+296>>2]=336858640,A[t+300>>2]=353768980,A[t+104>>2]=16782440,A[t+20>>2]=2,A[t+12>>2]=22,A[t+4>>2]=2,A[t+8>>2]=2,A[t+332>>2]=104e3,e=A[25997],A[t+304>>2]=A[25996],A[t+308>>2]=e,e=A[25999],A[t+312>>2]=A[25998],A[t+316>>2]=e,r=26991;break A}A[t+296>>2]=303174160,A[t+300>>2]=353768980,A[t+104>>2]=16781320,A[t+144>>2]=2,A[t+8>>2]=2,A[t+12>>2]=22,e=A[26005],A[t+304>>2]=A[26004],A[t+308>>2]=e,e=A[26007],A[t+312>>2]=A[26006],A[t+316>>2]=e;break A}for(A[t+8>>2]=0,A[t+12>>2]=16,A[t+56>>2]=2,A[t+28>>2]=17,e=A[26009],A[t+304>>2]=A[26008],A[t+308>>2]=e,e=A[26011],A[t+312>>2]=A[26010],A[t+316>>2]=e,e=0,a=t+344|0;l[0|(s=e+a|0)]=231&C[0|s],l[0|(s=a+(1|e)|0)]=231&C[0|s],l[0|(s=a+(2|e)|0)]=231&C[0|s],l[0|(s=a+(3|e)|0)]=231&C[0|s],(0|(e=e+4|0))!=256;);A[t+104>>2]=2280,A[t+108>>2]=2,A[t+608>>2]=104048,l[t+451|0]=16|C[t+451|0],l[t+456|0]=16|C[t+456|0],l[t+459|0]=16|C[t+459|0],l[t+460|0]=16|C[t+460|0],l[t+450|0]=8|C[t+450|0],l[t+462|0]=8|C[t+462|0],l[t+458|0]=8|C[t+458|0],l[t+465|0]=64&C[t+465|0]|129;break A}A[t+296>>2]=269618961,A[t+300>>2]=370546196,A[t+12>>2]=131110,A[t+144>>2]=2,A[t+104>>2]=184559112,A[t+108>>2]=8192,A[t+16>>2]=0,A[t+20>>2]=2,A[t+4>>2]=1,A[t+8>>2]=2,A[t+100>>2]=A[t+96>>2],A[t+140>>2]=103676,A[t+68>>2]=2,A[t+56>>2]=1,A[t+44>>2]=130,A[t+28>>2]=2,e=A[26025],A[t+304>>2]=A[26024],A[t+308>>2]=e,e=A[26027],A[t+312>>2]=A[26026],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=26996;break A}A[t+4>>2]=524,A[t+8>>2]=2,A[t+196>>2]=368,A[t+104>>2]=0,A[t+336>>2]=104128,A[t- -64>>2]=1,e=A[26029],A[t+304>>2]=A[26028],A[t+308>>2]=e,e=A[26031],A[t+312>>2]=A[26030],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=6972015;break A}for(A[t+296>>2]=303174162,A[t+300>>2]=370545684,e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,s=QA(t+344|0,0,256),l[t+431|0]=1,l[t+429|0]=1,l[t+411|0]=1,l[t+405|0]=1,l[t+400|0]=1,l[t+396|0]=1,l[t+392|0]=1,e=104160,a=49;l[0|(a=a+s|0)]=4|C[0|a],a=s+C[e+1|0]|0,l[0|a]=4|C[0|a],a=s+C[e+2|0]|0,l[0|a]=4|C[0|a],a=C[0|(e=e+3|0)],(0|e)!=104193;);A[t+600>>2]=4256,A[t+8>>2]=0,A[t+12>>2]=16,l[t+168|0]=7,A[t+132>>2]=32,l[t+392|0]=128|C[t+392|0],l[t+396|0]=128|C[t+396|0],l[t+400|0]=128|C[t+400|0],l[t+405|0]=128|C[t+405|0],l[t+411|0]=128|C[t+411|0],l[t+429|0]=128|C[t+429|0],l[t+431|0]=128|C[t+431|0],A[t+188>>2]=1056,A[t+192>>2]=29301,A[t+104>>2]=19964960;break A}for(A[t+600>>2]=1056,s=QA(t+344|0,0,256),l[t+393|0]=1,l[t+365|0]=1,l[t+360|0]=1,l[t+545|0]=1,l[t+529|0]=1,l[t+391|0]=1,l[t+389|0]=1,l[t+390|0]=1,l[t+387|0]=1,l[t+379|0]=1,l[t+374|0]=1,l[t+368|0]=1,l[t+489|0]=1,l[t+487|0]=1,l[t+398|0]=1,e=104224,a=17;l[0|(a=a+s|0)]=4|C[0|a],a=s+C[e+1|0]|0,l[0|a]=4|C[0|a],a=s+C[e+2|0]|0,l[0|a]=4|C[0|a],a=C[0|(e=e+3|0)],(0|e)!=104251;);l[t+360|0]=128|C[t+360|0],l[t+365|0]=128|C[t+365|0],l[t+393|0]=128|C[t+393|0],l[t+368|0]=128|C[t+368|0],l[t+374|0]=128|C[t+374|0],l[t+379|0]=128|C[t+379|0],l[t+387|0]=128|C[t+387|0],l[t+389|0]=128|C[t+389|0],l[t+390|0]=128|C[t+390|0],l[t+391|0]=128|C[t+391|0],l[t+529|0]=128|C[t+529|0],l[t+545|0]=128|C[t+545|0],l[t+489|0]=128|C[t+489|0],l[t+487|0]=128|C[t+487|0],l[t+398|0]=128|C[t+398|0],e=A[26055],A[t+312>>2]=A[26054],A[t+316>>2]=e,e=A[26053],A[t+304>>2]=A[26052],A[t+308>>2]=e,A[t+296>>2]=353636370,A[t+300>>2]=336925972,A[t+200>>2]=0,A[t+8>>2]=7,A[t+12>>2]=2097184,l[t+168|0]=2,A[t+104>>2]=50176,A[t+84>>2]=1,vi(t,3);break A}A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+104>>2]=184618072,A[t+8>>2]=12,A[t+12>>2]=32,e=A[25861],A[t+304>>2]=A[25860],A[t+308>>2]=e,e=A[25863],A[t+312>>2]=A[25862],A[t+316>>2]=e,r=27500;break A}A[t+184>>2]=42752,A[t+600>>2]=4352,QA(t+344|0,0,256),l[t+456|0]=1,l[t+457|0]=1,l[t+458|0]=1,l[t+459|0]=1,l[t+449|0]=1,l[t+450|0]=1,l[t+451|0]=1,l[t+452|0]=1,l[t+453|0]=1,l[t+454|0]=1,l[t+455|0]=1,l[t+456|0]=1,l[t+441|0]=1,l[t+442|0]=1,l[t+443|0]=1,l[t+444|0]=1,l[t+445|0]=1,l[t+446|0]=1,l[t+447|0]=1,l[t+448|0]=1,l[t+460|0]=65,l[t+461|0]=65,l[t+532|0]=32,l[t+527|0]=32,l[t+519|0]=32,l[t+515|0]=32,l[t+349|0]=32,l[t+350|0]=32,l[t+346|0]=32,A[t+132>>2]=20,A[t+112>>2]=286331152,A[t+104>>2]=1024,A[t+108>>2]=16384,A[t+40>>2]=1,A[t+8>>2]=8,l[t+458|0]=65,l[t+453|0]=65,l[t+447|0]=65,l[t+448|0]=65,l[t+443|0]=65,l[t+444|0]=65,r=27503;break A}A[t+328>>2]=10,A[t+296>>2]=336859666,A[t+300>>2]=353768980,l[t+168|0]=2,A[t+104>>2]=263264,A[t+8>>2]=7,e=A[26065],A[t+304>>2]=A[26064],A[t+308>>2]=e,e=A[26067],A[t+312>>2]=A[26066],A[t+316>>2]=e,r=27509;break A}A[t+104>>2]=1,r=27513;break A}A[t+116>>2]=5e3,A[t+104>>2]=16777216,A[t+24>>2]=1,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=5,r=27745;break A}A[t+116>>2]=5e3,A[t+104>>2]=99336,A[t+108>>2]=256,A[t+24>>2]=1,A[t+16>>2]=0,A[t+20>>2]=2,A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=5,r=27764;break A}A[t+328>>2]=6,A[t+296>>2]=336859409,A[t+300>>2]=353768980,A[t+600>>2]=1056,A[t+104>>2]=2114600,A[t+108>>2]=138,A[t+8>>2]=4,A[t+632>>2]=104288,A[t+604>>2]=104288,e=A[26093],A[t+304>>2]=A[26092],A[t+308>>2]=e,e=A[26095],A[t+312>>2]=A[26094],A[t+316>>2]=e,r=28011;break A}A[t+328>>2]=4,A[t+104>>2]=1,A[t+8>>2]=2,A[t+36>>2]=256,r=28020;break A}A[t+4>>2]=48,A[t+8>>2]=0,A[t+12>>2]=128,A[t+104>>2]=2169880,A[t+32>>2]=1,A[t+36>>2]=256,A[t+24>>2]=1,A[t+136>>2]=85767,e=A[26097],A[t+304>>2]=A[26096],A[t+308>>2]=e,e=A[26099],A[t+312>>2]=A[26098],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=28268;break A}A[t+8>>2]=0,A[t+104>>2]=71752,e=A[26101],A[t+304>>2]=A[26100],A[t+308>>2]=e,e=A[26103],A[t+312>>2]=A[26102],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=28258;break A}A[t+296>>2]=336858898,A[t+300>>2]=370546196,A[t+104>>2]=1088,A[t+108>>2]=512,A[t+8>>2]=2,A[t+12>>2]=524310,e=A[26105],A[t+304>>2]=A[26104],A[t+308>>2]=e,e=A[26107],A[t+312>>2]=A[26106],A[t+316>>2]=e,r=28525;break A}A[t+328>>2]=3,A[t+296>>2]=320015633,A[t+300>>2]=353768980,l[t+168|0]=7,A[t+8>>2]=2,A[t+12>>2]=6,A[t+104>>2]=20488,A[t+108>>2]=192,A[t+36>>2]=9,A[t+60>>2]=260,e=A[26109],A[t+304>>2]=A[26108],A[t+308>>2]=e,e=A[26111],A[t+312>>2]=A[26110],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=28780;break A}for(A[t+296>>2]=353569552,A[t+300>>2]=353768980,A[t+116>>2]=5e3,A[t+104>>2]=33570920,A[t+108>>2]=14336,A[t+8>>2]=3,A[t+12>>2]=139286,A[t+100>>2]=A[t+96>>2],e=A[26113],A[t+304>>2]=A[26112],A[t+308>>2]=e,e=A[26115],A[t+312>>2]=A[26114],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,e=0,a=t+344|0;l[0|(s=e+a|0)]=253&C[0|s],l[0|(s=a+(1|e)|0)]=253&C[0|s],l[0|(s=a+(2|e)|0)]=253&C[0|s],l[0|(s=a+(3|e)|0)]=253&C[0|s],(0|(e=e+4|0))!=256;);l[t+442|0]=2|C[t+442|0],l[t+443|0]=2|C[t+443|0],l[t+444|0]=2|C[t+444|0],l[t+446|0]=2|C[t+446|0],l[t+447|0]=2|C[t+447|0],l[t+450|0]=2|C[t+450|0],l[t+451|0]=2|C[t+451|0],l[t+453|0]=2|C[t+453|0],l[t+454|0]=2|C[t+454|0],l[t+456|0]=2|C[t+456|0],l[t+457|0]=2|C[t+457|0],l[t+459|0]=2|C[t+459|0],l[t+460|0]=2|C[t+460|0],l[t+462|0]=2|C[t+462|0],l[t+464|0]=2|C[t+464|0],l[t+466|0]=2|C[t+466|0],A[t+144>>2]=2,A[t+68>>2]=2;break A}A[t+296>>2]=303172879,A[t+300>>2]=353768980,A[t+328>>2]=3,A[t+8>>2]=3,A[t+12>>2]=262,A[t+104>>2]=16805928,A[t+108>>2]=30,e=A[26117],A[t+304>>2]=A[26116],A[t+308>>2]=e,e=A[26119],A[t+312>>2]=A[26118],A[t+316>>2]=e,r=29295;break A}rl(t),r=29301;break A}for(A[t+328>>2]=3,A[t+296>>2]=336859153,A[t+300>>2]=353768980,B[t+168>>1]=261,A[t+8>>2]=0,A[t+12>>2]=22,A[t+124>>2]=0,A[t+128>>2]=44,A[t+104>>2]=16794624,A[t+108>>2]=128,A[t+36>>2]=3,A[t+60>>2]=4,e=A[25869],A[t+304>>2]=A[25868],A[t+308>>2]=e,e=A[25871],A[t+312>>2]=A[25870],A[t+316>>2]=e,(0|r)==25459&&(A[t+108>>2]=136),l[t+465|0]=64&C[t+465|0]|129,l[t+458|0]=64&C[t+458|0]|129,e=0,a=t+344|0;l[0|(s=e+a|0)]=223&C[0|s],l[0|(s=a+(1|e)|0)]=223&C[0|s],l[0|(s=a+(2|e)|0)]=223&C[0|s],l[0|(s=a+(3|e)|0)]=223&C[0|s],(0|(e=e+4|0))!=256;);l[t+442|0]=32|C[t+442|0],l[t+444|0]=32|C[t+444|0],l[t+447|0]=32|C[t+447|0],l[t+450|0]=32|C[t+450|0],l[t+452|0]=32|C[t+452|0],l[t+453|0]=32|C[t+453|0],l[t+454|0]=32|C[t+454|0],l[t+458|0]=32|C[t+458|0],l[t+462|0]=32|C[t+462|0],l[t+463|0]=32|C[t+463|0],l[t+466|0]=32|C[t+466|0],l[t+441|0]=32|C[t+441|0],l[t+445|0]=32|C[t+445|0],l[t+449|0]=32|C[t+449|0],l[t+455|0]=32|C[t+455|0],l[t+461|0]=32|C[t+461|0],l[t+465|0]=32|C[t+465|0];break A}for(A[t+296>>2]=303174162,A[t+300>>2]=370545684,A[t+600>>2]=3456,l[t+169|0]=1,A[t+8>>2]=0,A[t+12>>2]=22,A[t+100>>2]=A[t+96>>2],e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,QA(t+344|0,0,256),l[t+365|0]=1,l[t+366|0]=1,l[t+357|0]=1,l[t+358|0]=1,l[t+359|0]=1,l[t+360|0]=1,l[t+361|0]=1,l[t+362|0]=1,l[t+363|0]=1,l[t+364|0]=1,l[t+349|0]=1,l[t+350|0]=1,l[t+351|0]=1,l[t+352|0]=1,l[t+353|0]=1,l[t+354|0]=1,l[t+355|0]=1,l[t+356|0]=1,e=74,a=74;l[(s=t+a|0)+344|0]=1|C[s+344|0],l[s+345|0]=1|C[s+345|0],l[s+346|0]=1|C[s+346|0],(0|(a=a+3|0))!=116;);for(;l[(a=e+t|0)+344|0]=2|C[a+344|0],l[a+345|0]=2|C[a+345|0],l[a+346|0]=2|C[a+346|0],(0|(e=e+3|0))!=116;);for(a=26;l[(e=t+a|0)+344|0]=4|C[e+344|0],l[e+345|0]=4|C[e+345|0],l[e+346|0]=4|C[e+346|0],l[e+347|0]=4|C[e+347|0],l[e+348|0]=4|C[e+348|0],(0|(a=a+5|0))!=71;);A[t+112>>2]=84648,A[t+104>>2]=270589952,A[t+108>>2]=65536,A[t+40>>2]=1,A[t+204>>2]=A[t+600>>2]+74;break A}A[t+8>>2]=2,A[t+12>>2]=32,A[t+328>>2]=3,A[t+124>>2]=32,A[t+104>>2]=16864280,A[t+108>>2]=256,A[t+68>>2]=2,A[t+36>>2]=259,A[t+40>>2]=118,A[t+28>>2]=1,l[t+458|0]=128|C[t+458|0],r=29548;break A}A[t+296>>2]=370544658,A[t+300>>2]=370546196,A[t+164>>2]=130,A[t+8>>2]=0,A[t+12>>2]=86,A[t+104>>2]=87064,l[t+169|0]=1,A[t+152>>2]=3,e=A[26121],A[t+304>>2]=A[26120],A[t+308>>2]=e,e=A[26123],A[t+312>>2]=A[26122],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=7564650;break A}A[t+296>>2]=269487120,A[t+300>>2]=320148500,A[t+8>>2]=3,A[t+12>>2]=278,A[t+144>>2]=2,A[t+104>>2]=32872,e=A[26125],A[t+304>>2]=A[26124],A[t+308>>2]=e,e=A[26127],A[t+312>>2]=A[26126],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=29553;break A}A[t+296>>2]=336859152,A[t+300>>2]=353768980,A[t+8>>2]=0,A[t+144>>2]=1,A[t+104>>2]=6408,e=A[26129],A[t+304>>2]=A[26128],A[t+308>>2]=e,e=A[26131],A[t+312>>2]=A[26130],A[t+316>>2]=e,l[t+465|0]=64&C[t+465|0]|129,r=29558;break A}A[t+296>>2]=320015376,A[t+300>>2]=353768980,l[t+168|0]=4,A[t+12>>2]=22,A[t+4>>2]=1,A[t+8>>2]=2,A[t+104>>2]=1248,A[t+100>>2]=A[t+96>>2],e=A[26133],A[t+304>>2]=A[26132],A[t+308>>2]=e,e=A[26135],A[t+312>>2]=A[26134],A[t+316>>2]=e;break A}A[t+296>>2]=303174162,A[t+300>>2]=370545684,l[t+169|0]=1,A[t+8>>2]=0,A[t+12>>2]=22,A[t+112>>2]=5288,A[t+100>>2]=A[t+96>>2],e=A[25877],A[t+304>>2]=A[25876],A[t+308>>2]=e,e=A[25879],A[t+312>>2]=A[25878],A[t+316>>2]=e;d:switch(r-29793|0){default:if((0|r)!=27502){if((0|r)!=28012)break r;e=A[26137],A[t+304>>2]=A[26136],A[t+308>>2]=e,e=A[26139],A[t+312>>2]=A[26138],A[t+316>>2]=e,A[t+600>>2]=3328,A[t+296>>2]=320017171,A[t+300>>2]=320017171,A[t+104>>2]=2098176,A[t+108>>2]=131072,A[t+8>>2]=13;break r}A[t+104>>2]=1,A[t+600>>2]=3200;break r;case 4:break d;case 1:case 2:case 3:break r;case 0:break i}A[t+104>>2]=1,A[t+108>>2]=524288,A[t+600>>2]=3072;break r}A[t+328>>2]=10,A[t+296>>2]=353636370,A[t+300>>2]=336925972,l[t+173|0]=1,A[t+8>>2]=7,A[t+12>>2]=32,l[t+168|0]=2,A[t+84>>2]=1,e=A[26141],A[t+304>>2]=A[26140],A[t+308>>2]=e,A[t+104>>2]=(0|r)==24954?2118920:2114824,e=A[26143],A[t+312>>2]=A[26142],A[t+316>>2]=e;break A}ti(t),A[t+296>>2]=303173650,A[t+300>>2]=303174162,A[t+104>>2]=2131208,A[t+8>>2]=3,A[t+12>>2]=32,e=A[25865],A[t+304>>2]=A[25864],A[t+308>>2]=e,e=A[25867],A[t+312>>2]=A[25866],A[t+316>>2]=e,r=29812;break A}rl(t),r=30059;break A}A[t+112>>2]=21160,A[t+104>>2]=16,A[t+600>>2]=1536,A[t+40>>2]=1;break A}A[t+296>>2]=269488144,A[t+300>>2]=370546198,A[t+8>>2]=0,A[t>>2]=33,A[t+148>>2]=1,A[t+104>>2]=12615688,A[t+16>>2]=2,A[t+100>>2]=A[t+96>>2],A[t+632>>2]=104592,A[t+604>>2]=104592,e=A[26145],A[t+304>>2]=A[26144],A[t+308>>2]=e,e=A[26147],A[t+312>>2]=A[26146],A[t+316>>2]=e,r=30313;break A}if(A[t+296>>2]=370544662,A[t+300>>2]=370546198,A[t+8>>2]=3,A[t+12>>2]=2,A[t+148>>2]=1,A[t+184>>2]=12544,B[t+170>>1]=257,A[t+176>>2]=1,l[t+172|0]=1,A[t>>2]=33,A[t+4>>2]=0,A[t+100>>2]=A[t+96>>2],e=A[26225],A[t+304>>2]=A[26224],A[t+308>>2]=e,e=A[26227],A[t+312>>2]=A[26226],A[t+316>>2]=e,(0|r)!=7959909)break A;A[t+112>>2]=24,A[t+104>>2]=1,A[t+108>>2]=1048576,r=7959909;break A}e=A[25873],A[t+304>>2]=A[25872],A[t+308>>2]=e,e=A[25875],A[t+312>>2]=A[25874],A[t+316>>2]=e,A[t+600>>2]=2944,A[t+104>>2]=2097152,A[t+108>>2]=262144,A[t+48>>2]=1}U2(t),l[t+422|0]=2|C[t+422|0];break A}A[t+40>>2]=1}return A[t+212>>2]=r,8&(e=A[t+104>>2])&&(A[t+124>>2]=46,A[t+128>>2]=44),4&e&&(A[t+124>>2]=0),t}function b8(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0;A:{r=A[32538],A[47354]=0,A[47568]=0,A[49828]=0,A[47569]=0,l[199328]=0,A[49827]=0,A[49845]=0,l[190280]=0,l[190268]=1,A[47202]=0,A[49573]=0,A[49846]=0,l[199304]=0,l[199388]=0,A[33691]=0,A[33285]=0,A[33708]=1,A[33709]=1,A[33288]=0,t=A[33730],A[33712]=A[33729],A[33713]=t,t=A[33732],A[33714]=A[33731],A[33715]=t,t=A[33734],A[33716]=A[33733],A[33717]=t,t=A[33736],A[33718]=A[33735],A[33719]=t,t=A[33738],A[33720]=A[33737],A[33721]=t,t=A[33740],A[33722]=A[33739],A[33723]=t,t=A[33742],A[33724]=A[33741],A[33725]=t,A[33726]=A[33743],l[134784]=0,l[134824]=0,l[134772]=0,l[134760]=0,A[33284]=-1,A[33692]=0,A[32525]=0,A[47201]=A[33717],A[47200]=A[33718],Yl(),A[34438]=0,A[34437]=0,t=A[33730],A[34048]=A[33729],A[34049]=t,t=A[33732],A[34050]=A[33731],A[34051]=t,t=A[33734],A[34052]=A[33733],A[34053]=t,t=A[33736],A[34054]=A[33735],A[34055]=t,t=A[33738],A[34056]=A[33737],A[34057]=t,t=A[33740],A[34058]=A[33739],A[34059]=t,t=A[33742],A[34060]=A[33741],A[34061]=t,A[34062]=A[33743];e:{r:{if(1&r){if(A[A[32539]>>2]=0,A[47569]|A[49845]|A[49827])break r;break e}if(A[A[32539]>>2]=0,!(A[49845]|A[49827]||A[47569]))break e}l[190280]=1}A[49828]=0,t=268436735;e:if(!(!A[34391]|!A[34388])&&(A[47204]=0,A[47203]=0,A[47199]=0,A[34439]=0,(A[47192]||!(t=$8(86228)))&&((t=A[33283])||((t=m0(16))&&(A[t>>2]=0,A[t+4>>2]=0,A[t+8>>2]=0,A[t+12>>2]=0),A[33283]=t),n=268439807,(r=A[A[47192]+328>>2])>>>0>20|!A[129104+(r<<3)>>2]?t=n:(e?(n=4,s=lA(e)+1|0):(n=2,s=0),A[t+8>>2]=n,A[t>>2]=e,A[t+12>>2]=A[129108+(r<<3)>>2],A[t+4>>2]=e?e+s|0:0,t=0),!t))){U1(0);r:{for(;;){A[34436]=0,e=A[34391],A[51290]=e,A[54046]=e+A[34390],A[50767]<=102399&&(A[50767]=102400);i:if(!((g=A[51290])>>>0>=aA[54046]))for(;;){if((((0|(e=(s=A[50757])-(f=A[50758])|0))<=0?e+170|0:e)-171|0)>=-1){if((0|(e=A[54731]))<=0)break i;n=0,A[50763]=0,A[50762]=0,A[50765]=2147483647,e=C[218920]?A[54732]:e;s:{for(;;){if(r=e-1|0,A[54732]=r,(0|e)<=0)break s;if(A[51290]=g+1,t=(e=A[51293])+1|0,A[51293]=(0|t)<=5499?t:0,t=(e=T(A[50755],B[205184+(e<<1)>>1]))>>8,l[0|g]=t,s=A[51290],A[51290]=s+1,l[0|s]=e>>>16,(s=A[50756])?(e=r,(r=A[s+4>>2])&&(xA[0|r](t<<16>>16),e=A[54732])):e=r,s=(r=A[51292])+1|0,A[51292]=s,B[205184+(r<<1)>>1]=t,(0|s)>=5500&&(A[51292]=0),g=A[51290],!(aA[54046]>=g+2>>>0))break}n=1}l[218920]=n;break i}e=A[(r=216192+(s<<4)|0)+4>>2];s:{o:{f:{u:{g:{n:{d:{p:{I:{h:{b:{v:{m:{G:{S:{F:switch((255&(t=A[r>>2]))-1|0){case 9:break f;case 7:break u;case 10:break g;case 11:break n;case 13:break d;case 0:break p;case 1:break I;case 2:break h;case 3:break b;case 6:break v;case 5:break m;case 4:break G;case 15:break S;case 8:break F;default:break o}if(!A[50759])break o;t=A[r+12>>2],r=A[r+8>>2],A[50768]=0,g=r||99232,A[50766]=g,A[50769]=e?2097152/(0|e)|0:0,e=A[50971],s=(0|T(e,A[50788]))/50|0,r=T(s-e|0,-18),e=((0|(e=A[50785]))>=101?101:e)-A[50790]|0,t=(n=r+((0|T(A[50970],C[((0|e)>0?e:0)+105680|0]))/128|0)|0)+((0|T(s,(0|(e=t>>16))<(0|(r=65535&t))?e:r))/2|0)|0,A[50770]=t,e=(n+((0|T(s,(0|e)>(0|r)?e:r))/2|0)|0)-t|0,A[50771]=e,r=C[0|g],A[33072]=A[50976],A[50767]=t+(T(e,r)>>8);break o}xA[A[A[50756]>>2]](e,A[r+8>>2]),SA(e);break o}if(C[218920]||(A[54731]=A[54731]-e),A[50781]=100,A[50773]=0,F8(),A[50763]=0,A[50762]=0,A[50765]=2147483647,!e)break o;for(e=C[218920]?A[54732]:e;;){if(r=e-1|0,A[54732]=r,(0|e)<=0)break o;if(e=A[51290],A[51290]=e+1,s=(t=A[51293])+1|0,A[51293]=(0|s)<=5499?s:0,s=e,t=(e=T(A[50755],B[205184+(t<<1)>>1]))>>8,l[0|s]=t,s=A[51290],A[51290]=s+1,l[0|s]=e>>>16,(s=A[50756])?(e=r,(r=A[s+4>>2])&&(xA[0|r](t<<16>>16),e=A[54732])):e=r,s=(r=A[51292])+1|0,A[51292]=s,B[205184+(r<<1)>>1]=t,(0|s)>=5500&&(A[51292]=0),s=1,!(aA[54046]>=A[51290]+2>>>0))break}break s}for(A[50773]=0,A[54731]=A[54729],F8(),t=A[r+12>>2],s=A[r+8>>2],C[218920]?e=A[54733]:A[54734]=0,f=t>>8,n=255&t,A[50762]=0,A[50763]=0;;){if(r=e-1|0,A[54733]=r,(0|e)<=0)break o;if(t=(e=A[54734])+1|0,n?g=T(n,l[e+s|0]):(g=C[e+s|0]|l[t+s|0]<<8,t=e+2|0),A[54734]=t,c=(e=A[51293])+1|0,A[51293]=c,t=(0|(e=(0|(e=((0|T(f,T(A[33037],T(A[33038],g))>>10))/32|0)+(T(A[50755],B[205184+(e<<1)>>1])>>8)|0))<=-32768?-32768:e))>=32767?32767:e,(0|c)>=5500&&(A[51293]=0),l[A[51290]]=t,l[A[51290]+1|0]=t>>>8,(g=A[50756])?(e=r,(r=A[g+12>>2])&&(xA[0|r](t<<16>>16),e=A[54733])):e=r,r=A[51290],A[51290]=r+2,c=(g=A[51292])+1|0,A[51292]=c,B[205184+(g<<1)>>1]=(0|T(t,3))/4,(0|c)>=5500&&(A[51292]=0),!(aA[54046]>=r+4>>>0))break}s=1;break s}t=A[r+12>>2],s=e>>>16|0,A[50777]=s,e&=65535,A[50773]=e,n=255&t,A[50774]=n,A[50775]=t>>8,n||(A[50777]=s<<1,A[50773]=e<<1),A[50778]=0,A[50776]=0,A[50772]=A[r+8>>2];break o}A[50773]=0}if(A[54731]=A[54729],t=A[50759],C[218920]){if(!t)break o}else{if(!t)break o;for(n=A[r+12>>2],g=A[r+8>>2],r=e>>16,A[55912]=255&r,l[218960]=1,A[55908]=0,67108864&e&&(A[55908]=3,A[55909]=A[110496+(r>>>6&12)>>2]),134217728&e&&(A[55908]=4,A[55909]=A[110512+(r>>>6&12)>>2]),e&=65504;;){if((0|f)!=(0|(s=(0|(r=s+1|0))<=169?r:0)))if((0|(r=A[216192+(s<<4)>>2]))!=3){if(r-5>>>0>1)continue}else l[218960]=0;break}for(A[55913]=A[50762],e=(e=e+32&131008)||64,A[50763]=e+A[50763],A[55684]=T(B[101997],7800)+(y[102024]<<8)<<8,A[55704]=T(B[101998],9e3)+(y[102025]<<8)<<8,v=A[50980],a=+(0|e),m=+(e>>>2|0),e=0;(0|e)!=7&&(s=B[(c=(r=e<<1)+t|0)+218>>1]<<8,f=T(e,80)+222176|0,c=B[c+164>>1],E=s+T(c,B[2+(r+g|0)>>1])<<8,A[f>>2]=E,b=+(0|E),Q[f+16>>3]=b,Q[f+48>>3]=16*(+(s+T(c,B[2+(r+n|0)>>1])<<8)-b)/m),s=(r=T(e,80))+222176|0,c=B[(E=t+(e<<1)|0)+182>>1],Y=T(c,C[(f=e+g|0)+18|0])<<6,A[s+4>>2]=Y,b=+(0|Y),Q[s+24>>3]=b,D=s,s=e+n|0,Q[D+56>>3]=64*(+(T(c,C[s+18|0])<<6)-b)/a,(0|e)>(0|v)|e>>>0>5||(c=r+222176|0,Y=B[E+200>>1],E=T(Y,C[f+26|0])<<10,A[c+8>>2]=E,b=+(0|E),Q[c+32>>3]=b,D=c- -64|0,c=Y<<10,Q[D>>3]=64*(+(0|T(c,C[s+26|0]))-b)/a,e>>>0<=2?(r=r+222176|0,f=T(c,C[f+32|0]),A[r+12>>2]=f,b=+(0|f),Q[r+40>>3]=b,Q[r+72>>3]=64*(+(0|T(c,C[s+32|0]))-b)/a):A[r+222188>>2]=E),(0|(e=e+1|0))!=8;);}for(;;){if(e=A[50762],!C[218960]&(0|e)==A[50763])break o;h:{b:{if(63&e){if(7&e)break h;v:if(!((0|(r=A[54736]))<=0||(0|(t=A[54735]))<=0))for(s=A[50826],e=1;;){if(A[(g=(n=e<<2)+s|0)>>2]=A[g>>2]+A[n+203312>>2],e>>>0>28|(0|e)>=(0|r))break v;if(n=(0|e)<(0|t),e=e+1|0,!n)break}if((0|(e=A[33073]))>255)break h;A[33073]=e+1;break h}if(e)if(A[50759]){if(r=A[50768]+A[50769]|0,A[50768]=r,r=(t=A[50766])?T(C[t+((0|(r>>=8))>=127?127:r)|0],A[50771])>>8:0,A[55911]=A[55911]+A[55915],t=(0|(t=A[55914]))<=23551?t:0,A[55914]=t+A[50761],t=(r+A[50770]|0)+T(A[33072],C[110528+(t>>6)|0]-128|0)|0,A[50767]=t,!(s=A[51291])&(0|(r=s?s<<12:t))>102399||(t=(0|r)<=102400?102400:r,A[50767]=t),(0|e)!=A[55913]){if(e=0,!((0|(f=A[50980]))<0)){for(;g=T(e,80),a=Q[(r=g+222176|0)+48>>3]+Q[r+16>>3],Q[r+16>>3]=a,m=Q[r+56>>3]+Q[r+24>>3],Q[r+24>>3]=m,b=Q[r- -64>>3]+Q[r+32>>3],Q[r+32>>3]=b,s=sA(a)<2147483648?~~a:-2147483648,A[r>>2]=s,s=sA(b)<2147483648?~~b:-2147483648,A[r+8>>2]=s,n=sA(m)<2147483648?~~m:-2147483648,A[r+4>>2]=(0|n)>0?n:0,(0|e)>2||(a=Q[(r=g+222176|0)+72>>3]+Q[r+40>>3],Q[r+40>>3]=a,s=sA(a)<2147483648?~~a:-2147483648),A[g+222188>>2]=s,(0|f)>=(0|(e=e+1|0)););if((0|e)>=8)break b}for(;(0|e)!=7&&(r=T(e,80)+222176|0,a=Q[r+48>>3]+Q[r+16>>3],Q[r+16>>3]=a,s=sA(a)<2147483648?~~a:-2147483648,A[r>>2]=s),r=T(e,80)+222176|0,a=Q[r+56>>3]+Q[r+24>>3],Q[r+24>>3]=a,s=sA(a)<2147483648?~~a:-2147483648,A[r+4>>2]=(0|s)>0?s:0,(0|(e=e+1|0))!=8;);}}else t=A[50767];else A[50826]=218976,A[54742]=0,A[54736]=Y8(A[50767]<<4,218976,0),t=A[50767],A[54737]=890/(t>>12),A[54739]=(0|T(A[50781],T(A[50779],t>>8)))/8e4}if(A[55906]=t>>11,A[54735]=A[54736],A[55904]=T(A[50760],t>>7),A[55905]=A[50754]/(t>>12),r=1^(e=A[54742]),A[54742]=r,A[50826]=T(e,1600)+218976,A[54736]=Y8(t<<4,T(r,1600)+218976|0,1),!(!(t=A[50759])|!A[51022]))for(m=Q[25430],b=Q[25429],e=1;A[(r=t+(e<<2)|0)+272>>2]&&(s=A[r+308>>2],r=T(e,40)+203456|0,I=te(m*+B[2+(T(e,80)+222176|0)>>1]),I*=a=we(b*+(0|s)),I+=I,Q[r+8>>3]=I,a*=-a,Q[r+16>>3]=a,Q[r>>3]=1-I-a),(0|(e=e+1|0))!=9;);}if(n=A[50762]+1|0,A[50762]=n,g=(e=A[50765])+A[55904]|0,A[50765]=g,(0|g)<0&(0|e)>0){if(c=A[55905],t=A[50800]+((0|c)/-2|0)|0,A[55907]=t,(0|(E=A[50763]))<(0|n))break o;if(v=A[54738]+1|0,A[54738]=v,f=A[50767],!((0|(e=(r=A[50980])+1|0))>8)&&(s=f<<3,1&r&&(A[203264+(e<<2)>>2]=(1+(A[T(e,80)+222176>>2]/(0|s)|0)|0)/2,e=r+2|0),(0|r)!=7))for(;r=203264+(e<<2)|0,Y=T(e,80)+222176|0,A[r>>2]=(1+(A[Y>>2]/(0|s)|0)|0)/2,A[r+4>>2]=(1+(A[Y+80>>2]/(0|s)|0)|0)/2,(0|(e=e+2|0))!=9;);e=(0|T(A[50781],T(A[50779],f>>8)))/8e4|0,A[54739]=e;h:if(!((0|(r=A[55908]))<=0)){b:switch(r-3|0){case 0:if((E-n|0)>=c<<1)break h;A[55908]=2,e=(0|T(A[55909],e))/256|0,A[54739]=e;break h;case 1:A[55908]=2,e=(0|T(A[55909],e))/256|0,A[54739]=e;break h;default:break b}A[55908]=r-1}(r=A[55910])&&(s=e,e=A[55911]>>8,e=(0|T(s,C[r+((0|e)>=127?127:e)|0]))/128|0,A[54739]=e),(0|(r=A[A[32972]+92>>2]))>7||(r=15&(s=C[A[55912]+(106336+(r<<3)|0)|0]),(s=s>>>4|0)&&((0|s)!=15?(0|v)%(0|s)|0||(A[54739]=(0|T(e,r))/16):(A[55912]=0,A[54739]=(0|T(e,r))/16)))}else t=A[55907];if(n=t+1|0,A[55907]=n,r=g>>>16|0,s=0,!((0|n)<0|(0|n)>=A[50799])){if(!((0|(e=(t=A[50980])+1|0))>8)){if(f=1&(g=8-t|0),(0|t)!=7)for(c=-2&g,t=0;s=T(A[(E=(g=e<<2)+4|0)+203216>>2],B[106400+(T(r,A[E+203264>>2])>>>4&4094)>>1])+(T(A[g+203216>>2],B[106400+(T(r,A[g+203264>>2])>>>4&4094)>>1])+s|0)|0,e=e+2|0,(0|c)!=(0|(t=t+2|0)););f&&(s=T(A[(e<<=2)+203216>>2],B[106400+(T(r,A[e+203264>>2])>>>4&4094)>>1])+s|0)}s=T(C[n+132160|0],(0|s)/A[55906]|0)}if(e=1,(0|(n=A[54737]))<=0)t=r;else for(g=A[50826],t=r;s=T(A[g+(e<<2)>>2],B[106400+((65504&t)>>>4|0)>>1])+s|0,t=t+r|0,(0|n)>=(0|(e=e+1|0)););if((0|(n=A[54735]))>=(0|e))for(g=A[50826];s=s-T(A[g+(e<<2)>>2],B[106400+((65504&t)>>>4|0)>>1])|0,t=t+r|0,(0|n)>=(0|(e=e+1|0)););if(n=(0|(e=A[54728]))==64?s:T(e,s>>6),A[51022]){if(A[50759])for(r=DA(A[33209],0,1103515245,0),e=_,e=Yi(r=r+12345|0,e=r>>>0<12345?e+1|0:e),A[33209]=e,m=+((16383&e)- -8192|0),t=A[50759],g=0,e=1;(s=A[272+(t+(e<<2)|0)>>2])&&(f=A[T(e,80)+222180>>2],r=T(e,40)+203456|0,a=Q[r+32>>3],b=Q[r+24>>3],Q[r+32>>3]=b,a=a*Q[r+16>>3]+(Q[r>>3]*m+b*Q[r+8>>3]),Q[r+24>>3]=a,r=sA(a)<2147483648?~~a:-2147483648,g=T(r,T(s,f>>14))+g|0),(0|(e=e+1|0))!=9;);else g=0;n=n+g|0}t=0,(0|(e=A[50776]))>=A[50773]||(r=A[50778],t=A[50772],(g=A[50774])?(s=e+1|0,A[50776]=s,e=T(g,l[t+(e+r|0)|0])):(g=C[0|(t=t+(e+r|0)|0)],t=l[t+1|0],s=e+2|0,A[50776]=s,e=g|t<<8),t=(0|T(T(e,A[50780])>>10,A[50775]))/32|0,(0|(e=A[50777]))>(r+s|0)||(A[50778]=r+((0|T(e,3))/-4|0))),r=(e=A[51293])+1|0,A[51293]=r,e=((T(A[54739],n>>8)>>13)+t|0)+(T(A[50755],B[205184+(e<<1)>>1])>>8)|0,(0|r)>=5500&&(A[51293]=0),r=A[33073];h:{b:{if((0|(t=T(r,e)))>=8388608){if((0|r)>=(0|(g=8388608/(0|e)|0)))break b;break h}if((0|t)>-8388353||(0|r)<(0|(g=-8388608/(0|e)|0)))break h}r=g-1|0,A[33073]=r,t=T(e,r)}if(e=A[51290],A[51290]=e+1,r=e,e=t>>8,l[0|r]=e,r=A[51290],A[51290]=r+1,l[0|r]=t>>>16,(r=A[50756])&&(r=A[r+8>>2])&&xA[0|r](e<<16>>16),t=(r=A[51292])+1|0,A[51292]=t,B[205184+(r<<1)>>1]=e,(0|t)>=5500&&(A[51292]=0),!(aA[54046]>=A[51290]+2>>>0))break}s=1;break s}A[50773]=0}A[54731]=A[54729],s=1,f=65535&e,t=C[218920],g=A[r+8>>2],n=A[r+12>>2],a=0,b=0,F=r=F+-64|0,c=A[50759];p:if((0|(e=A[c+132>>2]))!=6){if(!t){for(e-1>>>0<=4&&(A[55921]=e,A[55964]=A[110896+(e<<2)>>2]),e=A[c+88>>2],A[54741]=1,A[55922]=(0|e)/32,t=A[50758],e=A[50757];;){I:if((0|t)!=(0|(e=(0|(e=e+1|0))<=169?e:0)))if((0|(E=A[216192+(e<<4)>>2]))!=1){if(E-5>>>0>1)continue}else{if(A[54741]=0,e=A[8+(216192+(e<<4)|0)>>2],!(y[n+4>>1]!=y[e+4>>1]|y[e+6>>1]!=y[n+6>>1]|y[e+8>>1]!=y[n+8>>1]|y[e+10>>1]!=y[n+10>>1])&&y[e+12>>1]==y[n+12>>1])break I;A[54741]=2}break}for((y[g+4>>1]!=y[113564]|y[g+6>>1]!=y[113565]|y[g+8>>1]!=y[113566]|y[g+10>>1]!=y[113567]||y[g+12>>1]!=y[113568])&&(xi(),A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,A[55988]=0,A[55989]=0,A[55990]=0,A[55991]=0,A[56004]=0,A[56005]=0,A[56006]=0,A[56007]=0,A[56020]=0,A[56021]=0,A[56022]=0,A[56023]=0,A[56036]=0,A[56037]=0,A[56038]=0,A[56039]=0,A[56052]=0,A[56053]=0,A[56054]=0,A[56055]=0,A[56068]=0,A[56069]=0,A[56070]=0,A[56071]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0),e=y[n+4>>1]|y[n+6>>1]<<16,t=y[n>>1]|y[n+2>>1]<<16,B[113562]=t,B[113563]=t>>>16,B[113564]=e,B[113565]=e>>>16,e=y[n+60>>1]|y[n+62>>1]<<16,t=y[n+56>>1]|y[n+58>>1]<<16,B[113590]=t,B[113591]=t>>>16,B[113592]=e,B[113593]=e>>>16,e=y[n+52>>1]|y[n+54>>1]<<16,t=y[n+48>>1]|y[n+50>>1]<<16,B[113586]=t,B[113587]=t>>>16,B[113588]=e,B[113589]=e>>>16,e=y[n+44>>1]|y[n+46>>1]<<16,t=y[n+40>>1]|y[n+42>>1]<<16,B[113582]=t,B[113583]=t>>>16,B[113584]=e,B[113585]=e>>>16,e=y[n+36>>1]|y[n+38>>1]<<16,t=y[n+32>>1]|y[n+34>>1]<<16,B[113578]=t,B[113579]=t>>>16,B[113580]=e,B[113581]=e>>>16,e=y[n+28>>1]|y[n+30>>1]<<16,t=y[n+24>>1]|y[n+26>>1]<<16,B[113574]=t,B[113575]=t>>>16,B[113576]=e,B[113577]=e>>>16,e=y[n+20>>1]|y[n+22>>1]<<16,t=y[n+16>>1]|y[n+18>>1]<<16,B[113570]=t,B[113571]=t>>>16,B[113572]=e,B[113573]=e>>>16,e=y[n+12>>1]|y[n+14>>1]<<16,t=y[n+8>>1]|y[n+10>>1]<<16,B[113566]=t,B[113567]=t>>>16,B[113568]=e,B[113569]=e>>>16,m=+(0|f),(D=1&B[g>>1])?(e=C[g+39|0],A[56680]=e,Q[28364]=e>>>0,Q[28354]=+(C[n+39|0]-e<<6)/m,e=C[g+40|0],Q[28366]=e>>>0,Q[28356]=+(C[n+40|0]-e<<6)/m,e=C[g+41|0],A[56682]=e,Q[28368]=e>>>0,Q[28358]=+(C[n+41|0]-e<<6)/m,t=C[g+42|0],A[56684]=t,Q[28370]=t>>>0,e=C[g+43|0],a=+(C[n+43|0]-e<<6)/m,b=+(C[n+42|0]-t<<6)/m,I=+(e>>>0)):(A[56728]=0,A[56729]=0,e=0,A[56680]=0,A[56708]=0,A[56709]=0,A[56732]=0,A[56733]=0,A[56712]=0,A[56713]=0,A[56682]=0,A[56736]=0,A[56737]=0,A[56716]=0,A[56717]=0,A[56684]=0,A[56740]=0,A[56741]=0,I=0),A[56688]=e,Q[28360]=b,Q[28372]=I,Q[28362]=a,A[56692]=0,A[56748]=0,A[56749]=0,A[56694]=0,A[56752]=0,A[56753]=0,A[56696]=0,A[56756]=0,A[56757]=0,A[56700]=0,A[56760]=0,A[56761]=0,A[56704]=0,A[56764]=0,A[56765]=0,A[50764]=f,e=1;v=B[(E=(f=e<<1)+c|0)+164>>1],t=(J=T(e,80))+222896|0,b=+B[E+218>>1],a=.00390625*+(0|T(v,B[2+(g+f|0)>>1]))+b,Q[t+16>>3]=a,Y=sA(a)<2147483648?~~a:-2147483648,A[t>>2]=Y,Q[t+48>>3]=64*(.00390625*+(0|T(v,B[2+(n+f|0)>>1]))+b-a)/m,e>>>0<=3&&(t=J+222896|0,a=.00390625*+B[E+200>>1]*+(C[35+(e+g|0)|0]<<1),Q[t+24>>3]=a,f=sA(a)<2147483648?~~a:-2147483648,A[t+4>>2]=f,Q[t+56>>3]=64*(+(C[35+(e+n|0)|0]<<1)-a)/m),(0|(e=e+1|0))!=6;);if(a=+((e=C[g+40|0])<<1),Q[27864]=a,t=A[56618],e||(a=+(0|t),Q[27864]=a),e=sA(a)<2147483648?~~a:-2147483648,A[55724]=e,f=C[n+40|0],A[55730]=0,A[55731]=1079394304,A[55738]=0,A[55739]=0,A[55725]=89,e=1,Q[27868]=64*(+(0|(f?f<<1:t))-a)/m,D)for(;t=T(e,80)+222896|0,c=C[(f=e+g|0)+56|0]<<2,A[t+12>>2]=c,a=+(0|c),Q[t+40>>3]=a,c=e+n|0,Q[t+72>>3]=64*(+(C[c+56|0]<<2)-a)/m,f=C[f+49|0],A[t+8>>2]=f,a=+(f>>>0),Q[t+32>>3]=a,Q[t- -64>>3]=64*(+C[c+49|0]-a)/m,(0|(e=e+1|0))!=7;);A[56606]=0}for(;;){if((0|(Y=A[50764]))>(0|(n=A[56606]))){for(e=A[50767],A[56609]=A[55724],A[56619]=A[55725],A[56610]=A[55744],A[56611]=A[55764],A[56612]=A[55784],A[56613]=A[55804],D=T(e,10),A[56607]=(0|D)/4096,A[56620]=A[55745],A[56621]=A[55765],A[56622]=A[55785],A[56614]=A[55824],A[56630]=A[55746],A[56631]=A[55766],A[56632]=A[55786],A[56633]=A[55806],A[56634]=A[55826],A[56635]=A[55846],J=A[56680],A[56608]=J,g=A[56694],A[56656]=g,f=A[56696],A[56653]=f,c=A[56700],A[56655]=c,E=A[56684],A[56649]=E,A[56651]=A[56704],A[56654]=A[56688],A[56652]=A[56682],A[56650]=A[56692],e=0;t=T(e,80)+222896|0,a=Q[t+48>>3]+Q[t+16>>3],Q[t+16>>3]=a,m=Q[t+56>>3]+Q[t+24>>3],Q[t+24>>3]=m,b=Q[t+72>>3]+Q[t+40>>3],Q[t+40>>3]=b,I=Q[t- -64>>3]+Q[t+32>>3],Q[t+32>>3]=I,v=sA(a)<2147483648?~~a:-2147483648,A[t>>2]=v,v=sA(m)<2147483648?~~m:-2147483648,A[t+4>>2]=v,v=sA(b)<2147483648?~~b:-2147483648,A[t+12>>2]=v,v=sA(I)<2147483648?~~I:-2147483648,A[t+8>>2]=v,(0|(e=e+1|0))!=9;);for(a=Q[28354]+Q[28364],Q[28364]=a,Q[28366]=Q[28356]+Q[28366],m=Q[28358]+Q[28368],Q[28368]=m,b=Q[28360]+Q[28370],Q[28370]=b,I=Q[28362]+Q[28372],Q[28372]=I,e=sA(a)<2147483648?~~a:-2147483648,A[56680]=e,e=sA(m)<2147483648?~~m:-2147483648,A[56682]=e,e=sA(b)<2147483648?~~b:-2147483648,A[56684]=e,e=sA(I)<2147483648?~~I:-2147483648,A[56688]=e,a=Q[28374]+0,Q[28374]=a,e=sA(a)<2147483648?~~a:-2147483648,A[56692]=e,a=Q[28376]+0,Q[28376]=a,e=sA(a)<2147483648?~~a:-2147483648,A[56694]=e,a=Q[28378]+0,Q[28378]=a,e=sA(a)<2147483648?~~a:-2147483648,A[56696]=e,a=Q[28380]+0,Q[28380]=a,e=sA(a)<2147483648?~~a:-2147483648,A[56700]=e,a=Q[28382]+0,Q[28382]=a,e=sA(a)<2147483648?~~a:-2147483648,A[56704]=e,A[56659]=A[55724],A[56669]=A[55725],A[56660]=A[55744],A[56670]=A[55745],A[56661]=A[55764],A[56671]=A[55765],A[56662]=A[55784],A[56672]=A[55785],A[56663]=A[55804],A[56664]=A[55824],A[56665]=A[55844],e=A[50768]+A[50769]|0,A[50768]=e,e>>=8,A[50767]=A[50770]+(T(A[50771],C[A[50766]+((0|e)>=127?127:e)|0])>>8),e=Y-n|0,A[55923]=(0|e)>=64?64:e,A[55961]=(0|D)/40960,e=J-7|0,A[56658]=(0|e)>0?e:0,Q[27974]=E>>>0<=87?.001*+B[111136+(E<<1)>>1]*.05:0,Q[27975]=f>>>0<=87?.001*+B[111136+(f<<1)>>1]*.25:0,Q[27973]=g>>>0<=87?.001*+B[111136+(g<<1)>>1]:0,Q[27971]=c>>>0<=87?.001*+B[111136+(c<<1)>>1]*.05:0,a=(e=A[56629])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.6:0,Q[r>>3]=a,a=(e=A[56630])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.4:0,Q[r+8>>3]=a,a=(e=A[56631])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.15:0,Q[r+16>>3]=a,a=(e=A[56632])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.06:0,Q[r+24>>3]=a,a=(e=A[56633])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.04:0,Q[r+32>>3]=a,a=(e=A[56634])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.022:0,Q[r+40>>3]=a,a=(e=A[56635])>>>0<=87?.001*+B[111136+(e<<1)>>1]*.03:0,Q[r+48>>3]=a,a=(e=(0|(e=A[56657]-3|0))<=0?57:e)>>>0<=87?.001*+B[111136+(e<<1)>>1]:0,Q[27977]=a/+A[55964],m=Q[27968],b=Q[27967],e=1;t=(n=e<<6)+223664|0,I=(a=we(b*+A[(f=(g=e<<2)+226428|0)+48>>2]))*-a,Q[t+216>>3]=I,a*=te(m*+A[f+8>>2]),a+=a,Q[t+208>>3]=a,L=1-a-I,Q[t+200>>3]=L,e>>>0<=5&&(f=A[(g=g+226428|0)+208>>2],t=n+223664|0,R=(O=we(b*+A[g+248>>2]))*te(m*+(0|f)),R+=R,Q[t+1488>>3]=R,O*=-O,Q[t+1496>>3]=O,U=1-R-O,Q[t+1480>>3]=U,Q[t+256>>3]=.015625*(O-I),Q[t+248>>3]=.015625*(R-a),Q[t+240>>3]=.015625*(U-L)),(0|(e=e+1|0))!=10;);for(O=(a=we(b*+A[56619]))*-a,Q[27985]=O,R=(a*=te(m*+(0-A[56609]|0)))+a,Q[27984]=R,a=1-R-O,Q[27983]=a,a!=0&&(a=1/a,Q[27983]=a,O*=I=-a,Q[27985]=O,R*=I,Q[27984]=R),L=(I=we(b*+A[56669]))*-I,Q[28145]=L,U=(I*=te(m*+(0-A[56659]|0)))+I,Q[28144]=U,I=1-U-L,Q[28143]=I,I!=0&&(I=1/I,Q[28143]=I,L*=AA=-I,Q[28145]=L,U*=AA,Q[28144]=U),Q[27990]=.015625*(L-O),Q[27989]=.015625*(U-R),Q[27988]=.015625*(I-a),e=0;g=A[(n=226428+(e<<2)|0)+8>>2],t=223664+(e<<6)|0,I=(a=we(b*+A[n+128>>2]))*te(m*+(0|g)),I+=I,Q[t+848>>3]=I,a*=-a,Q[t+856>>3]=a,Q[t+840>>3]=Q[r+(e<<3)>>3]*(1-I-a),(0|(e=e+1|0))!=7;);if(b=(a=we(b*+(A[55918]/2|0)))*-a,Q[28137]=b,a*=te(0*m),a+=a,Q[28136]=a,Q[28135]=1-a-b,e=1,(0|w8())!=1)continue;break p}break}e=1,A[54741]>0&&(A[54741]=0,A[55963]=64,A[56606]=n+-64,A[55923]=64,(0|w8())==1)||(e=0)}else{if(F=E=F-752|0,!t){QA(e=E+376|0,0,376),O8(c,g,e),O8(c,n,e=QA(E,0,376)),t=A[50768]+T(A[50769],f>>>6|0)|0,A[50768]=t,t>>=8,t=A[50770]+(T(A[50771],C[A[50766]+((0|t)>=127?127:t)|0])>>8)|0,A[50767]=t,Q[e+368>>3]=(0|t)/4096|0,A[50773]&&(Q[e+736>>3]=Q[e+736>>3]/5,Q[e+360>>3]=Q[e+360>>3]/5),t=A[A[56797]+4>>2],xA[A[A[t>>2]>>2]](t,e+376|0,110,110,-1,0),n=f-110|0,c=A[50758],t=A[50757];I:{for(;;){if((0|c)!=(0|(t=(t+1|0)%170|0))&&!((v=A[216192+(t<<4)>>2])-5>>>0<2)){if(g=1,(0|v)!=1)continue;break I}break}n=f-220|0,g=0}(0|n)>0&&(t=A[A[56797]+4>>2],xA[A[A[t>>2]>>2]](t,e,n,n||1,-1,0)),g||(A[e+352>>2]=0,A[e+356>>2]=0,Q[e>>3]=Q[e+368>>3],t=A[A[56797]+4>>2],xA[A[A[t>>2]>>2]](t,e,55,55,-1,0),A[e+360>>2]=0,A[e+364>>2]=0,t=A[A[56797]+4>>2],xA[A[A[t>>2]>>2]](t,e,55,55,-1,0))}e=A[A[56797]+8>>2],t=A[51290],f=0|xA[A[A[e>>2]>>2]](e,A[54046]-t>>>1|0,t),c=A[51290];I:if(f&&!((0|(t=A[50776]))>=(0|(J=A[50773]))))for(q=A[50777],tA=(0|T(q,3))/-4|0,a=.0009765625*+A[50780],v=A[50772],n=A[50778],iA=A[50775],Y=A[50774],e=0;;){if(D=C[v+(g=t+n|0)|0],Y?D=T(Y,D<<24>>24):(t=t+1|0,A[50776]=t,D|=l[v+(g=t+n|0)|0]<<8),D=sA(m=a*+(0|D))<2147483648?~~m:-2147483648,B[($=c+(e<<1)|0)>>1]=y[$>>1]+((0|T(D,iA))/40|0),(0|g)>=(0|q)&&(n=n+tA|0,A[50778]=n),t=t+1|0,A[50776]=t,(0|t)>=(0|J))break I;if(!(f>>>0>(e=e+1|0)>>>0))break}e=c+(f<<1)|0,A[51290]=e,F=E+752|0,e=aA[54046]<=e>>>0}if(F=r- -64|0,e)break s;break o}A[50781]=e||100;break o}ri(e,A[r+8>>2]);break o}e=A[r+8>>2],A[50759]=MA(203816,e,1344),A[50801]=A[e+108>>2]?105792:106064,e=(0|T(A[e+120>>2],26))/100|0,A[33038]=e,(0|(s=A[50754]))<=11e3&&(l[203300]=1,A[33038]=e<<1),A[54728]=A[50982],e=A[50979],t=A[50978],QA(205184,0,11e3),A[51293]=0,e=(t=(g=(0|(n=A[50789]))>0)?130:(0|t)>=5499?5499:t)?g?n:(0|e)>=100?100:e:0,A[50755]=e,t=(0|T(t,s))/1e3|0,A[51292]=t,A[54729]=(0|e)>20?t<<1:e?t:0,A[33037]=(0|T(500-e|0,(0|T(C[A[50797]+105596|0],(0|T(A[50787],55))/100|0))/16|0))/500,e=256,(0|(t=(0|(t=A[50785]))>=101?101:t))>=51&&(e=256+(((T(t,25)-1250&65535)>>>0)/50|0)|0),B[101990]=(0|T(B[102026],e))/256,B[101991]=(0|T(B[102027],e))/256,B[101992]=(0|T(B[102028],e))/256,B[101993]=(0|T(B[102029],e))/256,B[101994]=(0|T(B[102030],e))/256,B[101995]=(0|T(B[102031],e))/256,e=A[50790],B[101999]=(0|T(B[102035],T(e,-6)+256|0))/256,B[102e3]=(0|T(B[102036],T(e,-3)+256|0))/256,q8(8,0,A[50986],0,A[51290]),SA(A[r+8>>2]);break o}if(!A[50759])break o;t=A[r+12>>2],r=A[r+8>>2],A[55911]=0,A[55915]=e?2097152/(0|e)|0:0,A[55910]=r,e=(0|T(t,A[33037]))/16|0,A[50779]=e,A[50780]=(0|T(T(e,A[50985]),15))/100;break o}q8(t>>8,e,A[r+8>>2],A[r+12>>2],g)}s=0,e=A[50757]+1|0,A[50757]=(0|e)<=169?e:0}if(l[218920]=s,!((g=A[51290])>>>0<aA[54046]))break}n=A[34391],r=(A[51290]-n|0)/2|0,A[34439]=r+A[34439],t=A[34436],e=A[34388]+T(t,36)|0,A[e+4>>2]=0,A[e>>2]=0,A[e+24>>2]=A[34438];i:if(2&(e=A[32538])){if(g=A[34388],(-2&e)==2&&(!(r=t?g:0)|A[r>>2]!=8||(0|(r=A[r+28>>2]))!=A[34389]&&(A[34389]=r)),s=1,(0|t)<2)break i;for(;;){r=t?g+T(s,36)|0:0;s:{o:switch(0|e){case 2:case 3:if(!r|A[r>>2]!=8||(0|(r=A[r+28>>2]))==A[34389])break s;A[34389]=r;break s;case 0:break o;default:break s}(e=A[34440])?(xA[0|e](n,0,r),t=A[34436],e=A[32538]):e=0}if(!((0|(s=s+1|0))<(0|t)))break}}else if((e=A[34440])&&0|xA[0|e](n,r,A[34388]))break r;if(!I8(1)&&!(170-((0|(e=A[50757]-A[50758]|0))<=0?e+170|0:e)|0||(e=A[34388],A[e>>2]=0,A[e+4>>2]=A[34437],A[e+24>>2]=A[34438],U1(1))))break}if(t=0,2&C[130152]||!(e=A[34440])||!(0|xA[0|e](0,0,A[34388])))break e}U1(2),t=268439295}if((0|t)<=268437502){if(!t|(0|t)==268436479|(0|t)!=268437247)break A;return}}}function I8(e){var t,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0;F=t=F-720|0,r=A[47198],e||(A[36443]=0,A[36442]=1,A[36444]=0,A[36440]=0,A[36441]=0,e=A[50758],A[36454]=e,A[36427]=-1,A[36424]=-1,A[36446]=0,A[36447]=0,A[36439]=-1,A[36426]=0,A[36455]=e,A[36448]=0,A[36449]=0,A[36450]=0,A[36451]=0,A[36452]=0,A[36453]=0,w2(),A[36427]=-1,e=216192+(A[50758]<<4)|0,A[e>>2]=5,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,A[36426]=0,A[36438]&&(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0));A:{e:if(!((0|(e=A[36442]))>997|A[36423]<=(0|e)))for(D=r>>>1&1,Y=t+48|4,O=t+348|0,R=t+652|0,L=A[32322],m=A[32320],U=t+60|0,J=t+648|0,q=t+56|0,$=t+620|0,E=t- -64|0;;){if(a=145840+(e<<5)|0,!(e=A[50756])|!A[e>>2]||(A[t+12>>2]=0,B2(e=t+16|0,A[a+8>>2],a,0,t+12|0),r=Lr(e),s=C[a+17|0],e=216192+(A[50758]<<4)|0,A[e>>2]=16,A[e+8>>2]=s,A[e+4>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),e=1,(0|(s=(0|(r=A[50757]-A[50758]|0))<=0?r+170|0:r))<=(0|((r=C[a+17|0])?(0|r)==2?25:15:10)))break A;if(I=A[36442],2&C[0|a])for(b=2047&y[a+4>>1];;){if(s=A[36443],f=127&(r=A[198304+(s<<2)>>2])){e=r>>>8|0,A[36443]=s+1;r:{i:{s:switch((31&r)-2|0){case 0:ri(96&r|8,e),Br(2);break r;case 5:if((0|e)>=A[34064]||!A[(f=(s=e<<4)+136272|0)+4>>2])break r;Ge(10,0),e=216192+(A[50758]<<4)|0,A[e>>2]=6,f=A[f+4>>2],A[e+8>>2]=A[8+(s+136272|0)>>2]+44,A[e+12>>2]=5376,A[e+4>>2]=f;break i;case 8:if((0|((0|(s=A[50757]-A[50758]|0))<=0?s+170:s))<6)break r;f=A[47353],s=216192+(A[50758]<<4)|0,A[s>>2]=778,A[s+8>>2]=e,A[s+4>>2]=f+b&16777215;break i;case 9:if((0|((0|(s=A[50757]-A[50758]|0))<=0?s+170:s))<6)break r;f=A[33284],s=216192+(A[50758]<<4)|0,A[s>>2]=1034,A[s+8>>2]=e,A[s+4>>2]=f+1&16777215;break i;default:break s}Ge(10,0),s=216192+(A[50758]<<4)|0,A[s>>2]=12,A[s+8>>2]=e,A[s+4>>2]=f}e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}if(!(128&r))continue}break}(e=C[a+20|0])&&(1&l[A[47192]+48|0]&C[a+17|0]==2|1&l[A[a+8>>2]+7|0]||(A[36426]=0),r=A[47353]+(2047&y[a+4>>1])|0,A[36445]=r,4&e&&((0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(s=A[47568],e=216192+(A[50758]<<4)|0,A[e>>2]=522,A[e+8>>2]=s,A[e+4>>2]=16777215&r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)),1&l[a+20|0]&&(r=y[a+4>>1],s=A[36444],A[36444]=s+1,(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(b=A[36445],f=A[47355],e=216192+(A[50758]<<4)|0,A[e>>2]=266,A[e+8>>2]=s+f,A[e+4>>2]=16777215&b|(63488&r)<<13,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0))),(0|(e=A[36441]))>0&&(r=216192+(A[36425]<<4)|0,A[r+4>>2]||(A[r+4>>2]=e),A[36441]=0),e=I+1<<5,r=I-1<<5,!(s=C[a+18|0])|2&C[A[a+8>>2]+7|0]||Ge(s,1),f=e+145840|0,n=r+145840|0,b=1;r:{i:{if(A[47198]&&(c=A[a+8>>2],C[c+10|0]!=15)){s:if(C[a+17|0]==2)switch(C[n+17|0]-3|0){case 0:case 5:break i;default:break s}b=0,B2(t+704|0,c,a,D,0),(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(r=A[36445],e=216192+(A[50758]<<4)|0,A[e>>2]=1802,A[e+4>>2]=16777215&r,r=A[t+708>>2],A[e+8>>2]=A[t+704>>2],A[e+12>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}s:switch(C[a+17|0]){case 0:Ge(A[a+12>>2],0),l[a+23|0]=C[A[a+8>>2]+14|0];break r;case 4:r=A[a+8>>2],(0|(e=C[f+17|0]))==2|!C[f+20|0]&(0|e)==3||(B[a>>1]=8192|y[a>>1]),2&C[r+7|0]&&(A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,V0(0,1,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[E>>2]=A[t+640>>2],A[36424]<0&&(s=C[f+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=s,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,b=C[f+22|0],s=C[f+21|0],f=A[129280+(C[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(c=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=c),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,b|=s<<16,s=(0|s)==255,A[e+12>>2]=s?3604556:b,A[e+8>>2]=s?m:f,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),J0(r,0,t+48|0,a,0)),V0(0,0,a,t+552|0,145784),A[t+552>>2]=4|A[t+552>>2],(0|(e=A[36440]))<=0||(0|(r=A[36424]))<0||(A[(r=216192+(r<<4)|0)+4>>2]||(A[r+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],w2(),A[36427]=-1,A[36422]=0,(e=A[t+624>>2])&&(s=e,e=A[t+644>>2],xr(s,2,A[t+596>>2]<<1,A[t+552>>2],0,e?(e<<5)/100|0:32)),A[36426]=0;break r;case 6:V0(0,0,a,t+552|0,145784),8&C[0|a]&&(e=A[a+12>>2],(0|(r=A[36440]))<=0||(0|(s=A[36424]))<0||(A[(s=216192+(s<<4)|0)+4>>2]||(A[s+4>>2]=r),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],w2(),A[36427]=-1,A[36422]=0,(r=A[t+624>>2])&&(s=e,e=A[t+644>>2],xr(r,2,A[t+596>>2]<<1,A[t+552>>2],s,e?(e<<5)/100|0:32))),e=A[a+12>>2],(0|(r=A[36440]))<=0||(0|(s=A[36424]))<0||(A[(s=216192+(s<<4)|0)+4>>2]||(A[s+4>>2]=r),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],w2(),A[36427]=-1,A[36422]=0,(r=A[t+624>>2])&&(s=e,e=A[t+644>>2],xr(r,2,A[t+596>>2]<<1,A[t+552>>2],s,e?(e<<5)/100|0:32)),A[36426]=0;break r;case 5:s=A[a+8>>2],A[Y+40>>2]=0,A[(e=Y)+32>>2]=0,A[e+36>>2]=0,A[e+24>>2]=0,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e+8>>2]=0,A[e+12>>2]=0,A[e>>2]=0,A[e+4>>2]=0,A[t+48>>2]=4;o:{f:{u:{g:switch(C[f+17|0]-2|0){case 0:r=C[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=C[a+22|0],c=C[a+21|0],b=A[129280+(C[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(g=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=g),e=(g=!(255&~c))?m:b,b=1;break f;case 1:break g;default:break u}if(!C[f+20|0]){r=C[f+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=C[f+22|0],c=C[f+21|0],b=A[129280+(C[f+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(g=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=g),e=(g=!(255&~c))?m:b,b=1;break f}}if(b=0,A[36424]>=0)break o;r=C[f+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,r=C[a+22|0],c=C[a+21|0],b=A[129280+(C[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(g=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=g),e=(g=!(255&~c))?m:b,b=0}v=A[50758],A[36424]=v,A[36440]=0,A[(v=216192+(v<<4)|0)>>2]=9,A[v+4>>2]=0,A[v+12>>2]=g?3604556:255&r|(255&c)<<16,A[v+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}o:if(!(2&C[s+7|0])&C[n+17|0]!=2)8&C[0|a]&&Ge(50,0);else{if(V0(0,1,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],J0(s,0,t+48|0,a,0),!(8&C[0|a]))break o;Ge(25,1),J0(s,0,t+48|0,a,0)}o:if(b){if(A[36455]!=A[36454])break o;A[36455]=A[50758]}else B[a>>1]=8192|y[a>>1];if(V0(0,0,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+76>>2]=A[t+636>>2],A[t+80>>2]=A[t+656>>2],J0(s,0,t+48|0,a,0),C[a+20|0]|C[84+(145840+(I<<5)|0)|0]||((0|(e=C[f+17|0]))==7&&(Ge(20,0),e=C[f+17|0]),(255&e)!=6))break r;Ge(12,0);break r;case 7:o:{f:{u:{g:{n:switch((e=C[f+17|0])-2|0){case 1:break g;case 0:break n;default:break u}r=C[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,b=C[a+22|0],e=C[a+21|0],s=A[129280+(C[a+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(c=A[36440]))<=0||A[(r=216192+(r<<4)|0)+4>>2]||(A[r+4>>2]=c),r=(c=!(255&~e))?m:s;break f}r=C[f+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,b=C[f+22|0],e=C[f+21|0],s=A[129280+(C[f+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(c=A[36440]))<=0||A[(r=216192+(r<<4)|0)+4>>2]||(A[r+4>>2]=c),r=(c=!(255&~e))?m:s;break f}if(A[36424]>=0)break o;r=C[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,b=C[a+22|0],e=C[a+21|0],s=A[129280+(C[a+16|0]<<2)>>2],(0|(r=A[36424]))<0|(0|(c=A[36440]))<=0||A[(r=216192+(r<<4)|0)+4>>2]||(A[r+4>>2]=c),r=(c=!(255&~e))?m:s}s=A[50758],A[36424]=s,A[36440]=0,A[(s=216192+(s<<4)|0)>>2]=9,A[s+4>>2]=0,A[s+12>>2]=c?3604556:(255&e)<<16|b,A[s+8>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,e=C[f+17|0]}o:{f:{u:switch((255&e)-2|0){case 1:if(C[f+20|0])break f;break;case 0:break u;default:break f}if(A[36455]!=A[36454])break o;A[36455]=A[50758];break o}B[a>>1]=8192|y[a>>1]}V0(0,0,a,t+552|0,145784),A[t+56>>2]=0,A[t+60>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[t+88>>2]=0,A[t+56>>2]=A[t+620>>2],A[E>>2]=A[t+640>>2],A[t+80>>2]=A[t+656>>2],A[t+48>>2]=0,A[t+52>>2]=0,A[t+76>>2]=A[t+636>>2],A[t+92>>2]=A[t+596>>2]<<1,8&C[0|a]&&J0(A[a+8>>2],0,t+48|0,a,0),J0(A[a+8>>2],0,t+48|0,a,0);break r;case 8:if(A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,1&l[0|a]||(r=C[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,s=C[a+22|0],r=C[a+21|0],b=A[129280+(C[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(c=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=c),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,s|=r<<16,r=(0|r)==255,A[e+12>>2]=r?3604556:s,A[e+8>>2]=r?m:b,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),C[n+17|0]==8&&(A[36426]=0),V0(0,0,a,t+552|0,145784),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+92>>2]=A[t+596>>2]<<1,C[f+17|0]==2){A[36455]==A[36454]&&(A[36455]=A[50758]),J0(A[a+8>>2],0,t+48|0,a,0);break r}if(!(!(1&l[0|a])|C[n+17|0]!=2)){J0(A[a+8>>2],0,t+48|0,a,0);break r}A[36426]=0,J0(A[a+8>>2],0,t+48|0,a,0),A[36426]=0;break r;case 3:A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,s=A[A[a+8>>2]+4>>2],1&l[0|a]||(r=C[a+19|0],e=A[50758],A[36425]=e,A[36441]=0,A[(e=216192+(e<<4)|0)+12>>2]=r,A[e+8>>2]=0,A[e>>2]=8,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,b=C[a+22|0],r=C[a+21|0],c=A[129280+(C[a+16|0]<<2)>>2],(0|(e=A[36424]))<0|(0|(g=A[36440]))<=0||A[(e=216192+(e<<4)|0)+4>>2]||(A[e+4>>2]=g),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,b|=r<<16,r=(0|r)==255,A[e+12>>2]=r?3604556:b,A[e+8>>2]=r?m:c,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),C[n+17|0]==8&&(A[36426]=0),C[f+17|0]!=2|A[36455]!=A[36454]||(A[36455]=A[50758]),V0(0,0,a,t+552|0,145784),(0|(e=A[t+584>>2]-C[a+18|0]|0))>0&&Ge(e,1),A[t+56>>2]=A[t+620>>2],A[t+64>>2]=A[t+640>>2],A[t+76>>2]=A[t+636>>2],A[t+80>>2]=A[t+656>>2],A[t+92>>2]=A[t+596>>2]<<1,J0(A[a+8>>2],0,t+48|0,a,s<<24>>31&5);break r;case 2:break s;default:break r}c=A[a+8>>2]}I=C[a+3|0],A[t+88>>2]=0,A[t+92>>2]=0,A[t+80>>2]=0,A[t+84>>2]=0,A[t+72>>2]=0,A[t+76>>2]=0,A[E>>2]=0,A[E+4>>2]=0,A[t+56>>2]=0,A[t+60>>2]=0,A[t+48>>2]=0,A[t+52>>2]=0,V0(0,0,a,t+552|0,145784),e=A[t+628>>2],A[t+56>>2]=e,A[t+92>>2]=A[t+596>>2]<<1;i:{if(!e||(g=0,s=J,r=U,2&C[t+552|0])){if(C[n+17|0]?(g=0,V0(0,0,n,t+400|0,0),e=A[t+476>>2],A[t+56>>2]=e,!e|!(2&C[t+400|0])||(A[t+72>>2]=A[t+496>>2],g=1),r=A[t+512>>2],A[t+84>>2]=A[t+508>>2],A[t+88>>2]=r):g=0,e)break i;A[t+48>>2]=1,A[t+52>>2]=1,s=$,r=q}A[r>>2]=A[s>>2]}A[t+64>>2]=A[t+640>>2],r=C[a+16|0],e=0,(s=C[a+7|0])?(pi(s,t+96|0),r=Di(A[t+220>>2]),(0|(s=A[t+224>>2]))<=0||(e=Di(s))):r=A[129280+(r<<2)>>2],A[36455]==A[36454]&&(A[36455]=A[50758]),s=(s=15&I)>>>0<2?1:s>>>0>6?3:2;i:{s:switch(C[n+17|0]-3|0){case 2:case 4:g=C[a+19|0],n=A[50758],A[36425]=n,A[36441]=0,A[(n=216192+(n<<4)|0)+12>>2]=g,A[n+8>>2]=e,A[n>>2]=8,A[n+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,g=C[a+22|0],n=C[a+21|0],(0|(e=A[36440]))<=0||(0|(I=A[36424]))<0||A[(I=216192+(I<<4)|0)+4>>2]||(A[I+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,g|=n<<16,n=(0|n)==255,A[e+12>>2]=n?3604556:g,A[e+8>>2]=n?m:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,J0(c,1,t+48|0,a,s);break i;case 0:case 5:g=C[a+19|0],n=A[50758],A[36425]=n,A[36441]=0,A[(n=216192+(n<<4)|0)+12>>2]=g,A[n+8>>2]=e,A[n>>2]=8,A[n+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,J0(c,1,t+48|0,a,s),g=C[a+22|0],n=C[a+21|0],(0|(e=A[36440]))<=0||(0|(I=A[36424]))<0||A[(I=216192+(I<<4)|0)+4>>2]||(A[I+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,g|=n<<16,n=(0|n)==255,A[e+12>>2]=n?3604556:g,A[e+8>>2]=n?m:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0;break i;default:break s}g?(g=C[a+22|0],(0|(n=A[36440]))<=0||(0|(I=A[36424]))<0||A[(I=216192+(I<<4)|0)+4>>2]||(A[I+4>>2]=n),n=A[50758],A[36424]=n,A[36440]=0,A[(n=216192+(n<<4)|0)>>2]=9,A[n+4>>2]=0,A[n+12>>2]=(g|g<<16)-983040,A[n+8>>2]=L,n=A[50758]+1|0,A[50758]=(0|n)<=169?n:0,g=C[a+19|0],n=A[50758],A[36425]=n,A[36441]=0,A[(n=216192+(n<<4)|0)>>2]=8,A[n+4>>2]=0,A[n+12>>2]=g-1,A[n+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,J0(c,1,t+48|0,a,s),n=C[a+21|0],g=C[a+22|0],(0|(e=A[36440]))<=0||(0|(I=A[36424]))<0||A[(I=216192+(I<<4)|0)+4>>2]||(A[I+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,g|=n<<16,n=(0|n)==255,A[e+12>>2]=n?3604556:g,A[e+8>>2]=n?m:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0):(1&l[0|a]||(g=C[a+19|0],n=A[50758],A[36425]=n,A[36441]=0,A[(n=216192+(n<<4)|0)+12>>2]=g,A[n+8>>2]=e,A[n>>2]=8,A[n+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,g=C[a+22|0],n=C[a+21|0],(0|(e=A[36440]))<=0||(0|(I=A[36424]))<0||A[(I=216192+(I<<4)|0)+4>>2]||(A[I+4>>2]=e),e=A[50758],A[36424]=e,A[36440]=0,A[(e=216192+(e<<4)|0)>>2]=9,A[e+4>>2]=0,g|=n<<16,n=(0|n)==255,A[e+12>>2]=n?3604556:g,A[e+8>>2]=n?m:r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),J0(c,1,t+48|0,a,s))}!A[47198]|1^b||(B2(t+704|0,A[a+8>>2],a,D,0),(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))<6||(r=A[36445],e=216192+(A[50758]<<4)|0,A[e>>2]=1802,A[e+4>>2]=16777215&r,r=A[t+708>>2],A[e+8>>2]=A[t+704>>2],A[e+12>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)),A[t+56>>2]=A[t+620>>2],A[t+84>>2]=0,A[t+88>>2]=0,A[t+64>>2]=A[t+640>>2],r=A[t+632>>2],A[t+68>>2]=r,e=R;i:{if(!r&&(!C[f+17|0]||(A[t+72>>2]=0,V0(0,0,f,t+248|0,0),A[t+52>>2]=1,e=A[t+368>>2],A[t+84>>2]=A[t+364>>2],A[t+88>>2]=e,r=A[t+328>>2],A[t+68>>2]=r,e=O,!r)))break i;A[t+72>>2]=A[e>>2]}J0(c,2,t+48|0,a,s)}if(e=A[36442]+1|0,A[36442]=e,(0|e)>997)break e;if(!(A[36423]>(0|e)))break}(0|(e=A[36440]))<=0||(0|(r=A[36424]))<0||(A[(r=216192+(r<<4)|0)+4>>2]||(A[r+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],w2(),A[36427]=-1,e=0,A[36423]<=0||(r=A[47568],s=A[33284],(0|((0|(e=A[50757]-A[50758]|0))<=0?e+170:e))>=6&&(e=216192+(A[50758]<<4)|0,A[e>>2]=1290,A[e+8>>2]=r,A[e+4>>2]=16777215&s,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),A[36423]=0,e=0)}return F=t+720|0,e}function p8(e,t,r,a){var s,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0;F=s=F-48|0;A:{if(r>>>0<=2){for(iA=A[(r<<=2)+124732>>2],fA=A[r+124720>>2];(0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r]),(0|r)==32|r-9>>>0<5;);v=1;e:{r:switch(r-43|0){case 0:case 2:break r;default:break e}v=(0|r)==45?-1:1,(0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r])}e:{r:{for(;;){if(l[f+84056|0]==(32|r)){if(f>>>0>6||((0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r])),(0|(f=f+1|0))!=8)continue;break r}break}if((0|f)!=3){if((0|f)==8)break r;if(!a|f>>>0<4)break e;if((0|f)==8)break r}if((0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1),!(!a|f>>>0<4))for(r=(0|r)<0;r||(A[t+4>>2]=A[t+4>>2]-1),(f=f-1|0)>>>0>3;);}F=m=F-16|0,X(wA(wA(0|v)*wA(1/0))),(t=2147483647&(c=M(2)))-8388608>>>0<=2130706431?(r=t,r<<=25,a=(t=t>>>7|0)+1065353216|0):(r=c<<25,a=c>>>7|2147418112,t>>>0>=2139095040||(r=0,a=0,t&&(T0(m,r=t,0,0,0,(t=oA(t))+81|0),b=A[m>>2],I=A[m+4>>2],r=A[m+8>>2],a=65536^A[m+12>>2]|16265-t<<16))),A[s>>2]=b,A[s+4>>2]=I,A[s+8>>2]=r,A[s+12>>2]=-2147483648&c|a,F=m+16|0,b=A[s+8>>2],I=A[s+12>>2],c=A[s>>2],E=A[s+4>>2];break A}e:{r:{i:if(!f){for(f=0;;){if(l[f+84473|0]!=(32|r))break i;if(f>>>0>1||((0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r])),(0|(f=f+1|0))==3)break}break r}i:switch(0|f){case 0:if((0|r)==48){if((0|(f=A[t+4>>2]))==A[t+104>>2]?f=WA(t):(A[t+4>>2]=f+1,f=C[0|f]),(-33&f)==88){F=g=F-432|0,(0|(r=A[t+4>>2]))==A[t+104>>2]?f=WA(t):(A[t+4>>2]=r+1,f=C[0|r]);s:{o:{for(;;){if((0|f)!=48){if((0|f)!=46)break s;if((0|(r=A[t+4>>2]))!=A[t+104>>2]){A[t+4>>2]=r+1,f=C[0|r];break o}break}(0|(r=A[t+4>>2]))!=A[t+104>>2]?(tA=1,A[t+4>>2]=r+1,f=C[0|r]):(tA=1,f=WA(t))}f=WA(t)}if(O=1,(0|f)==48){for(;R=(r=R)-1|0,L=L-!r|0,(0|(r=A[t+4>>2]))==A[t+104>>2]?f=WA(t):(A[t+4>>2]=r+1,f=C[0|r]),(0|f)==48;);tA=1}}for(E=1073676288;;){s:{r=32|f;o:{if(!((bA=f-48|0)>>>0<10)){if((0|f)!=46&r-97>>>0>=6)break s;if((0|f)==46){if(O)break s;O=1,R=b,L=I;break o}}r=(0|f)>57?r-87|0:bA,(0|I)<=0&b>>>0<=7|(0|I)<0?n=r+(n<<4)|0:!I&b>>>0<=28?(re(g+48|0,r),_A(g+32|0,$,AA,c,E,0,0,0,1073414144),$=A[g+32>>2],AA=A[g+36>>2],c=A[g+40>>2],E=A[g+44>>2],_A(g+16|0,A[g+48>>2],A[g+52>>2],A[g+56>>2],A[g+60>>2],$,AA,c,E),j0(g,A[g+16>>2],A[g+20>>2],A[g+24>>2],A[g+28>>2],m,Y,J,q),J=A[g+8>>2],q=A[g+12>>2],m=A[g>>2],Y=A[g+4>>2]):D|!r||(_A(g+80|0,$,AA,c,E,0,0,0,1073610752),j0(g- -64|0,A[g+80>>2],A[g+84>>2],A[g+88>>2],A[g+92>>2],m,Y,J,q),J=A[g+72>>2],q=A[g+76>>2],D=1,m=A[g+64>>2],Y=A[g+68>>2]),I=(b=b+1|0)?I:I+1|0,tA=1}(0|(r=A[t+4>>2]))!=A[t+104>>2]?(A[t+4>>2]=r+1,f=C[0|r]):f=WA(t);continue}break}s:if(tA){if((0|I)<=0&b>>>0<=7|(0|I)<0)for(c=b,E=I;n<<=4,(0|(c=c+1|0))!=8|(E=c?E:E+1|0););o:{f:{u:{if((-33&f)==80){if(c=T8(t,a),E=r=_,c|(0|r)!=-2147483648)break o;if(a){if((0|(r=A[t+116>>2]))>0|(0|r)>=0)break u;break f}m=0,Y=0,Be(t,0,0),r=0,t=0;break s}if(c=0,E=0,A[t+116>>2]<0)break o}A[t+4>>2]=A[t+4>>2]-1}c=0,E=0}if(n)if(r=c+((t=O?R:b)<<2)|0,t=(I=(O?L:I)<<2|t>>>30)+E|0,(b=r-32|0)>>>0>0-iA>>>0&(0|(t=I=(r>>>0<c>>>0?t+1|0:t)-(r>>>0<32)|0))>=0|(0|t)>0)A[56798]=68,re(g+160|0,v),_A(g+144|0,A[g+160>>2],A[g+164>>2],A[g+168>>2],A[g+172>>2],-1,-1,-1,2147418111),_A(g+128|0,A[g+144>>2],A[g+148>>2],A[g+152>>2],A[g+156>>2],-1,-1,-1,2147418111),m=A[g+128>>2],Y=A[g+132>>2],r=A[g+140>>2],t=A[g+136>>2];else if((0|I)>=(0|(r=(t=iA-226|0)>>31))&t>>>0<=b>>>0|(0|r)<(0|I)){if((0|n)>=0)for(;j0(g+416|0,m,Y,J,q,0,0,0,-1073807360),j0(g+400|0,m,Y,J,q,(t=r=(0|(t=tl(m,Y,J,q,1073610752)))>=0)?A[g+416>>2]:m,t?A[g+420>>2]:Y,t?A[g+424>>2]:J,t?A[g+428>>2]:q),b=(t=b)-1|0,I=I-!t|0,J=A[g+408>>2],q=A[g+412>>2],m=A[g+400>>2],Y=A[g+404>>2],(0|(n=r|n<<1))>=0;);t=I-((iA>>31)+(b>>>0<iA>>>0)|0)|0,(0|(r=(r=32+(b-iA|0)|0)>>>0<fA>>>0&(0|(t=r>>>0<32?t+1|0:t))<=0|(0|t)<0?(0|r)>0?r:0:fA))>=113?(re(g+384|0,v),R=A[g+392>>2],L=A[g+396>>2],$=A[g+384>>2],AA=A[g+388>>2],c=0,t=0):(Qe(g+352|0,Q2(1,144-r|0)),re(g+336|0,v),$=A[g+336>>2],AA=A[g+340>>2],R=A[g+344>>2],L=A[g+348>>2],Ql(g+368|0,A[g+352>>2],A[g+356>>2],A[g+360>>2],A[g+364>>2],$,AA,R,L),U=A[g+376>>2],pA=A[g+380>>2],c=A[g+372>>2],t=A[g+368>>2]),q2(g+320|0,(a=!(1&n)&!!(0|x2(m,Y,J,q,0,0,0,0))&(0|r)<32)+n|0),_A(g+304|0,$,AA,R,L,A[g+320>>2],A[g+324>>2],A[g+328>>2],A[g+332>>2]),r=t,j0(g+272|0,A[g+304>>2],A[g+308>>2],A[g+312>>2],A[g+316>>2],t,c,U,pA),_A(g+288|0,$,AA,R,L,(t=a)?0:m,t?0:Y,t?0:J,t?0:q),j0(g+256|0,A[g+288>>2],A[g+292>>2],A[g+296>>2],A[g+300>>2],A[g+272>>2],A[g+276>>2],A[g+280>>2],A[g+284>>2]),wi(g+240|0,A[g+256>>2],A[g+260>>2],A[g+264>>2],A[g+268>>2],r,c,U,pA),x2(t=A[g+240>>2],a=A[g+244>>2],r=A[g+248>>2],c=A[g+252>>2],0,0,0,0)||(A[56798]=68),V8(g+224|0,t,a,r,c,b),m=A[g+224>>2],Y=A[g+228>>2],r=A[g+236>>2],t=A[g+232>>2]}else A[56798]=68,re(g+208|0,v),_A(g+192|0,A[g+208>>2],A[g+212>>2],A[g+216>>2],A[g+220>>2],0,0,0,65536),_A(g+176|0,A[g+192>>2],A[g+196>>2],A[g+200>>2],A[g+204>>2],0,0,0,65536),m=A[g+176>>2],Y=A[g+180>>2],r=A[g+188>>2],t=A[g+184>>2];else Qe(g+112|0,0*+(0|v)),m=A[g+112>>2],Y=A[g+116>>2],r=A[g+124>>2],t=A[g+120>>2]}else{o:{f:{if((0|(r=A[t+116>>2]))>0|(0|r)>=0){if(r=A[t+4>>2],A[t+4>>2]=r-1,!a)break f;if(A[t+4>>2]=r-2,!O)break o;A[t+4>>2]=r-3;break o}if(a)break o}Be(t,0,0)}Qe(g+96|0,0*+(0|v)),m=A[g+96>>2],Y=A[g+100>>2],r=A[g+108>>2],t=A[g+104>>2]}A[s+16>>2]=m,A[s+20>>2]=Y,A[s+24>>2]=t,A[s+28>>2]=r,F=g+432|0,b=A[s+24>>2],I=A[s+28>>2],c=A[s+16>>2],E=A[s+20>>2];break A}A[t+116>>2]<0||(A[t+4>>2]=A[t+4>>2]-1)}f=t,U=v,g=a,t=0,v=0,F=n=F-8976|0,pA=(bA=0-iA|0)-fA|0;s:{o:{for(;;){if((0|r)!=48){if((0|r)!=46)break s;if((0|(r=A[f+4>>2]))!=A[f+104>>2]){A[f+4>>2]=r+1,r=C[0|r];break o}break}(0|(t=A[f+4>>2]))!=A[f+104>>2]?(A[f+4>>2]=t+1,r=C[0|t]):r=WA(f),t=1}r=WA(f)}if(D=1,(0|r)==48){for(;b=(t=b)-1|0,I=I-!t|0,(0|(t=A[f+4>>2]))==A[f+104>>2]?r=WA(f):(A[f+4>>2]=t+1,r=C[0|t]),(0|r)==48;);t=1}}A[n+784>>2]=0;s:{o:{f:{u:{g:{if((a=(0|r)==46)|(m=r-48|0)>>>0<=9)for(;;){n:{if(1&a){if(!D){b=c,I=E,D=1;break n}a=!t;break g}E=(c=c+1|0)?E:E+1|0,(0|v)<=2044?(tA=(0|r)==48?tA:c,t=(n+784|0)+(v<<2)|0,O&&(m=(T(A[t>>2],10)+r|0)-48|0),A[t>>2]=m,t=1,O=(r=(0|(a=O+1|0))==9)?0:a,v=r+v|0):(0|r)!=48&&(A[n+8960>>2]=1|A[n+8960>>2],tA=18396)}if((0|(r=A[f+4>>2]))==A[f+104>>2]?r=WA(f):(A[f+4>>2]=r+1,r=C[0|r]),!((a=(0|r)==46)|(m=r-48|0)>>>0<10))break}if(b=D?b:c,I=D?I:E,!(!t|(-33&r)!=69)){if(m=T8(f,g),Y=t=_,!(m|(0|t)!=-2147483648)){if(!g)break f;m=0,Y=0,A[f+116>>2]<0||(A[f+4>>2]=A[f+4>>2]-1)}I=I+Y|0,I=(b=b+m|0)>>>0<m>>>0?I+1|0:I;break o}if(a=!t,(0|r)<0)break u}A[f+116>>2]<0||(A[f+4>>2]=A[f+4>>2]-1)}if(!a)break o;A[56798]=28}c=0,E=0,Be(f,0,0),r=0,t=0;break s}if(t=A[n+784>>2])if(c>>>0>9&(0|E)>=0|(0|E)>0|(0|c)!=(0|b)|(0|I)!=(0|E)|(t>>>fA|0?(0|fA)<=30:0))if(b>>>0>bA>>>1>>>0&(0|I)>=0|(0|I)>0)A[56798]=68,re(n+96|0,U),_A(n+80|0,A[n+96>>2],A[n+100>>2],A[n+104>>2],A[n+108>>2],-1,-1,-1,2147418111),_A(n- -64|0,A[n+80>>2],A[n+84>>2],A[n+88>>2],A[n+92>>2],-1,-1,-1,2147418111),c=A[n+64>>2],E=A[n+68>>2],r=A[n+76>>2],t=A[n+72>>2];else if((r=b>>>0<(t=iA-226|0)>>>0)&(0|I)<=(0|(t>>=31))|(0|t)>(0|I))A[56798]=68,re(n+144|0,U),_A(n+128|0,A[n+144>>2],A[n+148>>2],A[n+152>>2],A[n+156>>2],0,0,0,65536),_A(n+112|0,A[n+128>>2],A[n+132>>2],A[n+136>>2],A[n+140>>2],0,0,0,65536),c=A[n+112>>2],E=A[n+116>>2],r=A[n+124>>2],t=A[n+120>>2];else{if(O){if((0|O)<=8){for(f=A[(t=(n+784|0)+(v<<2)|0)>>2];f=T(f,10),(0|(O=O+1|0))!=9;);A[t>>2]=f}v=v+1|0}if(D=b,!((0|tA)>(0|b)|(0|tA)>=9|(0|b)>17)){if((0|D)==9){re(n+192|0,U),q2(n+176|0,A[n+784>>2]),_A(n+160|0,A[n+192>>2],A[n+196>>2],A[n+200>>2],A[n+204>>2],A[n+176>>2],A[n+180>>2],A[n+184>>2],A[n+188>>2]),c=A[n+160>>2],E=A[n+164>>2],r=A[n+172>>2],t=A[n+168>>2];break s}if((0|D)<=8){re(n+272|0,U),q2(n+256|0,A[n+784>>2]),_A(n+240|0,A[n+272>>2],A[n+276>>2],A[n+280>>2],A[n+284>>2],A[n+256>>2],A[n+260>>2],A[n+264>>2],A[n+268>>2]),re(n+224|0,A[124720+(0-D<<2)>>2]),h8(n+208|0,A[n+240>>2],A[n+244>>2],A[n+248>>2],A[n+252>>2],A[n+224>>2],A[n+228>>2],A[n+232>>2],A[n+236>>2]),c=A[n+208>>2],E=A[n+212>>2],r=A[n+220>>2],t=A[n+216>>2];break s}if(t=27+(T(D,-3)+fA|0)|0,!((r=A[n+784>>2])>>>t|0&&(0|t)<=30)){re(n+352|0,U),q2(n+336|0,r),_A(n+320|0,A[n+352>>2],A[n+356>>2],A[n+360>>2],A[n+364>>2],A[n+336>>2],A[n+340>>2],A[n+344>>2],A[n+348>>2]),re(n+304|0,A[124648+(D<<2)>>2]),_A(n+288|0,A[n+320>>2],A[n+324>>2],A[n+328>>2],A[n+332>>2],A[n+304>>2],A[n+308>>2],A[n+312>>2],A[n+316>>2]),c=A[n+288>>2],E=A[n+292>>2],r=A[n+300>>2],t=A[n+296>>2];break s}}for(;!A[(n+784|0)+((v=(r=v)-1|0)<<2)>>2];);if(O=0,t=(0|D)%9|0){if(a=0,t=(0|D)<0?t+9|0:t,r){for(I=1e9/(0|(b=A[124720+(0-t<<2)>>2]))|0,m=0,f=0;c=(c=m)+(v=((E=A[(m=(n+784|0)+(f<<2)|0)>>2])>>>0)/(b>>>0)|0)|0,A[m>>2]=c,a=(c=!c&(0|a)==(0|f))?a+1&2047:a,D=c?D-9|0:D,m=T(I,E-T(b,v)|0),(0|(f=f+1|0))!=(0|r););m&&(A[(n+784|0)+(r<<2)>>2]=m,r=r+1|0)}else r=0;D=9+(D-t|0)|0}else a=0;for(;;){f=(n+784|0)+(a<<2)|0;o:{for(;;){if(((0|D)!=36|aA[f>>2]>=10384593)&(0|D)>=36)break o;for(v=r+2047|0,m=0,t=r;r=t,b=m,m=(t=A[(v=(n+784|0)+((c=2047&v)<<2)|0)>>2])<<29,t=E=t>>>3|0,!(I=(b=b+m|0)>>>0<m>>>0?t+1|0:t)&b>>>0<1000000001?m=0:b=(t=b)-DA(m=Oi(t,I,1e9),_,1e9,0)|0,A[v>>2]=b,t=(0|c)!=(r-1&2047)||(0|a)==(0|c)||b?r:c,v=c-1|0,(0|a)!=(0|c););if(O=O-29|0,m)break}(0|(a=a-1&2047))==(0|t)&&(f=r=(b=n+784|0)+((t+2046&2047)<<2)|0,I=A[r>>2],r=t-1&2047,A[f>>2]=I|A[b+(r<<2)>>2]),D=D+9|0,A[(n+784|0)+(a<<2)>>2]=m;continue}break}o:{f:for(;;){for(b=r+1&2047,m=(n+784|0)+((r-1&2047)<<2)|0;;){c=(0|D)>45?9:1;u:{for(;;){t=a,f=0;g:{for(;;){if((0|(a=t+f&2047))!=(0|r)&&!((a=A[(n+784|0)+(a<<2)>>2])>>>0<(I=A[124672+(f<<2)>>2])>>>0)){if(a>>>0>I>>>0)break g;if((0|(f=f+1|0))!=4)continue}break}if((0|D)==36){for(b=0,I=0,f=0,c=0,E=0;(0|(a=t+f&2047))==(0|r)&&(A[780+(n+((r=r+1&2047)<<2)|0)>>2]=0),q2(n+768|0,A[(n+784|0)+(a<<2)>>2]),_A(n+752|0,b,I,c,E,0,0,1342177280,1075633366),j0(n+736|0,A[n+752>>2],A[n+756>>2],A[n+760>>2],A[n+764>>2],A[n+768>>2],A[n+772>>2],A[n+776>>2],A[n+780>>2]),c=A[n+744>>2],E=A[n+748>>2],b=A[n+736>>2],I=A[n+740>>2],(0|(f=f+1|0))!=4;);if(re(n+720|0,U),_A(n+704|0,b,I,c,E,A[n+720>>2],A[n+724>>2],A[n+728>>2],A[n+732>>2]),c=A[n+712>>2],E=A[n+716>>2],b=0,I=0,m=A[n+704>>2],Y=A[n+708>>2],(0|(a=(v=(0|(f=(g=O+113|0)-iA|0))<(0|fA))?(0|f)>0?f:0:fA))<=112)break u;break o}}if(O=c+O|0,a=r,(0|t)!=(0|r))break}for(E=1e9>>>c|0,v=~(-1<<c),f=0,a=t;I=(I=f)+((g=A[(f=(n+784|0)+(t<<2)|0)>>2])>>>c|0)|0,A[f>>2]=I,a=(I=!I&(0|t)==(0|a))?a+1&2047:a,D=I?D-9|0:D,f=T(E,g&v),(0|r)!=(0|(t=t+1&2047)););if(!f)continue;if((0|a)!=(0|b)){A[(n+784|0)+(r<<2)>>2]=f,r=b;continue f}A[m>>2]=1|A[m>>2];continue}break}break}Qe(n+656|0,Q2(1,225-a|0)),Ql(n+688|0,A[n+656>>2],A[n+660>>2],A[n+664>>2],A[n+668>>2],m,Y,c,E),$=A[n+696>>2],AA=A[n+700>>2],J=A[n+688>>2],q=A[n+692>>2],Qe(n+640|0,Q2(1,113-a|0)),D8(n+672|0,m,Y,c,E,A[n+640>>2],A[n+644>>2],A[n+648>>2],A[n+652>>2]),wi(n+624|0,m,Y,c,E,b=A[n+672>>2],I=A[n+676>>2],R=A[n+680>>2],L=A[n+684>>2]),j0(n+608|0,J,q,$,AA,A[n+624>>2],A[n+628>>2],A[n+632>>2],A[n+636>>2]),c=A[n+616>>2],E=A[n+620>>2],m=A[n+608>>2],Y=A[n+612>>2]}if((0|(D=t+4&2047))!=(0|r)){o:if((D=A[(n+784|0)+(D<<2)>>2])>>>0<=499999999){if(!D&(t+5&2047)==(0|r))break o;Qe(n+496|0,.25*+(0|U)),j0(n+480|0,b,I,R,L,A[n+496>>2],A[n+500>>2],A[n+504>>2],A[n+508>>2]),R=A[n+488>>2],L=A[n+492>>2],b=A[n+480>>2],I=A[n+484>>2]}else(0|D)==5e8?(GA=+(0|U),(t+5&2047)!=(0|r)?(Qe(n+560|0,.75*GA),j0(n+544|0,b,I,R,L,A[n+560>>2],A[n+564>>2],A[n+568>>2],A[n+572>>2]),R=A[n+552>>2],L=A[n+556>>2],b=A[n+544>>2],I=A[n+548>>2]):(Qe(n+528|0,.5*GA),j0(n+512|0,b,I,R,L,A[n+528>>2],A[n+532>>2],A[n+536>>2],A[n+540>>2]),R=A[n+520>>2],L=A[n+524>>2],b=A[n+512>>2],I=A[n+516>>2])):(Qe(n+592|0,.75*+(0|U)),j0(n+576|0,b,I,R,L,A[n+592>>2],A[n+596>>2],A[n+600>>2],A[n+604>>2]),R=A[n+584>>2],L=A[n+588>>2],b=A[n+576>>2],I=A[n+580>>2]);(0|a)>111||(D8(n+464|0,b,I,R,L,0,0,0,1073676288),x2(A[n+464>>2],A[n+468>>2],A[n+472>>2],A[n+476>>2],0,0,0,0)||(j0(n+448|0,b,I,R,L,0,0,0,1073676288),R=A[n+456>>2],L=A[n+460>>2],b=A[n+448>>2],I=A[n+452>>2]))}j0(n+432|0,m,Y,c,E,b,I,R,L),wi(n+416|0,A[n+432>>2],A[n+436>>2],A[n+440>>2],A[n+444>>2],J,q,$,AA),c=A[n+424>>2],E=A[n+428>>2],m=A[n+416>>2],Y=A[n+420>>2],(pA-2|0)>=(2147483647&g)||(A[n+408>>2]=c,A[n+412>>2]=2147483647&E,A[n+400>>2]=m,A[n+404>>2]=Y,_A(n+384|0,m,Y,c,E,0,0,0,1073610752),c=(t=(0|(t=tl(A[n+400>>2],A[n+404>>2],A[n+408>>2],A[n+412>>2],1081081856)))>=0)?A[n+392>>2]:c,E=t?A[n+396>>2]:E,m=t?A[n+384>>2]:m,Y=t?A[n+388>>2]:Y,O=t+O|0,!(!!(0|x2(b,I,R,L,0,0,0,0))&(t?v&(0|a)!=(0|f):v))&(O+110|0)<=(0|pA)||(A[56798]=68)),V8(n+368|0,m,Y,c,E,O),c=A[n+368>>2],E=A[n+372>>2],r=A[n+380>>2],t=A[n+376>>2]}else re(n+48|0,U),q2(n+32|0,t),_A(n+16|0,A[n+48>>2],A[n+52>>2],A[n+56>>2],A[n+60>>2],A[n+32>>2],A[n+36>>2],A[n+40>>2],A[n+44>>2]),c=A[n+16>>2],E=A[n+20>>2],r=A[n+28>>2],t=A[n+24>>2];else Qe(n,0*+(0|U)),c=A[n>>2],E=A[n+4>>2],r=A[n+12>>2],t=A[n+8>>2]}A[s+40>>2]=t,A[s+44>>2]=r,A[s+32>>2]=c,A[s+36>>2]=E,F=n+8976|0,b=A[s+40>>2],I=A[s+44>>2],c=A[s+32>>2],E=A[s+36>>2];break A;case 3:break r;default:break i}(0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1);break e}if((0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r]),(0|r)!=40){if(I=2147450880,A[t+116>>2]<0)break A;A[t+4>>2]=A[t+4>>2]-1;break A}for(f=1;(0|(r=A[t+4>>2]))==A[t+104>>2]?r=WA(t):(A[t+4>>2]=r+1,r=C[0|r]),r-48>>>0<10|r-65>>>0<26|(0|r)==95||!(r-97>>>0>=26);)f=f+1|0;if(I=2147450880,(0|r)==41)break A;(0|(r=A[t+116>>2]))>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1);r:{if(a){if(f)break r;break A}break e}for(;f=f-1|0,(0|r)>0|(0|r)>=0&&(A[t+4>>2]=A[t+4>>2]-1),f;);break A}A[56798]=28,Be(t,0,0)}I=0}A[e>>2]=c,A[e+4>>2]=E,A[e+8>>2]=b,A[e+12>>2]=I,F=s+48|0}function J0(e,t,r,a,s){var n,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0;if(F=n=F-112|0,A[r+8>>2]){iA=A[50754]/70|0,Y=(m=A[a+12>>2])||256;A:if((0|t)!=2){if((0|t)==1){e:if(C[e+11|0]!=3)switch(C[a-15|0]-3|0){case 0:case 5:break e;default:break A}Y=(0|(m=A[A[47192]+44>>2]))<(0|Y)?Y:m}}else{if((0|(m=A[A[47192]+80>>2]))<=0|!(8&C[0|a]|m>>>0<=C[e+14|0]|32&C[e+6|0]))break A;iA<<=1}if(A[36436]=0,L=e,fA=t,b=a,F=D=F-16|0,e=A[34460]+A[r+8>>2]|0,t=(t=C[e+2|0])>>>0>=24?24:t,A[D+12>>2]=t,f=A[r+12>>2]+A[r+24>>2]|0,A[36422]=f,t){for(m=e+4|0,g=1&B[e+4>>1];e=145488+(I<<3)|0,a=m+(g?I<<6:T(I,44))|0,A[e+4>>2]=a,v=y[a>>1],B[e+2>>1]=v,B[e>>1]=C[a+16|0],c=2&v?I:c,(0|(I=I+1|0))!=(0|t););m=145488,(0|c)<=0||((0|fA)!=1?(t=t-c|0,A[D+12>>2]=t,m=145488+(c<<3)|0):(t=c+1|0,A[D+12>>2]=t,m=145488))}else t=0,m=145488;if(!(!A[r+4>>2]|A[r+20>>2]|C[L+11|0]!=2)){if(g=A[r+36>>2],a=A[r+40>>2],e=0,(0|(t=A[D+12>>2]))>=2){c=g>>>12|0,v=a>>>26&7,U=a>>>18&248,O=T(R=63&a,50),q=63&($=g>>>6|0),I=g<<1&126,AA=T(a>>>16&31,50)-750|0,tA=T(a>>>11&31,50)-750|0,J=T(a>>>6&31,50)-750|0;A:{e:if((0|fA)!=1){if(!(c|R))break A;if(8&c?(t=A[4+(m+((f=t-1|0)<<3)|0)>>2],B[t>>1]<0?e=t:(e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,f=y[t+20>>1]|y[t+22>>1]<<16,e=177888+(e<<6)|0,g=y[t+16>>1]|y[t+18>>1]<<16,B[e+16>>1]=g,B[e+18>>1]=g>>>16,B[e+20>>1]=f,B[e+22>>1]=f>>>16,f=y[t+4>>1]|y[t+6>>1]<<16,g=y[t>>1]|y[t+2>>1]<<16,B[e>>1]=g,B[e+2>>1]=g>>>16,B[e+4>>1]=f,B[e+6>>1]=f>>>16,f=y[t+12>>1]|y[t+14>>1]<<16,g=y[t+8>>1]|y[t+10>>1]<<16,B[e+8>>1]=g,B[e+10>>1]=g>>>16,B[e+12>>1]=f,B[e+14>>1]=f>>>16,f=y[t+28>>1]|y[t+30>>1]<<16,g=y[t+24>>1]|y[t+26>>1]<<16,B[e+24>>1]=g,B[e+26>>1]=g>>>16,B[e+28>>1]=f,B[e+30>>1]=f>>>16,f=y[t+36>>1]|y[t+38>>1]<<16,g=y[t+32>>1]|y[t+34>>1]<<16,B[e+32>>1]=g,B[e+34>>1]=g>>>16,B[e+36>>1]=f,B[e+38>>1]=f>>>16,f=y[t+44>>1]|y[t+46>>1]<<16,g=y[t+40>>1]|y[t+42>>1]<<16,B[e+40>>1]=g,B[e+42>>1]=g>>>16,B[e+44>>1]=f,B[e+46>>1]=f>>>16,f=y[t+52>>1]|y[t+54>>1]<<16,g=y[t+48>>1]|y[t+50>>1]<<16,B[e+48>>1]=g,B[e+50>>1]=g>>>16,B[e+52>>1]=f,B[e+54>>1]=f>>>16,f=y[t+60>>1]|y[t+62>>1]<<16,t=y[t+56>>1]|y[t+58>>1]<<16,B[e+56>>1]=t,B[e+58>>1]=t>>>16,B[e+60>>1]=f,B[e+62>>1]=f>>>16,l[e+16|0]=0,B[e>>1]=32768|y[e>>1],f=A[D+12>>2]-1|0),A[4+(m+(f<<3)|0)>>2]=e,t=1792,(0|(f=B[e+4>>1]))<300||(t=1536,f>>>0<400||(t=f>>>0<500?1280:1024)),A[36436]=t,g=35):(A[D+12>>2]=t+1,B[(e=(f=m+(t<<3)|0)-8|0)>>1]=I,t=A[e+4>>2],e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,(e=($=e<<6)+177888|0)&&(g=y[t+4>>1]|y[t+6>>1]<<16,E=y[t>>1]|y[t+2>>1]<<16,B[e>>1]=E,B[e+2>>1]=E>>>16,B[e+4>>1]=g,B[e+6>>1]=g>>>16,g=y[t+60>>1]|y[t+62>>1]<<16,E=y[t+56>>1]|y[t+58>>1]<<16,B[e+56>>1]=E,B[e+58>>1]=E>>>16,B[e+60>>1]=g,B[e+62>>1]=g>>>16,g=y[t+52>>1]|y[t+54>>1]<<16,E=y[t+48>>1]|y[t+50>>1]<<16,B[e+48>>1]=E,B[e+50>>1]=E>>>16,B[e+52>>1]=g,B[e+54>>1]=g>>>16,g=y[t+44>>1]|y[t+46>>1]<<16,E=y[t+40>>1]|y[t+42>>1]<<16,B[e+40>>1]=E,B[e+42>>1]=E>>>16,B[e+44>>1]=g,B[e+46>>1]=g>>>16,g=y[t+36>>1]|y[t+38>>1]<<16,E=y[t+32>>1]|y[t+34>>1]<<16,B[e+32>>1]=E,B[e+34>>1]=E>>>16,B[e+36>>1]=g,B[e+38>>1]=g>>>16,g=y[t+28>>1]|y[t+30>>1]<<16,E=y[t+24>>1]|y[t+26>>1]<<16,B[e+24>>1]=E,B[e+26>>1]=E>>>16,B[e+28>>1]=g,B[e+30>>1]=g>>>16,g=y[t+20>>1]|y[t+22>>1]<<16,E=y[t+16>>1]|y[t+18>>1]<<16,B[e+16>>1]=E,B[e+18>>1]=E>>>16,B[e+20>>1]=g,B[e+22>>1]=g>>>16,g=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,B[e+8>>1]=t,B[e+10>>1]=t>>>16,B[e+12>>1]=g,B[e+14>>1]=g>>>16,l[$+177904|0]=0,B[e>>1]=32768|y[e>>1]),B[f>>1]=0,A[f+4>>2]=e,I>>>0>=37&&(A[36422]=(I+A[36422]|0)-36),g=q<<1,R&&si(e,O,J,tA,v,AA,U,c)),A[A[32972]+132>>2]||(t=C[e+17|0])&&(t=B[102896+(((0|(t=(g<<6>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],l[e+18|0]=(0|T(t,C[e+18|0]))/512,l[e+19|0]=(0|T(t,C[e+19|0]))/512,l[e+20|0]=(0|T(t,C[e+20|0]))/512,l[e+21|0]=(0|T(t,C[e+21|0]))/512,l[e+22|0]=(0|T(t,C[e+22|0]))/512,l[e+23|0]=(0|T(t,C[e+23|0]))/512,l[e+24|0]=(0|T(t,C[e+24|0]))/512,l[e+25|0]=(0|T(t,C[e+25|0]))/512),a-536870912>>>0<=1073741823){if(v=A[44469],(0|(f=A[D+12>>2]))>0)for(e=T(a>>>29|0,10)+102854|0,U=B[e+4>>1],R=B[e+2>>1],O=B[e>>1],AA=B[e+6>>1],tA=B[e+8>>1],g=0;t=A[(J=m+(g<<3)|0)+4>>2],B[t>>1]<0?e=t:(e=(q=(v=(0|(e=v+1|0))<=169?e:0)<<6)+177888|0)?(a=y[t+4>>1]|y[t+6>>1]<<16,f=y[t>>1]|y[t+2>>1]<<16,B[e>>1]=f,B[e+2>>1]=f>>>16,B[e+4>>1]=a,B[e+6>>1]=a>>>16,a=y[t+60>>1]|y[t+62>>1]<<16,f=y[t+56>>1]|y[t+58>>1]<<16,B[e+56>>1]=f,B[e+58>>1]=f>>>16,B[e+60>>1]=a,B[e+62>>1]=a>>>16,a=y[t+52>>1]|y[t+54>>1]<<16,f=y[t+48>>1]|y[t+50>>1]<<16,B[e+48>>1]=f,B[e+50>>1]=f>>>16,B[e+52>>1]=a,B[e+54>>1]=a>>>16,a=y[t+44>>1]|y[t+46>>1]<<16,f=y[t+40>>1]|y[t+42>>1]<<16,B[e+40>>1]=f,B[e+42>>1]=f>>>16,B[e+44>>1]=a,B[e+46>>1]=a>>>16,a=y[t+36>>1]|y[t+38>>1]<<16,f=y[t+32>>1]|y[t+34>>1]<<16,B[e+32>>1]=f,B[e+34>>1]=f>>>16,B[e+36>>1]=a,B[e+38>>1]=a>>>16,a=y[t+28>>1]|y[t+30>>1]<<16,f=y[t+24>>1]|y[t+26>>1]<<16,B[e+24>>1]=f,B[e+26>>1]=f>>>16,B[e+28>>1]=a,B[e+30>>1]=a>>>16,a=y[t+20>>1]|y[t+22>>1]<<16,f=y[t+16>>1]|y[t+18>>1]<<16,B[e+16>>1]=f,B[e+18>>1]=f>>>16,B[e+20>>1]=a,B[e+22>>1]=a>>>16,a=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,B[e+8>>1]=t,B[e+10>>1]=t>>>16,B[e+12>>1]=a,B[e+14>>1]=a>>>16,l[q+177904|0]=0,B[e>>1]=32768|y[e>>1],f=A[D+12>>2]):e=0,A[J+4>>2]=e,B[e+8>>1]=(0|T(U,B[e+8>>1]))/256,B[e+6>>1]=(0|T(R,B[e+6>>1]))/256,B[e+4>>1]=(0|T(O,B[e+4>>1]))/256,B[e+12>>1]=(0|T(tA,B[e+12>>1]))/256,B[e+10>>1]=(0|T(AA,B[e+10>>1]))/256,(0|f)>(0|(g=g+1|0)););A[44469]=v}if(!e)break A}else{t=A[m+4>>2],(0|(f=B[t>>1]))<0?e=t:(a=(0|(a=A[44469]+1|0))<=169?a:0,A[44469]=a,(a=(f=a<<6)+177888|0)&&(e=y[t+4>>1]|y[t+6>>1]<<16,E=y[t>>1]|y[t+2>>1]<<16,B[a>>1]=E,B[a+2>>1]=E>>>16,B[a+4>>1]=e,B[a+6>>1]=e>>>16,e=y[t+60>>1]|y[t+62>>1]<<16,E=y[t+56>>1]|y[t+58>>1]<<16,B[a+56>>1]=E,B[a+58>>1]=E>>>16,B[a+60>>1]=e,B[a+62>>1]=e>>>16,e=y[t+52>>1]|y[t+54>>1]<<16,E=y[t+48>>1]|y[t+50>>1]<<16,B[a+48>>1]=E,B[a+50>>1]=E>>>16,B[a+52>>1]=e,B[a+54>>1]=e>>>16,e=y[t+44>>1]|y[t+46>>1]<<16,E=y[t+40>>1]|y[t+42>>1]<<16,B[a+40>>1]=E,B[a+42>>1]=E>>>16,B[a+44>>1]=e,B[a+46>>1]=e>>>16,e=y[t+36>>1]|y[t+38>>1]<<16,E=y[t+32>>1]|y[t+34>>1]<<16,B[a+32>>1]=E,B[a+34>>1]=E>>>16,B[a+36>>1]=e,B[a+38>>1]=e>>>16,e=y[t+28>>1]|y[t+30>>1]<<16,E=y[t+24>>1]|y[t+26>>1]<<16,B[a+24>>1]=E,B[a+26>>1]=E>>>16,B[a+28>>1]=e,B[a+30>>1]=e>>>16,e=y[t+20>>1]|y[t+22>>1]<<16,E=y[t+16>>1]|y[t+18>>1]<<16,B[a+16>>1]=E,B[a+18>>1]=E>>>16,B[a+20>>1]=e,B[a+22>>1]=e>>>16,e=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,B[a+8>>1]=t,B[a+10>>1]=t>>>16,B[a+12>>1]=e,B[a+14>>1]=e>>>16,l[f+177904|0]=0,f=-32768|y[a>>1],B[a>>1]=f,e=a)),A[m+4>>2]=e,B[m>>1]=I||50,B[m+2>>1]=16384|y[m+2>>1],B[e>>1]=16384|f,f=A[m+12>>2],t=C[f+17|0],a=A[32972],A[a+132>>2]&&(l[e+39|0]=C[f+39|0]-4);r:if(R){if(2048&g){t=(T(t,31&$)>>>0)/30|0,A[a+132>>2]||(a=C[e+17|0])&&(t=B[102896+(((0|(t=(t<<6>>>0)/(a>>>0)|0))>=199?199:t)<<1)>>1],l[e+18|0]=(0|T(t,C[e+18|0]))/512,l[e+19|0]=(0|T(t,C[e+19|0]))/512,l[e+20|0]=(0|T(t,C[e+20|0]))/512,l[e+21|0]=(0|T(t,C[e+21|0]))/512,l[e+22|0]=(0|T(t,C[e+22|0]))/512,l[e+23|0]=(0|T(t,C[e+23|0]))/512,l[e+24|0]=(0|T(t,C[e+24|0]))/512,l[e+25|0]=(0|T(t,C[e+25|0]))/512),si(e,O,J,tA,v,AA,U,c);break r}if(si(e,O,J,tA,v,AA,U,c),A[A[32972]+132>>2]||!(t=C[e+17|0]))break r;t=B[102896+(((0|(t=(q<<7>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],l[e+18|0]=(0|T(t,C[e+18|0]))/512,l[e+19|0]=(0|T(t,C[e+19|0]))/512,l[e+20|0]=(0|T(t,C[e+20|0]))/512,l[e+21|0]=(0|T(t,C[e+21|0]))/512,l[e+22|0]=(0|T(t,C[e+22|0]))/512,l[e+23|0]=(0|T(t,C[e+23|0]))/512,l[e+24|0]=(0|T(t,C[e+24|0]))/512,l[e+25|0]=(0|T(t,C[e+25|0]))/512}else if(a=A[a+132>>2],8&c){if(a||!(a=C[e+17|0]))break r;t=((16320&T(t,48))>>>0)/(a>>>0)|0,t=B[102896+((t>>>0>=199?199:t)<<1)>>1],l[e+18|0]=(0|T(t,C[e+18|0]))/512,l[e+19|0]=(0|T(t,C[e+19|0]))/512,l[e+20|0]=(0|T(t,C[e+20|0]))/512,l[e+21|0]=(0|T(t,C[e+21|0]))/512,l[e+22|0]=(0|T(t,C[e+22|0]))/512,l[e+23|0]=(0|T(t,C[e+23|0]))/512,l[e+24|0]=(0|T(t,C[e+24|0]))/512,l[e+25|0]=(0|T(t,C[e+25|0]))/512}else a||(t=C[e+17|0])&&(t=B[102896+(((t=1792/(t>>>0)|0)>>>0>=199?199:t)<<1)>>1],l[e+18|0]=(0|T(t,C[e+18|0]))/512,l[e+19|0]=(0|T(t,C[e+19|0]))/512,l[e+20|0]=(0|T(t,C[e+20|0]))/512,l[e+21|0]=(0|T(t,C[e+21|0]))/512,l[e+22|0]=(0|T(t,C[e+22|0]))/512,l[e+23|0]=(0|T(t,C[e+23|0]))/512,l[e+24|0]=(0|T(t,C[e+24|0]))/512,l[e+25|0]=(0|T(t,C[e+25|0]))/512);if(!(8&c))break e;t=2816,(0|(a=B[e+4>>1]))<300||(t=2560,a>>>0<400||(t=a>>>0<500?2304:2048)),A[36436]=t}4&c&&(B[e>>1]=32|y[e>>1]),2&c&&(B[e>>1]=16|y[e>>1])}64&c&&Ge(20,0),e=I&c<<27>>31}else e=0;f=e+A[36422]|0,A[36422]=f,t=A[D+12>>2]}if((0|(a=t-1|0))<=0)g=0;else{if(e=0,I=0,g=0,t-2>>>0>=3)for(U=-4&a,v=0;g=(((B[(c=I<<3)+m>>1]+g|0)+B[m+(8|c)>>1]|0)+B[m+(16|c)>>1]|0)+B[m+(24|c)>>1]|0,I=I+4|0,(0|U)!=(0|(v=v+4|0)););if(c=3&a)for(;g=B[m+(I<<3)>>1]+g|0,I=I+1|0,(0|c)!=(0|(e=e+1|0)););}if(e=t,(c=A[r+20>>2])&&(e=a,I=c+A[34460]|0,(v=C[I+2|0])&&(R=y[I+4>>1],B[m+(a<<3)>>1]=C[I+20|0],c=1,e=t,(0|v)!=1))){if(U=I+4|0,R&=1,AA=1&(I=v-1|0),(0|v)!=2)for(tA=-2&I,v=0;J=U+(c<<6)|0,q=U+T(c,44)|0,$=C[(O=R?J:q)+16|0],A[(I=m+(e<<3)|0)+4>>2]=O,B[I>>1]=$,B[I+2>>1]=y[O>>1],J=C[(O=R?J- -64|0:q+44|0)+16|0],A[I+12>>2]=O,B[I+8>>1]=J,B[I+10>>1]=y[O>>1],c=c+2|0,e=e+2|0,(0|tA)!=(0|(v=v+2|0)););AA&&(c=U+(R?c<<6:T(c,44))|0,v=C[c+16|0],A[(I=m+(e<<3)|0)+4>>2]=c,B[I>>1]=v,B[I+2>>1]=y[c>>1],e=e+1|0)}A:if(!((0|g)<=0)){e:{r:switch(fA-1|0){case 1:if(c=(0|(c=(A[r+44>>2]+f|0)-45|0))<=10?10:c,8&C[0|b]&&(c=c+(C[A[36128]+14|0]<<1)|0),(0|a)<=0)break A;if(b=(c<<8)/(0|g)|0,I=0,(0|t)!=2)for(t=-2&a,c=0;B[(g=(f=I<<3)+m|0)>>1]=(0|T(b,B[g>>1]))/256,B[(f=m+(8|f)|0)>>1]=(0|T(b,B[f>>1]))/256,I=I+2|0,(0|t)!=(0|(c=c+2|0)););if(!(1&a))break A;B[(t=m+(I<<3)|0)>>1]=(0|T(b,B[t>>1]))/256;break A;case 0:if(A[r>>2]!=1||(0|(c=A[r+44>>2]))>129)break e;B[m>>1]=(0|T(c,B[m>>1]))/130;break e;default:break r}(0|(c=A[r+44>>2]))<=0||(f=(c-g|0)+f|0,A[36422]=f)}if(!(!f|(0|a)<=0)){if(b=(g+f<<8)/(0|g)|0,I=0,(0|t)!=2)for(t=-2&a,c=0;B[(g=(f=I<<3)+m|0)>>1]=(0|T(b,B[g>>1]))/256,B[(f=m+(8|f)|0)>>1]=(0|T(b,B[f>>1]))/256,I=I+2|0,(0|t)!=(0|(c=c+2|0)););1&a&&(B[(t=m+(I<<3)|0)>>1]=(0|T(b,B[t>>1]))/256)}}if(A[n+108>>2]=e,F=D+16|0,m){if((0|(e=A[r+16>>2]))!=A[36438]&&(A[36438]=e,t=216192+(A[50758]<<4)|0,A[t>>2]=14,A[t+4>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0),I=(e=A[A[32972]+132>>2])?1:3,t=A[m+4>>2],A[r+28>>2]|!C[145748]||(l[145748]=0,I=e?2:4),(a=A[36426])&&(!((2&(e=y[a>>1]))>>>1|C[a+16|0]<2)|16&e||(f=216192+(A[36439]<<4)|0,A[f+12>>2]=t,8&e&&(e=(0|(e=A[44469]+1|0))<=169?e:0,A[44469]=e,(e=(c=e<<6)+177888|0)&&(b=y[t+4>>1]|y[t+6>>1]<<16,g=y[t>>1]|y[t+2>>1]<<16,B[e>>1]=g,B[e+2>>1]=g>>>16,B[e+4>>1]=b,B[e+6>>1]=b>>>16,b=y[t+60>>1]|y[t+62>>1]<<16,g=y[t+56>>1]|y[t+58>>1]<<16,B[e+56>>1]=g,B[e+58>>1]=g>>>16,B[e+60>>1]=b,B[e+62>>1]=b>>>16,b=y[t+52>>1]|y[t+54>>1]<<16,g=y[t+48>>1]|y[t+50>>1]<<16,B[e+48>>1]=g,B[e+50>>1]=g>>>16,B[e+52>>1]=b,B[e+54>>1]=b>>>16,b=y[t+44>>1]|y[t+46>>1]<<16,g=y[t+40>>1]|y[t+42>>1]<<16,B[e+40>>1]=g,B[e+42>>1]=g>>>16,B[e+44>>1]=b,B[e+46>>1]=b>>>16,b=y[t+36>>1]|y[t+38>>1]<<16,g=y[t+32>>1]|y[t+34>>1]<<16,B[e+32>>1]=g,B[e+34>>1]=g>>>16,B[e+36>>1]=b,B[e+38>>1]=b>>>16,b=y[t+28>>1]|y[t+30>>1]<<16,g=y[t+24>>1]|y[t+26>>1]<<16,B[e+24>>1]=g,B[e+26>>1]=g>>>16,B[e+28>>1]=b,B[e+30>>1]=b>>>16,b=y[t+20>>1]|y[t+22>>1]<<16,g=y[t+16>>1]|y[t+18>>1]<<16,B[e+16>>1]=g,B[e+18>>1]=g>>>16,B[e+20>>1]=b,B[e+22>>1]=b>>>16,b=y[t+12>>1]|y[t+14>>1]<<16,g=y[t+8>>1]|y[t+10>>1]<<16,B[e+8>>1]=g,B[e+10>>1]=g>>>16,B[e+12>>1]=b,B[e+14>>1]=b>>>16,l[c+177904|0]=0,B[e>>1]=32768|y[e>>1]),B[(c=c+177888|0)+8>>1]=y[a+8>>1],l[c+21|0]=C[a+21|0],B[c+10>>1]=y[a+10>>1],l[c+22|0]=C[a+22|0],B[c+12>>1]=y[a+12>>1],l[c+23|0]=C[a+23|0],B[c+14>>1]=y[a+14>>1],l[c+24|0]=C[a+24|0],l[c+25|0]=C[a+25|0],A[f+12>>2]=e))),(0|fA)!=2|C[L+11|0]!=2||(w2(),A[36427]=A[50758]),!((0|(L=A[n+108>>2]))<2)){for(e=A[36433],b=(T(256-e|0,Y)+(e<<8)|0)/256|0,e=A[36432],f=(T(256-e|0,Y)+(e<<8)|0)/256|0,g=A[50754],e=0,a=1;c=y[(D=(m+(a<<3)|0)-8|0)+2>>1],c=(0|T((0|T(g,B[D>>1]))/1e3|0,4&c?f:16384&c?b:Y))/256|0,A[(a<<2)+n>>2]=c,e=e+c|0,(0|L)!=(0|(a=a+1|0)););if(!((0|e)<=0|(0|e)>=(0|iA)|(0|L)<2)){if(a=1,b=1&(c=L-1|0),(0|L)!=2)for(f=-2&c,Y=0;A[(c=(a<<2)+n|0)>>2]=(0|T(A[c>>2],iA))/(0|e),A[c+4>>2]=(0|T(A[c+4>>2],iA))/(0|e),a=a+2|0,(0|f)!=(0|(Y=Y+2|0)););b&&(A[(a=(a<<2)+n|0)>>2]=(0|T(A[a>>2],iA))/(0|e))}if(Y=0,!((0|L)<2))for(L=fA+256|0,a=1;e=A[4+(m+(a<<3)|0)>>2],!(c=A[r+28>>2])|128&C[0|t]||(A[36422]=0,xr(c,L,0,g=A[r>>2],0,b=(b=A[r+32>>2])?(b<<5)/100|0:32),l[145748]=1,A[r+28>>2]=0),(0|s)<0||(s=64&C[0|t]?6:s,(A[n+108>>2]-1|0)==(0|a)&&(s=(c=s)|(3840&(s=A[36436])?s:0))),c=A[(a<<2)+n>>2],A[36440]=c+A[36440],A[36441]=c+A[36441],c?(b=A[50758],A[36439]=b,(0|s)>=0&&(A[(b=216192+(b<<4)|0)>>2]=I,A[b+12>>2]=e,A[b+8>>2]=t,A[b+4>>2]=c+(s<<16),t=A[50758]+1|0,A[50758]=(0|t)<=169?t:0),A[36426]=e,Y=c+Y|0):A[36426]=0,t=e,(0|(a=a+1|0))<A[n+108>>2];);}!A[36438]|(0|fA)==1||(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}}F=n+112|0}function m2(e,t,r,a){var s,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0;F=s=F-1856|0,A[s+164>>2]=0,r?E=A[r>>2]:QA(r=s- -64|0,0,96),A[33264]=0,A[s+1824>>2]=0,A[s+1828>>2]=0,A[s+1832>>2]=0,A[s+1836>>2]=0,l[s+1616|0]=0,l[s+992|0]=0,l[s+1200|0]=0,l[s+784|0]=0;A:if(A[e+688>>2]){for(A[s+1840>>2]=t,C[0|(n=t)]==32&&(n=t+1|0,A[s+1840>>2]=n),v=s+416|1,$=s+1844|1,tA=s+1848|1,iA=s+1852|1,A[s+1820>>2]=n,NA(s+168|0,n),n=A[s+1820>>2];(32|C[0|n])!=32;)n=NA(s+164|0,n)+A[s+1820>>2]|0,A[s+1820>>2]=n,O=O+1|0;MA(s+256|0,t,AA=(0|(f=n-t|0))>=159?159:f),!(J=4194304&E)|(0|O)!=1?(L=((0|(n=A[47202]))==36)<<2,(0|O)==1|(0|n)!=36||(n=A[s+1840>>2]-1|0,A[s+1840>>2]=n,l[0|n]=95,L=0,g=!!(0|N0(e,s+1840|0,s+1616|0,s+1832|0,0,r)),n=A[47202])):(g=1,NA(s+172|0,n+1|0),r0(A[s+172>>2])&&(0|Qt(A[s+164>>2]))==(0|Qt(A[s+172>>2]))&&(g=0),L=(0|(n=A[47202]))==36?4:g,g=0);e:{r:{i:{s:{o:if(16&n)D=15&n,L=0;else{if(R=1,g||(R=!!(0|N0(e,s+1840|0,s+1616|0,s+1832|0,2,r))),50331648&(n=A[s+1832>>2])&&(f=A[s+1820>>2],C[f+1|0]==46&&(l[f+1|0]=32,n=A[s+1832>>2])),536870912&n){if(!a)break A;cA(a,A[s+1840>>2]);break A}if(8192&n|!(128&n)|R)a=A[33264];else if(n=A[s+1840>>2],A[s+1820>>2]=n,!((0|(a=A[33264]))<=0))for(g=0;C[0|n]==32&&(l[0|n]=45,g=g+1|0,n=A[s+1820>>2],a=A[33264]),n=n+1|0,A[s+1820>>2]=n,(0|a)>(0|g););f:if(!(a|(0|O)!=1)&&(f=NA(s+576|0,m=A[s+1840>>2]),C[f+m|0]==32)){g=s+1408|0,a=m;u:{g:{n:{for(;;){d:if(r0(A[s+576>>2])){p:{if(C[(c=a+f|0)+1|0]==46){D=0;I:switch(C[(n=f+2|0)+a|0]-32|0){case 0:break p;case 7:break I;default:break d}if(D=1,f=n,C[c+3|0]==115)break p;break d}if(D=1,(0|b)<=0)break n}if(!((0|f)<=0)){if(Y=3&f,I=0,f>>>0<4)n=0;else for(U=-4&f,n=0,c=0;l[0|g]=C[a+n|0],l[g+1|0]=C[(1|n)+a|0],l[g+2|0]=C[(2|n)+a|0],l[g+3|0]=C[(3|n)+a|0],n=n+4|0,g=g+4|0,(0|U)!=(0|(c=c+4|0)););if(Y)for(;l[0|g]=C[a+n|0],n=n+1|0,g=g+1|0,(0|Y)!=(0|(I=I+1|0)););}if(b=b+1|0,D)a=a+f|0;else if(f=NA(s+576|0,a=3+(a+f|0)|0),C[a+f|0]==32)continue}break}if(!((0|b)<2)){(f=(f=g-(n=s+1408|0)|0)+(n=MA(m,n,f))|0)>>>0<a>>>0&&QA(f,32,(s+1408|0)+a-(n+g)|0),A[33264]=(b<<1)-2,A[s+1836>>2]=0;break g}}if(!b)break f;if(A[s+1832>>2]=0,A[s+1836>>2]=0,!A[33264])break u}A[s+1832>>2]=128}L=1}if(C[s+1616|0]==21){cA(189088,s+1616|0),n=0;break A}if(fA=C[s+1833|0],g=1,!R){if(A[s+168>>2]-48>>>0<10){if(dA(e,84174,189088),n=0,C[189088]==21)break A;if(!(!(128&C[e+109|0])|32&C[r+2|0])){l[189088]=21,l[189089]=0;break A}g=!!(0|m8(e,A[s+1840>>2],s+1616|0,s+1832|0,r,0))}else g=0;if(!(g|(3&E)==2)&&(16777216&(a=A[e+104>>2])||(g=0,!(!(33554432&a)|!(1&E))))&&(16&E||(g=0,!(1&l[r+13|0])))){U=A[s+1840>>2],n=0,b=0,c=0,F=Y=F-224|0,l[0|(I=s+1616|0)]=0,A[Y+216>>2]=0,A[Y+220>>2]=0;f:if(!(l[U-2|0]-48>>>0<10|(1&l[0|r]?0:2&C[e+107|0])||(a=C[0|(f=U+1|0)],(!(2561&y[e+106>>1])|!(1&l[r+2|0]))&(0|a)==32))){if((0|(b=C[0|U]))!=32){for(D=32767,a=0;;){if(!(n=j2(101868,b<<24>>24,8))){b=0;break f}if(m=0,(0|(n=A[(n<<2)-305584>>2]))==(0|a)&&!((0|(m=c+1|0))<=2)){b=0;break f}u:{g:{n:{d:{if(!((0|a)<2)){if((0|a)==10|(0|a)==100)break d;if(!((0|a)>(0|n))){b=0;break f}}if(!a)break g;if((0|a)<(0|n))break n;break g}if((0|a)>=(0|n))break g}if(b=0,(0|q)%10|(0|T(a,10))<(0|n))break f;n=n-a|0,D=a;break u}if((0|n)>=(0|D)){b=0;break f}q=a+q|0}if(b=C[0|f],f=g=f+1|0,a=n,c=m,(0|b)==32)break}a=C[0|g]}else g=f;if((a<<24>>24)-48>>>0<10)b=0;else if((0|(a=n+q|0))<A[e+120>>2])b=0;else if((0|a)>A[e+116>>2])b=0;else if(dA(e,85600,Y+176|0),n=I,4&C[e+107|0]||(n=cA(I,n=Y+176|0)+lA(n)|0),A[Y+4>>2]=A[e+140>>2],A[Y>>2]=a,nA(Y+16|0,85839,Y),b=0,C[0|g]!=46){X8(e,U,g,r,1)&&(A[r>>2]=32768|A[r>>2]),f=0;u:if(8&C[e+107|0]){if(c=A[r>>2],A[e+212>>2]==26741){if(32768&c)break u;if(!(16384&c))break f;f=1,c=0;g:{n:switch(C[0|g]-97|0){case 0:case 4:break n;default:break g}n:{d:{p:{I:switch((D=C[g+1|0])-116|0){case 6:break g;case 1:case 2:case 3:case 4:case 5:break d;case 0:break I;default:break p}if(C[g+2|0]!=116)break n;break g}if((0|D)==32)break g}if(!((0|a)%1e3|0)&&(0|D)==108)break g}c=1}if(c)break u;break f}A[r>>2]=32768|c}A[(a=e+8232|0)>>2]=0,A[a+4>>2]=0,m8(e,Y+16|2,n,Y+216|0,r,f),b=1,4&C[e+107|0]&&P0(I,Y+176|0)}}F=Y+224|0,b?(A[s+1832>>2]=8192|A[s+1832>>2],g=1):g=0}}if(D=R?L:32&fA?1:L,L=0,!(!(1&E)|(0|O)<2)&&De(A[s+168>>2])){f:{if(1&l[188785]){if(!(!(a=8192&(n=A[s+1832>>2]))|g))break f;L=a>>>2^2048;break o}if(g)break s;n=A[s+1832>>2]}if(!(128&n|O>>>0>3)&&!((0|(n=A[e+8220>>2]))<4)&&(a=1,(0|n)>=A[e+8216>>2]))break e}}if(I=0,(0|D)<=0)break i;a=D;break e}if((0|(a=D))>0)break e;I=0,m=0,c=0,b=0;break r}if(g)m=0,c=0,b=0;else{a=A[s+1840>>2],A[s+1820>>2]=a,n=999,b=0,m=0,v=0;i:{s:{o:{for(;;){f:{u:{g:{if(n-1>>>0>=2){if((0|O)<2||(NA(s+1408|0,a),(0|(n=A[s+1408>>2]))<577&A[e+600>>2]>0)||(n=Qt(n),(A[n+4>>2]!=A[e+600>>2]?n:0)|A[e+40>>2]==1))break g;n=C[0|a],A[s+1408>>2]=n<<24>>24;n:switch(n-32|0){default:if(!n)break g;break;case 0:case 7:break g;case 1:case 2:case 3:case 4:case 5:case 6:break n}I=NA(s+1408|0,a),R=9;n:{d:{p:{I:if(-33&(n=A[s+1408>>2])){for(g=0,c=0;;){h:{b:{if((0|n)==39){if((0|m)>0|(0|g)>1)break I;if(c=g?c:39,A[e+40>>2]!=3)break b;break h}c=g?c:n}g=g+1|0}if(!ll(e,n)){if((0|(n=A[s+1408>>2]))!=39&&!De(n))break g;if(I=NA(s+1408|0,a+I|0)+I|0,-33&(n=A[s+1408>>2]))continue;break I}break}if((0|g)<=2)break p;R=g}else c=0;if((0|(n=A[e+40>>2]))!=2)break d;F=n=F-208|0,l[0|n]=0,g=C[0|(f=a-1|0)],l[0|f]=32,a=oe(e,a,n,200,0,-2147483648,0),l[0|f]=g,F=n+208|0,a=!a|(32768&a)>>>15;break n}n=A[e+40>>2],R=g}a=(l[e+168|0]+1|0)<(R-((0|n)==(0|c))|0)}if(!a)break g;a=A[s+1820>>2]}if(C[0|a]!=39)break u;b=67108864,L=0}if(I=0,j8(e,s+992|0,0,m),a=A[s+1820>>2],(0|(n=C[0|a]))!=32)break f;m=0,c=0;break r}if(L=0,a=q1(e,a,s+992|0,1&(v|=(0|m)>0))+A[s+1820>>2]|0,A[s+1820>>2]=a,C[s+992|0]==21)break o;for(m=m+1|0,g=0;g=(n=g)+1|0,C[a+n|0]!=32;);b=67108864;continue}break}if(!C[s+992|0]|(0|n)==39||(l[a-1|0]=32,a=A[s+1820>>2]),f=oe(e,a,s+1616|0,200,s+784|0,E,s+1832|0),(0|(a=C[s+1616|0]))==21){cA(189088,s+1616|0),n=0;break A}if(!(a|C[s+784|0])&&(NA(s+1408|0,A[s+1820>>2]),(0|O)==1&&(r0(A[s+1408>>2])||kl(A[s+1408>>2])))){bi(e,A[s+1820>>2],s+1616|0,D)&&cA(189088,s+1616|0),n=0;break A}A[s+172>>2]=l[A[s+1820>>2]-1|0];f:if(1024&f)for(U=s+176|1,D=0,n=1,v=0,m=0;;){if((R=131072&f)|!(1&n)||(l[s+1408|0]=0,!(a=oe(e,A[s+1820>>2],s+1408|0,200,s+576|0,805306368|E,s+1832|0)))){2048&f&&(A[e+8184>>2]=1),l[A[s+1820>>2]-1|0]=A[s+172>>2];u:{g:{n:{d:if(R){if(l[s+176|0]=0,n=A[s+1820>>2],a=1,c=63&f){if(Y=1&f,m=c-1|0,g=0,(0|c)!=1)for(q=c-Y|0,c=0;I=n,A[s+1820>>2]=n+1,l[0|(J=(s+176|0)+a|0)]=(0|g)!=(0|m)?C[0|n]:0,n=n+2|0,A[s+1820>>2]=n,l[J+1|0]=(0|m)!=(1|g)?C[I+1|0]:0,g=g+2|0,a=a+2|0,(0|q)!=(0|(c=c+2|0)););Y&&(c=n+1|0,A[s+1820>>2]=c,l[(s+176|0)+a|0]=(0|g)!=(0|m)?C[0|n]:0,a=a+1|0,n=c)}l[(s+176|0)+a|0]=0}else{if(n=A[s+1820>>2],!(c=15&f))break n;if(a=0,g=c,I=3&f)for(;n=n+1|0,A[s+1820>>2]=n,(192&C[0|n])==128||(g=g-1|0,(0|I)!=(0|(a=a+1|0))););if(c>>>0<4)break d;for(;;)if(n=n+1|0,A[s+1820>>2]=n,(192&C[0|n])!=128){for(;n=n+1|0,A[s+1820>>2]=n,(192&C[0|n])==128;);for(;n=n+1|0,A[s+1820>>2]=n,(192&C[0|n])==128;);for(;n=n+1|0,A[s+1820>>2]=n,(192&C[0|n])==128;);if(a=(0|g)>4,g=g-4|0,!a)break}}if(a=n-1|0,A[s+172>>2]=l[0|a],l[0|a]=32,a=E|=8388608,!R)break g;if(A0(s+576|0,s+784|0,12),A[s+1852>>2]=U,a=cA(s+1200|0,n=s+1616|0),N0(e,s+1852|0,n,s+1832|0,0,r)&&cA(a,s+1616|0),!(32&C[s+1833|0]))break u;l[0|a]=0,bi(e,A[s+1852>>2],a,1);break u}a=n-1|0,A[s+172>>2]=l[0|a],l[0|a]=32,a=8388608|E}E=a,P0(s+1200|0,s+784|0)}if(l[s+784|0]=0,c=1,a=N0(e,s+1820|0,s+1616|0,s+1824|0,1024,r),A[s+1832>>2]||(n=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=n,c=v),a){I=0,m=f;break i}if(I=oe(e,A[s+1820>>2],s+1616|0,200,s+784|0,8404992&E,s+1832|0),n=1,m=f,v=c,C[s+1616|0]==21){l[A[s+1820>>2]-1|0]=A[s+172>>2],cA(189088,s+1616|0),n=0;break A}}else n=s+416|0,$1(e,A[s+1820>>2],a,n),I=oe(e,A[s+1820>>2],s+1616|0,200,s+784|0,268435456|E,s+1832|0),MA(A[s+1820>>2],n,lA(n)),1024&I||(cA(s+1616|0,s+1408|0),n=cA(s+784|0,s+576|0),8&C[188788]&&($e(c=n,n=s+576|0),f=A[47195],A[s+48>>2]=n,n0(f,85205,s+48|0)),I=a),n=0;if(a=(g=1024&I)>>>10|0,D>>>0>48)break f;if(D=D+1|0,f=I,!g)break}else I=f,m=0,v=0,a=0;if(a|!I)break s;for(f=cA(s+1408|0,s+1616|0),g=$1(e,A[s+1820>>2],I,s+416|0),c=v,n=I;;){f:{if(l[s+1616|0]=0,C[s+1200|0]){if(l[A[s+1820>>2]-1|0]=A[s+172>>2],a=N0(e,s+1840|0,s+1616|0,s+1824|0,g,r),l[A[s+1820>>2]-1|0]=32,C[s+1616|0]==21){e=s+416|0,MA(A[s+1820>>2],e,lA(e)),cA(189088,s+1616|0),n=0;break A}if(A[s+1832>>2]||(v=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=v),a){l[s+1200|0]=0;break f}c=A[s+1824>>2]?1:c}if(a=N0(e,s+1820|0,s+1616|0,s+1824|0,g,r),C[s+1616|0]==21){e=s+416|0,MA(A[s+1820>>2],e,lA(e)),cA(189088,s+1616|0),n=0;break A}if(A[s+1832>>2]||(v=A[s+1828>>2],A[s+1832>>2]=A[s+1824>>2],A[s+1836>>2]=v),!a)if(16384&n)cA(s+1616|0,f);else{E|=g<<11&8192|n<<9&134217728;u:if(524288&n){if(v=cA(s+576|0,a=s+784|0),n=oe(e,A[s+1820>>2],s+1616|0,200,a,E,s+1832|0),P0(a,v),a=0,!n){n=0;break u}if(1024&n)break u;a=1,g=$1(e,A[s+1820>>2],n,0)}else n=0,oe(e,A[s+1820>>2],s+1616|0,200,0,E,s+1832|0),a=0;if(C[s+1616|0]==21){cA(189088,s+1616|0),e=s+416|0,MA(A[s+1820>>2],e,lA(e)),l[A[s+1820>>2]-1|0]=A[s+172>>2],n=0;break A}if(a)continue}}break}65536&I||(fi(e,s+1616|0,200,s+784|0),l[s+784|0]=0),a=s+416|0,MA(A[s+1820>>2],a,lA(a));break i}cA(189088,e=s+992|0),n=!F0(1|e,84744,3)<<12;break A}I=0,c=v}l[A[s+1820>>2]-1|0]=A[s+172>>2]}}if(a=A[s+164>>2],A[s+1852>>2]=8026656,A[s+1848>>2]=8022304,A[s+1844>>2]=7566112,4&E){r:{if((n=255&a)&&((0|n)==102||($=tA,Tl(a<<24>>24))))break r;$=iA}oe(e,$,189088,200,0,0,0)}for(a=0,n=s+1200|0,v=C[s+784|0];;){r:{i:{s:switch(0|(f=C[0|n])){case 0:break r;case 6:case 7:break s;default:break i}a=f}n=n+1|0;continue}break}r:if(a|c){if(A[e+32>>2]|65536&m){for(g=0,me(e,s+1616|0,s+1832|0,3,0),n=s+1200|0;;){i:switch(C[0|n]){case 6:g&&(l[0|n]=5),g=1;default:n=n+1|0;continue;case 0:break i}break}A[s+24>>2]=s+1616,A[s+20>>2]=s+1200,A[s+16>>2]=s+992,ye(189088,200,85233,s+16|0),l[189287]=0,me(e,189088,s+1832|0,-1,0);break r}A[s+8>>2]=s+1616,A[s+4>>2]=s+1200,A[s>>2]=s+992,ye(189088,200,85233,s),l[189287]=0,me(e,189088,s+1832|0,-1,0)}else me(e,a=s+1616|0,s+1832|0,-1,!!(0|v)<<1),A[s+40>>2]=a,A[s+36>>2]=s+1200,A[s+32>>2]=s+992,ye(189088,200,85233,s+32|0),l[189287]=0;C[s+784|0]&&(a=lA(189088),l[983+(s-a|0)|0]=0,cA(a+189088|0,s+784|0)),16&(a=E|L)&&(A[s+1832>>2]=-268435457&A[s+1832>>2]);r:if(!(128&a)|!(16&C[e+14|0]))if(3072&a){if(vr(e,6),!(2048&a))break r;A[s+1832>>2]=268435456|A[s+1832>>2]}else 16&C[T(A[33264],12)+r|0]&&(1536&(r=A[s+1832>>2])?vr(e,4):2048&r&&vr(e,3));else vr(e,3);8192&I&&(A[e+8192>>2]=2,A[e+8184>>2]=2);r:{if(8&(r=A[s+1836>>2]))A[e+8184>>2]=0,A[e+8188>>2]=3,a=e+8196|0;else if(1&r)A[e+8192>>2]=0,A[e+8184>>2]=2,a=e+8196|0;else if(2&r)A[e+8192>>2]=2,A[e+8184>>2]=0,A[e+8188>>2]=0,a=e+8196|0;else{if(!(4&r))break r;A[e+8184>>2]=0,A[e+8192>>2]=0,A[e+8196>>2]=2,a=e+8188|0}A[a>>2]=0}!C[A[s+1820>>2]]|256&r||((0|(r=A[e+8184>>2]))>0&&(A[e+8184>>2]=r-1),(0|(r=A[e+8192>>2]))>0&&(A[e+8192>>2]=r-1),(0|(r=A[e+8196>>2]))>0&&(A[e+8196>>2]=r-1),(0|(r=A[e+8188>>2]))<=0||(A[e+8188>>2]=r-1)),(0|O)!=1|A[e+212>>2]!=25966||!De(A[s+168>>2])|A[s+168>>2]==105||(A[s+1832>>2]=16777216|A[s+1832>>2]);r:if(2&C[e+68|0]&&98304&(a=A[s+1832>>2])&&!((0|(r=lA(189088)-1|0))<=0))for(n=0;;){if(e=n+1|0,C[n+189088|0]==6){r=l[0|(e=e+189088|0)];i:{if(65536&a){if((0|q0(69))==(0|r)?(O=q0(101),l[0|e]=O):O=C[0|e],g=111,(0|q0(79))==O<<24>>24)break i;break r}if((0|q0(101))==(0|r)?(O=q0(69),l[0|e]=O):O=C[0|e],g=79,(0|q0(111))!=O<<24>>24)break r}l[0|e]=q0(g);break r}if((0|r)==(0|(n=e)))break}e=A[s+1832>>2],MA(t,s+256|0,AA),n=e|b;break A}if(n=0,l[s+1616|0]=0,bi(e,A[s+1840>>2],s+1616|0,a)){if(f=cA(189088,s+1616|0),!J){if(a=A[s+164>>2],A[s+1408>>2]=8026656,A[s+576>>2]=8022304,A[s+416>>2]=7566112,4&E){t=s+576|1,r=s+1408|1;e:{if((n=255&a)&&((0|n)==102||(v=t,Tl(a<<24>>24))))break e;v=r}oe(e,v,f,200,0,0,0)}n=128&A[s+1832>>2]}}else n=((0|O)>1)<<12}else l[189088]=0;return F=s+1856|0,n}function Gt(e,t,r,a,s,n,g,f){var c,I,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0,o0=0,g0=0,d0=0,b0=0,B0=0,Q0=0,S0=0,K0=0,U0=0,_0=0,ze=0,Ye=0,Ne=0,at=0,Rt=0,it=0,Wt=0,Kt=0;F=c=F-384|0,I=A[t>>2];A:{e:{r:{i:{if(s){if(C[0|s]!=7)break i;A[t>>2]=(a||1)+I;break r}A[n>>2]=0,A[t>>2]=I+1;break A}RA=86135,Q0=268435456&g,S0=134217728&g,K0=8388608&g,U0=16384&g,_0=8192&g,o0=r-1|0,g0=a-r|0,ze=2&g,Ye=128&g,Ne=g>>>31|0,at=-2147483648&g,d0=c+96|1;i:for(;;)for(A[c+268>>2]=0,O=(E=A[t>>2])+a|0,tA=-2,$=-6,r=s,iA=at,bA=0,VA=0,AA=1,b=0,fA=0,GA=0;;){v=E,R=b;s:{o:{f:{u:{g:{n:{d:{p:{I:{h:{b:{v:{m:{G:{S:{F:{for(;U=r,r=r+1|0,!((m=C[0|U])>>>0>9);){D=r;U:switch(0|m){case 0:if(!(r=b0)){b0=0,r=86135;break S}for(;;){m=1;Q:{E:switch(0|(b=C[0|r])){case 0:case 3:break F;case 5:break E;default:break Q}m=2}r=(r+m|0)+(((0|b)==9)<<1)|0}case 1:if(GA=1,!Ne)continue;break g;case 2:GA=2;continue;case 4:b0=r;continue;case 5:r=U+2|0,b=A[e+320>>2];Q:{if((E=C[U+1|0])>>>0>=32){if(!(b>>>E-32&1))break Q;break g}if(!(b>>>E&1))break g}AA=AA+1|0;continue;case 9:r=U+3|0;continue;case 8:GA=1,VA=1,iA=0;break;case 3:break G;default:break U}}D=0,b=R,E=v;U:switch(0|GA){case 0:Q:{E:{if((0|(b=C[0|O]))!=(0|m)){if((0|b)!=69)break g;if((0|m)==101)break E;break g}if(D=0,(192&m)==128)break Q}D=21}O=O+1|0,bA=bA+1|0;break s;case 1:break m;case 2:break U;default:break h}if(A[c+264>>2]=A[c+268>>2],!C[O-1|0])break g;$=(0|(b=$+6|0))>=19?19:b,q=O+1|0,J=NA(c+268|0,O),L=C[0|O],D=20,b=R;U:{Q:switch(m-11|0){case 6:r=U+2|0,b=A[c+268>>2],E=l[U+1|0];E:if(m=A[604+(((E=((0|E)<65?191:-65)+E|0)<<2)+e|0)>>2])b=!!(0|G0(m,b));else{if((0|E)>7)break g;Y:{if((0|(m=A[e+600>>2]))>0){if((b=b-m|0)-1>>>0<255)break Y;break g}if((m=b-192|0)>>>0<=413){b=C[344+(C[m+94240|0]+e|0)|0]&1<<E;break E}if(b>>>0>255)break g}b=C[344+(e+b|0)|0]&1<<E}if(!b)break g;O=O+J|0,D=((0|E)==2?19:20)-$|0;break s;case 7:if(r=U+2|0,b=l[U+1|0],!(b=A[4788+((((0|b)<65?191:-65)+b<<2)+e|0)>>2]))break g;E:for(;;){if((0|(D=C[0|b]))==7)break g;if((0|D)==126){D=20-$|0;break s}Y:if(L){if(Y=O,m=b,(0|D)==(0|L))for(;;){if((0|(D=C[0|(m=m+1|0)]))!=(0|(b=C[0|(Y=Y+1|0)])))break Y;if(!b)break}}else m=b,Y=O;if(D){for(;;)if(E=C[0|m],m=b=m+1|0,!E)continue E}break}if((0|(b=Y-O|0))<0)break g;O=b+O|0,D=20-$|0;break s;case 14:m=A[c+268>>2];E:{Y:if(b=A[e+604>>2])b=!!(0|G0(b,m));else{N:{if((0|(b=A[e+600>>2]))>0){if((Y=m-b|0)-1>>>0<255)break N;break E}if((b=m-192|0)>>>0<=413){b=1&l[344+(C[b+94240|0]+e|0)|0];break Y}if(Y=m,m>>>0>255)break o}b=1&l[344+(e+Y|0)|0]}if(b)break g;m=A[c+268>>2]}if(!S0)break o;if((0|m)==32)break g;break o;case 4:if((b=A[c+268>>2])-48>>>0<10|b-2406>>>0<10)break o;if(!C[e+170|0])break g;D=20-$|0;break s;case 5:if(Zr(A[c+268>>2]))break g;break f;case 0:if(A[c+268>>2]==A[c+264>>2])break f;break g;case 17:r=U+2|0,b=32768,D=0;E:{Y:switch((m=C[U+1|0])-1|0){case 0:break h;case 1:break Y;default:break E}if(D=1,b=R,!K0)break h;break g}if((0|(b=240&m))==16){if(D=23,b=R,f>>>(15&m)&16384)break h;break g}if((0|m)!=3&(0|b)!=32||(MA(b=c+96|0,o0,E=1+(A[t>>2]+(bA+g0|0)|0)|0),l[0|(b=b+E|0)]=32,l[b+1|0]=0,A[33265]=0,A[33266]=0,A[c+16>>2]=d0,N0(e,c+16|0,c+272|0,133060,0,0),D=23,!((0|m)!=3|(0|(Y=A[33265]))>=0|16384&A[33266])))break s;if(b=R,E=v,Y>>>(15&m)&16384)break h;break g;case 34:E:{if(b=L-32|0){if((0|b)==13)break E;break g}if(!U0)break g}Y=22-$|0;break u;case 10:if(b=1,C[0|r]==21)break U;break n;case 18:if((0|(Y=A[c+268>>2]))!=32)for(m=O+J|0;;){E:{Y:if(b=A[e+632>>2])b=!!(0|G0(b,Y));else{N:{if((0|(b=A[e+600>>2]))>0){if((Y=Y-b|0)-1>>>0<255)break N;break E}if((b=Y-192|0)>>>0<=413){b=128&C[344+(C[b+94240|0]+e|0)|0];break Y}if(Y>>>0>255)break E}b=128&C[344+(e+Y|0)|0]}if(b)break g}if(m=NA(c+268|0,m)+m|0,(0|(Y=A[c+268>>2]))==32)break}Y=19-$|0;break u;case 49:break d;case 2:break p;case 3:break I;case 1:break h;case 13:break b;case 12:break Q;default:break v}NA(c+272|0,r),J=-1;Q:if((0|(b=A[c+272>>2]))!=(0|(m=A[c+268>>2])))if(-33&m)for(;;){L=O,J=-1;E:if((0|b)==18&&(b=l[U+2|0],D=A[4788+((((0|b)<65?191:-65)+b<<2)+e|0)>>2])){for(;;){if((0|(E=C[0|D]))==7)break E;if((0|E)==126){J=0;break E}Y:if((0|(O=C[0|L]))==(0|E)){if(b=L,m=D,O)for(;;){if((0|(E=C[0|(m=m+1|0)]))!=(0|(D=C[0|(b=b+1|0)])))break Y;if(!D)break}}else m=D,b=L;if(!E){b=b-L|0;break}for(;b=C[0|m],m=D=m+1|0,b;);}J=b}if(E=NA(c+268|0,L),(0|(b=A[c+272>>2]))==(0|(m=A[c+268>>2]))|!(-33&m))break Q;if(O=E+L|0,(0|J)!=-1)break}else L=O;else L=O;O=(0|b)==(0|m)||(0|J)>=0?L:q,D=0;break s}for(;b=b+1|0,C[0|(r=r+1|0)]==21;);break n}r=r+1|0}D=U}if(!(C[v-1|0]!=32&VA|iA||((0|(m=VA?AA+4|0:AA))>=(0|$A)&&(Rt=fA,it=R,$A=m,Wt=bA,RA=r),!(8&A[47197])|Q0|(0|m)<=0))){for($e(r,U=c+272|0),q=A[47195],E=c+16|0,r=0,L=0,iA=0,fA=0,F=O=F-496|0,l[O+80|0]=0,(0|a)>0?(MA(O+288|0,I,a),R=a):R=0,l[R+(b=O+288|0)|0]=0,v=lA(b)+b|0,J=(0|g)<0;;){if(Y=C[0|s],R=s,s=s+1|0,Y>>>0>9)for(;;){G:{S:{F:{U:{Q:{E:switch((b=255&Y)-14|0){case 4:break F;case 3:break U;case 0:break Q;case 14:break E;default:break S}if(R=R+2|0,Y=32,!J&(0|(s=C[0|s]))==1)break G;l[0|v]=36,cA(b=v+1|0,s=Ht(128960,s)),v=lA(s)+b|0;break G}b=C[R+2|0],Y=C[0|s],A[O+36>>2]=127&C[R+3|0],A[O+32>>2]=4&b?80:83,nA(O+48|0,85131,O+32|0),1&b&&(s=lA(s=O+48|0)+s|0,l[0|s]=101,l[s+1|0]=0),2&(s=127&b)&&(b=lA(b=O+48|0)+b|0,l[0|b]=105,l[b+1|0]=0),4&s&&(b=lA(b=O+48|0)+b|0,l[0|b]=112,l[b+1|0]=0),8&s&&(b=lA(b=O+48|0)+b|0,l[0|b]=118,l[b+1|0]=0),16&s&&(b=lA(b=O+48|0)+b|0,l[0|b]=100,l[b+1|0]=0),32&s&&(b=lA(b=O+48|0)+b|0,l[0|b]=102,l[b+1|0]=0),s>>>0>=64&&(s=lA(s=O+48|0)+s|0,l[0|s]=113,l[s+1|0]=0),1&Y&&(s=lA(s=O+48|0)+s|0,l[0|s]=116,l[s+1|0]=0),R=R+4|0,v=cA(v,s=O+48|0)+lA(s)|0,Y=32;break G}R=R+2|0,Y=C[l[0|s]+93871|0];break G}s=l[0|s],l[0|v]=76,b=((s=s+((0|s)<65?191:-65)|0)>>>0)/10|0,l[v+1|0]=b+48,Y=s-T(b,10)|48,(0|fA)==1&&(l[0|v]=Y,Y=76),R=R+2|0,v=v+2|0;break G}Y=b>>>0<=31?C[b+93904|0]:(0|b)==32?95:Y,R=s}if(l[0|v]=Y,s=R+1|0,v=v+1|0,!((Y=C[0|R])>>>0>=10))break}b=1;G:switch(0|Y){case 1:b=r;case 8:l[0|v]=0,v=O+80|0,r=b,fA=1;continue;case 2:l[0|v]=0,R=lA(b=O+288|0)+b|0,v=C[84899]|C[84900]<<8,l[0|R]=v,l[R+1|0]=v>>>8,fA=2,l[R+2|0]=C[84901],v=lA(b)+b|0;continue;case 5:L=l[0|s],s=R+2|0;continue;case 9:iA=(C[0|s]+T(C[R+2|0],255)|0)-256|0,s=R+3|0;continue;case 0:case 3:break G;default:continue}break}if(l[0|v]=0,v=E,(0|iA)>0&&(A[O+16>>2]=iA,nA(E,85581,O+16|0),v=E+7|0),(0|L)>0&&(A[O>>2]=L,nA(v,85694,O),v=lA(v)+v|0),1&((0|(s=lA(O+80|0)))>0|r)){1&r&&(l[0|v]=95,v=v+1|0);G:if(!((0|(R=s-1|0))<0|v>>>0>=E>>>0))for(;;){if(l[0|v]=C[(O+80|0)+R|0],v=v+1|0,(0|R)<=0)break G;if(R=R-1|0,!(v>>>0<E>>>0))break}l[0|v]=41,l[v+1|0]=32,v=v+2|0}l[0|v]=0,l[(r=O+288|0)+((E+3|0)-v|0)|0]=0,P0(v,r),(0|(r=lA(E)))<=7&&(QA(r+E|0,32,8-r|0),r=8),l[r+E|0]=0,F=O+496|0,A[c+4>>2]=E,A[c>>2]=(0|a)>1?m+35|0:m,A[c+8>>2]=U,n0(q,89088,c)}r=D;break g}if(!C[0|v])break g;tA=(0|(b=tA+2|0))>=19?19:b,NA(c+264|0,v),b=Nr(c+268|0,E=v-1|0),L=C[0|E],q=E;m:{G:{S:{F:{U:{Q:switch(m-10|0){case 13:if(b=(0|(pA=C[0|r]))==(0|(m=C[0|v])),J=-1,(0|m)==32|(0|m)==(0|pA))break F;if(m)break U;break S;case 7:r=U+2|0,D=A[c+268>>2],v=l[U+1|0];E:if(m=A[604+(((v=((0|v)<65?191:-65)+v|0)<<2)+e|0)>>2])m=!!(0|G0(m,D));else{if((0|v)>7)break g;Y:{if((0|(m=A[e+600>>2]))>0){if((D=D-m|0)-1>>>0<255)break Y;break g}if((m=D-192|0)>>>0<=413){m=C[344+(C[m+94240|0]+e|0)|0]&1<<v;break E}if(D>>>0>255)break g}m=C[344+(e+D|0)|0]&1<<v}if(!m)break g;E=1+(E-b|0)|0,D=((0|v)==2?19:20)-tA|0;break m;case 8:if(r=U+2|0,b=l[U+1|0],!(b=A[4788+((((0|b)<65?191:-65)+b<<2)+e|0)>>2]))break g;E:{for(;;){if((0|(L=C[0|b]))==7)break g;if((0|L)==126){J=0;break E}m=E;Y:{N:{if((0|(U=(J=lA(b))-1|0))>0)for(m=v-J|0,D=0,Y=E;;){if(!C[0|(Y=Y-1|0)])break N;if((0|U)==(0|(D=D+1|0)))break}eA:if(!((0|(D=C[0|m]))!=(0|L)|!D))for(;;){if((0|(L=C[0|(b=b+1|0)]))!=(0|(D=C[0|(m=m+1|0)])))break eA;if(!D)break}if(!L)break Y}for(m=b;D=C[0|m],m=b=m+1|0,D;);continue}break}if((0|J)<0)break g}D=20-$|0,E=1+(E-J|0)|0;break m;case 15:m=A[c+268>>2];E:{Y:if(v=A[e+604>>2])v=!!(0|G0(v,m));else{N:{if((0|(v=A[e+600>>2]))>0){if((m=m-v|0)-1>>>0<255)break N;break E}if((v=m-192|0)>>>0<=413){v=1&l[344+(C[v+94240|0]+e|0)|0];break Y}if(m>>>0>255)break E}v=1&l[344+(e+m|0)|0]}if(v)break g}D=20-tA|0,E=1+(E-b|0)|0;break m;case 1:if(A[c+268>>2]!=A[c+264>>2])break g;D=21-tA|0,E=1+(E-b|0)|0;break m;case 5:if(!((v=A[c+268>>2])-48>>>0<10|v-2406>>>0<10))break g;D=21-tA|0,E=1+(E-b|0)|0;break m;case 6:if(Zr(A[c+268>>2]))break g;D=21-$|0,E=1+(E-b|0)|0;break m;case 18:if(r=U+2|0,!((0|(m=C[U+1|0]))==3|(240&m)==32)||(MA(b=c+96|0,o0,E=1+(A[t>>2]+(bA+g0|0)|0)|0),l[0|(b=b+E|0)]=32,l[b+1|0]=0,A[33265]=0,A[33266]=0,A[c+16>>2]=d0,N0(e,c+16|0,c+272|0,133060,0,0),D=23,!((0|m)!=3|(0|(Y=A[33265]))>=0|16384&A[33266])))break s;if(b=R,E=v,Y>>>(15&m)&16384)break h;break g;case 11:if(m=1,C[0|r]==21)for(;m=m+1|0,C[0|(r=r+1|0)]==21;);if(A[e+8208>>2]<(0|m))break g;D=18+(m-tA|0)|0;break m;case 0:if(D=19,b=R,E=v,A[e+8212>>2]>0)break h;break g;case 19:if(D=3,(0|(Y=A[c+268>>2]))==32)break m;for(m=1+(E-b|0)|0;;){E:{Y:if(b=A[e+632>>2])b=!!(0|G0(b,Y));else{N:{if((0|(b=A[e+600>>2]))>0){if((Y=Y-b|0)-1>>>0<255)break N;break E}if((b=Y-192|0)>>>0<=413){b=128&C[344+(C[b+94240|0]+e|0)|0];break Y}if(Y>>>0>255)break E}b=128&C[344+(e+Y|0)|0]}if(b)break g}if(m=m-Nr(c+268|0,m-1|0)|0,(0|(Y=A[c+268>>2]))==32)break}break m;case 16:if(D=1,b=R,E=v,A[e+8184>>2])break h;break g;case 9:if(D=1,b=R,E=v,ze)break h;break g;case 36:for(;;){if(D=50,b=R,!(v=(255&L)-32|0))break g;if((0|v)==14)break h;L=C[0|(q=q-1|0)]}case 35:break Q;default:break G}Q:{if(b=L-32|0){if((0|b)==13)break Q;break g}if(!Ye)break g}D=22-$|0;break m}U:{for(;;){J=-1,Y=v,v=v-1|0;Q:if((0|pA)==18&&(b=l[U+2|0],D=A[4788+((((0|b)<65?191:-65)+b<<2)+e|0)>>2]))for(Kt=Y+1|0;;){if((0|(q=C[0|D]))==7){J=-1;break Q}if((0|q)==126){J=0;break Q}m=Y;E:{if((0|(B0=(J=lA(D))-1|0))>0)for(m=Kt-J|0,L=0,b=Y;;){if(!C[0|(b=b-1|0)])break E;if((0|B0)==(0|(L=L+1|0)))break}Y:if(!((0|(b=C[0|m]))!=(0|q)|!b))for(;;){if((0|(q=C[0|(D=D+1|0)]))!=(0|(b=C[0|(m=m+1|0)])))break Y;if(!b)break}if(!q)break Q}for(m=D;b=C[0|m],m=D=m+1|0,b;);}if(b=(0|(m=C[0|v]))==(0|pA),(0|m)==32|(0|m)==(0|pA))break U;if(!m){v=Y;break S}if((0|J)!=-1)break}v=Y;break S}v=Y}E=b?v:E}D=0,E=(0|J)<0?E:v+1|0;break m}if((0|m)!=(0|L))break g;D=4,(0|m)!=32&&(D=(192&m)!=128?21-tA|0:0)}b=R;break h}if((0|m)!=(0|L))break g;Y=(192&m)!=128?21-$|0:0;break u}if(D=1,_0)break g}AA=D+AA|0;continue}if(b=l[U+1|0],R=C[U+3|0],E=C[U+2|0],1&!(A[e+8208>>2]|4&E)&l[e+84|0])break g;r=U+4|0,Y=0,R=127&R|(127&E)<<8|b<<16;break u}p:if(!(q>>>0<=(m=A[t>>2]+a|0)>>>0)){for(;;){if(C[0|m]!=101){if(b=m>>>0<O>>>0,m=m+1|0,b)continue;break p}break}Y=0,fA=m;break u}Y=0;break u}D=-20;break s}if(L=0,(0|(m=A[c+268>>2]))!=32)for(Y=O+J|0,D=0;;){if(!D){n:{d:if(E=A[e+632>>2])m=!!(0|G0(E,m));else{p:{if((0|(E=A[e+600>>2]))>0){if((m=m-E|0)-1>>>0<255)break p;break n}if((E=m-192|0)>>>0<=413){m=128&C[344+(C[E+94240|0]+e|0)|0];break d}if(m>>>0>255)break n}m=128&C[344+(e+m|0)|0]}m&&(L=L+1|0)}m=A[c+268>>2]}n:if(E=A[e+632>>2])D=!!(0|G0(E,m));else{d:{if((0|(E=A[e+600>>2]))>0){if(D=0,(m=m-E|0)-1>>>0<255)break d;break n}if((E=m-192|0)>>>0<=413){D=128&C[344+(C[E+94240|0]+e|0)|0];break n}if(D=0,m>>>0>255)break n}D=128&C[344+(e+m|0)|0]}if(Y=NA(c+268|0,Y)+Y|0,(0|(m=A[c+268>>2]))==32)break}if(!((0|b)>(0|L))){Y=18+(b-$|0)|0;break u}}for(;b=C[0|r],r=s=r+1|0,b;);if(C[0|s]!=7)continue i;if(e=a+Wt|0,A[t>>2]=A[t>>2]+(e||1),$A)break e;break r}b=R,O=q,E=v,AA=Y+AA|0;continue}O=O+J|0,D=21-$|0;break s}O=O+J|0,D=20-$|0}b=R,E=v,AA=D+AA|0}}RA=86135}A[n+12>>2]=Rt,A[n+8>>2]=it,A[n+4>>2]=RA,A[n>>2]=$A}F=c+384|0}function k2(e,t){var r,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0;F=r=F-1168|0,A[r+928>>2]=0,A[r+932>>2]=0,A[r+920>>2]=0,A[r+924>>2]=0,A[r+912>>2]=0,A[r+916>>2]=0,A[r+904>>2]=0,A[r+908>>2]=0,A[r+896>>2]=0,A[r+900>>2]=0;A:{e:{if(e){if(C[0|e]|8&t)break e;break A}if(!(8&t))break A}if(A0(r+1088|0,e,40),16&t){if((0|Ke(cA(r+704|0,e)))<=0)break A;Y=8&t}else(Y=8&t)|C[r+1088|0]||(B[r+1088>>1]=C[85055]|C[85056]<<8,l[r+1090|0]=C[85057]),A[r+496>>2]=137584,A[r+500>>2]=47,A[r+504>>2]=47,nA(a=r+512|0,85286,r+496|0),A[r+484>>2]=r+1088,A[r+480>>2]=a,nA(a=r+704|0,85425,r+480|0),(0|Ke(a))>0||(A[r+468>>2]=47,A[r+472>>2]=47,A[r+464>>2]=137584,nA(a=r+512|0,85648,r+464|0),A[r+452>>2]=r+1088,A[r+448>>2]=a,nA(r+704|0,85425,r+448|0));if(s=Y?86012:85055,!(O=_e(r+704|0,85712))){if(a=0,3&t)break A;s=(0|Yt(a=r+1088|0))<0?s:a}if((D=2&t)||(a=A[47192])&&(Nl(a),A[47192]=0),U=cA(r+992|0,s),L=cA(r+944|0,s),D?((a=Ee(200992,43))&&(l[0|a]=0),A[r+432>>2]=e+3,nA(e=r+704|0,86030,r+432|0),P0(200992,e)):(A[32972]=199592,A0(200992,e,40),l[201088]=0,l[201040]=0,A[50299]=200992,A[50298]=201088,A[50297]=201040),Q8(D),O){for(q=A[30450],$=r+548|0,AA=r+544|0,tA=r+540|0,iA=r+536|0,fA=r+532|0,bA=r+528|0,pA=12|(e=r+512|0),GA=8|e,RA=4|e;Dr(r+704|0,190,O);){e=r+704|0;e:{if(C[r+704|0]!=35){r:if(!((0|(e=lA(r+704|0)-1|0))<=0))for(;;){if(!((0|(s=l[0|(a=(r+704|0)+e|0)]))==32|s-9>>>0<5))break r;if(l[0|a]=0,!((0|(e=e-1|0))>0))break}if(!(e=G8(r+704|0)))break e}l[0|e]=0}e=r+704|0;e:if(a=C[r+704|0])for(;;){if((0|(a=a<<24>>24))==32|a-9>>>0<5)break e;if(!(a=C[0|(e=e+1|0)]))break}if(l[0|e]=0,C[r+704|0])if(e=e+1|0,a=Le(129744,r+704|0)){n=0,F=s=F-416|0;e:if(g=A[47192]){r:switch(a-19|0){case 16:if(A[s+32>>2]=s+412,(0|qA(e,84249,s+32|0))!=1)break e;A[g+324>>2]=A[s+412>>2];break e;case 8:nl(e,g+320|0,27);break e;case 2:if(A[s+48>>2]=188784,qA(e,84249,s+48|0),!(e=C[188784]))break e;A[g+152>>2]=e;break e;case 11:if(C[0|e]){for(f=A[30450];;)if(a=e,e=e+1|0,!((0|(n=l[0|a]))==32|n-9>>>0<5)){for(n=y2(a),A[s+412>>2]=n,(0|n)>0&&(n>>>0<=31?A[g+104>>2]=A[g+104>>2]|1<<n:n>>>0<=63?A[g+108>>2]=A[g+108>>2]|1<<n-32:(A[s+64>>2]=n,n0(f,84700,s- -64|0)),a=e);a=(e=a)+1|0,(n=l[0|e])-48>>>0<10|(32|n)-97>>>0<26;);if(!n)break}}8&(e=A[g+104>>2])&&(A[g+124>>2]=46,A[g+128>>2]=44),4&e&&(A[g+124>>2]=0);break e;default:if((65280&a)!=256)break e;A[s+16>>2]=24+(g+((255&a)<<2)|0),qA(e,84249,s+16|0);break e;case 1:A[s+144>>2]=g,A[s+148>>2]=g+4,qA(e,85642,s+144|0);break e;case 3:if(a=0,QA(n=s+160|0,0,240),A[s+132>>2]=s+360,A[s+128>>2]=s+320,A[s+124>>2]=s+280,A[s+120>>2]=s+240,A[s+116>>2]=s+200,A[s+112>>2]=n,n=qA(e,85037,s+112|0),A[s+412>>2]=n,A[g+152>>2]=0,(0|n)<=0)break e;for(b=A[30450];;){i:if(c0(f=(s+160|0)+T(a,40)|0,85301)){s:{if((0|(I=A[34454]))>0)for(v=A[34455],e=0;;){if(!c0(f,v+T(e,68)|0))break s;if((0|I)==(0|(e=e+1|0)))break}A[s+96>>2]=f,n0(b,85562,s+96|0),n=A[s+412>>2];break i}l[156+(a+g|0)|0]=e}if(!((0|n)>(0|(a=a+1|0))))break}break e;case 9:A[s+88>>2]=g+20,A[s+84>>2]=g+16,A[s+80>>2]=g+8,qA(e,84778,s+80|0);break e;case 10:nl(e,g+12|0,29);break e;case 5:if((0|(b=ci(e,s+160|0)))<=0)break e;if(a=0,e=0,b>>>0>=4)for(v=-4&b,f=g+304|0;I=s+160|0,B[f+(e<<1)>>1]=A[I+(e<<2)>>2],B[f+((c=1|e)<<1)>>1]=A[I+(c<<2)>>2],B[f+((c=2|e)<<1)>>1]=A[I+(c<<2)>>2],B[f+((c=3|e)<<1)>>1]=A[I+(c<<2)>>2],e=e+4|0,(0|v)!=(0|(n=n+4|0)););if(!(n=3&b))break e;for(;B[304+(g+(e<<1)|0)>>1]=A[(s+160|0)+(e<<2)>>2],e=e+1|0,(0|n)!=(0|(a=a+1|0)););break e;case 6:if((0|(b=ci(e,s+160|0)))<=0)break e;if(a=0,e=0,b>>>0>=4)for(v=-4&b,f=g+296|0;I=s+160|0,l[e+f|0]=A[I+(e<<2)>>2],l[(c=1|e)+f|0]=A[I+(c<<2)>>2],l[(c=2|e)+f|0]=A[I+(c<<2)>>2],l[(c=3|e)+f|0]=A[I+(c<<2)>>2],e=e+4|0,(0|v)!=(0|(n=n+4|0)););if(!(n=3&b))break e;for(;l[296+(e+g|0)|0]=A[(s+160|0)+(e<<2)>>2],e=e+1|0,(0|n)!=(0|(a=a+1|0)););break e;case 7:if((0|(b=ci(e,s+160|0)))<=0)break e;if(a=0,e=0,b>>>0>=4)for(v=-4&b,f=g+304|0;c=I=f+(e<<1)|0,m=y[I>>1],I=s+160|0,B[c>>1]=m+y[I+(e<<2)>>1],B[(m=f+((c=1|e)<<1)|0)>>1]=y[m>>1]+y[I+(c<<2)>>1],B[(m=f+((c=2|e)<<1)|0)>>1]=y[m>>1]+y[I+(c<<2)>>1],B[(m=f+((c=3|e)<<1)|0)>>1]=y[m>>1]+y[I+(c<<2)>>1],e=e+4|0,(0|v)!=(0|(n=n+4|0)););if(!(n=3&b))break e;for(;B[(f=g+(e<<1)|0)+304>>1]=y[f+304>>1]+y[(s+160|0)+(e<<2)>>1],e=e+1|0,(0|n)!=(0|(a=a+1|0)););break e;case 4:l[g+169|0]=1;break e;case 0:break r}l[g+208|0]=1}else A[s>>2]=Ht(129568,a),n0(A[30450],89101,s);F=s+416|0}else{e:switch(Le(131904,r+704|0)-1|0){case 1:if(D||(l[r+1040|0]=0,A[r+512>>2]=5,A[r+32>>2]=r+1040,A[r+36>>2]=r+512,qA(e,86237,r+32|0),A[r+1040>>2]==1769103734&A[r+1044>>2]==7630433))continue;if((e=lA(r+1040|0)+2|0)>>>0<99-R>>>0&&(l[0|(a=R+201088|0)]=A[r+512>>2],cA(a+1|0,r+1040|0),R=e+R|0),!VA){if(e=0,(a=f=r+1040|0)||(a=A[57150])){if(e=86875,A[(s=F-32|0)+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,A[s>>2]=0,A[s+4>>2]=0,g=0,n=C[86875])if(C[86876]){for(;A[(g=s+(n>>>3&28)|0)>>2]=A[g>>2]|1<<n,n=C[e+1|0],e=e+1|0,n;);r:if(n=C[0|(e=a)])for(;;){if(!(A[s+(n>>>3&28)>>2]>>>n&1))break r;if(n=C[e+1|0],e=e+1|0,!n)break}g=e-a|0}else{for(e=a;s=e,e=e+1|0,C[0|s]==(0|n););g=s-a|0}if(C[0|(e=g+a|0)]){a=86875,F=n=F-32|0,s=l[86875];r:if(C[86876]&&s){if(QA(n,0,32),s=C[86875])for(;A[(g=n+(s>>>3&28)|0)>>2]=A[g>>2]|1<<s,s=C[a+1|0],a=a+1|0,s;);if(a=e,s=C[0|e])for(;;){if(A[n+(s>>>3&28)>>2]>>>s&1)break r;if(s=C[a+1|0],a=a+1|0,!s)break}}else a=gi(e,s);F=n+32|0,C[0|(a=(a-e|0)+e|0)]?(A[57150]=a+1,l[0|a]=0):A[57150]=0}else A[57150]=0,e=0}a=cA(U,e),cA(L,e),Yt(cA(r+896|0,e)),A[47192]=X1(a),A0(A[32972]+40|0,f,20)}VA=1;continue;case 0:if(D)continue;for(;a=e,e=e+1|0,(0|(s=l[0|a]))==32|s-9>>>0<5;);A0(201040,a,40);continue;case 2:A[r+1152>>2]=0,a=r+512|0,A[r+48>>2]=a,A[r+52>>2]=r+1152,qA(e,86237,r+48|0),l[201200]=Le(132112,a),l[201201]=A[r+1152>>2];continue;case 4:A[r+64>>2]=L,qA(e,86939,r- -64|0);continue;case 3:A[r+80>>2]=r+896,qA(e,86939,r+80|0);continue;case 8:if(A[r+1152>>2]=100,A[r+1164>>2]=100,A[r+1148>>2]=100,A[r+112>>2]=r+1144,A[r+1144>>2]=0,A[r+96>>2]=r+512,A[r+100>>2]=r+1152,A[r+104>>2]=r+1164,A[r+108>>2]=r+1148,(0|qA(e,91156,r+96|0))<2||(e=A[r+512>>2])>>>0>8||((0|(a=A[r+1152>>2]))>=0&&(s=A[32972]+(e<<1)|0,a=sA(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,B[s+236>>1]=a,B[s+164>>1]=a),(0|(a=A[r+1164>>2]))>=0&&(s=A[32972]+(e<<1)|0,a=sA(E=2.56001*+(0|a))<2147483648?~~E:-2147483648,B[s+254>>1]=a,B[s+182>>1]=a),(0|(s=A[r+1148>>2]))<0?a=A[32972]:(f=(a=A[32972])+(e<<1)|0,s=sA(E=2.56001*+(0|s))<2147483648?~~E:-2147483648,B[f+200>>1]=s),B[218+((e<<1)+a|0)>>1]=A[r+1144>>2],e))continue;B[a+200>>1]=(0|T(B[a+200>>1],105))/100;continue;case 9:if(A[r+132>>2]=r+696,A[r+128>>2]=r+700,(0|qA(e,87106,r+128|0))!=2)continue;if(e=A[32972],a=A[r+700>>2],A[e+64>>2]=(a<<12)-36864,A[e+68>>2]=T(A[r+696>>2]-a|0,108),sA(E=256*(+(a-82|0)/82*.25+1))<2147483648){A[e+116>>2]=~~E;continue}A[e+116>>2]=-2147483648;continue;case 35:$A||Yt(r+896|0),A[r+1164>>2]=0,l[r+1156|0]=C[91267],A[r+1152>>2]=C[91263]|C[91264]<<8|C[91265]<<16|C[91266]<<24,A[r+144>>2]=r+1164,A[r+148>>2]=r+512,A[r+152>>2]=r+1152,(0|qA(e,91302,r+144|0))<2|A[49848]>59||(e=gl(r+512|0))&&(l[T(A[49848],3)+199408|0]=e,e=gl(r+1152|0),a=A[49848],s=T(a,3)+199408|0,l[s+1|0]=e,A[49848]=a+1,l[s+2|0]=A[r+1164>>2]),$A=1;continue;case 10:A[r+1140>>2]=0,a=A[32972],A[a+100>>2]=0,A[r+164>>2]=a+100,A[r+160>>2]=a+96,qA(e,87106,r+160|0);continue;case 11:if(A[r+176>>2]=r+1140,(0|qA(e,87268,r+176|0))!=1)continue;A[A[32972]+88>>2]=A[r+1140>>2]<<5;continue;case 12:if(A[r+192>>2]=r+1140,(0|qA(e,87268,r+192|0))!=1)continue;A[A[32972]+92>>2]=A[r+1140>>2];continue;case 13:if(A[r+208>>2]=r+1140,(0|qA(e,87268,r+208|0))!=1)continue;a=A[32972],(0|(e=A[r+1140>>2]))>=5&&(A[a+108>>2]=1,A[r+1140>>2]=4,e=4),A[a+104>>2]=e+1;continue;case 14:for(A[r+552>>2]=-1,A[r+556>>2]=-1,A[r+544>>2]=-1,A[r+548>>2]=-1,A[r+536>>2]=-1,A[r+540>>2]=-1,A[r+528>>2]=-1,A[r+532>>2]=-1,A[r+240>>2]=bA,A[r+244>>2]=fA,A[r+248>>2]=iA,A[r+252>>2]=tA,A[r+256>>2]=AA,A[r+260>>2]=$,A[r+520>>2]=-1,A[r+524>>2]=-1,A[r+512>>2]=-1,A[r+516>>2]=-1,A[r+228>>2]=RA,A[r+232>>2]=GA,A[r+236>>2]=pA,A[r+224>>2]=r+512,qA(e,84222,r+224|0),v=A[32972],e=0,n=A[r+516>>2],s=0;;){if(a=s,g=n,f=e,(0|(s=A[(n=(e<<=2)+(r+512|0)|0)>>2]))==-1&&(s=8e3,A[n>>2]=8e3,f&&(A[(r+512|0)+(4|e)>>2]=A[508+(e+r|0)>>2])),n=A[(r+512|0)+(4|e)>>2],!((0|a)>=(0|(s=(0|s)/8|0))||(0|(I=s-a|0))<=0||(b=a+1|0,e=a,1&I&&(l[344+(a+v|0)|0]=(0|g)>=255?255:g,e=b),(0|s)==(0|b))))for(b=n-g|0;m=v+344|0,c=g+((0|T(b,e-a|0))/(0|I)|0)|0,l[m+e|0]=(0|c)>=255?255:c,c=g+((0|T(b,(J=e+1|0)-a|0))/(0|I)|0)|0,l[m+J|0]=(0|c)>=255?255:c,(0|s)!=(0|(e=e+2|0)););if(e=f+2|0,!(f>>>0<10))break}continue;case 15:if(A[r+272>>2]=r+1140,(0|qA(e,87268,r+272|0))!=1)continue;A[A[32972]+112>>2]=(A[r+1140>>2]<<6)/100;continue;case 16:a=A[32972],A[(s=a+300|0)>>2]=0,A[s+4>>2]=0,A[(n=a+292|0)>>2]=0,A[n+4>>2]=0,A[(g=a+284|0)>>2]=0,A[g+4>>2]=0,A[(f=a+276|0)>>2]=0,A[f+4>>2]=0,A[r+316>>2]=a+304,A[r+312>>2]=s,A[r+308>>2]=a+296,A[r+304>>2]=n,A[r+300>>2]=a+288,A[r+296>>2]=g,A[r+292>>2]=a+280,A[r+288>>2]=f,a=qA(e,84553,r+288|0),e=A[32972],A[e+272>>2]=a,A[e+276>>2]=0-A[e+276>>2],A[e+284>>2]=0-A[e+284>>2],A[e+292>>2]=0-A[e+292>>2],A[e+300>>2]=0-A[e+300>>2];continue;case 17:a=A[32972],A[(s=a+336|0)>>2]=0,A[s+4>>2]=0,A[(n=a+328|0)>>2]=0,A[n+4>>2]=0,A[(g=a+320|0)>>2]=0,A[g+4>>2]=0,A[(f=a+312|0)>>2]=0,A[f+4>>2]=0,A[r+348>>2]=a+340,A[r+344>>2]=s,A[r+340>>2]=a+332,A[r+336>>2]=n,A[r+332>>2]=a+324,A[r+328>>2]=g,A[r+324>>2]=a+316,A[r+320>>2]=f,e=qA(e,84553,r+320|0),A[A[32972]+308>>2]=e;continue;case 36:a=A[32972],A[r+352>>2]=a+120,A[r+356>>2]=a+124,A[r+1140>>2]=qA(e,87106,r+352|0);continue;case 33:A[r+368>>2]=A[32972]+84,qA(e,87268,r+368|0),Br(3);continue;case 31:a=A[32972],A[(s=a+156|0)>>2]=0,A[s+4>>2]=0,A[(n=a+148|0)>>2]=0,A[n+4>>2]=0,A[(g=a+140|0)>>2]=0,A[g+4>>2]=0,A[(f=a+132|0)>>2]=0,A[f+4>>2]=0,A[r+412>>2]=a+160,A[r+408>>2]=s,A[r+404>>2]=a+152,A[r+400>>2]=n,A[r+396>>2]=a+144,A[r+392>>2]=g,A[r+388>>2]=a+136,A[r+384>>2]=f,qA(e,84553,r+384|0),e=A[32972],A[e+152>>2]=A[e+152>>2]-40;continue;case 32:A[r+416>>2]=145740,qA(e,87268,r+416|0),Br(3);continue;case 6:case 7:continue;default:break e}A[r+16>>2]=r+704,n0(q,87359,r+16|0)}}H0(O)}e:{if((e=A[47192])|D){if(D)break e}else e=X1(U),A[47192]=e;r:{if(!Y){if((0|(e=Yt(r+896|0)))<0&&(A[r>>2]=r+896,n0(A[30450],87567,r),e=0),A[A[32972]+60>>2]=e,a=A[47192],A[a+292>>2]=e,y8(a,L,4&t),C[132848])break r;Nl(A[47192]),a=0;break A}A[A[32972]+60>>2]=0,A[e+292>>2]=0}l[R+201088|0]=0}a=A[32972]}return F=r+1168|0,a}function qA(e,t,r){var a,s,n,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0;F=n=F-16|0,A[n+12>>2]=r,F=g=F-144|0,a=QA(g,0,144),A[a+76>>2]=-1,A[a+44>>2]=e,A[a+32>>2]=18,A[a+84>>2]=e,g=t,$=r,e=0,F=s=F-304|0;A:{e:{r:if(A[a+4>>2]||(Ii(a),A[a+4>>2])){if(!(t=C[0|g]))break A;i:{s:{o:{f:{for(;;){u:{g:if((0|(t&=255))==32|t-9>>>0<5){for(;t=g,g=g+1|0,(0|(r=C[t+1|0]))==32|r-9>>>0<5;);for(Be(a,0,0);(0|(r=A[a+4>>2]))==A[a+104>>2]?r=WA(a):(A[a+4>>2]=r+1,r=C[0|r]),(0|r)==32|r-9>>>0<5;);g=A[a+4>>2],(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(g=g-1|0,A[a+4>>2]=g),g=r=g-A[a+44>>2]|0,b=R+A[a+124>>2]|0,b=(f=r>>31)+((r=D+A[a+120>>2]|0)>>>0<D>>>0?b+1|0:b)|0,R=(D=r+g|0)>>>0<r>>>0?b+1|0:b}else{n:{d:{p:{if(C[0|g]==37){if((0|(t=C[g+1|0]))==42)break p;if((0|t)!=37)break d}if(Be(a,0,0),C[0|g]!=37)(0|(t=A[a+4>>2]))==A[a+104>>2]?t=WA(a):(A[a+4>>2]=t+1,t=C[0|t]);else{for(;(0|(t=A[a+4>>2]))==A[a+104>>2]?t=WA(a):(A[a+4>>2]=t+1,t=C[0|t]),(0|t)==32|t-9>>>0<5;);g=g+1|0}if(C[0|g]!=(0|t)){if((0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),(0|t)>=0||(c=0,AA))break A;break r}I=(f=t=A[a+4>>2]-A[a+44>>2]|0)>>31,t=R+A[a+124>>2]|0,c=((r=D+A[a+120>>2]|0)>>>0<D>>>0?t+1|0:t)+I|0,R=(D=r+f|0)>>>0<r>>>0?c+1|0:c,t=g;break g}m=0,t=g+2|0;break n}C[g+2|0]!=36|t-48>>>0>=10?(m=A[$>>2],$=$+4|0,t=g+1|0):(t=C[g+1|0]-48|0,A[(r=F-16|0)+12>>2]=$,t=(t>>>0>1?(t<<2)-4|0:0)+$|0,A[r+8>>2]=t+4,m=A[t>>2],t=g+3|0)}if(E=0,g=0,C[0|t]-48>>>0<10)for(;g=(C[0|t]+T(g,10)|0)-48|0,r=C[t+1|0],t=t+1|0,r-48>>>0<10;);(0|(Y=C[0|t]))==109&&(v=0,E=!!(0|m),Y=C[t+1|0],e=0,t=t+1|0),t=(r=t)+1|0,f=3,c=E;n:{d:switch(Y-65|0){case 39:f=r+2|0,t=(r=C[r+1|0]==104)?f:t,f=r?-2:-1;break n;case 43:f=r+2|0,t=(r=C[r+1|0]==108)?f:t,f=r?3:1;break n;case 51:case 57:f=1;break n;case 11:f=2;break n;case 41:break n;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break d;default:break i}f=0,t=r}c=f,J=(f=(47&(r=C[0|t]))==3)?1:c;n:if((0|(U=f?32|r:r))!=91){d:{if((0|U)!=110){if((0|U)!=99)break d;g=(0|g)<=1?1:g;break n}Bl(m,J,D,R);break g}for(Be(a,0,0);(0|(r=A[a+4>>2]))==A[a+104>>2]?r=WA(a):(A[a+4>>2]=r+1,r=C[0|r]),(0|r)==32|r-9>>>0<5;);r=A[a+4>>2],(0|(f=A[a+116>>2]))>0|(0|f)>=0&&(r=r-1|0,A[a+4>>2]=r),f=r=r-A[a+44>>2]|0,b=R+A[a+124>>2]|0,R=(c=r>>31)+((r=D+A[a+120>>2]|0)>>>0<D>>>0?b+1|0:b)|0,R=(D=r+f|0)>>>0<r>>>0?R+1|0:R}if(O=g,Be(a,g,L=g>>31),(0|(r=A[a+4>>2]))==A[a+104>>2]){if((0|WA(a))<0)break s}else A[a+4>>2]=r+1;(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),r=16;n:{d:{p:{I:{h:switch(U-88|0){default:if((r=U-65|0)>>>0>6|!(1<<r&113))break n;case 9:case 13:case 14:case 15:if(p8(s+8|0,a,J,0),r=A[a+4>>2]-A[a+44>>2]|0,A[a+120>>2]!=(0-r|0)|A[a+124>>2]!=(0-((r>>31)+!!(0|r)|0)|0))break p;break o;case 3:case 11:case 27:if((16|U)==115){if(QA(s+32|0,-1,257),l[s+32|0]=0,(0|U)!=115)break d;l[s+65|0]=0,l[s+46|0]=0,B[s+42>>1]=0,B[s+44>>1]=0;break d}QA(s+32|0,I=(0|(f=C[t+1|0]))==94,257),l[s+32|0]=0,r=I?t+2|0:t+1|0;b:{v:{m:{if((0|(t=C[(I?2:1)+t|0]))!=45){if((0|t)==93)break m;f=(0|f)!=94,t=r;break b}f=(0|f)!=94,l[s+78|0]=f;break v}f=(0|f)!=94,l[s+126|0]=f}t=r+1|0}for(;;){if((0|(r=C[0|t]))==45){if(r=45,!(!(I=C[t+1|0])|(0|I)==93)){if(c=t+1|0,I>>>0<=(t=C[t-1|0])>>>0)r=I;else for(;l[(t=t+1|0)+(s+32|0)|0]=f,(r=C[0|c])>>>0>t>>>0;);t=c}}else{if(!r)break s;if((0|r)==93)break d}l[33+(r+s|0)|0]=f,t=t+1|0}case 23:r=8;break I;case 12:case 29:r=10;break I;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break n;case 0:case 24:case 32:break I;case 17:break h}r=0}I=0,b=0,f=0,c=0,Y=0,F=q=F-16|0;I:if((0|r)!=1&r>>>0<=36){for(;(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),(0|g)==32|g-9>>>0<5;);h:{b:switch(g-43|0){case 0:case 2:break b;default:break h}Y=(0|g)==45?-1:0,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g])}h:{b:{v:{m:{if(!(!!(0|r)&(0|r)!=16|(0|g)!=48)){if((0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),(-33&g)==88){if(r=16,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),C[g+121329|0]<16)break v;(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),Be(a,0,0);break I}if(r)break m;r=8;break v}if(!((r=r||10)>>>0>C[g+121329|0])){(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),Be(a,0,0),A[56798]=28;break I}}if((0|r)==10){if((f=g-48|0)>>>0<=9){for(r=0;c=(r=T(r,10)+f|0)>>>0<429496729,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),c&(f=g-48|0)>>>0<=9;);I=r}m:if(!(f>>>0>9)){for(r=DA(I,0,10,0),c=_;;){if(b=c,c=(0|(b=(I=r+f|0)>>>0<f>>>0?b+1|0:b))==429496729&I>>>0>=2576980378|b>>>0>429496729,(0|(r=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=r+1,g=C[0|r]),c|(f=g-48|0)>>>0>9)break m;if(r=DA(I,b,10,0),!((0|(c=_))==-1&~f>>>0>=r>>>0|(0|c)!=-1))break}r=10;break b}if(r=10,f>>>0<=9)break b;break h}}if(r-1&r){if((c=C[g+121329|0])>>>0<r>>>0){for(;I=(f=T(r,f)+c|0)>>>0<119304647,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),I&(c=C[g+121329|0])>>>0<r>>>0;);I=f}if(r>>>0<=c>>>0)break b;for(;;){if(f=DA(I,b,r,0),(0|(O=_))==-1&~(c&=255)>>>0<f>>>0||(b=O,b=(I=f+c|0)>>>0<c>>>0?b+1|0:b,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),r>>>0<=(c=C[g+121329|0])>>>0))break b;if(D0(q,r,0,0,0,I,b,0,0),A[q+8>>2]|A[q+12>>2])break}}else{if(O=l[84400+(T(r,23)>>>5&7)|0],(f=C[g+121329|0])>>>0<r>>>0){for(;I=(c=c<<O|f)>>>0<134217728,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),I&(f=C[g+121329|0])>>>0<r>>>0;);I=c}if(!(r>>>0<=f>>>0||(L=31&O,(63&O)>>>0>=32?(c=0,L=-1>>>L|0):L=(c=-1>>>L|0)|(1<<L)-1<<32-L,!c&I>>>0>L>>>0)))for(;;){if(tA=255&f,f=I,g=31&O,(63&O)>>>0>=32?(b=f<<g,g=0):(b=(1<<g)-1&f>>>32-g|b<<g,g=f<<g),I=tA|g,(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),r>>>0<=(f=C[g+121329|0])>>>0)break b;if(!((0|c)==(0|b)&I>>>0<=L>>>0|c>>>0>b>>>0))break}}}if(!(C[g+121329|0]>=r>>>0)){for(;(0|(g=A[a+4>>2]))==A[a+104>>2]?g=WA(a):(A[a+4>>2]=g+1,g=C[0|g]),C[g+121329|0]<r>>>0;);A[56798]=68,Y=0,I=-1,b=-1}}(0|(r=A[a+116>>2]))>0|(0|r)>=0&&(A[a+4>>2]=A[a+4>>2]-1),I=(r=I^Y)-Y|0,b=((g=Y>>31)^b)-((r>>>0<Y>>>0)+g|0)|0}else A[56798]=28;if(F=q+16|0,r=A[a+4>>2]-A[a+44>>2]|0,A[a+120>>2]==(0-r|0)&A[a+124>>2]==(0-((r>>31)+!!(0|r)|0)|0))break o;if(!(!m|(0|U)!=112)){A[m>>2]=I;break n}Bl(m,J,I,b);break n}if(!m)break n;g=A[s+16>>2],r=A[s+20>>2],f=A[s+8>>2],E=A[s+12>>2];p:switch(0|J){case 0:F=b=F-32|0;I:if(0|(c=(I=2147483647&r)-1065418752|0)>>>0<(O=I-1082064896|0)>>>0){if(I=(33554431&r)<<7|g>>>25,O=c=0,!(!c&(0|(g&=33554431))==16777216?!(f|E):!c&g>>>0<16777216)){c=I+1073741825|0;break I}if(c=I+1073741824|0,16777216^g|f|E|O)break I;c=(1&I)+c|0}else(!g&(0|I)==2147418112?!(f|E):I>>>0<2147418112)?(c=2139095040,I>>>0>1082064895||(c=0,(I=I>>>16|0)>>>0<16145||(T0(b+16|0,f,E,g,c=65535&r|65536,I-16129|0),v2(b,f,E,g,c,16257-I|0),g=A[b+8>>2],c=(33554431&A[b+12>>2])<<7|g>>>25,I=A[b>>2]|!!(A[b+16>>2]|A[b+24>>2]|A[b+20>>2]|A[b+28>>2]),E=A[b+4>>2],(!(f=0)&(0|(g&=33554431))==16777216?!(I|E):!f&g>>>0<16777216)?16777216^g|I|f|E||(c=(1&c)+c|0):c=c+1|0))):c=4194303&((33554431&r)<<7|g>>>25)|2143289344;F=b+32|0,A[m>>2]=-2147483648&r|c;break n;case 1:Q[m>>3]=ii(f,E,g,r);break n;case 2:break p;default:break n}A[m>>2]=f,A[m+4>>2]=E,A[m+8>>2]=g,A[m+12>>2]=r;break n}f=(q=(0|U)!=99)?31:g+1|0;d:if((0|J)!=1){if(E){if(g=0,!(r=m0(f)))break f;for(;;){for(e=r;;){if((0|(r=A[a+4>>2]))==A[a+104>>2]?r=WA(a):(A[a+4>>2]=r+1,r=C[0|r]),!C[33+(r+s|0)|0]){f=0,v=e;break d}if(l[e+g|0]=r,(0|f)==(0|(g=g+1|0)))break}if(c=1,!(r=Re(e,f=f<<1|1)))break}v=e,e=0;break i}if(g=0,m)for(;;){if((0|(e=A[a+4>>2]))==A[a+104>>2]?e=WA(a):(A[a+4>>2]=e+1,e=C[0|e]),!C[33+(e+s|0)|0]){f=0,v=e=m;break d}l[g+m|0]=e,g=g+1|0}for(;(0|(e=A[a+4>>2]))==A[a+104>>2]?e=WA(a):(A[a+4>>2]=e+1,e=C[0|e]),C[33+(e+s|0)|0];);e=0,v=0,f=0}else{if(r=m,E&&!(r=m0(f<<2)))break f;for(A[s+296>>2]=0,A[s+300>>2]=0,g=0;;){e=r;p:{for(;;){if((0|(r=A[a+4>>2]))==A[a+104>>2]?r=WA(a):(A[a+4>>2]=r+1,r=C[0|r]),!C[33+(r+s|0)|0])break p;l[s+27|0]=r,I=s+28|0,r=A[(c=(r=s+296|0)||228604)>>2];I:{h:{b:{v:{if(!(v=s+27|0)){if(r)break v;r=0;break I}if(!r){if((0|(b=(r=C[0|v])<<24>>24))>=0){I&&(A[I>>2]=r),r=!!(0|b);break I}if(!A[A[56841]>>2]){if(r=1,!I)break b;A[I>>2]=57343&b,r=1;break I}if((r=r-194|0)>>>0>50)break v;r=A[124752+(r<<2)>>2];break h}if(Y=1,!(((J=(b=C[0|v])>>>3|0)-16|(r>>26)+J)>>>0>7))for(;;){if(Y=Y-1|0,(0|(r=b-128|r<<6))>=0){A[c>>2]=0,I&&(A[I>>2]=r),r=1-Y|0;break I}if(!Y)break h;if((192&(b=C[0|(v=v+1|0)]))!=128)break}}A[c>>2]=0,A[56798]=25,r=-1}break I}A[c>>2]=r,r=-2}if((0|r)!=-2){if(v=0,(0|r)==-1)break s;if(e&&(A[(g<<2)+e>>2]=A[s+28>>2],g=g+1|0),!(!E|(0|g)!=(0|f)))break}}if(c=1,r=Re(e,(f=f<<1|1)<<2))continue;break i}break}if(v=0,f=e,s+296|0&&A[s+296>>2])break s}if(r=A[a+4>>2],(0|(I=A[a+116>>2]))>0|(0|I)>=0&&(r=r-1|0,A[a+4>>2]=r),r=(I=r-A[a+44>>2]|0)+A[a+120>>2]|0,b=A[a+124>>2]+(I>>31)|0,!((b=r>>>0<I>>>0?b+1|0:b)|r)|!(q|(0|r)==(0|O)&(0|b)==(0|L)))break u;E&&(A[m>>2]=e),(0|U)!=99&&(f&&(A[(g<<2)+f>>2]=0),v?l[g+v|0]=0:v=0),e=f}g=r=A[a+4>>2]-A[a+44>>2]|0,c=R+A[a+124>>2]|0,R=(f=r>>31)+((r=D+A[a+120>>2]|0)>>>0<D>>>0?c+1|0:c)|0,R=(D=r+g|0)>>>0<r>>>0?R+1|0:R,AA=!!(0|m)+AA|0}if(g=t+1|0,t=C[t+1|0])continue;break A}break}e=f;break o}c=1,v=0,e=0;break i}c=E;break e}c=E}if(AA)break e}AA=-1}c&&(SA(v),SA(e))}return F=s+304|0,F=a+144|0,F=n+16|0,AA}function m0(e){var t,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;F=t=F-16|0;A:{e:{r:{i:{s:{o:{f:{u:{g:{if((e|=0)>>>0<=244){if(3&(r=(f=A[57152])>>>(a=(c=e>>>0<11?16:e+11&-8)>>>3|0)|0)){r=(e=(a=a+(1&~r)|0)<<3)+228648|0,s=A[e+228656>>2],(0|r)!=(0|(e=A[s+8>>2]))?(A[e+12>>2]=r,A[r+8>>2]=e):A[57152]=R0(-2,a)&f,e=s+8|0,r=a<<3,A[s+4>>2]=3|r,A[(r=r+s|0)+4>>2]=1|A[r+4>>2];break A}if((m=A[57154])>>>0>=c>>>0)break g;if(r){r=(e=(s=Vr(0-(e=(0-(e=2<<a)|e)&r<<a)&e))<<3)+228648|0,n=A[e+228656>>2],(0|r)!=(0|(e=A[n+8>>2]))?(A[e+12>>2]=r,A[r+8>>2]=e):(f=R0(-2,s)&f,A[57152]=f),A[n+4>>2]=3|c,s=(e=s<<3)-c|0,A[(a=n+c|0)+4>>2]=1|s,A[e+n>>2]=s,m&&(r=228648+(-8&m)|0,g=A[57157],(e=1<<(m>>>3))&f?e=A[r+8>>2]:(A[57152]=e|f,e=r),A[r+8>>2]=g,A[e+12>>2]=g,A[g+12>>2]=r,A[g+8>>2]=e),e=n+8|0,A[57157]=a,A[57154]=s;break A}if(!(b=A[57153]))break g;for(a=A[228912+(Vr(0-b&b)<<2)>>2],g=(-8&A[a+4>>2])-c|0,r=a;(e=A[r+16>>2])||(e=A[r+20>>2]);)g=(s=(r=(-8&A[e+4>>2])-c|0)>>>0<g>>>0)?r:g,a=s?e:a,r=e;if(I=A[a+24>>2],(0|(s=A[a+12>>2]))!=(0|a)){e=A[a+8>>2],A[e+12>>2]=s,A[s+8>>2]=e;break e}if(!(e=A[(r=a+20|0)>>2])){if(!(e=A[a+16>>2]))break u;r=a+16|0}for(;n=r,s=e,(e=A[(r=e+20|0)>>2])||(r=s+16|0,e=A[s+16>>2]););A[n>>2]=0;break e}if(c=-1,!(e>>>0>4294967231)&&(c=-8&(e=e+11|0),b=A[57153])){g=0-c|0,f=0,c>>>0<256||(f=31,c>>>0>16777215||(f=62+((c>>>38-(e=oA(e>>>8|0))&1)-(e<<1)|0)|0));n:{d:{if(r=A[228912+(f<<2)>>2])for(e=0,a=c<<((0|f)!=31?25-(f>>>1|0):0);;){if(!((n=(-8&A[r+4>>2])-c|0)>>>0>=g>>>0||(s=r,g=n,n))){g=0,e=r;break d}if(n=A[r+20>>2],r=A[16+((a>>>29&4)+r|0)>>2],e=n?(0|n)==(0|r)?e:n:e,a<<=1,!r)break}else e=0;if(!(e|s)){if(s=0,!(e=(0-(e=2<<f)|e)&b))break g;e=A[228912+(Vr(e&0-e)<<2)>>2]}if(!e)break n}for(;g=(a=(r=(-8&A[e+4>>2])-c|0)>>>0<g>>>0)?r:g,s=a?e:s,e=(r=A[e+16>>2])||A[e+20>>2];);}if(!(!s|A[57154]-c>>>0<=g>>>0)){if(f=A[s+24>>2],(0|s)!=(0|(a=A[s+12>>2]))){e=A[s+8>>2],A[e+12>>2]=a,A[a+8>>2]=e;break r}if(!(e=A[(r=s+20|0)>>2])){if(!(e=A[s+16>>2]))break f;r=s+16|0}for(;n=r,a=e,(e=A[(r=e+20|0)>>2])||(r=a+16|0,e=A[a+16>>2]););A[n>>2]=0;break r}}}if((e=A[57154])>>>0>=c>>>0){s=A[57157],(r=e-c|0)>>>0>=16?(A[(a=s+c|0)+4>>2]=1|r,A[e+s>>2]=r,A[s+4>>2]=3|c):(A[s+4>>2]=3|e,A[(e=e+s|0)+4>>2]=1|A[e+4>>2],a=0,r=0),A[57154]=r,A[57157]=a,e=s+8|0;break A}if((I=A[57155])>>>0>c>>>0){r=I-c|0,A[57155]=r,e=(a=A[57158])+c|0,A[57158]=e,A[e+4>>2]=1|r,A[a+4>>2]=3|c,e=a+8|0;break A}if(e=0,b=c+47|0,A[57270]?a=A[57272]:(A[57273]=-1,A[57274]=-1,A[57271]=4096,A[57272]=4096,A[57270]=t+12&-16^1431655768,A[57275]=0,A[57263]=0,a=4096),(r=(n=b+a|0)&(g=0-a|0))>>>0<=c>>>0||(s=A[57262])&&s>>>0<(f=(a=A[57260])+r|0)>>>0|a>>>0>=f>>>0)break A;g:{if(!(4&C[229052])){n:{d:{p:{I:{if(s=A[57158])for(e=229056;;){if((a=A[e>>2])>>>0<=s>>>0&s>>>0<a+A[e+4>>2]>>>0)break I;if(!(e=A[e+8>>2]))break}if((0|(a=$2(0)))==-1||(f=r,(e=(s=A[57271])-1|0)&a&&(f=(r-a|0)+(e+a&0-s)|0),f>>>0<=c>>>0)||(s=A[57262])&&s>>>0<(g=(e=A[57260])+f|0)>>>0|e>>>0>=g>>>0)break n;if((0|a)!=(0|(e=$2(f))))break p;break g}if((0|(a=$2(f=g&n-I)))==(A[e>>2]+A[e+4>>2]|0))break d;e=a}if((0|e)==-1)break n;if(c+48>>>0<=f>>>0){a=e;break g}if((0|$2(a=(a=A[57272])+(b-f|0)&0-a))==-1)break n;f=a+f|0,a=e;break g}if((0|a)!=-1)break g}A[57263]=4|A[57263]}if((0|(a=$2(r)))==-1|(0|(e=$2(0)))==-1|e>>>0<=a>>>0||(f=e-a|0)>>>0<=c+40>>>0)break i}e=A[57260]+f|0,A[57260]=e,e>>>0>aA[57261]&&(A[57261]=e);g:{if(n=A[57158]){for(e=229056;;){if(((s=A[e>>2])+(r=A[e+4>>2])|0)==(0|a))break g;if(!(e=A[e+8>>2]))break}break o}for((e=A[57156])>>>0<=a>>>0&&e||(A[57156]=a),e=0,A[57265]=f,A[57264]=a,A[57160]=-1,A[57161]=A[57270],A[57267]=0;r=(s=e<<3)+228648|0,A[s+228656>>2]=r,A[s+228660>>2]=r,(0|(e=e+1|0))!=32;);r=(s=f-40|0)-(e=a+8&7?-8-a&7:0)|0,A[57155]=r,e=e+a|0,A[57158]=e,A[e+4>>2]=1|r,A[4+(a+s|0)>>2]=40,A[57159]=A[57274];break s}if(8&C[e+12|0]|s>>>0>n>>>0|a>>>0<=n>>>0)break o;A[e+4>>2]=r+f,a=(e=n+8&7?-8-n&7:0)+n|0,A[57158]=a,e=(r=A[57155]+f|0)-e|0,A[57155]=e,A[a+4>>2]=1|e,A[4+(r+n|0)>>2]=40,A[57159]=A[57274];break s}s=0;break e}a=0;break r}aA[57156]>a>>>0&&(A[57156]=a),r=a+f|0,e=229056;o:{f:{u:{g:{n:{d:{for(;;){if((0|r)!=A[e>>2]){if(e=A[e+8>>2])continue;break d}break}if(!(8&C[e+12|0]))break n}for(e=229056;;){if((r=A[e>>2])>>>0<=n>>>0&&(g=r+A[e+4>>2]|0)>>>0>n>>>0)break g;e=A[e+8>>2]}}if(A[e>>2]=a,A[e+4>>2]=A[e+4>>2]+f,A[(b=(a+8&7?-8-a&7:0)+a|0)+4>>2]=3|c,e=(f=r+(r+8&7?-8-r&7:0)|0)-(I=c+b|0)|0,(0|n)==(0|f)){A[57158]=I,e=A[57155]+e|0,A[57155]=e,A[I+4>>2]=1|e;break f}if(A[57157]==(0|f)){A[57157]=I,e=A[57154]+e|0,A[57154]=e,A[I+4>>2]=1|e,A[e+I>>2]=e;break f}if((3&(g=A[f+4>>2]))==1){n=-8&g;n:if(g>>>0<=255){if(s=A[f+8>>2],r=g>>>3|0,(0|(a=A[f+12>>2]))==(0|s)){A[57152]=A[57152]&R0(-2,r);break n}A[s+12>>2]=a,A[a+8>>2]=s}else{if(c=A[f+24>>2],(0|f)==(0|(a=A[f+12>>2])))if((r=A[(g=f+20|0)>>2])||(r=A[(g=f+16|0)>>2])){for(;s=g,(r=A[(g=(a=r)+20|0)>>2])||(g=a+16|0,r=A[a+16>>2]););A[s>>2]=0}else a=0;else r=A[f+8>>2],A[r+12>>2]=a,A[a+8>>2]=r;if(c){s=A[f+28>>2];d:{if(A[(r=228912+(s<<2)|0)>>2]==(0|f)){if(A[r>>2]=a,a)break d;A[57153]=A[57153]&R0(-2,s);break n}if(A[c+(A[c+16>>2]==(0|f)?16:20)>>2]=a,!a)break n}A[a+24>>2]=c,(r=A[f+16>>2])&&(A[a+16>>2]=r,A[r+24>>2]=a),(r=A[f+20>>2])&&(A[a+20>>2]=r,A[r+24>>2]=a)}}g=A[(f=n+f|0)+4>>2],e=e+n|0}if(A[f+4>>2]=-2&g,A[I+4>>2]=1|e,A[e+I>>2]=e,e>>>0<=255){r=228648+(-8&e)|0,(a=A[57152])&(e=1<<(e>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=I,A[e+12>>2]=I,A[I+12>>2]=r,A[I+8>>2]=e;break f}if(g=31,e>>>0<=16777215&&(g=62+((e>>>38-(r=oA(e>>>8|0))&1)-(r<<1)|0)|0),A[I+28>>2]=g,A[I+16>>2]=0,A[I+20>>2]=0,r=228912+(g<<2)|0,(s=A[57153])&(a=1<<g)){for(g=e<<((0|g)!=31?25-(g>>>1|0):0),a=A[r>>2];;){if(r=a,(-8&A[a+4>>2])==(0|e))break u;if(a=g>>>29|0,g<<=1,!(a=A[(s=(4&a)+r|0)+16>>2]))break}A[s+16>>2]=I}else A[57153]=a|s,A[r>>2]=I;A[I+24>>2]=r,A[I+12>>2]=I,A[I+8>>2]=I;break f}for(r=(s=f-40|0)-(e=a+8&7?-8-a&7:0)|0,A[57155]=r,e=e+a|0,A[57158]=e,A[e+4>>2]=1|r,A[4+(a+s|0)>>2]=40,A[57159]=A[57274],A[(s=(e=(g+(g-39&7?39-g&7:0)|0)-47|0)>>>0<n+16>>>0?n:e)+4>>2]=27,e=A[57267],A[s+16>>2]=A[57266],A[s+20>>2]=e,e=A[57265],A[s+8>>2]=A[57264],A[s+12>>2]=e,A[57266]=s+8,A[57265]=f,A[57264]=a,A[57267]=0,e=s+24|0;A[e+4>>2]=7,r=e+8|0,e=e+4|0,r>>>0<g>>>0;);if((0|s)==(0|n))break s;if(A[s+4>>2]=-2&A[s+4>>2],g=s-n|0,A[n+4>>2]=1|g,A[s>>2]=g,g>>>0<=255){r=228648+(-8&g)|0,(a=A[57152])&(e=1<<(g>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=n,A[e+12>>2]=n,A[n+12>>2]=r,A[n+8>>2]=e;break s}if(e=31,g>>>0<=16777215&&(e=62+((g>>>38-(e=oA(g>>>8|0))&1)-(e<<1)|0)|0),A[n+28>>2]=e,A[n+16>>2]=0,A[n+20>>2]=0,r=228912+(e<<2)|0,(s=A[57153])&(a=1<<e)){for(e=g<<((0|e)!=31?25-(e>>>1|0):0),s=A[r>>2];;){if((0|g)==(-8&A[(r=s)+4>>2]))break o;if(a=e>>>29|0,e<<=1,!(s=A[(a=(4&a)+r|0)+16>>2]))break}A[a+16>>2]=n}else A[57153]=a|s,A[r>>2]=n;A[n+24>>2]=r,A[n+12>>2]=n,A[n+8>>2]=n;break s}e=A[r+8>>2],A[e+12>>2]=I,A[r+8>>2]=I,A[I+24>>2]=0,A[I+12>>2]=r,A[I+8>>2]=e}e=b+8|0;break A}e=A[r+8>>2],A[e+12>>2]=n,A[r+8>>2]=n,A[n+24>>2]=0,A[n+12>>2]=r,A[n+8>>2]=e}if(!((e=A[57155])>>>0<=c>>>0)){r=e-c|0,A[57155]=r,e=(a=A[57158])+c|0,A[57158]=e,A[e+4>>2]=1|r,A[a+4>>2]=3|c,e=a+8|0;break A}}A[56798]=48,e=0;break A}r:if(f){r=A[s+28>>2];i:{if(A[(e=228912+(r<<2)|0)>>2]==(0|s)){if(A[e>>2]=a,a)break i;b=R0(-2,r)&b,A[57153]=b;break r}if(A[f+(A[f+16>>2]==(0|s)?16:20)>>2]=a,!a)break r}A[a+24>>2]=f,(e=A[s+16>>2])&&(A[a+16>>2]=e,A[e+24>>2]=a),(e=A[s+20>>2])&&(A[a+20>>2]=e,A[e+24>>2]=a)}r:if(g>>>0<=15)e=g+c|0,A[s+4>>2]=3|e,A[(e=e+s|0)+4>>2]=1|A[e+4>>2];else if(A[s+4>>2]=3|c,A[(n=s+c|0)+4>>2]=1|g,A[n+g>>2]=g,g>>>0<=255)r=228648+(-8&g)|0,(a=A[57152])&(e=1<<(g>>>3))?e=A[r+8>>2]:(A[57152]=e|a,e=r),A[r+8>>2]=n,A[e+12>>2]=n,A[n+12>>2]=r,A[n+8>>2]=e;else{e=31,g>>>0<=16777215&&(e=62+((g>>>38-(e=oA(g>>>8|0))&1)-(e<<1)|0)|0),A[n+28>>2]=e,A[n+16>>2]=0,A[n+20>>2]=0,r=228912+(e<<2)|0;i:{if((a=1<<e)&b){for(e=g<<((0|e)!=31?25-(e>>>1|0):0),c=A[r>>2];;){if((-8&A[(r=c)+4>>2])==(0|g))break i;if(a=e>>>29|0,e<<=1,!(c=A[(a=(4&a)+r|0)+16>>2]))break}A[a+16>>2]=n}else A[57153]=a|b,A[r>>2]=n;A[n+24>>2]=r,A[n+12>>2]=n,A[n+8>>2]=n;break r}e=A[r+8>>2],A[e+12>>2]=n,A[r+8>>2]=n,A[n+24>>2]=0,A[n+12>>2]=r,A[n+8>>2]=e}e=s+8|0;break A}e:if(I){r=A[a+28>>2];r:{if(A[(e=228912+(r<<2)|0)>>2]==(0|a)){if(A[e>>2]=s,s)break r;A[57153]=R0(-2,r)&b;break e}if(A[I+(A[I+16>>2]==(0|a)?16:20)>>2]=s,!s)break e}A[s+24>>2]=I,(e=A[a+16>>2])&&(A[s+16>>2]=e,A[e+24>>2]=s),(e=A[a+20>>2])&&(A[s+20>>2]=e,A[e+24>>2]=s)}g>>>0<=15?(e=g+c|0,A[a+4>>2]=3|e,A[(e=e+a|0)+4>>2]=1|A[e+4>>2]):(A[a+4>>2]=3|c,A[(s=a+c|0)+4>>2]=1|g,A[s+g>>2]=g,m&&(r=228648+(-8&m)|0,n=A[57157],(e=1<<(m>>>3))&f?e=A[r+8>>2]:(A[57152]=e|f,e=r),A[r+8>>2]=n,A[e+12>>2]=n,A[n+12>>2]=r,A[n+8>>2]=e),A[57157]=s,A[57154]=g),e=a+8|0}return F=t+16|0,0|e}function me(e,t,r,a,s){var n,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0;F=n=F-544|0,QA(n+320|0,0,100),QA(n+208|0,0,100),I=r?A[r>>2]:I,D=A[e+12>>2],b=A[36115];A:{e:{r:{i:{for(;;){if(g=(0|(g=C[t+f|0]))>=(0|b)?13:g,l[n+f|0]=g,!g){g=f;break i}if(c=(0|b)<=(0|(c=C[(g=1|f)+t|0]))?13:c,l[g+n|0]=c,!c)break i;if((0|(f=f+2|0))==200)break}f=198,O=C[n+199|0];break r}if(!g)break e;O=C[n+(f=g-1|0)|0],(0|g)!=1&&(f=g-2|0)}if(J=8&I,A[n+536>>2]=(J>>>3|0?3:7)&I,I=C[n+f|0],b=1,E=(0|(m=M8(e,n,n+432|0,n+540|0,n+536|0,1)))>=0?m:0,L=C[0|n])for(f=n,g=L;g=A[144464+((255&g)<<2)>>2],C[g+11|0]==2&&(1048576&(g=A[g+4>>2])||(c=(2097152&g)>>>21|0,c|=g=C[A[144464+(C[0|(v=f+1|0)]<<2)>>2]+10|0]==12,l[(n+208|0)+b|0]=c,Y=A[144464+(C[(g?2:1)+f|0]<<2)>>2],c=C[Y+11|0]-10>>>0<4294967289|!(32&C[Y+6|0])&C[A[144464+(C[(g?3:2)+f|0]<<2)>>2]+11|0]==2?c:c?2:1,f=g?v:f,l[(n+320|0)+b|0]=c,b=b+1|0)),g=C[0|(f=f+1|0)];);f=r=r?E:m;r:{i:{s:{o:{f:{u:{g:{n:{d:{p:{I:{h:switch(A[e+8>>2]-1|0){case 11:if((0|(r=A[n+540>>2]))<2)break d;if(f=1,E=1&(g=r-1|0),(0|r)!=2)break I;b=0;break p;case 8:if((0|(g=A[n+540>>2]))<2)break i;if(b=3&(c=g-1|0),f=1,g-2>>>0>=3)for(E=-4&c,c=0;I=l[0|(g=(n+432|0)+f|0)],l[0|g]=(0|I)<0?4:I,I=l[g+1|0],l[g+1|0]=(0|I)<0?4:I,I=l[g+2|0],l[g+2|0]=(0|I)<0?4:I,I=g,g=l[g+3|0],l[I+3|0]=(0|g)<0?4:g,f=f+4|0,(0|E)!=(0|(c=c+4|0)););if(!b)break i;for(g=0;c=l[0|(I=(n+432|0)+f|0)],l[0|I]=(0|c)<0?4:c,f=f+1|0,(0|b)!=(0|(g=g+1|0)););break i;case 7:if(!C[n+322|0]|l[n+321|0]>0)break i;case 0:if(A[n+536>>2]|A[n+540>>2]<3)break i;if(A[n+536>>2]=2,f=4,r)break r;l[n+434|0]=4;break r;case 1:if(A[n+536>>2])break r;b:{v:{if((0|(b=A[n+540>>2]))>=3){r=b-2|0,A[n+536>>2]=r,f=r;m:if(512&D&&(g=A[144464+(O<<2)>>2],(0|(c=C[g+11|0]))!=2)){f=A[g>>2],g=n;G:{S:{if((0|(E=A[e+212>>2]))!=26977){if((0|E)!=24942)break S;F:switch(f-110|0){case 0:case 5:if(f=r,C[A[144464+(I<<2)>>2]+11|0]==2)break m;break;default:break F}f=b-1|0;break G}if((0|f)==115&&(f=r,C[A[144464+(I<<2)>>2]+11|0]==2))break m;f=b-1|0;break G}S:{F:{if((0|f)==115){if(f=r,(0|(c=C[A[144464+(I<<2)>>2]+11|0]))!=8)break F;break m}if((0|c)!=8)break S;c=C[A[144464+(I<<2)>>2]+11|0]}if(f=r,(255&c)==2)break m}f=b-1|0}A[g+536>>2]=f}if(524288&D&&(l[(g=b-1|0)+(b=n+208|0)|0]<=l[r+b|0]||(A[n+536>>2]=g,f=g)),C[(n+432|0)+f|0]>1){g=f;break b}if(g=2,r=f-1|0,f>>>0>=2)break v;A[n+536>>2]=f+1;break b}r=1}g=r,A[n+536>>2]=g}if(f=4,l[0|(r=(n+432|0)+g|0)]>=0||l[(g=(n+432|0)+g|0)-1|0]>=4&l[g+1|0]>3)break r;l[0|r]=4;break r;case 2:if(A[n+536>>2])break r;for(r=(f=A[n+540>>2])-1|0,r&=r>>31;;){if((0|(f=f-1|0))<=0)break s;if(!(l[0|(g=(n+432|0)+f|0)]>=0))break}A[n+536>>2]=f,f=4,l[0|g]=4;break r;case 3:if(A[n+536>>2])break i;if(g=(0|(f=A[n+540>>2]-3|0))<=1?1:f,A[n+536>>2]=g,f=4,r)break r;l[g+(n+432|0)|0]=4;break r;case 4:if(A[n+536>>2])break r;if(g=(r=A[n+540>>2])-3|0,A[n+536>>2]=g,(0|r)<=15){b:{v:switch(C[A[144464+(O<<2)>>2]+11|0]-2|0){case 0:g=l[r+94176|0];break b;case 2:g=l[r+94192|0];break b;default:break v}g=l[r+94160|0]}A[n+536>>2]=g}f=4,l[(n+432|0)+g|0]=4;break r;case 5:if(A[n+536>>2])break r;if(b=-1,c=0,!((0|(r=(g=A[n+540>>2])-1|0))<2)){if(f=1,v=1&g,(0|g)!=3)for(Y=(-2&g)-4|0,g=0;l[(n+432|0)+f|0]<0&&(c=(I=(0|(E=l[(n+320|0)+f|0]))<(0|b))?c:f,b=I?b:E),l[(I=f+1|0)+(n+432|0)|0]<0&&(c=(E=(0|(U=l[I+(n+320|0)|0]))<(0|b))?c:I,b=E?b:U),f=f+2|0,I=(0|g)!=(0|Y),g=g+2|0,I;);!v|l[(n+432|0)+f|0]>=0||(b=(g=(0|(I=l[(n+320|0)+f|0]))<(0|b))?b:I,c=g?c:f)}A[n+536>>2]=c,C[r+(n+320|0)|0]!=2|(0|b)>1?(0|b)>0||(c=1,A[n+536>>2]=1):(A[n+536>>2]=r,c=r),f=4,l[(n+432|0)+c|0]=4;break r;case 14:break o;case 12:break f;case 6:break h;default:break r}if(A[n+536>>2])break r;b=(r=A[n+540>>2])-1|0,A[n+536>>2]=b;h:if(!((0|r)<2))for(f=1;;){if(C[(n+432|0)+f|0]==1){b=f-1|0,A[n+536>>2]=b;break h}if((0|r)==(0|(f=f+1|0)))break}f=4,l[(n+432|0)+b|0]=4;break r}for(v=-2&g,b=0,c=0;g=C[0|(Y=(I=n+432|0)+f|0)],R=Y,U=l[(Y=n+208|0)+f|0]>0,l[0|R]=U||(0|g)==4?3:g,q=(0|(I=C[0|(R=(g=f+1|0)+I|0)]))==4?3:I,I=l[g+Y|0]>0,l[0|R]=I?3:q,b=I?g:U?f:b,f=f+2|0,(0|v)!=(0|(c=c+2|0)););}if(E&&(I=(0|(g=C[0|(c=(n+432|0)+f|0)]))==4?3:g,g=l[(n+208|0)+f|0]>0,l[0|c]=g?3:I,b=g?f:b),g=A[n+536>>2])break u;if((0|b)>0){A[n+536>>2]=b,g=b;break u}if((0|r)<6)break n;g=r-3|0;break g}if(g=A[n+536>>2])break u}g=r-1|0}A[n+536>>2]=g}f=4,l[(n+432|0)+g|0]=4;break r}if(A[n+536>>2])break r;g=1,A[n+536>>2]=1,C[n+209|0]|A[n+540>>2]<3|l[n+210|0]<=0||(g=2,A[n+536>>2]=2),f=4,l[n+432|g]=4;break r}if(A[n+536>>2]||(0|(g=A[n+540>>2]))<3)break i;if(QA(n+432|1,0,g-1|0),A[n+536>>2]=2,r||(l[n+434|0]=4),f=4,g>>>0<4)break r;l[431+(g+n|0)|0]=3;break r}A[n+536>>2]=r,f=4;break r}f=r}!(256&D)|2&s||(0|(r=A[n+540>>2]))<3|(0|m)>2||C[0|(g=(r=r+(n+432|0)|0)-1|0)]!=4|C[A[144464+(O<<2)>>2]+11|0]!=2||(l[0|g]=1,l[r-2|0]=4);r:{i:{if(J)m=A[n+540>>2];else{if(r=l[n+433|0],!(!(4096&D)|(0|(m=A[n+540>>2]))!=3)){if((0|r)==4){l[n+434|0]=3;break i}if(C[n+434|0]==4){l[n+433|0]=3;break i}}if(!(!(8192&D)|(0|r)>=0|(0|m)<4|l[n+434|0]<4)){l[n+433|0]=3;break i}}if(c=0,(0|m)<2)break r}for(b=(0|f)<4?4:3,Y=128&D,U=64&D,R=32&D,E=m-1|0,q=16&D,$=!(32768&D),O=0,I=0,f=1;;){i:{s:if((0|(g=l[0|(v=(n+432|0)+f|0)]))>=0)c=b;else{c=3;o:{f:if(!(!(!q|(0|b)>3)&(0|f)==(0|E))){if(!(1&(O|$)))break o;if(!(l[431+(n+f|0)|0]>1)){if((0|(g=l[(r=f+1|0)+(n+432|0)|0]))>=2){if((0|b)!=4||(c=4,g>>>0>=3))break f}else if(!(!R|(0|b)!=3)){b=3;break i}if(!U|f>>>0<2||(c=C[(n+320|0)+f|0]))break o;if((0|E)>(0|(g=f))){for(;;){if(l[(n+320|0)+g|0]>0)break i;if((0|E)==(0|(g=g+1|0)))break}if(c)break o}if(l[r+(n+320|0)|0]<=0)break o;break i}c=b}g=C[0|v];break s}l[0|v]=b,O=1,c=3,g=b}s:{if(g<<24>>24>=4){if(r=I||f,!I|!Y)break s;l[0|v]=3}b=c;break i}b=c,I=r}if(c=1,(0|m)==(0|(f=f+1|0)))break}}if(a=!J|(0|a)>=0?a:A[((0|m)<3?16:20)+e>>2],b=0,g=0,c){if(O=3&(r=m-1|0),c=0,m-2>>>0<3)f=1;else for(J=-4&r,f=1,I=0;g=(r=(0|(g=(v=(0|(g=(E=(0|(g=(m=(0|(E=l[(r=n+432|0)+f|0]))<(0|g))?g:E))>(0|(v=l[(Y=f+1|0)+r|0])))?g:v))>(0|(R=l[(U=f+2|0)+r|0])))?g:R))>(0|(q=l[(R=f+3|0)+r|0])))?g:q,b=r?v?E?m?b:f:Y:U:R,f=f+4|0,(0|J)!=(0|(I=I+4|0)););if(O)for(;g=(r=(0|(I=l[(n+432|0)+f|0]))<(0|g))?g:I,b=r?b:f,f=f+1|0,(0|O)!=(0|(c=c+1|0)););}if((0|a)<0?a=g:(0|a)<=(0|g)&(0|g)>4||(l[(n+432|0)+b|0]=a),O=t+197|0,m=1,!(1&s)&&(r=A[144464+(L<<2)>>2])){if(g=n,!((0|(c=C[r+11|0]))!=1&(0|L)!=15))for(;r=C[0|(g=g+1|0)],(0|(c=C[A[144464+(r<<2)>>2]+11|0]))==1|(0|r)==15;);!(48&(r=A[e+4>>2]))|(0|c)!=2||(l[0|t]=(32&r)>>>5|0&&l[n+433|0]>3?11:23,t=t+1|0)}r:if(!(t>>>0>=O>>>0))for(E=65536&D,v=2&D,J=4&D,f=n;;){if(!(g=C[0|f]))break r;if(s=f,f=f+1|0,r=A[144464+(g<<2)>>2]){i:{s:{o:switch(C[r+11|0]){case 0:A[e+8200>>2]=0;break i;case 2:if(!(16&C[r+6|0]))break s;break;default:break o}if(C[0|f]!=20)break i}if((0|(L=A[n+540>>2]))<(0|m))break A;I=l[0|(D=(n+432|0)+m|0)],A[e+8200>>2]=I;s:{o:{if(!((0|(r=I))>1)){if(c=L-1|0,!(!J|(0|m)<2|(0|a)<2)&&(r=0,(0|c)==(0|m)))break o;if(r=1,!((0|m)==1|v|(L-2|0)==(0|m)&l[c+(n+432|0)|0]<2|(0|c)==(0|m)||l[431+(n+m|0)|0]>=0&&(r=I,E))){r=0,l[0|D]=0;break o}}if(r&&(0|r)<2)break s}l[0|t]=C[r+94151|0],t=t+1|0,I=l[0|D]}c=(0|a)>(0|I),C[0|f]==12&&1&(L=A[e+28>>2])&&(f=(16&L?(0|b)!=(0|m):(0|r)<4)?s+2|0:f),a=c?a:I,m=m+1|0}if((0|g)!=1&&(l[0|t]=g,t=t+1|0),!(t>>>0<O>>>0))break}}l[0|t]=0}return void(F=n+544|0)}zA(86136,86634,1353,94208),K()}function h8(e,t,r,a,s,n,g,f,c){var I,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0,o0=0,g0=0,d0=0,b0=0,B0=0,Q0=0,S0=0;F=I=F-336|0,v=f,Y=65535&c,D=a,E=65535&s,J=-2147483648&(s^c);A:{if(!((L=c>>>16&32767)-32767>>>0>4294934529&(O=s>>>16&32767)-32767>>>0>=4294934530)){if(!(!a&(0|(b=2147483647&s))==2147418112?!(t|r):b>>>0<2147418112)){R=a,J=32768|s;break A}if(!(!f&(0|(s=2147483647&c))==2147418112?!(n|g):s>>>0<2147418112)){R=f,J=32768|c,t=n,r=g;break A}if(!(t|a|2147418112^b|r)){if(!(n|f|2147418112^s|g)){t=0,r=0,J=2147450880;break A}J|=2147418112,t=0,r=0;break A}if(!(n|f|2147418112^s|g)){t=0,r=0;break A}if(!(t|a|r|b)){R=(t=!(n|f|s|g))?0:R,J=t?2147450880:J,t=0,r=0;break A}if(!(n|f|s|g)){J|=2147418112,t=0,r=0;break A}(0|b)==65535|b>>>0<65535&&(c=a=!(E|D),b=a?t:D,f=a<<=6,T0(I+320|0,t,r,D,E,(a=a+((0|(c=oA(c?r:E)))==32?oA(b)+32|0:c)|0)-15|0),q=16-a|0,D=A[I+328>>2],E=A[I+332>>2],r=A[I+324>>2],t=A[I+320>>2]),s>>>0>65535||(f=a=!(v|Y),c=a?n:v,s=a<<=6,T0(I+304|0,n,g,v,Y,(a=a+((0|(f=oA(f?g:Y)))==32?oA(c)+32|0:f)|0)-15|0),q=(a+q|0)-16|0,v=A[I+312>>2],Y=A[I+316>>2],n=A[I+304>>2],g=A[I+308>>2])}if(fA=s=65536|Y,bA=v,b=s<<15|(a=v)>>>17,D0(I+288|0,a=s=a<<15|g>>>17,f=b,0,0,c=0-a|0,b=1963258675-(b+!!(0|a)|0)|0,0,0),D0(I+272|0,0-(a=A[I+296>>2])|0,0-(A[I+300>>2]+!!(0|a)|0)|0,0,0,c,b,0,0),D0(I+256|0,c=(a=A[I+280>>2])<<1|A[I+276>>2]>>>31,a=A[I+284>>2]<<1|a>>>31,0,0,s,f,0,0),D0(I+240|0,c,a,0,0,0-(b=A[I+264>>2])|0,0-(A[I+268>>2]+!!(0|b)|0)|0,0,0),D0(I+224|0,b=(c=A[I+248>>2])<<1|A[I+244>>2]>>>31,a=A[I+252>>2]<<1|c>>>31,0,0,s,f,0,0),D0(I+208|0,b,a,0,0,0-(c=A[I+232>>2])|0,0-(A[I+236>>2]+!!(0|c)|0)|0,0,0),D0(I+192|0,c=(a=A[I+216>>2])<<1|A[I+212>>2]>>>31,a=A[I+220>>2]<<1|a>>>31,0,0,s,f,0,0),D0(I+176|0,c,a,0,0,0-(b=A[I+200>>2])|0,0-(A[I+204>>2]+!!(0|b)|0)|0,0,0),D0(I+160|0,c=s,a=f,0,0,f=(v=(s=A[I+184>>2])<<1|A[I+180>>2]>>>31)-1|0,s=(A[I+188>>2]<<1|s>>>31)-!v|0,0,0),D0(I+144|0,n<<15,g<<15|n>>>17,0,0,a=f,s,0,0),U=I+112|0,tA=A[I+168>>2],f=A[I+172>>2],m=(v=A[I+160>>2])+(c=A[I+152>>2])|0,b=(Y=A[I+164>>2])+A[I+156>>2]|0,c=b=c>>>0>m>>>0?b+1|0:b,b=(b=(0|Y)==(0|b)&m>>>0<v>>>0|b>>>0<Y>>>0)>>>0>(Y=b+tA|0)>>>0?f+1|0:f,D0(U,a,s,0,0,0-(f=(v=!c&m>>>0>1|!!(0|c))+Y|0)|0,0-(!!(0|f)+(b=v>>>0>f>>>0?b+1|0:b)|0)|0,0,0),D0(I+128|0,1-m|0,0-((m>>>0>1)+c|0)|0,0,0,a,s,0,0),o0=(O-L|0)+q|0,U=s=A[I+116>>2],v=(a=A[I+112>>2])<<1,O=b=s<<1|a>>>31,a=b,iA=f=A[I+140>>2],a=a+(b=f<<1|(s=A[I+136>>2])>>>31)|0,s=a=(f=(c=s<<1|A[I+132>>2]>>>31)+v|0)>>>0<c>>>0?a+1|0:a,AA=a=a-(f>>>0<13927)|0,tA=a,g0=b=65536|E,d0=D,B0=(a=D)<<1,Q0=b=b<<1|a>>>31,GA=b,RA=a=DA(AA,m=0,b,0),$=b=_,q=t<<1,L=a=r<<1|t>>>31,Y=b=0,AA=(0|s)==(0|AA)&(c=f-13927|0)>>>0<f>>>0|s>>>0>AA>>>0,s=(0|s)==(0|O)&f>>>0<v>>>0|s>>>0<O>>>0,a=A[I+120>>2],b=f=A[I+124>>2]<<1|a>>>31,b=(a=(m=iA>>>31|0)+(a=a<<1|U>>>31)|0)>>>0<m>>>0?b+1|0:b,m=(f=a)>>>0>(a=a+s|0)>>>0?b+1|0:b,m=(s=a)>>>0>(a=a+AA|0)>>>0?m+1|0:m,s=a-1|0,b=DA(L,Y,AA=m-!a|0,O=0),f=_+$|0,U=(0|$)==(0|(f=(a=b+RA|0)>>>0<b>>>0?f+1|0:f))&a>>>0<RA>>>0|f>>>0<$>>>0,iA=s,s=DA(s,b=0,pA=(b0=r>>>31|0)|D<<1,$=0),b=_+f|0,m=0,v=b=s>>>0>(D=s+a|0)>>>0?b+1|0:b,m=(s=a=(0|b)==(0|f)&a>>>0>D>>>0|f>>>0>b>>>0)>>>0>(a=a+U|0)>>>0?1:m,s=DA(GA,Y,AA,O),b=_+m|0,U=a=s+a|0,a=a>>>0<s>>>0?b+1|0:b,s=DA(GA,Y,iA,$),E=_,f=s,s=DA(pA,$,AA,O),b=_+E|0,s=b=s>>>0>(m=f+s|0)>>>0?b+1|0:b,a=a+(b=(0|E)==(0|b)&f>>>0>m>>>0|b>>>0<E>>>0)|0,U=E=U+s|0,E=a=E>>>0<s>>>0?a+1|0:a,b=m+v|0,s=b=(a=(s=0)+D|0)>>>0<s>>>0?b+1|0:b,f=(0|b)==(0|v)&a>>>0<D>>>0|b>>>0<v>>>0,b=E,m=f,VA=f=f+U|0,m=b=m>>>0>f>>>0?b+1|0:b,U=a,E=a,D=s,RA=c,a=DA(c,0,pA,$),f=_,s=a,c=DA(tA,R,L,R),b=_+f|0,c=(0|f)==(0|(b=(a=a+c|0)>>>0<c>>>0?b+1|0:b))&a>>>0<s>>>0|f>>>0>b>>>0,f=b,s=DA(iA,$,$A=-2&q,0),b=_+b|0,s=b=s>>>0>(v=s+a|0)>>>0?b+1|0:b,a=(0|b)==(0|f)&a>>>0>v>>>0|f>>>0>b>>>0,f=0,a=((c=a+c|0)>>>0<a>>>0?1:f)+D|0,b=m,c=a=(E=c+E|0)>>>0<c>>>0?a+1|0:a,f=a=(0|a)==(0|D)&E>>>0<U>>>0|a>>>0<D>>>0,S0=a=a+VA|0,U=b=f>>>0>a>>>0?b+1|0:b,a=DA(GA,Y,RA,R),VA=_,GA=a,f=DA(AA,O,$A,R),b=_+VA|0,D=a=a+f|0,m=a+(Y=DA(tA,R,pA,$))|0,a=(f=a>>>0<f>>>0?b+1|0:b)+_|0,a=m>>>0<Y>>>0?a+1|0:a,O=m,Y=m+(b=DA(L,R,iA,$))|0,m=_+a|0,pA=(0|a)==(0|(m=b>>>0>Y>>>0?m+1|0:m))&Y>>>0<O>>>0|a>>>0>m>>>0,b=((a=(a=(a=(0|a)==(0|f)&D>>>0>O>>>0|a>>>0<f>>>0)+(b=(0|f)==(0|VA)&D>>>0<GA>>>0|f>>>0<VA>>>0)|0)+pA|0)|(iA=0))+c|0,D=b=(f=m)>>>0>(O=f+E|0)>>>0?b+1|0:b,a=(0|c)==(0|b)&E>>>0>O>>>0|c>>>0>b>>>0,b=U,f=a,iA=a=a+S0|0,c=b=f>>>0>a>>>0?b+1|0:b,a=DA(tA,R,$A,R),tA=_,E=a,f=DA(L,R,RA,R),b=_+tA|0,f=(0|(b=(a=a+f|0)>>>0<f>>>0?b+1|0:b))==(0|tA)&a>>>0<E>>>0|b>>>0<tA>>>0,E=b,a=b+v|0,b=(f|(U=0))+s|0,E=(0|s)==(0|(b=a>>>0<E>>>0?b+1|0:b))&a>>>0<v>>>0|s>>>0>b>>>0,m=(f=b)+(b=Y)|0,b=0,b=((s=a=(0|f)==(0|(m=(v=(Y=0)+a|0)>>>0<Y>>>0?m+1|0:m))&a>>>0>v>>>0|f>>>0>m>>>0)>>>0>(a=a+E|0)>>>0?1:b)+D|0,m=c,s=b=(s=a)>>>0>(a=a+O|0)>>>0?b+1|0:b,c=m=(c=f=(0|D)==(0|b)&a>>>0<O>>>0|b>>>0<D>>>0)>>>0>(f=f+iA|0)>>>0?m+1|0:m,(0|m)==131071|m>>>0<131071?(d0=B0|b0,g0=$|Q0,D0(I+80|0,a,s,f,c,n,g,bA,fA),Y=m=A[I+84>>2],b=t<<17,D=(r=(v=0)-(E=A[I+88>>2])|0)-(m=!!(m|(t=A[I+80>>2])))|0,E=(b-(A[I+92>>2]+(E>>>0>v>>>0)|0)|0)-(r>>>0<m>>>0)|0,v=0-t|0,Y=0-(!!(0|t)+Y|0)|0,t=o0+16382|0):(D0(I+96|0,a=(1&s)<<31|a>>>1,s=f<<31|s>>>1,f=(1&c)<<31|f>>>1,c=c>>>1|0,n,g,bA,fA),L=D=A[I+100>>2],D=(v=0-(q=A[I+104>>2])|0)-(E=!!(D|(m=A[I+96>>2])))|0,E=((t<<16)-(A[I+108>>2]+(Y>>>0<q>>>0)|0)|0)-(E>>>0>v>>>0)|0,v=0-m|0,Y=0-(!!(0|m)+L|0)|0,q=t,L=r,t=o0+16383|0),(0|t)>=32767)J|=2147418112,t=0,r=0;else{if((0|t)>0)m=E<<1|D>>>31,D=D<<1|Y>>>31,E=m,q=f,L=65535&c|t<<16,m=Y<<1|v>>>31,c=v<<1;else{if((0|t)<=-113){t=0,r=0;break A}v2(I- -64|0,a,s,f,c,1-t|0),T0(I+48|0,q,L,d0,g0,t+112|0),D0(I+32|0,n,g,bA,fA,a=A[I+64>>2],s=A[I+68>>2],q=A[I+72>>2],L=A[I+76>>2]),t=A[I+40>>2],v=(r=A[I+56>>2])-(D=t<<1|(m=A[I+36>>2])>>>31)|0,E=A[I+60>>2]-((A[I+44>>2]<<1|t>>>31)+(r>>>0<D>>>0)|0)|0,b=(t=A[I+32>>2])<<1,D=v-(t=(0|(f=m<<1|t>>>31))==(0|(c=A[I+52>>2]))&b>>>0>(r=A[I+48>>2])>>>0|f>>>0>c>>>0)|0,E=E-(t>>>0>v>>>0)|0,m=c-((r>>>0<b>>>0)+f|0)|0,c=r-b|0}t=c,D0(I+16|0,n,g,bA,fA,3,0,0,0),D0(I,n,g,bA,fA,5,0,0,0),f=m+(r=0)|0,f=c>>>0>(t=t+(b=1&a)|0)>>>0?f+1|0:f,c=t,g=(0|g)==(0|f)&t>>>0>n>>>0|g>>>0<f>>>0,m=E,t=(0|r)==(0|f)&t>>>0<b>>>0|r>>>0>f>>>0,b=s,r=b=(r=t=(t=(0|(m=t>>>0>(n=t+D|0)>>>0?m+1|0:m))==(0|fA))&(0|n)==(0|bA)?g:t&n>>>0>bA>>>0|m>>>0>fA>>>0)>>>0>(t=t+a|0)>>>0?b+1|0:b,a=(0|s)==(0|b)&t>>>0<a>>>0|s>>>0>b>>>0,b=L,b=(s=a)>>>0>(a=a+q|0)>>>0?b+1|0:b,g=a,E=(0|(s=A[I+20>>2]))==(0|f)&aA[I+16>>2]<c>>>0|s>>>0<f>>>0,s=A[I+28>>2],s=b>>>0<2147418112&((0|(a=A[I+24>>2]))==(0|n)&(0|s)==(0|m)?E:(0|s)==(0|m)&a>>>0<n>>>0|s>>>0<m>>>0),a=r,b=(r=t=(0|r)==(0|(a=(E=s)>>>0>(s=t+s|0)>>>0?a+1|0:a))&t>>>0>s>>>0|r>>>0>a>>>0)>>>0>(t=t+g|0)>>>0?b+1|0:b,g=t,f=(0|(r=A[I+4>>2]))==(0|f)&aA[I>>2]<c>>>0|r>>>0<f>>>0,r=A[I+12>>2],r=m=(r=t=b>>>0<2147418112&((0|(t=A[I+8>>2]))==(0|n)&(0|r)==(0|m)?f:(0|r)==(0|m)&t>>>0<n>>>0|r>>>0<m>>>0))>>>0>(t=t+s|0)>>>0?a+1|0:a,s=(0|a)==(0|m)&t>>>0<s>>>0|a>>>0>m>>>0,a=b,n=s,R|=s=s+g|0,J|=a=n>>>0>s>>>0?a+1|0:a}}A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=R,A[e+12>>2]=J,F=I+336|0}function V0(e,t,r,a,s){var n,g,f,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0;if(F=g=F-80|0,f=A[r+8>>2],!s|!y[r+4>>1]||(A[s+8>>2]=0),n=QA(a,0,152),A[n+44>>2]=C[f+14|0],A[n+40>>2]=C[f+15|0],a=y[f+8>>1]){for(a=A[34459]+(a<<1)|0,R=256&t,L=r+32|0,q=r-32|0,$=r- -64|0,AA=r+96|0,tA=r+-64|0,iA=r-28|0,fA=1&t,bA=r-24|0,U=A[30450];;){c=15&(E=(t=y[a>>1])>>>8|0);A:{e:{r:{i:{s:{o:{f:{u:{g:{n:{d:{p:switch(0|(b=t>>>12|0)){case 10:break f;case 9:break u;case 6:break g;case 2:case 3:break n;case 1:break d;case 0:break p;case 11:case 12:case 13:case 14:case 15:break o;default:break s}I=255&t;p:{I:{h:switch(0|c){case 13:if(I)break I;c=a,t=0;break p;case 0:c=a;b:switch(I-1|0){case 1:break A;case 0:break e;default:break b}A[g+20>>2]=zl(g+75|0,A[f>>2]),A[g+16>>2]=t,n0(U,85851,g+16|0);break A;case 5:if(C[A[144464+(C[r+34|0]<<2)>>2]+11|0]!=2)break A;A[n+20>>2]=I;break A;case 12:break h;default:break i}A[n+44>>2]=A[n+44>>2]+(t<<24>>31&-256|I);break A}l[n+132|0]=C[a+3|0],c=a+2|0,l[n+133|0]=C[0|c],t=2,I>>>0<3||(l[n+134|0]=C[a+5|0],c=a+4|0,l[n+135|0]=C[0|c],t=4,I>>>0<5||(l[n+136|0]=C[a+7|0],c=a+6|0,l[n+137|0]=C[0|c],t=6,I>>>0<7||(l[n+138|0]=C[a+9|0],c=a+8|0,l[n+139|0]=C[0|c],t=8,I>>>0<9||(l[n+140|0]=C[a+11|0],c=a+10|0,l[n+141|0]=C[0|c],t=10,I>>>0<11||(l[n+142|0]=C[a+13|0],c=a+12|0,l[n+143|0]=C[0|c],t=12,I>>>0<13||(l[n+144|0]=C[a+15|0],c=a+14|0,l[n+145|0]=C[0|c],t=14,I>>>0<15||(l[n+146|0]=C[a+17|0],c=a+16|0,l[n+147|0]=C[0|c],t=16)))))))}l[132+(t+n|0)|0]=0,I=D;break e}if(!e|c>>>0>7||(b=r,C[A[144464+(C[r+2|0]<<2)>>2]+11|0]!=2&&(b=L,C[A[144464+(C[r+34|0]<<2)>>2]+11|0]!=2))||!(1&(c=A[e+56>>2]))&&16&C[0|r])break A;I=15&C[b+3|0],I=2&c&&C[b+6|0]<=I>>>0?4:I;d:{p:{I:{h:switch((c=7&E)-3|0){case 1:break p;case 0:break h;default:break I}if(I>>>0>3)break d;break A}if(A[102832+(c<<2)>>2]>(0|I))break d;break A}if(C[b+6|0]>I>>>0)break A}A[n+8>>2]=255&t,I=1;break r}if((57344&t)==8192){for(pA=A[32972],E=1,J=0;;){m=255&t,c=(v=4095&t)>>>8|0;n:if(v>>>0<=3583){(0|(I=(c>>>0)%7|0))==6&&(I=y[a+2>>1]),O=0,c=r;d:{p:{I:switch(0|I){case 6:if(b=0,y[r+36>>1]|y[r+68>>1])break n;case 3:c=$;break p;case 9:if(b=0,y[r+36>>1]|y[r+68>>1])break n;if(c=AA,!y[r+100>>1])break d;break n;case 7:if(b=0,y[r+36>>1])break n;for(I=1;;){if(C[A[144464+(C[(c=(I<<5)+r|0)+2|0]<<2)>>2]+11|0]==2)break p;if(y[4+(((I=I+1|0)<<5)+r|0)>>1])break}break n;case 5:if(b=0,y[r+4>>1])break n;case 0:O=1,c=q;break p;case 4:if(b=0,y[r+36>>1])break n;case 2:c=L;break p;case 8:if(b=0,!s)break n;if(O=1,A[(c=s)+8>>2])break d;break n;case 10:break I;default:break p}if(b=0,y[r+4>>1]|y[iA>>1])break n;O=1,c=tA;break d}p:switch(0|I){case 0:case 5:break p;default:break d}c=(C[c+2|0]==1?-32:0)+c|0}if(R?(I=A[144464+(C[c+2|0]<<2)>>2],A[c+8>>2]=I):I=A[c+8>>2],v>>>0<=1791){if(b=1,A[A[144464+(m<<2)>>2]>>2]==A[I>>2])break n;if(!(!O|C[I+11|0]!=2)){b=(0|m)==C[I+13|0];break n}b=(0|m)==C[I+12|0];break n}m=31&v,b=0;d:switch(v>>>5&7){case 0:b=(0|m)==C[I+11|0];break n;case 1:b=(0|m)==(15&y[I+6>>1]);break n;case 2:b=A[I+4>>2]>>>m&1;break n;case 4:break d;default:break n}d:switch(0|m){case 0:case 1:case 2:case 3:case 4:if(C[A[144464+(C[c+2|0]<<2)>>2]+11|0]!=2){if(C[A[144464+(C[c+34|0]<<2)>>2]+11|0]!=2)break n;c=c+32|0}I=15&C[c+3|0],I=!e|!(2&C[e+56|0])?I:C[c+6|0]<=I>>>0?4:I;p:{I:switch(m-3|0){case 1:b=C[c+6|0]<=I>>>0;break n;case 0:if(b=1,I>>>0<=3)break p;break n;default:break I}if(b=1,A[102832+(m<<2)>>2]>(0|I))break n}b=0;break n;case 17:if(!C[I+11|0]){b=1;break n}b=(32&C[r+1|0])>>>5|0;break n;case 18:b=y[c+4>>1]!=0;break n;case 19:if(b=1,y[c+36>>1])break n;b=!C[A[c+40>>2]+11|0];break n;case 9:if(y[c+4>>1])break n;for(;;){if(b=!!(0|(I=12&C[c-29|0])),I)break n;if(y[(c=c-32|0)+4>>1])break}break n;case 10:b=C[I+11|0]!=2;break n;case 11:for(;;){if(b=!!(0|(I=y[c+36>>1])),I)break n;if(I=c,c=c+32|0,C[A[I+40>>2]+11|0]==2)break}break n;case 12:if(b=1,(254&C[I+11|0])==2)break n;b=(16&C[I+4|0])>>>4|0;break n;case 13:for(;b=(C[A[c+8>>2]+11|0]==2)+b|0,I=y[c+4>>1],c=c-32|0,!I;);b=(0|b)==1;break n;case 14:for(;b=(C[A[c+8>>2]+11|0]==2)+b|0,I=y[c+4>>1],c=c-32|0,!I;);b=(0|b)==2;break n;case 16:break d;default:break n}b=(16&C[0|c])>>>4|0}else if(b=0,(0|c)==15){d:switch(m-1|0){case 0:b=fA;break n;case 1:break d;default:break n}b=A[pA+132>>2]!=0}n:if(1970>>>(c=(I=65535&t)>>>12|0)&1)c=l[c+102848|0];else{d:switch(0|c){case 0:if(c=1,(3840&I)!=3328)break n;c=1+(1+(255&I)>>>1|0)|0;break n;case 6:c=(I>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:c=(0|(c=3840&I))==3328||(0|c)==1536?2:1;break n;default:break d}c=4,(I=y[a+4>>1])>>>0>61439||(c=(0|I)==2?3:2)}if(a=((c=y[(a=(c<<1)+a|0)>>1]==3)<<1)+a|0,c^=b,E=J?c|E:c&E,J=4096&t,(57344&(t=y[a>>1]))!=8192)break}if(!(1&E))if((63488&t)!=26624){n:if(1970>>>(c=t>>>12|0)&1)c=l[c+102848|0];else{d:switch(0|c){case 0:if(c=1,(3840&t)!=3328)break n;c=1+(1+(255&t)>>>1|0)|0;break n;case 6:c=(t>>>9&7)-5>>>0<2?12:1;break n;case 2:case 3:c=(0|(t&=3840))==3328||(0|t)==1536?2:1;break n;default:break d}c=4,(t=y[a+4>>1])>>>0>61439||(c=(0|t)==2?3:2)}a=(((65024&y[(t=(c<<1)+a|0)>>1])==24576)<<1)+t|0}else a=((255&t)<<1)+a|0}c=a-2|0,I=D;break e}g:switch(c>>>1|0){case 0:a=(((255&t)<<1)+a|0)-2|0;break A;case 5:A[n>>2]=2|A[n>>2],((t=C[A[r+40>>2]+12|0])-28&255)>>>0<=5&&(c=y[(t=((t<<2)+a|0)-112|0)+4>>1],t=y[t+2>>1],A[n+96>>2]=t>>>4<<24>>24,A[n+76>>2]=(15&t)<<18|c<<2),a=a+24|0;break A;case 6:break g;default:break A}((t=C[A[bA>>2]+13|0])-28&255)>>>0<=5&&(c=y[(t=((t<<2)+a|0)-112|0)+4>>1],t=y[t+2>>1],A[n+100>>2]=t>>>4<<24>>24,A[n+80>>2]=(15&t)<<18|c<<2),a=a+24|0;break A}t=y[(a=a+2|0)>>1]|t<<16&983040;u:switch(c-1|0){case 0:if((0|Y)>9)break A;A[(g+32|0)+(Y<<2)>>2]=a,a=(A[34459]+(t<<1)|0)-2|0,Y=Y+1|0;break A;case 1:A[n+124>>2]=t;break A;case 2:break u;default:break A}A[n+128>>2]=t;break A}A[(c=(((0|c)!=1)<<3)+n|0)+108>>2]=y[a+2>>1]|(255&t)<<16,t=y[a+4>>1]<<16,a=a+6|0,A[c+112>>2]=t|y[a>>1];break A}if(I=y[(c=a+2|0)>>1],v=t>>>4|0,A[(E=((m=b-11|0)<<2)+n|0)+88>>2]=255&v,A[E+68>>2]=t<<18&3932160|I<<2,(0|(a=y[a+4>>1]))==2){a=c;break A}if(I=t>>>0<=53247?a>>>0>61439?2:1:D-((0|m)==4)|0,b-13>>>0>1)break e;A[E+88>>2]=v<<24>>24;break e}A[g+4>>2]=zl(g+75|0,A[f>>2]),A[g>>2]=t,n0(U,85851,g);break A}A[4+((c<<2)+n|0)>>2]=I,I=R&&(0|c)==1?1:D}c=a}(0|I)!=1|(0|Y)<=0?(a=c,D=I):(a=A[(g+32|0)+((Y=Y-1|0)<<2)>>2],D=0)}if(a=a+2|0,(0|D)==1)break}!s|C[r+17|0]!=2||(e=A[r+4>>2],A[s>>2]=A[r>>2],A[s+4>>2]=e,e=A[r+28>>2],A[s+24>>2]=A[r+24>>2],A[s+28>>2]=e,e=A[r+20>>2],A[s+16>>2]=A[r+16>>2],A[s+20>>2]=e,e=A[r+12>>2],A[s+8>>2]=A[r+8>>2],A[s+12>>2]=e),l[r+23|0]=A[n+44>>2],(e=A[n+68>>2])?(A[r+24>>2]=e,e=n+88|0):(A[r+24>>2]=A[n+72>>2],e=n+92|0),A[r+28>>2]=A[e>>2]}F=g+80|0}function m8(e,t,r,a,s,n){var g,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0;F=g=F-848|0;A:if(!(!A[e+104>>2]|8&C[s+2|0]|A[47202]==193)){for(A[a>>2]=0,A[33272]=0,A[33274]=n,l[g+192|0]=0,A[33273]=g+192;b=(n=b)+1|0,l[0|(L=t+n|0)]-48>>>0<10;);A[56798]=0,$=g+188|0,E=-2147483648,F=R=F-16|0;e:if(f=C[0|t]){m=t;r:{for(;;){if(!((0|(f=f<<24>>24))==32|f-9>>>0<5))break r;if(f=C[m+1|0],m=m+1|0,!f)break}break e}r:switch((f=C[0|m])-43|0){case 0:case 2:break r;default:break e}Y=(0|f)==45?-1:0,m=m+1|0}else m=t;for(;f=-48,(((v=l[0|m])-48&255)>>>0<10||(f=-87,(v-97&255)>>>0<26||(f=-55,!((v-65&255)>>>0>25))))&&!((0|(v=f+v|0))>=10);)D0(R,10,0,0,0,D,O,0,0),f=1,A[R+8>>2]|A[R+12>>2]||(J=DA(D,O,10,0),(0|(q=_))==-1&~v>>>0<J>>>0||(f=q,O=(D=v+J|0)>>>0<v>>>0?f+1|0:f,U=1,f=I)),m=m+1|0,I=f;$&&(A[$>>2]=U?m:t);e:{r:{if(I)A[56798]=68,D=-2147483648,O=0;else if(!O&D>>>0<2147483648)break r;if(!Y){A[56798]=68,E=2147483647;break e}if(!(!O&D>>>0<=2147483648)){A[56798]=68;break e}}E=(Y^D)-Y|0}if(F=R+16|0,Y=E,!(A[56798]|A[g+188>>2]==(0|t))){e:{r:{i:{if(!(!((0|(v=64&C[e+109|0]?4:3))!=(0|n)|A[e+124>>2]!=l[t-2|0])&l[t-3|0]-48>>>0<10)){s:{if(A[e+124>>2]!=32){if(!(16&C[e+105|0]))break i;if((0|n)==3)break s;break i}if((0|n)!=3)break i}if(4&C[s+2|0]|l[t-2|0]-48>>>0>=10)break i}l[133104]=0,l[g+288|0]=0,AA=1;break r}if(l[133104]=0,A[33275]=0,l[g+288|0]=0,tA=1,U=0,C[0|t]==48)break e}U=X8(e,t,L,s,0)}C[0|L]!=46|l[t+b|0]-48>>>0<10|1&l[s+13|0]|l[L+2|0]-48>>>0<10||(l[0|L]=0);e:if(!U||(J=1,A[e+212>>2]==26741)){if(E=g+256|0,A[g+844>>2]=E,c=b,64&C[s+1|0]&&(l[g+256|0]=45,E=g+256|1,A[g+844>>2]=E,c=n+2|0),m=C[t+c|0]){for(;!((255&m)==32|(0|c)>28)&&(f=A[g+844>>2],A[g+844>>2]=f+1,l[0|f]=m,m=C[(c=c+1|0)+t|0]););E=A[g+844>>2]}if(l[0|E]=0,J=1,f=l[g+256|0]){if(!(I=A[e+136>>2])||c0(g+256|0,I)){if(f-48>>>0<10||(A[g+176>>2]=g+256,nA(f=g+800|0,88653,g+176|0),!dA(e,f,133104)))break e;A[a>>2]=128|A[a>>2],A[g+160>>2]=g+256,nA(f=g+800|0,88773,g+160|0),dA(e,f,133116),J=0}U=2}}$=A[s>>2],l[g+352|0]=0,l[g+624|0]=0;e:{r:{i:if(!(!tA|C[0|t]!=48||(0|(f=l[t+1|0]))==32|(0|f)==A[e+128>>2])){s:{if((0|n)==2){if(C[t+3|0]!=58|l[t+5|0]-48>>>0>=10||!((0|(f=l[t+7|0]))==32|f-9>>>0<5))break s;break i}if((0|n)>3)break r}if(C[0|t]==48&&!((0|(f=n-1|0))<=0))for(c=0;;){if(dA(e,88875,lA(I=g+288|0)+I|0),C[(c=c+1|0)+t|0]!=48)break i;if(!((0|f)>(0|c)))break}}i:{s:{if(!((0|(f=l[0|L]))==32&&16&C[e+105|0])){if(q=2,D=n+2|0,(0|f)==A[e+124>>2])break s;O=1,E=0,f=0;break i}q=1,D=n+2|0}if(4&C[s+14|0])E=1,f=0,O=1;else for(f=0,m=1,c=n,O=1;;){I=f,f=m,m=(R=c+q|0)+t|0,c=0;s:{for(;;){if(E=1,!(l[c+m|0]-48>>>0>=10)){if((0|v)!=(0|(c=c+1|0)))continue;break s}break}f=I;break i}if(l[m+v|0]-48>>>0<10){f=I;break i}if(c=0,l[m-1|0]-48>>>0<10){f=I;break i}s:{for(;;){if(C[(c+R|0)+t|0]==48){if((0|v)!=(0|(c=c+1|0)))continue;break s}break}O=0}if((0|(I=l[(c=v+R|0)+t|0]))!=A[e+124>>2]&(!(16&C[e+105|0])|(0|I)!=32))break i;if(D=c+2|0,4&C[2+(T(m=f+1|0,12)+s|0)|0])break}}c=!Y;i:if(!(!O|!(64&C[1+(T(f,12)+s|0)|0])|A[e+212>>2]!=26741)){s:switch(C[0|(I=t+D|0)]-97|0){case 0:case 4:break s;default:break i}s:{o:{f:{u:switch((m=C[I+1|0])-116|0){case 6:break i;case 1:case 2:case 3:case 4:case 5:break o;case 0:break u;default:break f}if(C[I+2|0]!=116)break s;break i}if((0|m)==32)break i}if(!(!!((0|Y)%1e3|0)&(0|f)!=1)&&(0|m)==108)break i}A[33274]=1|A[33274]}D=32768&$,c&=AA;i:if(A[e+128>>2]!=l[0|L]|l[t+b|0]-48>>>0>=10){s:{if(!c){if(c=0,I=1,!((0|f)>0&E))break s;Y=(b=x8(e,Y,f,O,g+624|0))?0:Y,c=!!(0|b),m=0;break i}c=1,Y=0,A[33275]==1&&(A[g+144>>2]=f+1,nA(b=g+800|0,89026,g+144|0),dA(e,b,g+688|0)||(A[g+128>>2]=f,nA(b=g+800|0,89026,g+128|0),dA(e,b,g+624|0)))}I=1,m=0}else dA(e,88882,g+624|0),I=0,m=256;E=D?2:U;i:{if(f|C[g+624|0]|C[0|L]!=46){if(f)break i}else dA(e,89192,g+624|0);if(A[g+844>>2]=t,l[t+1|0]-48>>>0<10)for(;b=A[g+844>>2],A[g+844>>2]=b+1,l[b+2|0]-48>>>0<10;);if(l[A[g+844>>2]-1|0]-48>>>0>=10||(A[g+416>>2]=A[g+844>>2]-1,N0(e,g+416|0,g+192|0,a,4,s)&&(A[33272]=2)),C[g+192|0]|C[A[g+844>>2]]==48||N0(e,g+844|0,g+192|0,a,4,s)&&(A[33272]=1),tA){if(!E&I&&(A[g+112>>2]=Y,nA(s=g+800|0,89214,g+112|0),dA(e,s,r)))break e;if(1&l[e+110|0]){for(b=t;(32|C[0|b])!=32;)b=b+1|0;A[g+416>>2]=b,C[b+1|0]==37&&(dA(e,89328,r),s=lA(r),l[A[g+416>>2]+1|0]=32,r=r+s|0)}}}wr(e,Y,g+416|0,c,f,E|m|AA),!(2&C[e+109|0])|(0|f)<=0?(A[g+60>>2]=15,A[g- -64>>2]=g+624,A[g+56>>2]=g+416,A[g+52>>2]=g+352,A[g+48>>2]=g+288,nA(r,89415,g+48|0)):(A[g+88>>2]=15,A[g+96>>2]=g+416,A[g+92>>2]=g+352,A[g+84>>2]=g+624,A[g+80>>2]=g+288,nA(r,89346,g+80|0));i:if(!I)for(;;){for(n=n+1|0,I=0;I=(b=I)+1|0,l[(f=n+b|0)+t|0]-48>>>0<10;);s=2;s:{o:{f:{u:{g:{n:switch((I=57344&A[e+104>>2])+-8192>>>13|0){case 6:break o;case 2:break f;case 0:case 4:case 5:break u;case 1:break g;case 3:break n;default:break s}s=5}if((0|(I=C[0|(c=t+n|0)]))==48)for(;dA(e,88875,f=g+688|0),P0(r,f),b=b-1|0,(0|(I=C[0|(c=(n=n+1|0)+t|0)]))==48;);if((0|s)<(0|b)|(I<<24>>24)-48>>>0>=10)break s;s=g+688|0,wr(e,y2(c),s,0,0,0),P0(r,s),n=n+b|0;break s}if(wr(e,y2(s=t+n|0),g+416|0,0,0,0),!((0|I)==8192&C[0|s]!=48)){if(A[g+16>>2]=b,nA(s=g+800|0,89508,g+16|0),!dA(e,s,g+688|0))break s;P0((0|I)==49152?r:g+416|0,g+688|0)}P0(r,g+416|0),n=f;break s}if((0|b)>4||C[0|(s=t+n|0)]==48)break s;wr(e,n=y2(s),s=g+688|0,0,0,0),P0(r,s),n=f;break s}if(!((0|b)<=1))for(;;){if(A[g+32>>2]=l[t+n|0],nA(s=g+800|0,89575,g+32|0),!dA(e,s,g+688|0))break s;if(P0(r,g+688|0),n=n+1|0,!((0|(b=b-1|0))>1))break}}s:if(!((I=C[0|(b=t+n|0)])-48>>>0>=10||lA(r)>>>0>=190))for(;;){if(s=g+688|0,kr(e,l[0|b]-48|0,0,2,s),f=lA(r),A[g>>2]=15,A[g+4>>2]=s,nA(r+f|0,89594,g),(I=C[0|(b=(n=n+1|0)+t|0)])-48>>>0>=10)break s;if(!(lA(r)>>>0<=189))break}if(dA(e,89678,g+688|0)&&P0(r,g+688|0),A[e+128>>2]!=(0|I)|l[1+(t+n|0)|0]-48>>>0>=10)break i;dA(e,88882,s=g+688|0),P0(r,s)}if(!(s=C[0|r])|(0|s)==21||(s=NA(g+184|0,t=1+(t+n|0)|0),n=A[g+184>>2],!(2&C[e+106|0])|(0|n)!=32||(NA(g+184|0,t+s|0),n=A[g+184>>2]),De(n)|O||(e=lA(r)+r|0,l[0|e]=11,l[e+1|0]=0)),A[a>>2]=-2147483648|A[a>>2],A[33275]=A[33275]-1,c=1,J)break A;A[33264]=1;break A}A[a>>2]=-129&A[a>>2],c=0;break A}c=1}}return F=g+848|0,c}function J1(e,t,r,a){var s,n,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0;if(F=s=F-416|0,U=y[r+8>>1],D=C[r+10|0],64&(n=A[r>>2])){for(A[r>>2]=-65&n,l[199388]=1,c=A[47202],E=A[49846],b=A[47352],m=A[47351],I=A[47350];;){g=(f=A[198304+(m<<2)>>2])>>8;A:{e:switch((31&f)-9|0){case 0:c=g;break A;case 4:E=g;break A;case 3:break e;default:break A}b=f>>>0>=256?g+b|0:0}if(!(!(128&f)&(0|I)>(0|(m=m+1|0))))break}A[47352]=b,A[47351]=m,A[49846]=E,A[47202]=c}E=0;A:if(!((0|(g=A[49572]))>997)){if(1048576&n||!C[0|t])C[199388]&&(A[49572]=g+1,l[199388]=0,A[(e=190288+(g<<3)|0)>>2]=983042,A[e+4>>2]=0),l[189088]=0;else if(!((0|g)>990)){(0|(g=A[e+8224>>2]))>0&&(A[e+8224>>2]=g-1),c=512&n?a:a+4|0,b=(240&A[47202])==16,(R=2&n)&&((0|(f=A[47200]))<3||(0|(g=A[47350]))>243||(C[199388]&&(A[(m=198300+(g<<2)|0)>>2]=-129&A[m>>2]),A[47350]=g+1,l[199388]=1,J=(0|f)==3?20:f,A[198304+(g<<2)>>2]=J<<8|193)),I=b?c:a;e:{r:{if(!(8&n)){for(;a=C[(g=v)+t|0],l[g+(s+240|0)|0]=a,223&a&&(v=g+1|0,g>>>0<160););if(l[s+66|0]=0,v=s- -64|2,E=yt(A[47192],t,r,v),A[s+412>>2]=E,!(4096&E))break r;MA(t,s+240|0,g);break A}i:if(F0(t,87276,3))ai(t,189088,s+240|0);else{if(m=0,223&(g=C[0|(v=t+3|0)]))for(;l[(s+240|0)+m|0]=We(g<<24>>24),m=m+1|0,223&(g=C[0|(v=v+1|0)]););l[(a=s+240|0)+m|0]=0,g=0;s:if(!((0|(r=A[34461]))<=0)){for(;;){if(!c0(a,T(g,44)+137856|0)){A[34457]=g;break s}if((0|r)==(0|(g=g+1|0)))break}g=r}if((0|(r=(0|r)==(0|g)?-1:g))<=0)break i;W0(r),l[189090]=0,l[189089]=r,l[189088]=21}E=-2147483648,A[s+412>>2]=-2147483648,a=-1;break e}if(!(!(8388608&E)|8&C[r+12|0])){for(F=b=F-208|0,m=A[e+60>>2],f=t;a=f,f=f+1|0,C[0|a]!=32;);NA(b+204|0,f);r:if(De(A[b+204>>2])){c=cA(b,189088),f=(!(256&m)|(O=m2(e,f,r+12|0,0))>>>15)&!(67108864&O)&C[189088]!=21;i:{s:{if(512&m){if(!(f&!(16&C[r+12|0])))break s;break i}if(f)break i}cA(189088,c);break r}if(l[0|a]=45,A[r>>2]=-2&A[r>>2],E=0,f=189088,Y=m2(A[47192],t,r,0),A[s+412>>2]=Y,!((0|m)<=0)&&(c=C[189088])){for(;E=(C[A[144464+(c<<2)>>2]+11|0]==2)+E|0,c=C[0|(f=f+1|0)];);if(!((31&m)>=(0|E))){l[0|a]=32,A[s+412>>2]=m2(A[47192],t,r,0);break r}}A[s+412>>2]=128|(Y||O),A[33264]=1}F=b+208|0}if(a=-1,C[189088]==21){if(m=cA(s+16|0,132848),b=A[s+412>>2],f=MA(t,s+240|0,g),c=s- -64|1,(0|(a=Pr(C[189089]?189089:87315,188772,189296)))<0||(A[r>>2]=4194304|A[r>>2],C[s+66|0]?(B[s+64>>1]=8192,b=m2(A[47193],c,r,0)):b=yt(A[47193],f,r,v)),C[189088]==21&&(g=MA(f,s+240|0,g),(0|(a=Pr(C[189089]?189089:87315,188772,189296)))<0||(A[r>>2]=4194304|A[r>>2],C[s+66|0]?(B[s+64>>1]=8192,b=m2(A[47193],c,r,0)):b=yt(A[47193],g,r,v)),E=4096,C[189088]==21))break A;A[s+412>>2]=b,(0|a)>=0||(l[189090]=0,B[94544]=3341,(0|a)==-1&&(cA(132848,m),W0(A[A[32972]+60>>2]),a=A[A[32972]+60>>2]))}E=A[s+412>>2],128&n||(I=268435456&E&&(0|I)<=1?1:I,!(256&E)|528&n|A[e+8224>>2]|2&C[r-11|0]||(A[e+8224>>2]=3,I=(0|I)<=4?4:I)),I=(0|I)<=0&&A[49846]>2?1:I}if(r=C[199388],!((0|I)<=0|(0|(v=A[49572]))>990)){A[49572]=v+1,f=1&r,r=0,B[(g=190288+(v<<3)|0)>>1]=f?2:0,l[g+7|0]=0,l[g+3|0]=0,f=I>>>0>1,l[g+2|0]=f?9:11,B[g+4>>1]=0,A[e+8236>>2]=0;e:if(!(!(g=f?I-2|0:0)|(0|(v=A[49572]))>990))for(c=e+8236|0;;){if(A[49572]=v+1,B[(f=190288+(v<<3)|0)>>1]=0,l[f+7|0]=0,l[f+3|0]=0,b=g>>>0>1,l[f+2|0]=b?9:11,B[f+4>>1]=0,A[c>>2]=0,v=A[49572],(0|(g=b?g-2|0:0))<=0)break e;if(!((0|v)<991))break}A[e+8228>>2]=0,A[e+8232>>2]=0}l[199388]=1&r,!R|A[47200]!=1||(A[49572]=v+2,l[199388]=0,B[(g=190288+(v<<3)|0)>>1]=1&r?2:0,l[g+7|0]=0,B[g+2>>1]=10,B[g+4>>1]=0,B[g+12>>1]=0,A[g+8>>2]=1179648,l[g+15|0]=0,1&n&&r0(l[t+1|0])&&(r=C[199388],l[199388]=0,t=A[49572],A[49572]=t+2,B[(t=190288+(t<<3)|0)>>1]=r?2:0,l[t+7|0]=0,B[t+2>>1]=10,B[t+4>>1]=0,B[t+12>>1]=0,A[t+8>>2]=1179648,l[t+15|0]=0)),g=D>>>0<31;e:if(!((0|a)<0))if(t=A[49572],r=C[190290+((I=t-1|0)<<3)|0],C[189088]!=9|C[189089]!=21)(0|r)!=21&&(f=C[199388],l[199388]=0,l[(r=190288+(t<<3)|0)+7|0]=0,B[r+2>>1]=21,B[r+4>>1]=0,B[r>>1]=f?2:0,I=t),A[49572]=I+1,l[190295+(I<<3)|0]=a;else{if((0|r)!=21)break e;A[49572]=I}t=2047&U,r=(g?D:31)<<11,b=(q=128&n)?C[A[144464+(C[189088]<<2)>>2]+11|0]?189088:189089:189088,(I=C[0|b])|!(1&l[199388])||(I=23,l[0|b]=23,l[b+1|0]=0),$=t|r,c=A[49572];e:if(I)if((0|c)>994)t=0;else for(iA=((-1610612736&E)==-2147483648)<<4,U=$+1|0,fA=e+8233|0,t=0,f=1,O=0,AA=1,D=-1,R=-1,g=0;;){m=b+1|0;r:{if((0|(Y=255&I))!=255){if(r=A[144464+(Y<<2)>>2])break r;A[s>>2]=Y,F=r=F-16|0,A[r+12>>2]=s,Ni(132552,87474,s),F=r+16|0,c=A[49572]}if(!(I=C[0|m]))break e;if(b=m,(0|c)<995)continue;break e}r:if((0|(L=255&I))!=21)if((0|(b=C[r+11|0]))!=1){r=U;i:switch(L-12|0){case 8:l[(r=190288+((D=c-1|0)<<3)|0)+3|0]=f,B[r>>1]=4|y[r>>1],r=g;break r;case 0:B[(r=190280+(c<<3)|0)>>1]=8|y[r>>1],r=g;break r;case 10:E|=16384,A[s+412>>2]=E,r=g;break r;case 3:break r;default:break i}Y=C[199388],l[199388]=0,l[(r=(L=c<<3)+190288|0)+7|0]=0,l[r+2|0]=I,B[r+4>>1]=g,g=(Y?2:0)|iA,B[r>>1]=g,(0|b)==2?((0|f)>=4&&(l[189076]=1),(0|D)<0||(0|(t=c-1|0))!=(0|D)&&(l[190291+(t<<3)|0]=f),B[r>>1]=4|g,tA=(t=(0|f)>(0|R))?c:tA,R=t?f:R,g=1,O&&(l[r+7|0]=O),D=c,O=0,t=f):(!AA|!(64&C[0|fA])||(B[r>>1]=8|g),g=f),c=c+1|0,A[49572]=c,l[L+190291|0]=t,r=0,AA=0,f=g}else{if(!y[r+8>>1]){f=C[r+14|0],r=g;break r}if((0|D)<0){r=g,O=Y;break r}l[190295+(D<<3)|0]=I,r=g}else A[(r=190288+(c<<3)|0)>>2]=1376256,B[r+4>>1]=0,l[r+7|0]=C[b+1|0],A[49572]=c+1,W0(C[b+1|0]),m=b+2|0,c=A[49572],r=g;if(!(I=C[0|m]))break e;if(b=m,g=r,!((0|c)<995))break}else t=0;131072&n&&(r=c+1|0,A[49572]=r,f=C[199388],l[199388]=0,l[(g=190288+(c<<3)|0)+7|0]=0,B[g+2>>1]=27,B[g+4>>1]=0,B[g>>1]=f?2:0,c=r),q||(B[190292+(v<<3)>>1]=$),A[e+8228>>2]=0,C[A[144464+(C[190282+(c<<3)|0]<<2)>>2]+11|0]!=2|(0|t)<4||(A[e+8228>>2]=1),(0|a)>=0&&(cA(132848,s+16|0),W0(A[A[32972]+60>>2]),r=C[199388],l[199388]=0,a=A[49572],B[(t=190288+(a<<3)|0)>>1]=r?2:0,B[t+2>>1]=21,B[t+4>>1]=0,l[t+7|0]=A[A[32972]+60>>2],c=a+1|0,A[49572]=c),(0|J)>0&&(l[199388]=0,A[49572]=c+1,A[(t=190288+(c<<3)|0)>>2]=655362,r=A[47350],A[47350]=r+1,l[t+7|0]=0,B[t+4>>1]=0,A[198304+(r<<2)>>2]=J<<8|225),1024&E&&(B[(t=190288+(tA<<3)|0)>>1]=64|y[t>>1]),A[e+8232>>2]=E}}return F=s+416|0,E}function j1(e,t,r,a,s){var n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0;A:if(t){if(R=s<<4,g=(t=A[33268])+r|0,!((0|t)<=0||(n=C[0|(c=R+129360|0)],m=C[c+1|0]-n<<8,m=(0|t)!=1?(0|m)/(0|t)|0:m,(0|r)>=(0|g))))for(E=m>>>0>255,Y=m>>>8|0,n<<=8,c=0-m>>>8|0,J=(0|m)<=0,t=r;J?(I=(b=(b=(0|(f=(0|(f=A[101024+(l[T(t,6)+e|0]<<2)>>2]))<(0|c)?c:f))>=18?18:f)+(f=(0|(f=(0|(n=n+m|0))/256|0))>0?f:0)|0)>>>0>=254?254:b,f=f>>>0>=254?254:f):(f=T(t,6)+e|0,l[f+2|0]=E|C[f+2|0],f=(b=(0|(f=(0|n)/256|0))>0?f:0)>>>0>=254?254:b,I=(b=b+Y|0)>>>0>=254?254:b,n=n+m|0),b=T(t,6)+e|0,l[b+5|0]=f,l[b+4|0]=I,(0|g)!=(0|(t=t+1|0)););if(2&C[188785]?(c=A[33271],A[33270]=c):c=A[33270],Y=(E=C[(n=(t=s<<4)+129360|0)+3|0])-(f=C[n+2|0])<<8,J=A[n+4>>2],(0|r)>0?($=101056,L=5,b=(0|Y)/(C[t+129368|0]-1|0)|0):($=A[(t=t+129360|0)+12>>2],L=C[t+10|0],b=0),(0|g)<(0|c)){for(m=(0|r)<=0,O=((t=Y>>31)^Y)-t|0,v=129360+(s<<4)|0,f<<=8,q=E<<8,E=0;;){e:{if(I=T(g,6)+e|0,!(!(1&m)&(0|(n=l[0|I]))<4)){r=0,t=g;r:if(1&((0|n)==5|m)){for(;(0|(b=l[T(t,6)+e|0]))<=6&&(r=((0|b)>3)+r|0,(0|c)!=(0|(t=t+1|0))););if(D=0,(0|(U=(0|(t=C[v+8|0]))>(0|r)?r:t))<2){b=0,E=f;break r}b=(0|Y)/(U-1|0)|0,E=f}else(0|U)>0?E=b+E|0:(E=q+(T(O,l[D+$|0])>>6)|0,(0|L)>(0|(D=D+1|0))||($=A[v+12>>2],D=0));if(U=U-1|0,!((0|n)<4)){l[0|I]=6,r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(n=A[J+(n<<2)>>2])>>31)^n)-r|0)|0;break e}}(0|n)!=3?(t=(0|E)/256|0,(63&C[I-6|0])>>>0>=3?(r=(n=A[J+(n<<2)>>2])>>31,r=(t=(0|(t=t-l[v+9|0]|0))>0?t:0)+((r^n)-r|0)|0):r=(t=(0|t)>0?t:0)+(((r=(n=A[J+(n<<2)>>2])>>31)^n)-r|0)|0):r=(t=(0|(t=(0|E)/256|0))>0?t:0)+(((r=(n=A[J+12>>2])>>31)^n)-r|0)|0}if(l[I+5|0]=t>>>0>=254?254:t,m=0,t=(0|r)>0?r:0,l[I+4|0]=t>>>0>=254?254:t,l[I+2|0]=C[I+2|0]|n>>>31,(0|c)==(0|(g=g+1|0)))break}g=c}if(!(C[133068]||((268435455&s)==3&&(t=T(g,6)+e|0,l[t+2|0]=2|C[t+2|0]),A[33269]?(t=C[(n=100768+(s<<4)|0)+5|0],f=n+3|0,r=C[n+4|0]-t|0):(t=C[(r=100768+(s<<4)|0)+2|0],f=R+100768|0,r=C[r+1|0]-t|0),n=T(g,6)+e|0,l[n+5|0]=t>>>0>=254?254:t,l[n+2|0]=C[n+2|0]|r>>>31,t=(b=t)+(((t=r>>31)^r)-t|0)|0,l[n+4|0]=t>>>0>=254?254:t,r=T(c,6)+e|0,l[r+1|0]=C[0|f],t=g+1|0,C[0|r]==4&&(l[0|r]=6),(0|(r=a-t|0))<=0||(s=C[(g=100768+(s<<4)|0)+12|0],g=C[g+13|0]-s<<8,g=(0|r)!=1?(0|g)/(0|r)|0:g,(0|t)>=(0|a)))))for(b=g>>>0>255,m=g>>>8|0,r=s<<8,s=0-g>>>8|0,E=(0|g)<=0;E?(f=(c=(f=(0|(n=(0|s)>(0|(n=A[101024+(l[T(t,6)+e|0]<<2)>>2]))?s:n))>=18?18:n)+(n=(0|(n=(0|(r=r+g|0))/256|0))>0?n:0)|0)>>>0>=254?254:c,c=n>>>0>=254?254:n):(n=T(t,6)+e|0,l[n+2|0]=b|C[n+2|0],c=(n=(0|(n=(0|r)/256|0))>0?n:0)>>>0>=254?254:n,f=(n=n+m|0)>>>0>=254?254:n,r=r+g|0),n=T(t,6)+e|0,l[n+5|0]=c,l[n+4|0]=f,(0|a)!=(0|(t=t+1|0)););}else{if(t=(L=A[34455])+T(s,68)|0,g=C[t+24|0],c=C[t+25|0],n=(t=A[33268])+r|0,!((0|t)<=0||(I=c-g<<8,I=(0|t)!=1?(0|I)/(0|t)|0:I,(0|r)>=(0|n))))for(b=I>>>0>255,m=I>>>8|0,t=g<<8,c=0-I>>>8|0,E=(0|I)<=0;E?(g=(g=(Y=(0|(g=(0|(g=A[101024+(l[T(r,6)+e|0]<<2)>>2]))<(0|c)?c:g))>=18?18:g)+(f=(0|(g=(0|(t=t+I|0))/256|0))>0?g:0)|0)>>>0>=254?254:g,f=f>>>0>=254?254:f):(g=T(r,6)+e|0,l[g+2|0]=b|C[g+2|0],f=(g=(0|(g=(0|t)/256|0))>0?g:0)>>>0>=254?254:g,g=(g=g+m|0)>>>0>=254?254:g,t=t+I|0),Y=T(r,6)+e|0,l[Y+5|0]=f,l[Y+4|0]=g,(0|n)!=(0|(r=r+1|0)););2&C[188785]?(r=A[33271],A[33270]=r):r=A[33270],c=r,t=L+T(s,68)|0;e:if((0|(m=C[t+33|0]))!=255)for(;;){if((0|(c=c-1|0))<(0|n)){c=r;break e}if(!(l[T(c,6)+e|0]<4))break}if((0|r)>(0|n)){for(fA=((g=(tA=(E=C[t+32|0])-(I=C[0|(f=t+31|0)])<<8)>>31)^tA)-g|0,q=(0|(t=C[0|(b=t+30|0)]))==255,Y=m<<8,J=I<<8,bA=E<<8,R=L+T(s,68)|0,pA=(0|t)!=255,E=0,m=0,t=1,I=0;;){e:{if(v=T(n,6)+e|0,!(!(1&t)&(0|(O=l[0|v]))<4)){r:if(1&((0|O)==5|t)){i:if(pA){if(AA=1,t=0,g=b,!((0|c)<=(0|(I=n+1|0)))){for(;;){if(g=b,(0|(m=l[T(I,6)+e|0]))>6)break i;if(t=((0|m)>3)+t|0,(0|c)==(0|(I=I+1|0)))break}g=b}}else{if(t=0,I=n,g=f,(0|c)<=(0|n))break i;for(;;){if(g=f,(0|(m=l[T(I,6)+e|0]))>6)break i;if(t=((0|m)>3)+t|0,(0|c)==(0|(I=I+1|0)))break}g=f}if(m=C[0|g]<<8,iA=0,(0|(I=(0|t)<(0|(g=C[R+34|0]))?t:g))<2){$=0;break r}$=(0|tA)/(I-1|0)|0}else(0|n)!=(0|c)?AA?(q=1,I=I+1|0,AA=0,m=J):(0|I)>0?(m=m+$|0,AA=0):(AA=0,m=(T(l[16+(R+iA|0)|0],fA)>>6)+bA|0,iA=(0|(t=iA+1|0))<C[R+35|0]?t:0):(q=2,m=Y);if(I=I-1|0,!((0|O)<4)){t=g=n+1|0;r:if(!((0|r)<=(0|n)))for(;;){if(l[T(t,6)+e|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}l[0|v]=6,l[v+1|0]=C[R+26|0],E=0,D=C[R+27|0],n=(0|(n=(0|m)/256|0))>0?n:0,l[v+5|0]=n>>>0>=254?254:n,n=n+D|0,l[v+4|0]=n>>>0>=254?254:n,U=t-g|0;break e}}if((0|O)>=2){t=g=n+1|0;r:if(!((0|r)<=(0|n)))for(;;){if(l[T(t,6)+e|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}E=0,n=(0|(n=(0|m)/256|0))>0?n:0,l[v+5|0]=n>>>0>=254?254:n,D=A[100976+(O<<2)>>2],l[v+2|0]=C[v+2|0]|D>>>31,n=(0|(n=(O=n)+(((n=D>>31)^D)-n|0)|0))>0?n:0,l[v+4|0]=n>>>0>=254?254:n,U=t-g|0}else(0|U)<=1?(D=l[36+(R+q|0)|0],t=0):(D=l[(t=R+q|0)+36|0],t=(l[t+39|0]-D|0)/(U-1|0)|0),g=A[100976+(O<<2)>>2],l[v+2|0]=C[v+2|0]|g>>>31,t=(0|(t=(((0|m)/256|0)+D|0)+T(t,E)|0))>0?t:0,l[v+5|0]=t>>>0>=254?254:t,t=(0|(t=t+(((O=g)^(g>>=31))-g|0)|0))>0?t:0,l[v+4|0]=t>>>0>=254?254:t,E=E+1|0,g=n+1|0}if(t=0,(0|r)==(0|(n=g)))break}n=r}if(C[133068]||(g=T(n,6)+e|0,A[33269]?(f=L+T(s,68)|0,t=C[f+47|0],c=C[f+46|0]-t|0,f=f+45|0):(f=L+T(s,68)|0,t=C[f+44|0],c=C[f+43|0]-t|0,f=f+42|0),f=C[0|f],b=(((b=c>>31)^c)-b|0)+t|0,l[g+4|0]=b>>>0>=254?254:b,l[g+5|0]=t>>>0>=254?254:t,t=T(n,6)+e|0,l[t+2|0]=C[t+2|0]|c>>>31,r=T(r,6)+e|0,l[r+1|0]=f,t=n+1|0,C[0|r]==4&&(l[0|r]=6),(0|(r=a-t|0))<=0)||(g=L+T(s,68)|0,s=C[g+48|0],g=C[g+49|0]-s<<8,g=(0|r)!=1?(0|g)/(0|r)|0:g,(0|t)>=(0|a)))break A;for(b=g>>>0>255,m=g>>>8|0,r=s<<8,s=0-g>>>8|0,E=(0|g)<=0;E?(f=(c=(f=(0|(n=(0|s)>(0|(n=A[101024+(l[T(t,6)+e|0]<<2)>>2]))?s:n))>=18?18:n)+(n=(0|(n=(0|(r=r+g|0))/256|0))>0?n:0)|0)>>>0>=254?254:c,c=n>>>0>=254?254:n):(n=T(t,6)+e|0,l[n+2|0]=b|C[n+2|0],c=(n=(0|(n=(0|r)/256|0))>0?n:0)>>>0>=254?254:n,f=(n=n+m|0)>>>0>=254?254:n,r=r+g|0),n=T(t,6)+e|0,l[n+5|0]=c,l[n+4|0]=f,(0|a)!=(0|(t=t+1|0)););}}function w2(){var e,t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0;if((0|(e=A[36455]))!=(0|(c=A[36454]))){A:if(!((0|(v=A[36427]))<0|(0|c)==(0|v))){r=m=A[8+(216192+((I=v)<<4)|0)>>2];e:{for(;;){if((a=A[(g=216192+((I=(0|(a=I-1|0))<0?169:a)<<4)|0)>>2])-5>>>0<2)break e;r:{if((0|a)<=4){if(A[g+12>>2]!=(0|r))break e;if(a=y[g+4>>1],A[g+12>>2]=m,r=A[g+8>>2],16&(t=y[r>>1]))break r;for(Y=32&t?(T(a,12)>>>0)/10|0:a,s=0,a=r,f=0;;){t=y[r>>1];i:if(!(f>>>0<3&&8&t)){if(t=t<<16>>16,(0|(D=(b=B[2+((E=f<<1)+r|0)>>1])-(n=B[(E=m+E|0)+2>>1])|0))>(0|(b=(0|T(Y,(0|T(A[200944+(f<<2)>>2],(0|D)>0?b+(n<<1)|0:(b<<1)+n|0))/3e3|0))/256|0)))s||((0|t)<0?a=r:(a=0,t=(0|(t=A[44469]+1|0))<=169?t:0,A[44469]=t,(t=(s=t<<6)+177888|0)&&(a=y[r+4>>1]|y[r+6>>1]<<16,n=y[r>>1]|y[r+2>>1]<<16,B[t>>1]=n,B[t+2>>1]=n>>>16,B[t+4>>1]=a,B[t+6>>1]=a>>>16,a=y[r+60>>1]|y[r+62>>1]<<16,n=y[r+56>>1]|y[r+58>>1]<<16,B[t+56>>1]=n,B[t+58>>1]=n>>>16,B[t+60>>1]=a,B[t+62>>1]=a>>>16,a=y[r+52>>1]|y[r+54>>1]<<16,n=y[r+48>>1]|y[r+50>>1]<<16,B[t+48>>1]=n,B[t+50>>1]=n>>>16,B[t+52>>1]=a,B[t+54>>1]=a>>>16,a=y[r+44>>1]|y[r+46>>1]<<16,n=y[r+40>>1]|y[r+42>>1]<<16,B[t+40>>1]=n,B[t+42>>1]=n>>>16,B[t+44>>1]=a,B[t+46>>1]=a>>>16,a=y[r+36>>1]|y[r+38>>1]<<16,n=y[r+32>>1]|y[r+34>>1]<<16,B[t+32>>1]=n,B[t+34>>1]=n>>>16,B[t+36>>1]=a,B[t+38>>1]=a>>>16,a=y[r+28>>1]|y[r+30>>1]<<16,n=y[r+24>>1]|y[r+26>>1]<<16,B[t+24>>1]=n,B[t+26>>1]=n>>>16,B[t+28>>1]=a,B[t+30>>1]=a>>>16,a=y[r+20>>1]|y[r+22>>1]<<16,n=y[r+16>>1]|y[r+18>>1]<<16,B[t+16>>1]=n,B[t+18>>1]=n>>>16,B[t+20>>1]=a,B[t+22>>1]=a>>>16,a=y[r+12>>1]|y[r+14>>1]<<16,n=y[r+8>>1]|y[r+10>>1]<<16,B[t+8>>1]=n,B[t+10>>1]=n>>>16,B[t+12>>1]=a,B[t+14>>1]=a>>>16,l[s+177904|0]=0,B[t>>1]=32768|y[t>>1],a=t))),t=b+y[E+2>>1]|0;else{if((0-b|0)<=(0|D))break i;s||((0|t)<0?a=r:(a=0,t=(0|(t=A[44469]+1|0))<=169?t:0,A[44469]=t,(t=(s=t<<6)+177888|0)&&(a=y[r+4>>1]|y[r+6>>1]<<16,n=y[r>>1]|y[r+2>>1]<<16,B[t>>1]=n,B[t+2>>1]=n>>>16,B[t+4>>1]=a,B[t+6>>1]=a>>>16,a=y[r+60>>1]|y[r+62>>1]<<16,n=y[r+56>>1]|y[r+58>>1]<<16,B[t+56>>1]=n,B[t+58>>1]=n>>>16,B[t+60>>1]=a,B[t+62>>1]=a>>>16,a=y[r+52>>1]|y[r+54>>1]<<16,n=y[r+48>>1]|y[r+50>>1]<<16,B[t+48>>1]=n,B[t+50>>1]=n>>>16,B[t+52>>1]=a,B[t+54>>1]=a>>>16,a=y[r+44>>1]|y[r+46>>1]<<16,n=y[r+40>>1]|y[r+42>>1]<<16,B[t+40>>1]=n,B[t+42>>1]=n>>>16,B[t+44>>1]=a,B[t+46>>1]=a>>>16,a=y[r+36>>1]|y[r+38>>1]<<16,n=y[r+32>>1]|y[r+34>>1]<<16,B[t+32>>1]=n,B[t+34>>1]=n>>>16,B[t+36>>1]=a,B[t+38>>1]=a>>>16,a=y[r+28>>1]|y[r+30>>1]<<16,n=y[r+24>>1]|y[r+26>>1]<<16,B[t+24>>1]=n,B[t+26>>1]=n>>>16,B[t+28>>1]=a,B[t+30>>1]=a>>>16,a=y[r+20>>1]|y[r+22>>1]<<16,n=y[r+16>>1]|y[r+18>>1]<<16,B[t+16>>1]=n,B[t+18>>1]=n>>>16,B[t+20>>1]=a,B[t+22>>1]=a>>>16,a=y[r+12>>1]|y[r+14>>1]<<16,n=y[r+8>>1]|y[r+10>>1]<<16,B[t+8>>1]=n,B[t+10>>1]=n>>>16,B[t+12>>1]=a,B[t+14>>1]=a>>>16,l[s+177904|0]=0,B[t>>1]=32768|y[t>>1],a=t))),t=y[E+2>>1]-b|0}s=1,B[2+((f<<1)+a|0)>>1]=t,A[g+8>>2]=a}if((0|(f=f+1|0))==6)break}m=a}if((0|c)!=(0|I))continue;break e}break}m=r}for(a=0;;){if((r=A[(I=216192+(v<<4)|0)>>2])-5>>>0<2)break A;if((0|r)<=4){if(r=A[I+8>>2],t=y[I+4>>1],a){if((0|r)!=(0|a))break A;A[I+8>>2]=m}else m=r;if(16&(a=y[m>>1]))break A;for(E=32&a?(T(t,6)>>>0)/5|0:t,s=0,r=a=A[I+12>>2],f=0;;){e:{r:if((0|(c=(g=B[2+((t=f<<1)+a|0)>>1])-(t=B[(b=t+m|0)+2>>1])|0))>(0|(g=(0|T(E,(0|T(A[200944+(f<<2)>>2],(0|c)>0?g+(t<<1)|0:(g<<1)+t|0))/3e3|0))/256|0))){if(!s){if(B[a>>1]<0){r=a,t=t+g|0;break r}r=(0|(r=A[44469]+1|0))<=169?r:0,A[44469]=r,s=y[a+20>>1]|y[a+22>>1]<<16,t=(r=177888+(r<<6)|0)+16|0,c=y[a+16>>1]|y[a+18>>1]<<16,B[t>>1]=c,B[t+2>>1]=c>>>16,B[t+4>>1]=s,B[t+6>>1]=s>>>16,t=y[a+4>>1]|y[a+6>>1]<<16,s=y[a>>1]|y[a+2>>1]<<16,B[r>>1]=s,B[r+2>>1]=s>>>16,B[r+4>>1]=t,B[r+6>>1]=t>>>16,t=y[a+12>>1]|y[a+14>>1]<<16,s=y[a+8>>1]|y[a+10>>1]<<16,B[r+8>>1]=s,B[r+10>>1]=s>>>16,B[r+12>>1]=t,B[r+14>>1]=t>>>16,t=y[a+28>>1]|y[a+30>>1]<<16,s=y[a+24>>1]|y[a+26>>1]<<16,B[r+24>>1]=s,B[r+26>>1]=s>>>16,B[r+28>>1]=t,B[r+30>>1]=t>>>16,t=y[a+36>>1]|y[a+38>>1]<<16,s=y[a+32>>1]|y[a+34>>1]<<16,B[r+32>>1]=s,B[r+34>>1]=s>>>16,B[r+36>>1]=t,B[r+38>>1]=t>>>16,t=y[a+44>>1]|y[a+46>>1]<<16,s=y[a+40>>1]|y[a+42>>1]<<16,B[r+40>>1]=s,B[r+42>>1]=s>>>16,B[r+44>>1]=t,B[r+46>>1]=t>>>16,t=y[a+52>>1]|y[a+54>>1]<<16,s=y[a+48>>1]|y[a+50>>1]<<16,B[r+48>>1]=s,B[r+50>>1]=s>>>16,B[r+52>>1]=t,B[r+54>>1]=t>>>16,t=y[a+60>>1]|y[a+62>>1]<<16,s=y[a+56>>1]|y[a+58>>1]<<16,B[r+56>>1]=s,B[r+58>>1]=s>>>16,B[r+60>>1]=t,B[r+62>>1]=t>>>16,l[r+16|0]=0,B[r>>1]=32768|y[r>>1],t=y[b+2>>1]}t=t+g|0}else{if((0|c)>=(0-g|0))break e;s||(B[a>>1]<0?r=a:(r=(0|(r=A[44469]+1|0))<=169?r:0,A[44469]=r,s=y[a+20>>1]|y[a+22>>1]<<16,t=(r=177888+(r<<6)|0)+16|0,c=y[a+16>>1]|y[a+18>>1]<<16,B[t>>1]=c,B[t+2>>1]=c>>>16,B[t+4>>1]=s,B[t+6>>1]=s>>>16,t=y[a+4>>1]|y[a+6>>1]<<16,s=y[a>>1]|y[a+2>>1]<<16,B[r>>1]=s,B[r+2>>1]=s>>>16,B[r+4>>1]=t,B[r+6>>1]=t>>>16,t=y[a+12>>1]|y[a+14>>1]<<16,s=y[a+8>>1]|y[a+10>>1]<<16,B[r+8>>1]=s,B[r+10>>1]=s>>>16,B[r+12>>1]=t,B[r+14>>1]=t>>>16,t=y[a+28>>1]|y[a+30>>1]<<16,s=y[a+24>>1]|y[a+26>>1]<<16,B[r+24>>1]=s,B[r+26>>1]=s>>>16,B[r+28>>1]=t,B[r+30>>1]=t>>>16,t=y[a+36>>1]|y[a+38>>1]<<16,s=y[a+32>>1]|y[a+34>>1]<<16,B[r+32>>1]=s,B[r+34>>1]=s>>>16,B[r+36>>1]=t,B[r+38>>1]=t>>>16,t=y[a+44>>1]|y[a+46>>1]<<16,s=y[a+40>>1]|y[a+42>>1]<<16,B[r+40>>1]=s,B[r+42>>1]=s>>>16,B[r+44>>1]=t,B[r+46>>1]=t>>>16,t=y[a+52>>1]|y[a+54>>1]<<16,s=y[a+48>>1]|y[a+50>>1]<<16,B[r+48>>1]=s,B[r+50>>1]=s>>>16,B[r+52>>1]=t,B[r+54>>1]=t>>>16,t=y[a+60>>1]|y[a+62>>1]<<16,s=y[a+56>>1]|y[a+58>>1]<<16,B[r+56>>1]=s,B[r+58>>1]=s>>>16,B[r+60>>1]=t,B[r+62>>1]=t>>>16,l[r+16|0]=0,B[r>>1]=32768|y[r>>1],t=y[b+2>>1])),t=t-g|0}s=1,B[2+((f<<1)+r|0)>>1]=t,A[I+12>>2]=r}if((0|(f=f+1|0))==6)break}m=r}if((0|e)==(0|(v=(0|(r=v+1|0))<=169?r:0)))break}}A[36454]=e}}function k8(e,t){var r,a,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0;F=r=F-48|0,S(+e),n=0|M(1),s=0|M(0),a=n;A:{e:{r:{if((c=2147483647&n)>>>0<=1074752122){if((1048575&n)==598523)break r;if(c>>>0<=1073928572){if((0|a)>0|(0|a)>=0){f=(e+=-1.5707963267341256)+-6077100506506192e-26,Q[t>>3]=f,Q[t+8>>3]=e-f-6077100506506192e-26,n=1;break A}f=(e+=1.5707963267341256)+6077100506506192e-26,Q[t>>3]=f,Q[t+8>>3]=e-f+6077100506506192e-26,n=-1;break A}if((0|a)>0|(0|a)>=0){f=(e+=-3.1415926534682512)+-12154201013012384e-26,Q[t>>3]=f,Q[t+8>>3]=e-f-12154201013012384e-26,n=2;break A}f=(e+=3.1415926534682512)+12154201013012384e-26,Q[t>>3]=f,Q[t+8>>3]=e-f+12154201013012384e-26,n=-2;break A}if(c>>>0<=1075594811){if(c>>>0<=1075183036){if((0|c)==1074977148)break r;if((0|a)>0|(0|a)>=0){f=(e+=-4.712388980202377)+-18231301519518578e-26,Q[t>>3]=f,Q[t+8>>3]=e-f-18231301519518578e-26,n=3;break A}f=(e+=4.712388980202377)+18231301519518578e-26,Q[t>>3]=f,Q[t+8>>3]=e-f+18231301519518578e-26,n=-3;break A}if((0|c)==1075388923)break r;if((0|a)>0|(0|a)>=0){f=(e+=-6.2831853069365025)+-2430840202602477e-25,Q[t>>3]=f,Q[t+8>>3]=e-f-2430840202602477e-25,n=4;break A}f=(e+=6.2831853069365025)+2430840202602477e-25,Q[t>>3]=f,Q[t+8>>3]=e-f+2430840202602477e-25,n=-4;break A}if(c>>>0>1094263290)break e}s=(J=(f=e+-1.5707963267341256*(m=.6366197723675814*e+6755399441055744-6755399441055744))-(v=6077100506506192e-26*m))<-.7853981633974483,n=sA(m)<2147483648?~~m:-2147483648,s?(n=n-1|0,v=6077100506506192e-26*(m+=-1),f=e+-1.5707963267341256*m):J>.7853981633974483&&(n=n+1|0,v=6077100506506192e-26*(m+=1),f=e+-1.5707963267341256*m),e=f-v,Q[t>>3]=e,S(+e),s=0|M(1),M(0),((g=c>>>20|0)-(s>>>20&2047)|0)<17||(v=f,e=(f-=e=6077100506303966e-26*m)-(v=20222662487959506e-37*m-(v-f-e)),Q[t>>3]=e,S(+e),s=0|M(1),M(0),(g-(s>>>20&2047)|0)<50||(v=f,e=(f-=e=20222662487111665e-37*m)-(v=84784276603689e-45*m-(v-f-e)),Q[t>>3]=e)),Q[t+8>>3]=f-e-v;break A}if(c>>>0>=2146435072)e-=e,Q[t>>3]=e,Q[t+8>>3]=e,n=0;else{for(N(0,0|s),N(1,1048575&a|1096810496),e=+H(),n=0,s=1;g=(r+16|0)+(n<<3)|0,f=+(0|(n=sA(e)<2147483648?~~e:-2147483648)),Q[g>>3]=f,e=16777216*(e-f),n=1,g=s,s=0,g;);for(Q[r+32>>3]=e,n=2;n=(s=n)-1|0,Q[(r+16|0)+(s<<3)>>3]==0;);if(q=r+16|0,g=0,F=I=F-560|0,c=T(U=(0|(c=((n=(c>>>20|0)-1046|0)-3|0)/24|0))>0?c:0,-24)+n|0,((D=A[28105])+(b=(R=s+1|0)-1|0)|0)>=0)for(n=D+R|0,s=U-b|0;Q[(I+320|0)+(g<<3)>>3]=(0|s)<0?0:+A[112432+(s<<2)>>2],s=s+1|0,(0|n)!=(0|(g=g+1|0)););for(O=c-24|0,n=0,g=(0|D)>0?D:0,Y=(0|R)<=0;;){if(Y)e=0;else for(E=n+b|0,s=0,e=0;e=Q[(s<<3)+q>>3]*Q[(I+320|0)+(E-s<<3)>>3]+e,(0|R)!=(0|(s=s+1|0)););if(Q[(n<<3)+I>>3]=e,s=(0|n)==(0|g),n=n+1|0,s)break}iA=47-c|0,$=48-c|0,fA=c-25|0,n=D;e:{for(;;){if(e=Q[(n<<3)+I>>3],s=0,g=n,!(E=(0|n)<=0))for(;Y=(I+480|0)+(s<<2)|0,b=sA(f=5960464477539063e-23*e)<2147483648?~~f:-2147483648,b=sA(e=-16777216*(f=+(0|b))+e)<2147483648?~~e:-2147483648,A[Y>>2]=b,e=Q[((g=g-1|0)<<3)+I>>3]+f,(0|n)!=(0|(s=s+1|0)););e=Q2(e,O),e+=-8*vA(.125*e),e-=+(0|(Y=sA(e)<2147483648?~~e:-2147483648));r:{i:{s:{if(AA=(0|O)<=0){if(O)break s;b=A[476+((n<<2)+I|0)>>2]>>23}else L=g=(n<<2)+I|0,g=(b=A[g+476>>2])-((s=b>>$)<<$)|0,A[L+476>>2]=g,Y=s+Y|0,b=g>>iA;if((0|b)<=0)break r;break i}if(b=2,!(e>=.5)){b=0;break r}}if(s=0,g=0,!E)for(;tA=A[(L=(I+480|0)+(s<<2)|0)>>2],E=16777215,g||(E=16777216,tA)?(A[L>>2]=E-tA,g=1):g=0,(0|n)!=(0|(s=s+1|0)););i:if(!AA){s=8388607;s:switch(0|fA){case 1:s=4194303;break;case 0:break s;default:break i}A[(E=(n<<2)+I|0)+476>>2]=A[E+476>>2]&s}Y=Y+1|0,(0|b)==2&&(e=1-e,b=2,g&&(e-=Q2(1,O)))}if(e!=0)break;if(g=0,!((0|D)>=(0|(s=n)))){for(;g=A[(I+480|0)+((s=s-1|0)<<2)>>2]|g,(0|s)>(0|D););if(g){for(c=O;c=c-24|0,!A[(I+480|0)+((n=n-1|0)<<2)>>2];);break e}}for(s=1;g=s,s=s+1|0,!A[(I+480|0)+(D-g<<2)>>2];);for(g=n+g|0;;){if(b=n+R|0,n=n+1|0,Q[(I+320|0)+(b<<3)>>3]=A[112432+(U+n<<2)>>2],s=0,e=0,(0|R)>0)for(;e=Q[(s<<3)+q>>3]*Q[(I+320|0)+(b-s<<3)>>3]+e,(0|R)!=(0|(s=s+1|0)););if(Q[(n<<3)+I>>3]=e,!((0|n)<(0|g)))break}n=g}(e=Q2(e,24-c|0))>=16777216?(O=(I+480|0)+(n<<2)|0,s=sA(f=5960464477539063e-23*e)<2147483648?~~f:-2147483648,g=sA(e=-16777216*+(0|s)+e)<2147483648?~~e:-2147483648,A[O>>2]=g,n=n+1|0):(s=sA(e)<2147483648?~~e:-2147483648,c=O),A[(I+480|0)+(n<<2)>>2]=s}if(e=Q2(1,c),!((0|n)<0)){for(s=n;g=s,Q[(s<<3)+I>>3]=e*+A[(I+480|0)+(s<<2)>>2],s=s-1|0,e*=5960464477539063e-23,g;);if(E=0,!((0|n)<0))for(c=(0|D)>0?D:0,g=n;;){for(O=c>>>0<E>>>0?c:E,D=n-g|0,s=0,e=0;e=Q[115200+(s<<3)>>3]*Q[(s+g<<3)+I>>3]+e,R=(0|s)!=(0|O),s=s+1|0,R;);if(Q[(I+160|0)+(D<<3)>>3]=e,g=g-1|0,s=(0|n)!=(0|E),E=E+1|0,!s)break}}if(e=0,(0|n)>=0)for(s=n;g=s,s=s-1|0,e+=Q[(I+160|0)+(g<<3)>>3],g;);if(Q[r>>3]=b?-e:e,e=Q[I+160>>3]-e,s=1,(0|n)>0)for(;e+=Q[(I+160|0)+(s<<3)>>3],g=(0|s)!=(0|n),s=s+1|0,g;);Q[r+8>>3]=b?-e:e,F=I+560|0,n=7&Y,e=Q[r>>3],(0|a)<0?(Q[t>>3]=-e,Q[t+8>>3]=-Q[r+8>>3],n=0-n|0):(Q[t>>3]=e,Q[t+8>>3]=Q[r+8>>3])}}return F=r+48|0,n}function w8(){var e=0,t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0,o0=0,g0=0,d0=0,b0=0,B0=0,Q0=0,S0=0,K0=0,U0=0,_0=0,ze=0,Ye=0,Ne=0;A[55925]=0,e=A[56772],A[56772]=e+1,r=A[55961],E=A[55922],D=Hr(39.89822670059037*(t=+(0|e))),I=Hr(22.30530784048753*t),t=+(0|E)/50*(+(0|r)/100)*(Hr(14.765485471872028*t)+(D+I))*10,e=sA(t)<2147483648?~~t:-2147483648,A[56607]=e+A[56607];A:if(!(A[55923]<=0)){for(;;){for(r=DA(A[33209],0,1103515245,0),e=_,e=Yi(r=r+12345|0,e=r>>>0<12345?e+1|0:e),A[33209]=e,e=8191+((e>>>0)%16383|0)|0,A[55929]=e,GA=+(0|e),t=.75*Q[28387]+GA,Q[28387]=t,RA=(0|(e=A[55924]))>(0|($=A[55928]))?.5*t:t,g0=(s=.033*+A[56652])>0?1-s:1,r=A[56650]<<2,iA=(0|(tA=A[55921]))==1&&(0|r)>263?263:r,d0=111136+((VA=A[56651])<<1)|0,b0=111136+((fA=A[56658])<<1)|0,B0=(0|fA)>0,$A=A[55918],Q0=T($A,40),S0=A[55925],K0=Q[27967],o0=A[56607],t=Q[27979],O=Q[27969],f=Q[27970],bA=A[56780],U=A[56654],m=Q[27976],v=Q[27972],R=Q[28388],L=Q[28389],E=A[55927],a=Q[28383],b=A[55926],J=A[55956],U0=Q[27975],I=Q[28131],n=Q[28130],g=Q[28123],Y=Q[28121],c=Q[28122],AA=Q[28120],q=Q[28119],_0=Q[28129],ze=Q[28128],Ye=Q[28127],Ne=te(0*Q[27968]),pA=0;;){D=n;e:{r:switch(tA-1|0){case 0:R=0,n=Y*g,g=c,c=a=n+(q*(R=(0|e)<=2?Q[111312+(e<<3)>>3]:R)+AA*g);break e;case 1:if(a=0,(0|e)>=(0|E)){L=0;break e}n=Q[27965]-Q[27966],Q[27965]=n,a=.028*(L=n+L);break e;case 2:if(!b){J=100,a=0;break e}J=100,r=sA(n=+(0|e)/+(0|b)*100)<2147483648?~~n:-2147483648,a=+B[110928+((0|r)%100<<1)>>1],a=t*((+B[110928+((r+1|0)%100<<1)>>1]-a)*(n-+(0|r))+a);break e;case 3:break r;default:break e}b?(J=256,r=sA(n=+(0|e)/+(0|b)*256)<2147483648?~~n:-2147483648,a=+B[111344+((0|r)%256<<1)>>1],a=t*((+B[111344+((r+1|0)%256<<1)>>1]-a)*(n-+(0|r))+a)):(J=256,a=0)}if((0|e)>=(0|b)&&((0|o0)>0?(e=(0|Q0)/(0|o0)|0,m=0,v=0,v=fA>>>0<=87?.001*+B[b0>>1]:v,m=VA>>>0<=87?.001*+B[d0>>1]*.1:m,$=e>>B0,E=(0|(r=(b=(e-1|0)<=(0|iA))?e-2|0:iA))<=40?40:r,n=+B[111776+((E=b||(0|r)<40?E:iA)<<1)>>1],Q[27966]=n,Y=n,n=+(0|E),Q[27965]=Y*n*.333,U=(0|(r=e-E|0))>(0|U)?U:r,bA=0-(r=(0|bA)<0?0-U|0:U)|0,q=(n*=.00833)*n,q*=1-(AA=(Y=(n=we(K0*+((0|$A)/(0|E)|0)))*Ne)+Y)-(Y=n*-n),e=(0|(b=e+r|0))!=4):(A[55930]=0,A[55931]=0,A[55932]=0,A[55933]=0,$=4,m=0,v=0,b=4,e=0),f=(e|=!S0)?s:f,O=e?g0:O,e=0),e=e+1|0,n=a=_0*I+(Ye*a+ze*D),I=D,(0|(pA=pA+1|0))==4)break}if(A[55926]=b,A[55956]=J,A[55924]=e,Q[28383]=a,A[55927]=E,Q[28389]=L,Q[28388]=R,Q[27972]=v,Q[27976]=m,A[55928]=$,A[56654]=U,A[56780]=bA,Q[27970]=f,Q[27969]=O,Q[28122]=c,Q[28120]=AA,Q[28119]=q,Q[28123]=g,Q[28121]=Y,Q[28131]=I,Q[28130]=a,(0|tA)==5&&(a=6e3*((t=+(0|e)/+(0|b))+t+-1),Q[28383]=a),t=a*O+Q[28384]*f,Q[28383]=t,Q[28384]=t,(0|e)<(0|E)&&(t=m*GA+t,Q[28383]=t),f=RA*Q[27974],D=t*Q[27973]+f,I=0,A[55916]!=2&&(I=Q[27987],c=Q[27986],Q[27987]=c,t=f+t*v,Q[27986]=t,f=Q[28059],g=Q[28058],Q[28059]=g,t=f*Q[28057]+(Q[28055]*(I*Q[27985]+(Q[27983]*t+c*Q[27984]))+g*Q[28056]),Q[28058]=t,I=Q[28049],f=Q[28051],c=Q[28048],g=Q[28047],s=Q[28050],Q[28051]=s,t=I*f+(g*t+c*s),Q[28050]=t,I=Q[28043],f=Q[28041],c=Q[28040],g=Q[28039],s=Q[28042],Q[28043]=s,t=f*I+(g*t+c*s),Q[28042]=t,I=Q[28035],f=Q[28033],c=Q[28032],g=Q[28031],s=Q[28034],Q[28035]=s,t=f*I+(g*t+c*s),Q[28034]=t,I=Q[28027],f=Q[28025],c=Q[28024],g=Q[28023],s=Q[28026],Q[28027]=s,t=f*I+(g*t+c*s),Q[28026]=t,I=Q[28019],f=Q[28017],c=Q[28016],g=Q[28015],s=Q[28018],Q[28019]=s,t=f*I+(g*t+c*s),Q[28018]=t,I=Q[28011],f=Q[28009],c=Q[28008],g=Q[28007],s=Q[28010],Q[28011]=s,t=f*I+(g*t+c*s),Q[28010]=t,I=Q[28003],f=Q[28001],c=Q[28e3],g=Q[27999],s=Q[28002],Q[28003]=s,t=f*I+(g*t+c*s),Q[28002]=t,I=Q[27995],f=Q[27993],c=Q[27992],g=Q[27991],s=Q[27994],Q[27995]=s,I=f*I+(g*t+c*s),Q[27994]=I),t=Q[28385],Q[28385]=D,f=Q[28075],c=Q[28074],Q[28075]=c,g=Q[28067],s=Q[28066],Q[28067]=s,f=f*Q[28073]+(Q[28071]*D+c*Q[28072]),Q[28074]=f,c=g*Q[28065]+(Q[28063]*D+s*Q[28064]),Q[28066]=c,g=Q[28081],s=Q[28083],n=Q[28079],a=Q[28080],m=Q[28082],Q[28083]=m,D=g*s+(n*(t=U0*RA+D-t)+a*m),Q[28082]=D,g=Q[28091],s=Q[28089],n=Q[28087],a=Q[28088],m=Q[28090],Q[28091]=m,g=s*g+(n*t+a*m),Q[28090]=g,s=Q[28099],n=Q[28097],a=Q[28095],m=Q[28096],v=Q[28098],Q[28099]=v,s=n*s+(a*t+m*v),Q[28098]=s,n=Q[28107],a=Q[28105],m=Q[28103],v=Q[28104],O=Q[28106],Q[28107]=O,n=a*n+(m*t+v*O),Q[28106]=n,a=Q[28115],m=Q[28113],v=Q[28111],O=Q[28112],R=Q[28114],Q[28115]=R,a=m*a+(v*t+O*R),Q[28114]=a,m=Q[28139],v=Q[28137],O=Q[28136],R=Q[28135],L=Q[27971],Y=Q[28138],Q[28139]=Y,t=v*m+(R*(t*L-(a-(n-(s-(g-(D-(I+f+c)))))))+O*Y),Q[28138]=t,t=Q[27977]*(t*+A[50779]),a=+(0|(e=sA(t)<2147483648?~~t:-2147483648)),(0|(e=A[50776]))<A[50773]&&(b=e+1|0,r=A[50772],(E=A[50774])?(A[50776]=b,e=T(E,l[e+r|0])):(E=C[e+r|0],r=l[r+b|0],A[50776]=e+2,e=E|r<<8),a+=+((0|T(A[50775],(0|T(e,A[50780]))/1024|0))/40|0)),(0|(e=A[55962]))<=63&&(A[55962]=e+1,a=a*+(0|e)*.015625),(0|(e=A[55963]))<=0||(e=e-1|0,A[55963]=e,a=a*+(0|e)*.015625,e||(A[55962]=0)),r=(e=A[51293])+1|0,A[51293]=r,b=T(B[205184+(e<<1)>>1],A[50755])>>8,e=sA(a)<2147483648?~~a:-2147483648,(0|r)>=5500&&(A[51293]=0),r=A[51290],A[51290]=r+1,e=(0|(e=(0|(e=e+b|0))<=-32768?-32768:e))>=32767?32767:e,l[0|r]=e,r=A[51290],A[51290]=r+1,l[0|r]=e>>>8,b=(r=A[51292])+1|0,A[51292]=b,B[205184+(r<<1)>>1]=e,(0|b)>=5500&&(A[51292]=0),b=1,A[56606]=A[56606]+1,aA[54046]<A[51290]+2>>>0)break A;if(e=A[55925]+1|0,A[55925]=e,!((0|e)<A[55923]))break}b=0}return b}function B8(e,t,r,a,s,n,g){var f,c,I,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0;F=f=F-80|0,A[f+76>>2]=t,I=f+55|0,c=f+56|0;A:{e:{r:{i:{s:for(;;){if(E=t,(2147483647^R)<(0|b))break i;R=b+R|0;o:{f:{u:{if(m=C[0|(b=E)])for(;;){g:{n:if(t=255&m){if((0|t)!=37)break g;for(m=b;;){if(C[m+1|0]!=37){t=m;break n}if(b=b+1|0,D=C[m+2|0],m=t=m+2|0,(0|D)!=37)break}}else t=b;if((0|(b=b-E|0))>(0|(tA=2147483647^R)))break i;if(e&&M0(e,E,b),b)continue s;A[f+76>>2]=t,b=t+1|0,L=-1,C[t+2|0]!=36|l[t+1|0]-48>>>0>=10||(L=l[t+1|0]-48|0,q=1,b=t+3|0),A[f+76>>2]=b,Y=0;n:if((t=(m=l[0|b])-32|0)>>>0>31)O=b;else if(O=b,75913&(t=1<<t))for(;;){if(O=b+1|0,A[f+76>>2]=O,Y|=t,(t=(m=l[b+1|0])-32|0)>>>0>=32)break n;if(b=O,!(75913&(t=1<<t)))break}n:if((0|m)!=42){if((0|(U=pl(f+76|0)))<0)break i;m=A[f+76>>2]}else{if(C[O+2|0]!=36|l[O+1|0]-48>>>0>=10){if(q)break u;if(m=O+1|0,!e){A[f+76>>2]=m,q=0,U=0;break n}t=A[r>>2],A[r>>2]=t+4,q=0,t=A[t>>2]}else A[((l[O+1|0]<<2)+s|0)-192>>2]=10,m=O+3|0,q=1,t=A[((l[O+1|0]<<3)+a|0)-384>>2];if(A[f+76>>2]=m,U=t,(0|t)>=0)break n;U=0-U|0,Y|=8192}if(b=0,v=-1,C[0|m]==46)if(C[m+1|0]!=42)A[f+76>>2]=m+1,v=pl(f+76|0),t=A[f+76>>2],AA=1;else{if(C[m+3|0]!=36|l[m+2|0]-48>>>0>=10){if(q)break u;t=m+2|0,v=0,e&&(m=A[r>>2],A[r>>2]=m+4,v=A[m>>2])}else A[((l[m+2|0]<<2)+s|0)-192>>2]=10,t=m+4|0,v=A[((l[m+2|0]<<3)+a|0)-384>>2];A[f+76>>2]=t,AA=~v>>>31|0}else t=m,AA=0;for(;;){if(J=b,O=28,D=t,(b=l[0|t])-123>>>0<4294967238)break r;if(t=D+1|0,!((b=C[123983+(b+T(J,58)|0)|0])-1>>>0<8))break}A[f+76>>2]=t;n:{d:{if((0|b)!=27){if(!b)break r;if((0|L)>=0){A[(L<<2)+s>>2]=b,b=A[(m=(L<<3)+a|0)+4>>2],A[f+64>>2]=A[m>>2],A[f+68>>2]=b;break d}if(!e)break o;L8(f- -64|0,b,r,g);break n}if((0|L)>=0)break r}if(b=0,!e)continue s}m=-65537&Y,Y=8192&Y?m:Y,L=0,$=84065,O=c;n:{d:{p:{I:{h:{b:{v:{m:{G:{S:{F:{U:{Q:{E:{Y:{N:switch(b=l[0|D],(b=J&&(15&b)==3?-33&b:b)-88|0){case 11:break n;case 9:case 13:case 14:case 15:break d;case 27:break v;case 12:case 17:break S;case 23:break F;case 0:case 32:break U;case 24:break Q;case 22:break E;case 29:break Y;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break f;default:break N}N:switch(b-65|0){case 0:case 4:case 5:case 6:break d;case 2:break h;case 1:case 3:break f;default:break N}if((0|b)==83)break b;break f}m=A[f+64>>2],D=A[f+68>>2],$=84065;break G}b=0;E:switch(255&J){case 0:case 1:case 6:A[A[f+64>>2]>>2]=R;continue s;case 2:E=A[f+64>>2],A[E>>2]=R,A[E+4>>2]=R>>31;continue s;case 3:B[A[f+64>>2]>>1]=R;continue s;case 4:l[A[f+64>>2]]=R;continue s;case 7:break E;default:continue s}E=A[f+64>>2],A[E>>2]=R,A[E+4>>2]=R>>31;continue s}v=v>>>0<=8?8:v,Y|=8,b=120}if(E=c,iA=32&b,(m=A[f+64>>2])|(D=A[f+68>>2]))for(;l[0|(E=E-1|0)]=iA|C[124512+(15&m)|0],fA=!D&m>>>0>15|!!(0|D),J=D,D=D>>>4|0,m=(15&J)<<28|m>>>4,fA;);if(!(A[f+64>>2]|A[f+68>>2])|!(8&Y))break m;$=84065+(b>>>4|0)|0,L=2;break m}if(b=c,D=E=A[f+68>>2],E|(m=A[f+64>>2]))for(;l[0|(b=b-1|0)]=7&m|48,J=!D&m>>>0>7|!!(0|D),D=(E=D)>>>3|0,m=(7&E)<<29|m>>>3,J;);if(E=b,!(8&Y))break m;v=(0|(b=c-E|0))<(0|v)?v:b+1|0;break m}m=A[f+64>>2],D=b=A[f+68>>2],(0|b)<0?(D=E=0-(D+!!(0|m)|0)|0,m=0-m|0,A[f+64>>2]=m,A[f+68>>2]=E,L=1,$=84065):2048&Y?(L=1,$=84066):$=(L=1&Y)?84067:84065}E=_2(m,D,c)}if((0|v)<0&&AA)break i;if(Y=AA?-65537&Y:Y,!(v|!!((b=A[f+64>>2])|(m=A[f+68>>2])))){E=c,v=0;break f}v=(0|(b=!(b|m)+(c-E|0)|0))<(0|v)?v:b;break f}if(O=(b=(b=j2(E=(b=A[f+64>>2])||84639,0,D=v>>>0>=2147483647?2147483647:v))?b-E|0:D)+E|0,(0|v)>=0){Y=m,v=b;break f}if(Y=m,v=b,C[0|O])break i;break f}if(v){m=A[f+64>>2];break I}b=0,O0(e,32,U,0,Y);break p}A[f+12>>2]=0,A[f+8>>2]=A[f+64>>2],m=f+8|0,A[f+64>>2]=m,v=-1}b=0;I:{for(;;){if(!(E=A[m>>2]))break I;if(!((E=(0|(D=Al(f+4|0,E)))<0)|D>>>0>v-b>>>0)){if(m=m+4|0,v>>>0>(b=b+D|0)>>>0)continue;break I}break}if(E)break e}if(O=61,(0|b)<0)break r;if(O0(e,32,U,b,Y),b)for(O=0,m=A[f+64>>2];;){if(!(E=A[m>>2])||(O=(E=Al(f+4|0,E))+O|0)>>>0>b>>>0)break p;if(M0(e,f+4|0,E),m=m+4|0,!(b>>>0>O>>>0))break}else b=0}O0(e,32,U,b,8192^Y),b=(0|b)<(0|U)?U:b;continue s}if((0|v)<0&&AA)break i;if(O=61,(0|(b=0|xA[0|n](e,Q[f+64>>3],U,v,Y,b)))>=0)continue s;break r}l[f+55|0]=A[f+64>>2],v=1,E=I,Y=m;break f}m=C[b+1|0],b=b+1|0}if(e)break A;if(!q)break o;for(b=1;;){if(e=A[(b<<2)+s>>2]){if(L8((b<<3)+a|0,e,r,g),R=1,(0|(b=b+1|0))!=10)continue;break A}break}if(R=1,b>>>0>=10)break A;for(;;){if(A[(b<<2)+s>>2])break u;if((0|(b=b+1|0))==10)break}break A}O=28;break r}if((0|(m=(0|v)>(0|(D=O-E|0))?v:D))>(2147483647^L))break i;if(O=61,(0|tA)<(0|(b=(0|(v=m+L|0))<(0|U)?U:v)))break r;O0(e,32,b,v,Y),M0(e,$,L),O0(e,48,b,v,65536^Y),O0(e,48,m,D,0),M0(e,E,D),O0(e,32,b,v,8192^Y);continue}break}R=0;break A}O=61}A[56798]=O}R=-1}return F=f+80|0,R}function _A(e,t,r,a,s,n,g,f,c){var I,b,m,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0,RA=0,VA=0,$A=0,o0=0,g0=0,d0=0,b0=0,B0=0,Q0=0,S0=0,K0=0,U0=0,_0=0;F=I=F-96|0,$=65535&c,O=-2147483648&(s^c),bA=L=65535&s;A:{if(!((b=c>>>16&32767)-32767>>>0>4294934529&(m=s>>>16&32767)-32767>>>0>=4294934530)){if(E=a,!(!a&(0|(U=J=2147483647&s))==2147418112?!(t|r):U>>>0<2147418112)){D=a,O=32768|s;break A}if(!(!(s=f)&(0|(R=J=2147483647&c))==2147418112?!(n|g):R>>>0<2147418112)){D=f,O=32768|c,t=n,r=g;break A}if(!(t|E|2147418112^U|r)){if(!(s|n|g|R)){O=2147450880,t=0,r=0;break A}O|=2147418112,t=0,r=0;break A}if(!(s|n|2147418112^R|g)){if(s=t|E,a=r|U,t=0,r=0,!(a|s)){O=2147450880;break A}O|=2147418112;break A}if(!(t|E|r|U)){t=0,r=0;break A}if(!(s|n|g|R)){t=0,r=0;break A}(0|U)==65535|U>>>0<65535&&(J=(E=!(a|L))<<6,s=oA(c=E?t:a)+32|0,T0(I+80|0,t,r,a,L,(c=J+((0|(c=oA(E?r:L)))==32?s:c)|0)-15|0),q=16-c|0,a=A[I+88>>2],bA=A[I+92>>2],r=A[I+84>>2],t=A[I+80>>2]),R>>>0>65535||(L=(c=!(f|$))<<6,E=oA(s=c?n:f)+32|0,T0(I- -64|0,n,g,f,$,(s=L+((0|(s=oA(c?g:$)))==32?E:s)|0)-15|0),q=16+(q-s|0)|0,f=A[I+72>>2],$=A[I+76>>2],n=A[I+64>>2],g=A[I+68>>2])}if(s=n,n=g<<15|n>>>17,B0=r,J=DA(AA=-32768&(c=s<<15),s=0,r,0),fA=s=_,Q0=n,U=t,t=DA(n,0,t,0),n=_+s|0,r=t>>>0>(c=t+J|0)>>>0?n+1|0:n,E=0,t=DA(U,v,AA,v),s=(n=c)+_|0,L=s=t>>>0>(R=E+t|0)>>>0?s+1|0:s,S0=(0|n)==(0|s)&E>>>0>R>>>0|s>>>0<n>>>0,K0=a,tA=DA(AA,v,a,0),U0=_,t=DA(B0,v,Q0,v),E=_+U0|0,E=t>>>0>(iA=t+tA|0)>>>0?E+1|0:E,t=$<<15|f>>>17,a=DA(pA=f<<15|g>>>17,0,U,v),n=_+E|0,RA=n=a>>>0>(GA=a+iA|0)>>>0?n+1|0:n,n=(a=(0|r)==(0|fA)&c>>>0<J>>>0|r>>>0<fA>>>0)+n|0,$=n=r>>>0>(VA=r+GA|0)>>>0?n+1|0:n,g=VA,r=n,bA=DA(AA,v,$A=65536|bA,Y),_0=_,a=DA(K0,D,Q0,v),s=_+_0|0,c=s=a>>>0>(o0=a+bA|0)>>>0?s+1|0:s,t=DA(g0=-2147483648|t,0,U,v),n=_+s|0,n=t>>>0>(d0=t+o0|0)>>>0?n+1|0:n,t=DA(pA,D,B0,v),b0=n,n=n+_|0,J=t>>>0>(fA=t+d0|0)>>>0?n+1|0:n,s=r+fA|0,n=AA=(t=0)>>>0>(U=t+g|0)>>>0?s+1|0:s,r=(t=U+S0|0)>>>0<U>>>0?n+1|0:n,q=((m+b|0)+q|0)-16383|0,a=DA(g0,D,B0,v),f=_,s=DA($A,D,Q0,v),n=_+f|0,Y=(0|f)==(0|(n=s>>>0>(g=s+a|0)>>>0?n+1|0:n))&a>>>0>g>>>0|n>>>0<f>>>0,f=n,s=DA(pA,D,K0,D),n=_+n|0,s=n=(a=s+g|0)>>>0<s>>>0?n+1|0:n,g=(0|n)==(0|f)&a>>>0<g>>>0|n>>>0<f>>>0,n=0,n=(f=g)>>>0>(g=g+Y|0)>>>0?1:n,f=g,g=DA(g0,D,$A,D),n=_+n|0,S0=f=f+g|0,g=g>>>0>f>>>0?n+1|0:n,f=a,v=s,s=(0|E)==(0|U0)&tA>>>0>iA>>>0|E>>>0<U0>>>0,n=0,s=((Y=E=(0|E)==(0|RA)&iA>>>0>GA>>>0|E>>>0>RA>>>0)>>>0>(E=s+E|0)>>>0?1:n)+v|0,n=g,Y=s=(a=a+E|0)>>>0<E>>>0?s+1|0:s,tA=a,s=a=(0|s)==(0|v)&a>>>0<f>>>0|s>>>0<v>>>0,E=a=a+S0|0,g=n=s>>>0>a>>>0?n+1|0:n,s=DA(pA,D,$A,D),v=_,a=DA(g0,D,K0,D),n=_+v|0,a=n=a>>>0>(f=a+s|0)>>>0?n+1|0:n,s=(n=(0|v)==(0|n)&s>>>0>f>>>0|n>>>0<v>>>0)+g|0,g=s=a>>>0>(iA=a+E|0)>>>0?s+1|0:s,n=f+Y|0,s=n=(a=(s=0)+tA|0)>>>0<s>>>0?n+1|0:n,f=(0|Y)==(0|n)&a>>>0<tA>>>0|n>>>0<Y>>>0,n=g,n=(g=f+(v=iA)|0)>>>0<f>>>0?n+1|0:n,tA=g,f=a,E=s,s=(a=(a=(a=(0|c)==(0|_0)&bA>>>0>o0>>>0|c>>>0<_0>>>0)+(c=(0|c)==(0|b0)&o0>>>0>d0>>>0|c>>>0>b0>>>0)|0)+(s=(0|J)==(0|b0)&fA>>>0<d0>>>0|J>>>0<b0>>>0)|0)+E|0,n=g=n,E=g=(f=(0|(s=(a=c=(Y=J)+f|0)>>>0<Y>>>0?s+1|0:s))==(0|E)&f>>>0>a>>>0|s>>>0<E>>>0)+tA|0,g=n=f>>>0>g>>>0?n+1|0:n,f=a,n=0,c=s,s=s+((v=Y=(0|$)==(0|AA)&U>>>0<VA>>>0|$>>>0>AA>>>0)>>>0>(Y=Y+((0|$)==(0|RA)&GA>>>0>VA>>>0|$>>>0<RA>>>0)|0)>>>0?1:n)|0,n=g,c=n=(g=f=(0|(s=(a=a+Y|0)>>>0<Y>>>0?s+1|0:s))==(0|c)&a>>>0<f>>>0|s>>>0<c>>>0)>>>0>(f=f+E|0)>>>0?n+1|0:n,65536&n?q=q+1|0:(E=L>>>31|0,n=c<<1|f>>>31,f=f<<1|s>>>31,c=n,n=s<<1|a>>>31,a=a<<1|r>>>31,s=n,n=L<<1|R>>>31,R<<=1,L=n,n=r<<1|t>>>31,t=t<<1|E,r=n|(g=0)),(0|q)>=32767)O|=2147418112,t=0,r=0;else{e:{if((0|q)<=0){if((g=1-q|0)>>>0<=127){T0(I+48|0,R,L,t,r,n=q+127|0),T0(I+32|0,a,s,f,c,n),v2(I+16|0,R,L,t,r,g),v2(I,a,s,f,c,g),R=A[I+32>>2]|A[I+16>>2]|!!(A[I+48>>2]|A[I+56>>2]|A[I+52>>2]|A[I+60>>2]),L=A[I+36>>2]|A[I+20>>2],t=A[I+40>>2]|A[I+24>>2],r=A[I+44>>2]|A[I+28>>2],a=A[I>>2],s=A[I+4>>2],g=A[I+8>>2],n=A[I+12>>2];break e}t=0,r=0;break A}g=f,n=65535&c|q<<16}D|=g,O|=n,(!t&(0|r)==-2147483648?!(R|L):(0|r)>0|(0|r)>=0)?t|R|-2147483648^r|L?(t=a,r=s):(E=O,O=(a=(0|(n=s))==(0|(r=(r=t=1&a)>>>0>(t=t+a|0)>>>0?n+1|0:n))&t>>>0<a>>>0|r>>>0<n>>>0)>>>0>(D=a+D|0)>>>0?E+1|0:E):(a=(0|s)==(0|(r=(t=a+1|0)?s:s+1|0))&t>>>0<a>>>0|r>>>0<s>>>0,s=O,O=(D=a+D|0)>>>0<a>>>0?s+1|0:s)}}A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=D,A[e+12>>2]=O,F=I+96|0}function oe(e,t,r,a,s,n,g){var f,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0;F=f=F-480|0,A[f+476>>2]=0,A[f+456>>2]=0,A[f+460>>2]=0,A[f+448>>2]=0,A[f+452>>2]=0,A[f+440>>2]=0,A[f+444>>2]=0,A[f+432>>2]=0,A[f+436>>2]=0,c=0;A:if(A[e+684>>2]){for(D=g?A[g>>2]:D;b=C[t+c|0],l[(f+112|0)+c|0]=b,I=c+1|0,b&&(b=c>>>0<158,c=I,b););if(l[I+(f+112|0)|0]=0,!((R=268435456&n)|!(8&A[47197]))){I=0;e:if(223&(b=C[0|t]))for(c=0;;){if(l[(f+272|0)+c|0]=b,!(223&(b=C[(I=c+1|0)+t|0])))break e;if(m=c>>>0<118,c=I,!m)break}l[(c=f+272|0)+I|0]=0,A[f+48>>2]=c,n0(A[47195],(0|n)>=0?87019:86877,f+48|0)}A[f+464>>2]=t,A[e+8208>>2]=0,A[e+8212>>2]=0,s&&(l[0|s]=0);e:{r:if(223&(c=C[0|t]))for(L=536870912&n,U=4096&n,J=f+105|0,I=t,b=0;;){m=NA(f+476|0,I),O=!!(0|r0(A[f+476>>2]))+O|0,v=C[(c=(E=255&c)+e|0)+7668|0];i:if(!((Y=A[f+476>>2])-48>>>0<10|Y-2406>>>0<10)|(O?C[e+170|0]:0)){s:if((b=A[f+476>>2]-A[e+600>>2]|0)>>>0>127||!(b=A[6192+((b<<2)+e|0)>>2])){if(v){for(Y=5168+((E<<2)+e|0)|0,v=v+(c=C[c+7924|0])|0,q=E|C[I+1|0]<<8,b=0;A[(I=(c<<2)+e|0)+7184>>2]==(0|q)&&(A[f+472>>2]=A[f+464>>2],Gt(e,f+472|0,t,2,A[I+6704>>2],f+432|0,n,D),(0|(I=A[f+432>>2]))>0&&(I=I+35|0,A[f+432>>2]=I),b=1,Gt(e,f+464|0,t,1,A[Y>>2],f+448|0,n,D),A[f+448>>2]>(0|I)||(I=A[f+444>>2],A[f+456>>2]=A[f+440>>2],A[f+460>>2]=I,I=A[f+436>>2],A[f+448>>2]=A[f+432>>2],A[f+452>>2]=I,A[f+464>>2]=A[f+472>>2])),v>>>0>(c=c+1|0)>>>0;);if(b)break s}o:{f:{if(!(c=A[5168+((E<<2)+e|0)>>2])){if(Gt(e,f+464|0,t,0,A[e+5168>>2],f+448|0,n,D),A[f+448>>2])break o;if(16&C[188808])break f;if(b=NA(f+468|0,E=(I=A[f+464>>2])-1|0),c=A[f+468>>2],!(A[e+600>>2]<=0|(0|c)>577)){if(Zr(c)){A[f+32>>2]=21,nA(r,87049,f+32|0);break e}c=A[f+468>>2]}if((0|c)==57384&&((0|(v=A[e+92>>2]))<=A[47352]||(A[47352]=v)),tt(c)&&((0|(c=A[e+72>>2]))<=A[47352]||(A[47352]=c)),!((v=(c=A[f+468>>2])-192|0)>>>0>413)&&(v=C[v+94240|0])&&(b=b-1|0,!(C[I-2|0]==32&C[b+I|0]==32))){for(A[f+472>>2]=E,l[0|E]=v;m=C[(c=I)+b|0],l[0|c]=m,I=c+1|0,(0|m)!=32;);if((0|b)>0&&QA(c,32,b),A[e+24>>2]&&!((0|Gi(94222,A[f+468>>2]))<=0)){A[f+464>>2]=E,b=0;break i}b=0,l[0|r]=0,A[f+464>>2]=t,A[e+8208>>2]=0,A[e+8212>>2]=0;break i}if(!(c=Qt(c))||(0|(I=A[c+4>>2]))==A[e+600>>2])break f;if((0|I)==A[e+188>>2]){A[f+4>>2]=Bi(f- -64|0,A[e+192>>2]),A[f>>2]=21,nA(r,87218,f);break e}if(!(4&C[c+16|0]))break f;A[f+20>>2]=Bi(f- -64|0,A[c+12>>2]),A[f+16>>2]=21,nA(r,87218,f+16|0);break e}if(Gt(e,f+464|0,t,1,c,f+448|0,n,D),A[f+448>>2])break o}f:if(!((c=A[f+476>>2])-768>>>0<112)){if(r0(c)){if(l[(m+A[f+464>>2]|0)-1|0]<33&(0|O)<=1)break f;if(l[0|r]=0,!g)break r;A[g>>2]=4096|A[g>>2];break r}E2(e,A[f+476>>2],-1,f+272|0,0),C[f+272|0]&&(A[f+448>>2]=1,A[f+452>>2]=f+272)}A[f+464>>2]=(m+A[f+464>>2]|0)-1;break s}A[e+288>>2]=0}else Gt(e,f+464|0,t,m,b,f+448|0,n,D);if(I=(c=A[f+452>>2])||86135,A[f+452>>2]=I,b=0,!(A[f+448>>2]<=0)){if(c=1|A[f+456>>2],(0|n)<0)break A;if(!(C[0|I]!=21|U)){cA(r,I);break e}if(!(!(8&A[47197])|R))s:if(c=A[47195],(0|(m=A[c+76>>2]))>=0&(!m|A[56823]!=(-1073741825&m)))E=A[(m=c+76|0)>>2],A[m>>2]=E||1073741823,A[c+80>>2]==10||(0|(E=A[c+20>>2]))==A[c+16>>2]?Cl(c):(A[c+20>>2]=E+1,l[0|E]=10),A[m>>2]=0;else{if(A[c+80>>2]!=10&&(0|(m=A[c+20>>2]))!=A[c+16>>2]){A[c+20>>2]=m+1,l[0|m]=10;break s}Cl(c)}if(m=-32769&(c=A[f+456>>2]),A[f+456>>2]=m,!(!s|!m|(1024&c?L:0))){e=A[f+464>>2],cA(s,I),c=m|($=(r=e)-MA(t,e=f+112|0,lA(e))|0,(1151&c)==1024?$:0);break A}(c=A[f+460>>2])&&(l[0|c]=69),fi(e,r,a,I)}}else l[f+104|0]=95,MA(J,I,m),c=1,l[105+(f+m|0)|0]=0,dA(e,f+104|0,f- -64|0),b-1>>>0<=4294967293&&(c=lA(c=f- -64|0)+c|0,l[0|c]=11,l[c+1|0]=0,c=0),fi(e,r,a,f- -64|0),A[f+464>>2]=I+m,b=c;if(I=A[f+464>>2],!(223&(c=C[0|I])))break}MA(t,e=f+112|0,lA(e))}c=0}return F=f+480|0,c}function E8(e,t){var r,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0;F=r=F-2976|0,A[t>>2]=1,a=A[e+20>>2],A[(f=r+2960|0)>>2]=A[e+16>>2],A[f+4>>2]=a,a=A[e+12>>2],A[(f=r+2952|0)>>2]=A[e+8>>2],A[f+4>>2]=a,a=A[e+4>>2],A[r+2944>>2]=A[e>>2],A[r+2948>>2]=a,A[50303]||yr();A:if(e=A[r+2948>>2],C[0|e]&&e||((e=A[r+2944>>2])||(e=(e=A[r+2952>>2])||85055,A[r+2944>>2]=e),A0(a=r+80|0,e,60),Or(a,0),!(n=Mr(201216,a))||(A[r+2948>>2]=A[n+4>>2]+1,C[r+2958|0]|C[r+2956|0]|C[r+2957|0]))){O=r+1536|0,F=D=F-336|0;e:if(!(!(e=A[(Y=r+2944|0)+4>>2])|!C[0|e])){if((0|(R=lA(e)))>=0){for(a=R>>>0>=79?79:R,b=1;e=We(l[A[Y+4>>2]+s|0]),l[(D+256|0)+s|0]=e,b=((255&e)==45)+b|0,e=(0|a)!=(0|s),s=s+1|0,e;);if((0|b)!=1)break e}b=1}if((0|(m=A[50303]))<=0)A[O>>2]=0,e=0;else{for(f=(0|b)>=0;;){I=A[201216+(J<<2)>>2];e:if(F0(A[I+8>>2],88032,3)){if((e=A[Y+4>>2])&&F0(e,91687,3)){if(f){e=100;r:if(b){if(a=0,s=A[I+4>>2],!(L=C[0|s])){if(!F0(D+256|0,90013,9))break r;break e}for(;;){for(q=1,c=s+1|0,U=1,$=0,s=0;(0|s)<(0|R)&&(0|(e=l[(D+256|0)+s|0]))!=45||(e=0),$=((E=(0|(v=C[s+c|0]))==45)&!!(0|(U=(E?0:v)<<24>>24==(0|e)?U:0)))+$|0,s=s+1|0,q=E+q|0,v;);if(s=s+c|0,(E=U+$|0)&&(a=(0|(e=T((c=(0|(e=b-E|0))<=0?5:5-e|0)-((0|(e=q-E|0))>0?e:0)|0,100)-(L<<24>>24<<1)|0))>(0|a)?e:a),!(L=C[0|s]))break}if(!(e=a))break e}(a=A[Y>>2])&&(e=c0(a,A[I>>2])?c0(a,A[I+8>>2])?e:e+400|0:e+500|0),((s=C[Y+12|0])-1&255)>>>0>1||((a=C[I+12|0])-1&255)>>>0>1||(e=(0|a)!=(0|s)?e-50|0:e+50|0),s=C[Y+13|0],e=C[I+12|0]!=2|s>>>0>12?e:C[I+13|0]>12?e+5|0:e,(a=C[I+13|0])&&((a=((s?T(s,100):3e3)>>>0)/(a>>>0)|0)>>>0<=99&&(a=1e4/(a>>>0)|0),e=(c=e)+((e=5-(((a-100&65535)>>>0)/10|0)|0)>>31&e)|0,e=s?e+10|0:e),e=(0|e)<=1?1:e}else{if(F0(A[I+8>>2],D+256|0,R))break e;e=100}A[O+(g<<2)>>2]=I,A[I+16>>2]=e}else A[O+(g<<2)>>2]=I;g=g+1|0}if((0|m)==(0|(J=J+1|0)))break}A[O+(g<<2)>>2]=0,e=0,g&&(H8(O,g,8),e=g)}if(F=D+336|0,b=e,e||(A[t>>2]=0,e=Mr(201216,85055),A[r+1536>>2]=e,b=!!(0|e)),t=C[r+2957|0],f=2,(0|(e=C[r+2956|0]))!=2&&(f=2,(t-1&255)>>>0<12||(tA=(0|e)!=1,f=(0|e)==1)),m=(g=A[132136+(f<<2)>>2])+(v=t>>>0<60)|0,e=0,(0|b)>0)for(a=0;;){n=A[(r+1536|0)+(AA<<2)>>2];e:{r:{i:{if(tA){if(v||(t=0,a))break r}else{if(t=C[n+12|0],a|v)break i;t=(0|t)!=(0|f)}if(s=0,t|C[n+13|0]<60)break e;break r}if((0|t)!=(0|f)){s=a;break e}}A[(r+80|0)+(a<<2)>>2]=n,s=a+1|0}e:if(C[n+15|0]){if(E=0,t=e,a=s,!((0|e)>11))for(;;){if((s=C[0|m])||(m=g,s=C[0|g]),e=A[n+12>>2],c=T(t,24)+202624|0,A[c+8>>2]=A[n+8>>2],A[c+12>>2]=e,e=A[n+4>>2],A[c>>2]=A[n>>2],A[c+4>>2]=e,e=A[n+20>>2],A[c+16>>2]=A[n+16>>2],A[c+20>>2]=e,l[c+14|0]=s,A[(r+80|0)+(a<<2)>>2]=c,m=m+1|0,a=a+1|0,e=t+1|0,(E=E+1|0)>>>0>=C[n+15|0])break e;if(s=(0|t)<11,t=e,!s)break}}else a=s;if((0|(AA=AA+1|0))==(0|b))break}else{if(!n)break A;a=0}e:if(!(!(s=C[0|m])|(0|e)>=12))for(;;){if(t=A[n+12>>2],g=T(e,24)+202624|0,A[g+8>>2]=A[n+8>>2],A[g+12>>2]=t,t=A[n+4>>2],A[g>>2]=A[n>>2],A[g+4>>2]=t,t=A[n+20>>2],A[g+16>>2]=A[n+16>>2],A[g+20>>2]=t,l[g+14|0]=s,A[(r+80|0)+(a<<2)>>2]=g,a=a+1|0,!(s=C[0|(m=m+1|0)]))break e;if(t=(0|e)<11,e=e+1|0,!t)break}a?(e=A[(r+80|0)+(C[r+2958|0]%(0|a)<<2)>>2],(t=C[e+14|0])?(l[202976]=0,A[r+48>>2]=47,nA(r+2971|0,91351,r+48|0),l[r+2971|0]=0,t>>>0<=9?(A[r+20>>2]=t,A[r+16>>2]=r+2971,nA(202976,91378,r+16|0)):(A[r+36>>2]=t-10,A[r+32>>2]=r+2971,nA(202976,91503,r+32|0)),e=A[e+8>>2],A[r+4>>2]=202976,A[r>>2]=e,e=202912,nA(202912,87760,r)):e=A[e+8>>2]):e=0}else{if(e=A[n+8>>2],!C[202976])break A;A[r+64>>2]=e,A[r+68>>2]=202976,e=202912,nA(202912,87760,r- -64|0)}return F=r+2976|0,e}function kr(e,t,r,a,s){var n,g,f=0,c=0,I=0,b=0,m=0,E=0,v=0;F=n=F-464|0,l[n+432|0]=0,l[n+368|0]=0,l[n+304|0]=0,l[n+292|0]=0,m=(0|t)/10|0,f=A[33273];A:{if(!(g=2&a)|A[33272]!=2){v=32&a?113:111,b=1&a,E=t-T(m,10)|0;e:{r:{i:{s:{o:{f:{u:{g:if(C[0|f])f=0;else{n:{if(8&a){if(A[n+288>>2]=t,nA(c=n+452|0,91198,n+288|0),f=dA(e,c,n+304|0)){c=0;break g}A[n+272>>2]=t,nA(c=n+452|0,91314,n+272|0),f=dA(e,c,n+304|0),c=0}else{if(!b)break n;if(I=cA(n+432|0,133104),4&a){if(A[n+260>>2]=v,A[n+256>>2]=t,nA(c=n+452|0,91324,n+256|0),f=dA(e,c,n+304|0),C[133116]&&f)break u;if(c=f,f)break g}A[n+244>>2]=v,A[n+240>>2]=t,nA(c=n+452|0,91384,n+240|0),c=f=dA(e,c,n+304|0)}if(f)break g}n:{if(g){if(!(1&l[133096]))break n;A[n+208>>2]=t,nA(f=n+452|0,91498,n+208|0),f=dA(e,f,n+304|0)}else I=A[e+108>>2],A[n+224>>2]=t,nA(f=n+452|0,(0|r)>=2?91700:(262144&I)>>>18|0?91534:91700,n+224|0),f=dA(e,f,n+304|0);if(f)break g}!b|!(32&C[e+109|0])?(A[n+192>>2]=t,nA(f=n+452|0,91766,n+192|0),f=dA(e,f,n+304|0)):f=0}if(!(16&a)|(0|t)>9)break o;f=c;break f}if(cA(I,133116),!(16&a)|(0|t)>9)break s}dA(e,88875,n+368|0);break r}if(!f)break i;f=c}l[n+368|0]=0;break r}i:if(b&&(A[n+180>>2]=v,A[n+176>>2]=m,nA(f=n+452|0,91846,n+176|0),dA(e,f,n+368|0))){if(c=1,!E|!(16&C[e+109|0]))break i;P0(n+368|0,133104)}else c||(A[n+160>>2]=m,nA(c=n+452|0,512&a?91936:92016,n+160|0),dA(e,c,n+368|0),c=0);if(f=E,C[n+368|0]||(f=E,16&C[e+106|0]&&(A[n+144>>2]=254&m,nA(f=n+452|0,92016,n+144|0),dA(e,f,n+368|0),f=(0|t)%20|0)),l[n+304|0]=0,m=f,(0|f)<=0)f=c;else{if(g&&(f=A[33273],C[0|f])){cA(n+304|0,f),l[n+432|0]=0,I=b;break e}if(I=0,8&a&&(A[n+128>>2]=m,nA(a=n+452|0,91314,n+128|0),I=dA(e,a,n+304|0)),!b|16&C[e+104|0]||(A[n+116>>2]=v,A[n+112>>2]=m,nA(a=n+452|0,91384,n+112|0),c=(I=dA(e,a,n+304|0))?1:c),f=c,!I){i:{if(!g|!(1&A[33274])){if(!(16&C[e+104|0])&&g)break i;c=A[e+108>>2],A[n+96>>2]=m,nA(a=n+452|0,(0|r)>=2?91700:(262144&c)>>>18|0?91534:91700,n+96|0),r=dA(e,a,n+304|0)}else A[n+80>>2]=m,nA(r=n+452|0,91498,n+80|0),r=dA(e,r,n+304|0);if(r)break r}A[n+64>>2]=m,nA(r=n+452|0,91766,n- -64|0),dA(e,r,n+304|0)}}}I=b,C[n+432|0]|f|!b||((0|t)<20|(16&C[e+104|0]?0:E)||(dA(e,92162,n+432|0),I=1,!C[n+432|0]))&&(dA(e,92205,n+432|0),I=1)}if(!(!(r=l[n+304|0])|!(48&(t=A[e+104>>2]))|!C[n+368|0])){if(dA(e,90824,n+292|0),!I|!(8&C[e+109|0])||(l[n+292|0]=0),16&C[e+104|0]){A[n+28>>2]=n+432,A[n+24>>2]=n+368,A[n+20>>2]=n+292,A[n+16>>2]=n+304,nA(s,91059,n+16|0),a=1;break A}A[n+12>>2]=n+432,A[n+8>>2]=n+304,A[n+4>>2]=n+292,A[n>>2]=n+368,nA(s,91059,n),a=1;break A}512&t&&(!r|(0|(t=lA(n+368|0)-1|0))<0||(f=C[A[144464+(l[0|(t=t+(n+368|0)|0)]<<2)>>2]+11|0]!=2,(0|(a=C[A[144464+(r<<2)>>2]+11|0]))==1&&(a=C[A[144464+(l[n+305|0]<<2)>>2]+11|0]),f|(255&a)!=2||(l[0|t]=0))),!(8&C[e+110|0])|!C[n+432|0]?(A[n+56>>2]=n+432,A[n+52>>2]=n+304,A[n+48>>2]=n+368,nA(s,92282,n+48|0)):(A[n+36>>2]=n+304,A[n+32>>2]=n+368,(0|(t=nA(s,90368,n+32|0)))>0&&(t=C[A[144464+(C[(r=t-1|0)+s|0]<<2)>>2]+11|0]==2?r:t),cA(t+s|0,n+432|0))}else cA(s,f);a=0}A:if(268435456&(e=A[e+104>>2])){if((0|lA(s))<=0)break A;for(t=0,e=0;C[0|(r=e+s|0)]==6&&(t&&(l[0|r]=5),t=1),e=e+1|0,(0|lA(s))>(0|e););}else if(256&e&&(t=0,!((0|(e=(b=lA(s))-1|0))<0))){if(e)for(E=-2&b,f=0;C[0|(c=e+s|0)]==6?(r=1,t&&(l[0|c]=5)):r=t,C[0|(c=c-1|0)]==6?(t=1,r&&(l[0|c]=5)):t=r,e=e-2|0,(0|E)!=(0|(f=f+2|0)););1&b&&(!t|C[0|(e=e+s|0)]!=6||(l[0|e]=5))}return F=n+464|0,a}function q1(e,t,r,a){var s,n,g=0,f=0,c=0,I=0,b=0,m=0,E=0;if(F=s=F-352|0,l[s+304|0]=0,l[s+224|0]=0,l[s+64|0]=0,c=A[A[47192]+292>>2],E=NA(s+348|0,t),(1048320&(g=A[s+348>>2]))==57344&&(g&=255,A[s+348>>2]=g),2&a&&Ze(g)&&dA(e,85437,s+304|0),g=Pt(A[s+348>>2],e),A[s+348>>2]=g,m=1&a,E2(e,g,l[0|(n=t+E|0)],s+224|0,m),!(t=C[s+224|0])){A:if((t=kl(A[s+348>>2]))&&(A[s+348>>2]=16383&t,4&a)){e:switch(1073741823&(t>>=14)){case 0:case 3:break A;default:break e}dA(e,t=A[131232+(t<<2)>>2],s+304|0),C[s+304|0]||(l[s+306|0]=St(84744),b=t,t=s+304|3,dA(A[47194],b,t),C[s+307|0]&&(B[s+304>>1]=5385,t=lA(t)+(s+304|0)|0,l[t+5|0]=0,l[t+4|0]=c,l[t+3|0]=21))}E2(e,A[s+348>>2],l[0|n],s+224|0,m),t=C[s+224|0]}A:{e:{if(t&=255){if((0|t)!=21)break e;cA(r,s+224|0),E=0;break A}if(t=1632,!((0|(g=A[s+348>>2]))<1632)){for(I=103360;;){if((0|g)>=(t+10|0)){if(!(t=A[(I=I+4|0)>>2]))break e;if((0|t)<=(0|g))continue;break e}break}(0|(t=48+(g-t|0)|0))<=0||E2(e,t,0,s+224|0,m)}}e:{r:{i:{s:{if(t=Qt(A[s+348>>2])){if(g=A[t+4>>2],!t|1&(I=A[t+16>>2])||(f=A[47192],A[f+600>>2]==(0|g)|A[f+188>>2]==(0|g)|A[f+184>>2]==(0|g)||(l[s+144|0]=0,dA(f,A[t>>2],s- -64|0)?(0|(f=A[47192]))!=(0|e)&&(c=A[e+292>>2],cA(s+144|0,s- -64|0),l[s+66|0]=A[f+292>>2]):(l[s+66|0]=St(84744),dA(A[47194],A[t>>2],s+144|0)),C[s+144|0]&&(B[s+64>>1]=5385,cA(3|(f=s- -64|0),b=s+144|0),f=lA(b)+f|0,l[f+5|0]=0,l[f+4|0]=c,l[f+3|0]=21))),C[s+224|0])break e;if(!g||(c=A[47192],A[c+188>>2]!=(0|g)))break s;t=A[c+192>>2];break r}if(C[s+224|0])break e;I=0,g=0;break i}if((t=A[t+12>>2])&&!(2&I))break r}t=25966}if((A[e+212>>2]==(0|t)&(0|t)!=27503||(l[s+226|0]=St(Bi(s+47|0,t)),(t=A[47194])&&((0|(c=A[s+348>>2]))>55215||(0|(f=c-44032|0))<0?E2(t,c,l[0|n],s+224|3,m):(l[s+52|0]=32,t=b=s+53|0,c-50500>>>0>=588&&(t=k0(4352+((f>>>0)/588|0)|0,b)+b|0),k0(4449+(((c=(f>>>0)/28|0)>>>0)%21|0)|0,t),k0(4519+(f-T(c,28)|0)|0,t+3|0),l[t+6|0]=32,l[t+7|0]=0,l[s+227|0]=0,t=s+224|3,oe(A[47194],b,t,77,0,0,0),me(A[47194],t,0,-1,0)),t=s+224|3,C[s+227|0]==21&&(l[s+226|0]=St(s+224|4),E2(A[47194],A[s+348>>2],l[0|n],t,m)),W0(A[A[32972]+60>>2]),C[s+227|0]&&(B[s+224>>1]=5385,t=lA(t)+(s+224|0)|0,l[t+3|0]=21,m=A[e+292>>2],l[t+5|0]=0,l[t+4|0]=m)),!C[s+224|0]))&&(16&I||(De(A[s+348>>2])&&dA(A[47192],85683,s+224|0),C[s+224|0]||(v0(A[s+348>>2])||dA(A[47192],85778,s+224|0),C[s+224|0]||ai(85992,s+224|0,0))),!(8&I)||4&a)){if(t=A[s+348>>2],(0|g)!=10240?(A[s+32>>2]=t,nA(s+52|0,86013,s+32|0)):(g=s+52|0,1&t&&(l[s+52|0]=49,g=s+53|0),2&t&&(l[0|g]=50,g=g+1|0),4&t&&(l[0|g]=51,g=g+1|0,t=A[s+348>>2]),8&t&&(l[0|g]=52,g=g+1|0,t=A[s+348>>2]),16&t&&(l[0|g]=53,g=g+1|0,t=A[s+348>>2]),32&t&&(l[0|g]=54,g=g+1|0,t=A[s+348>>2]),64&t&&(l[0|g]=55,g=g+1|0,t=A[s+348>>2]),128&t&&(l[0|g]=56,g=g+1|0),l[0|g]=0),t=s+224|0,I=C[s+52|0])for(g=s+52|0;t=lA(t)+t|0,l[0|t]=23,t=t+1|0,E2(A[47192],I<<24>>24,0,t,1),(a=C[0|t])&&(0|a)!=21||(0|(a=l[0|g]))<97||ai(A[130860+((255&a)<<2)>>2],t,0),I=C[0|(g=g+1|0)];);t=lA(t)+t|0,l[0|t]=9,l[t+1|0]=0}}t=lA(r),2&C[e+144|0]?(A[s+16>>2]=255,A[s+28>>2]=s+304,A[s+24>>2]=s+224,A[s+20>>2]=s- -64,nA(s+144|0,86210,s+16|0)):(A[s>>2]=255,A[s+12>>2]=s+224,A[s+8>>2]=s+304,A[s+4>>2]=s- -64,nA(s+144|0,86210,s)),lA(s+144|0)+t>>>0>199||cA(t+r|0,s+144|0)}return F=s+352|0,E}function _1(e,t,r,a,s,n,g){var f,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0,iA=0,fA=0,bA=0,pA=0,GA=0;F=f=F-528|0,R=g?A[g>>2]:0,AA=A[s+4>>2];A:{e:{if(A[e+220>>2]>0){A0(I=f+352|0,t,160),F=v=F-176|0,Y=1-(D=A[e+220>>2])|0,O=A[e+224>>2],L=A[e+216>>2],m=I;r:{i:{for(;;){if(U=NA(v+172|0,m),c=A[v+172>>2]){if((0|c)<(0|D)|(0|c)>(0|L))break i;if(O){if((0|(c=l[O+(c-D|0)|0]))<=0)break i}else c=c+Y|0;if(m=m+U|0,l[E+v|0]=c,c=160,(0|(E=E+1|0))!=160)continue}else c=E;break}if(O=0,l[c+v|0]=0,Y=l[0|v],A[v+172>>2]=Y,Y){for(tA=2+(L-D|0)|0,D=c=v;;){L=c+1|0;s:{if((U=A[e+8180>>2])&&(E=0,!((0|(m=B[U>>1]))>(0|(q=(l[0|L]<<8)+Y|0)))))for(;;){if((0|m)==(0|q)){Y=E+tA|0,A[v+172>>2]=Y,c=c+2|0;break s}if(!((0|q)>=(0|(m=B[U+((E=E+1|0)<<1)>>1]))))break}c=L}if(J=63&Y|J<<6,(0|(E=O+6|0))<8?O=E:(O=O-2|0,l[0|D]=J>>O,D=D+1|0),Y=l[0|c],A[v+172>>2]=Y,!Y)break}(0|O)<=0||(l[0|D]=J<<8-O,D=D+1|0)}else D=v;l[0|D]=0,MA(I,v,c=D-v|0),D=64|c;break r}D=lA(I)}F=v+176|0,v=I}else D=lA(t),v=t;if(I=C[0|v]){for(c=0,E=v;b=1023&(b=(b<<3)+I|0)^b>>>8,c=c+1|0,I=C[0|(E=E+1|0)];);c=c+b&1023}else c=0;if(b=A[692+((c<<2)+e|0)>>2]){if(c=C[0|b])break e;c=0;break A}if(c=0,!s)break A;A[s>>2]=0;break A}for(U=1073741824&AA,q=2048&n,AA=512&R,tA=65536&R,iA=1&R,fA=2&R,R=8&n,bA=1024&n,L=4&n,pA=63&D,GA=e+8233|0;;){n=(255&c)+b|0;e:{r:if((127&(c=C[b+1|0]))==(0|D)&&!F0(v,b+2|0,pA)){b=2+((63&c)+b|0)|0;i:{if(c<<24>>24<0)O=0,l[0|a]=0;else{if((0|(O=lA(b)))>=160)break i;cA(a,b),b=1+(b+O|0)|0}if(I=0,n>>>0<=b>>>0)c=r,m=0;else{E=0,m=0;s:{for(;;){b=(c=b)+1|0;o:if((c=C[0|c])>>>0>=100){if(Y=A[e+320>>2],c>>>0>=132){E|=Y>>>c-132&1;break o}E|=!(Y>>>c-100&1)}else{if(c>>>0>=81){Y=c-80|0,J=n-b|0;f:if(g)for(c=0;;){if($=T(c,12)+g|0,!C[$+10|0])break f;if(E=!!(12&C[$+1|0])|E,$=(0|c)!=(0|Y),c=c+1|0,!$)break}if(Il(r,b,J)|1&E)break r;A[33264]=Y,c=r+J|0,m|=128,b=n;break s}c>>>0>=65?(m=15&c|-16&m,m=12&~c?m:512|m):c>>>0>=32?I|=1<<c-32:m|=1<<c}if(!(n>>>0>b>>>0))break}if(c=r,1&E)break e}if(65536&I&&!L||bA&&49152&I)break e}if(L&&(16384&I||!R&&32768&I)||(fA?0:512&I)|(iA?0:1024&I)|(tA?0:33554432&m)||!(!(131072&I)|aA[A[47192]+8204>>2]<=c>>>0|U)|(AA?0:262144&I)|(8&C[A[47192]+8242|0]?0:8192&I)||16&I&&(!A[e+8184>>2]&(!R|!A[e+8192>>2])||!(!R|A[e+212>>2]!=25966)&&2097152&A[e+8232>>2])||(A[e+8188>>2]?0:64&I)|(!A[e+8196>>2]|q?32&I:0)||!(!(65536&m)|A[e+212>>2]!=26741|128&C[0|GA])|(A[47192]!=(0|e)?524288&I:0))break e;s:{o:{f:{if(!s){if(!O)break f;break s}if(A[s+4>>2]=I,A[s>>2]=1073741824|m,O)break o}if(c=0,!(8&C[188788]))break A;sl(s,e=f+272|0),A[f>>2]=t,A[f+4>>2]=e,n0(A[47195],89330,f);break A}A[s>>2]=-1073741824|m}if(8&C[188788]&&($e(a,f- -64|0),C[A[47192]+172|0]==(m>>>29&1)&&(!g|!(128&m)?(A[f+48>>2]=t,n0(A[47195],89426,f+48|0)):(MA(e=f+352|0,a=r,r=c-r|0),l[351+(r+f|0)|0]=0,A[f+32>>2]=t,A[f+36>>2]=e,n0(A[47195],89397,f+32|0)),sl(s,e=f+272|0),t=A[47195],A[f+16>>2]=f- -64,A[f+20>>2]=e,n0(t,89534,f+16|0))),C[NA(f- -64|0,v)+v|0]|!s||r0(A[f+64>>2]))break A;A[s>>2]=134217728|A[s>>2];break A}zA(89236,86634,2467,94846),K()}b=n}if(!(c=C[0|b]))break}c=0}return F=f+528|0,c}function x8(e,t,r,a,s){var n,g=0,f=0;F=n=F-304|0,l[n+278|0]=0;A:{if((0|t)>0&&(1&a&&(2&a&&(A[n+164>>2]=r,A[n+160>>2]=t,nA(g=n+290|0,89701,n+160|0),g=dA(e,g,n+224|0))||1&l[133096]&&(A[n+148>>2]=r,A[n+144>>2]=t,nA(g=n+290|0,89757,n+144|0),g=dA(e,g,n+224|0))||(A[n+132>>2]=r,A[n+128>>2]=t,nA(g=n+290|0,89894,n+128|0),g=dA(e,g,n+224|0)))||(A[n+116>>2]=r,A[n+112>>2]=t,nA(g=n+290|0,89974,n+112|0),g=dA(e,g,n+224|0))))break A;if((0|(f=(0|t)%100|0))>=20&&dA(e,90022,n+278|0),1&a){if(2&a){g=f-11|0;e:{r:{i:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(g>>>0<9)break r;if(a=90418,(0|(g=(0|t)%10|0))==1)break e;if(g-2>>>0>=3)break r;a=90453;break e;case 1:if(t-2>>>0>=3)break r;a=90453;break e;case 2:if(g>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;a=90453;break e;case 3:if(a=90508,g>>>0<9)break e;a=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break e;case 4:break i;default:break r}if(!(g>>>0<9)){if(a=90537,(0|(g=(0|t)%10|0))==1)break e;if(!(g-2>>>0>=3)){a=90453;break e}}}a=90586}if(A[n+100>>2]=r,A[n+96>>2]=a,nA(a=n+290|0,90058,n+96|0),g=0,dA(e,a,n+224|0))break A}if(a=f-11|0,1&l[133096]){e:{r:{i:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(g=90418,(0|(f=(0|t)%10|0))==1)break e;if(f-2>>>0>=3)break r;g=90453;break e;case 1:if(t-2>>>0>=3)break r;g=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;g=90453;break e;case 3:if(g=90508,a>>>0<9)break e;g=(g=(0|t)%10|0)?(0|g)==1?90453:90586:90508;break e;case 4:break i;default:break r}if(!(a>>>0<9)){if(g=90537,(0|(f=(0|t)%10|0))==1)break e;if(!(f-2>>>0>=3)){g=90453;break e}}}g=90586}if(A[n+84>>2]=r,A[n+80>>2]=g,nA(f=n+290|0,90110,n+80|0),g=0,dA(e,f,n+224|0))break A}e:{r:{i:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(g=90418,(0|(f=(0|t)%10|0))==1)break e;if(f-2>>>0>=3)break r;g=90453;break e;case 1:if(t-2>>>0>=3)break r;g=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;g=90453;break e;case 3:if(g=90508,a>>>0<9)break e;g=(g=(0|t)%10|0)?(0|g)==1?90453:90586:90508;break e;case 4:break i;default:break r}if(!(a>>>0<9)){if(g=90537,(0|(f=(0|t)%10|0))==1)break e;if(!(f-2>>>0>=3)){g=90453;break e}}}g=90586}if(A[n+68>>2]=r,A[n+64>>2]=g,nA(f=n+290|0,90139,n- -64|0),g=0,dA(e,f,n+224|0))break A}else a=f-11|0;e:{r:{i:switch((448&A[A[47192]+108>>2])-64>>>6|0){case 0:if(a>>>0<9)break r;if(g=90418,(0|(a=(0|t)%10|0))==1)break e;if(a-2>>>0>=3)break r;g=90453;break e;case 1:if(t-2>>>0>=3)break r;g=90453;break e;case 2:if(a>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;g=90453;break e;case 3:if(g=90508,a>>>0<9)break e;g=(a=(0|t)%10|0)?(0|a)==1?90453:90586:90508;break e;case 4:break i;default:break r}if(!(a>>>0<9)){if(g=90537,(0|(a=(0|t)%10|0))==1)break e;if(!(a-2>>>0>=3)){g=90453;break e}}}g=90586}A[n+52>>2]=r,A[n+48>>2]=g,nA(a=n+290|0,90218,n+48|0),g=0,dA(e,a,n+224|0)||((0|r)<4||(A[n+32>>2]=r-1,nA(a=n+290|0,89026,n+32|0),dA(e,a,n+176|0)||(dA(e,90273,n+224|0),A[33275]=3)),C[n+224|0]||(A[n+16>>2]=t,nA(a=n+290|0,90303,n+16|0),(g=dA(e,a,n+224|0))||dA(e,90347,n+224|0),A[33275]=2))}return A[n+4>>2]=n+224,A[n>>2]=n+278,nA(s,90368,n),F=n+304|0,!((0|t)!=1|(0|r)!=1)&&(t=1,32&C[e+106|0])||(t=g),t}function $1(e,t,r,a){var s,n=0,g=0,f=0,c=0,I=0,b=0,m=0;F=s=F+-64|0,B[s+48>>1]=0,A[s+40>>2]=0,A[s+44>>2]=0,A[s+32>>2]=0,A[s+36>>2]=0,A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+8>>2]=0,A[s+12>>2]=0,A[s>>2]=0,A[s+4>>2]=0,n=t;A:{for(;;){e:{r:{if((0|(g=C[0|n]))!=69){if((0|g)!=32)break r;if(a&&(l[MA(g=a,t,a=(0|(a=n-t|0))>=159?159:a)+a|0]=0),a=63&r)break e;break A}l[0|n]=101}n=n+1|0;continue}break}if(1&r){e:if((n=n-1|0)>>>0<t>>>0)g=a;else for(g=a;;){if((192&C[0|n])!=128)break e;if(g=g+1|0,!((n=n-1|0)>>>0>=t>>>0))break}f=a-1|0}else f=a,g=a;if((0|a)!=1)for(;;){a=f;e:if(!((n=n-1|0)>>>0<t>>>0))for(;;){if((192&C[0|n])!=128)break e;if(g=g+1|0,!((n=n-1|0)>>>0>=t>>>0))break}e:if(!((n=n-1|0)>>>0<t>>>0))for(;;){if((192&C[0|n])!=128)break e;if(g=g+1|0,!((n=n-1|0)>>>0>=t>>>0))break}if(f=a-2|0,!((0|a)>2))break}if((0|g)<=0)f=0;else{if(c=3&(f=(a=(t=g-1|0)>>>0>=48?48:t)+1|0),t=0,g=0,a>>>0>=3)for(m=-4&f,a=0;I=n+g|0,l[g+s|0]=C[0|I],l[0|I]=32,I=(b=1|g)+n|0,l[s+b|0]=C[0|I],l[0|I]=32,I=(b=2|g)+n|0,l[s+b|0]=C[0|I],l[0|I]=32,I=(b=3|g)+n|0,l[s+b|0]=C[0|I],l[0|I]=32,g=g+4|0,(0|m)!=(0|(a=a+4|0)););if(c)for(;a=n+g|0,l[g+s|0]=C[0|a],l[0|a]=32,g=g+1|0,(0|c)!=(0|(t=t+1|0)););}}if(l[s+f|0]=0,c=65520&r,!(512&r)|C[0|(a=n-1|0)]!=105||(l[0|a]=121),g=4|c,256&r){A:{e:{r:{if((0|(t=A[e+212>>2]))!=25966){if((0|t)!=28268)break r;if(l[0|a]<0||128&(t=l[0|(f=n-2|0)]))break A;if(c=A[e+632>>2])t=!!(0|G0(c,t));else{if((0|(c=A[e+600>>2]))>0&&(t=t-c|0)-1>>>0>254)break A;t=128&C[344+(e+t|0)|0]}if(!t)break A;if(t=l[0|a],c=A[e+612>>2])t=!!(0|G0(c,t));else{i:{if((0|(c=A[e+600>>2]))>0){if((t=t-c|0)-1>>>0<255)break i;break A}if((0|t)<0)break A}t=4&C[344+(e+t|0)|0]}if(!t)break A;t=l[n-3|0];i:{if(c=A[e+632>>2])t=!!(0|G0(c,t));else{s:{if((0|(c=A[e+600>>2]))>0){if((t=t-c|0)-1>>>0<255)break s;break i}if((0|t)<0)break i}t=128&C[344+(e+t|0)|0]}if(t)break A}l[0|n]=C[0|a],l[0|a]=C[0|f],l[n+1|0]=32;break A}if(f=l[n-2|0],t=A[e+632>>2])t=!!(0|G0(t,f));else{i:{if((0|(t=A[e+600>>2]))>0){if((f=f-t|0)-1>>>0<255)break i;break e}if((0|f)<0)break e}t=128&C[344+(e+f|0)|0]}if(!t)break e;if(f=l[0|a],t=A[e+608>>2])t=!!(0|G0(t,f));else{if((0|(t=A[e+600>>2]))>0){if((f=f-t|0)-1>>>0>=255)break e}else if((0|f)<0)break e;t=2&C[344+(e+f|0)|0]}if(!t)break e;g=F0(87771,n-3|0,3)?20|c:g;break A}g=A[e+204>>2]?20|c:g;break A}(C[0|a]==99||(f=C[(t=n-2|0)+1|0]<<8,(C[0|t]|f)==29554|(f|C[0|t])==29289||(C[0|(t=n-2|0)]|C[t+1|0]<<8)==29301||!F0(88115,n-3|0,3)||(C[0|(t=n-2|0)]|C[t+1|0]<<8)==29550|C[0|a]==117||!F0(88384,n-5|0,5)||(C[0|(t=n-4|0)]|C[t+1|0]<<8|C[t+2|0]<<16|C[t+3|0]<<24)==1735287154||(C[0|t]|C[t+1|0]<<8|C[t+2|0]<<16|C[t+3|0]<<24)==1735549292))&&(g=20|c)}16&g&&(k0(A[e+204>>2],n),8&C[188788]&&Mi(88683,6,A[47195]))}return A[e+8184>>2]|!(2048&r)||(A[e+8184>>2]=1),y[s>>1]!=115&&F0(s,88850,3)||(g|=8),F=s- -64|0,C[0|s]==39?65531&g:g}function j0(e,t,r,a,s,n,g,f,c){var I,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0;F=I=F-112|0,b=2147483647&c;A:{if(E=!(t|r),(a|(m=2147483647&s)?m-2147418112>>>0<2147549184:E)||!(!f&(0|(D=b-2147418112|0))==-2147418112?n|g:(0|D)==-2147418112&!!(0|f)|D>>>0>2147549184)){if(!(!a&(0|m)==2147418112?E:m>>>0<2147418112)){f=a,c=32768|s,n=t,g=r;break A}if(!(!f&(0|b)==2147418112?!(n|g):b>>>0<2147418112)){c|=32768;break A}if(!(t|a|2147418112^m|r)){v=a,f=(a=!(t^n|a^f|r^g|s^c^-2147483648))?0:v,c=a?2147450880:s,n=a?0:t,g=a?0:r;break A}if(!(n|f|2147418112^b|g))break A;if(!(t|a|r|m)){if(n|f|g|b)break A;n&=t,g&=r,f&=a,c&=s;break A}if(!(n|f|g|b)){n=t,g=r,f=a,c=s;break A}}m=(E=R=(v=(0|b)==(0|m))&(0|a)==(0|f)?(0|r)==(0|g)&t>>>0<n>>>0|r>>>0<g>>>0:v&a>>>0<f>>>0|b>>>0>m>>>0)?n:t,D=E?g:r,L=v=E?c:s,E=E?f:a,O=65535&v,a=R?a:f,U=s=R?s:c,v=s>>>16&32767,(Y=L>>>16&32767)||(c=s=!(E|O),b=s?m:E,f=s<<=6,T0(I+96|0,m,D,E,O,(s=s+((0|(c=oA(c?D:O)))==32?oA(b)+32|0:c)|0)-15|0),E=A[I+104>>2],O=A[I+108>>2],D=A[I+100>>2],Y=16-s|0,m=A[I+96>>2]),n=R?t:n,g=R?r:g,f=a,c=65535&U,v||(s=t=!(f|c),b=t?n:f,r=t<<=6,T0(I+80|0,n,g,f,c,(t=t+((0|(s=oA(s?g:c)))==32?oA(b)+32|0:s)|0)-15|0),v=16-t|0,f=A[I+88>>2],c=A[I+92>>2],g=A[I+84>>2],n=A[I+80>>2]),r=c<<3|f>>>29,t=f<<3|g>>>29,r|=524288,f=E<<3|D>>>29,c=O<<3|E>>>29,R=L^U,s=g<<3|n>>>29,a=n<<3,(0|v)!=(0|Y)&&((n=Y-v|0)>>>0>127?(t=0,r=0,s=0,a=1):(T0(I- -64|0,a,s,t,r,128-n|0),v2(I+48|0,a,s,t,r,n),t=A[I+56>>2],r=A[I+60>>2],s=A[I+52>>2],a=A[I+48>>2]|!!(A[I+64>>2]|A[I+72>>2]|A[I+68>>2]|A[I+76>>2]))),E=a,b=s,v=f,O=524288|c,s=D<<3|m>>>29,D=m<<3,m=s;e:if((0|R)<0){if(n=0,g=0,f=0,c=0,!(E^D|t^v|b^m|r^O))break A;if(a=D-E|0,s=m-((E>>>0>D>>>0)+b|0)|0,f=(n=v-t|0)-(g=(0|b)==(0|m)&E>>>0>D>>>0|b>>>0>m>>>0)|0,c=t=(O-((t>>>0>v>>>0)+r|0)|0)-(n>>>0<g>>>0)|0,t>>>0>524287)break e;n=t=!(f|c),g=t?a:f,r=t<<=6,T0(I+32|0,a,s,f,c,t=(t=t+((0|(n=oA(n?s:c)))==32?oA(g)+32|0:n)|0)-12|0),Y=Y-t|0,f=A[I+40>>2],c=A[I+44>>2],a=A[I+32>>2],s=A[I+36>>2]}else s=b+m|0,n=(0|b)==(0|(s=(a=E+D|0)>>>0<D>>>0?s+1|0:s))&a>>>0<E>>>0|s>>>0<b>>>0,b=r+O|0,b=(t=t+v|0)>>>0<v>>>0?b+1|0:b,1048576&(c=(f=t+n|0)>>>0<t>>>0?b+1|0:b)&&(a=1&E|(1&s)<<31|a>>>1,s=f<<31|s>>>1,Y=Y+1|0,f=(1&c)<<31|f>>>1,c=c>>>1|0);if(r=0,m=-2147483648&L,(0|Y)>=32767)f=r,c=2147418112|m,n=0,g=0;else if(v=0,(0|Y)>0?v=Y:(T0(I+16|0,a,s,f,c,Y+127|0),v2(I,a,s,f,c,1-Y|0),a=A[I>>2]|!!(A[I+16>>2]|A[I+24>>2]|A[I+20>>2]|A[I+28>>2]),s=A[I+4>>2],f=A[I+8>>2],c=A[I+12>>2]),D=7&a,a=(0|(t=f<<29|s>>>3))==(0|(g=(a=(7&s)<<29|a>>>3)>>>0>(n=(D>>>0>4)+a|0)>>>0?t+1|0:t))&a>>>0>n>>>0|t>>>0>g>>>0,t=r|(7&c)<<29|f>>>3,c=m|c>>>3&65535|v<<16,c=t>>>0>(f=a+t|0)>>>0?c+1|0:c,(0|D)!=4){if(!D)break A}else b=g+(t=0)|0,c=(t=(0|t)==(0|(g=(a=n)>>>0>(n=n+(r=1&n)|0)>>>0?b+1|0:b))&r>>>0>n>>>0|t>>>0>g>>>0)>>>0>(f=t+f|0)>>>0?c+1|0:c}A[e>>2]=n,A[e+4>>2]=g,A[e+8>>2]=f,A[e+12>>2]=c,F=I+112|0}function SA(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0;A:if(e|=0){n=(a=e-8|0)+(e=-8&(t=A[e-4>>2]))|0;e:if(!(1&t)){if(!(3&t)||(a=a-(t=A[a>>2])|0)>>>0<aA[57156])break A;if(e=e+t|0,A[57157]==(0|a)){if(!(3&~(t=A[n+4>>2])))return A[57154]=e,A[n+4>>2]=-2&t,A[a+4>>2]=1|e,void(A[e+a>>2]=e)}else{if(t>>>0<=255){if(s=A[a+8>>2],t=t>>>3|0,(0|(r=A[a+12>>2]))==(0|s)){A[57152]=A[57152]&R0(-2,t);break e}A[s+12>>2]=r,A[r+8>>2]=s;break e}if(f=A[a+24>>2],(0|a)==(0|(t=A[a+12>>2])))if((r=A[(s=a+20|0)>>2])||(r=A[(s=a+16|0)>>2])){for(;g=s,(r=A[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=A[t+16>>2]););A[g>>2]=0}else t=0;else r=A[a+8>>2],A[r+12>>2]=t,A[t+8>>2]=r;if(!f)break e;s=A[a+28>>2];r:{if(A[(r=228912+(s<<2)|0)>>2]==(0|a)){if(A[r>>2]=t,t)break r;A[57153]=A[57153]&R0(-2,s);break e}if(A[f+(A[f+16>>2]==(0|a)?16:20)>>2]=t,!t)break e}if(A[t+24>>2]=f,(r=A[a+16>>2])&&(A[t+16>>2]=r,A[r+24>>2]=t),!(r=A[a+20>>2]))break e;A[t+20>>2]=r,A[r+24>>2]=t}}if(!(a>>>0>=n>>>0)&&1&(t=A[n+4>>2])){e:{if(!(2&t)){if(A[57158]==(0|n)){if(A[57158]=a,e=A[57155]+e|0,A[57155]=e,A[a+4>>2]=1|e,A[57157]!=(0|a))break A;return A[57154]=0,void(A[57157]=0)}if(A[57157]==(0|n))return A[57157]=a,e=A[57154]+e|0,A[57154]=e,A[a+4>>2]=1|e,void(A[e+a>>2]=e);e=(-8&t)+e|0;r:if(t>>>0<=255){if(s=A[n+8>>2],t=t>>>3|0,(0|(r=A[n+12>>2]))==(0|s)){A[57152]=A[57152]&R0(-2,t);break r}A[s+12>>2]=r,A[r+8>>2]=s}else{if(f=A[n+24>>2],(0|n)==(0|(t=A[n+12>>2])))if((r=A[(s=n+20|0)>>2])||(r=A[(s=n+16|0)>>2])){for(;g=s,(r=A[(s=(t=r)+20|0)>>2])||(s=t+16|0,r=A[t+16>>2]););A[g>>2]=0}else t=0;else r=A[n+8>>2],A[r+12>>2]=t,A[t+8>>2]=r;if(f){s=A[n+28>>2];i:{if(A[(r=228912+(s<<2)|0)>>2]==(0|n)){if(A[r>>2]=t,t)break i;A[57153]=A[57153]&R0(-2,s);break r}if(A[f+(A[f+16>>2]==(0|n)?16:20)>>2]=t,!t)break r}A[t+24>>2]=f,(r=A[n+16>>2])&&(A[t+16>>2]=r,A[r+24>>2]=t),(r=A[n+20>>2])&&(A[t+20>>2]=r,A[r+24>>2]=t)}}if(A[a+4>>2]=1|e,A[e+a>>2]=e,A[57157]!=(0|a))break e;return void(A[57154]=e)}A[n+4>>2]=-2&t,A[a+4>>2]=1|e,A[e+a>>2]=e}if(e>>>0<=255)return t=228648+(-8&e)|0,(r=A[57152])&(e=1<<(e>>>3))?e=A[t+8>>2]:(A[57152]=e|r,e=t),A[t+8>>2]=a,A[e+12>>2]=a,A[a+12>>2]=t,void(A[a+8>>2]=e);s=31,e>>>0<=16777215&&(s=62+((e>>>38-(t=oA(e>>>8|0))&1)-(t<<1)|0)|0),A[a+28>>2]=s,A[a+16>>2]=0,A[a+20>>2]=0,g=228912+(s<<2)|0;e:{r:{if((r=A[57153])&(t=1<<s)){for(s=e<<((0|s)!=31?25-(s>>>1|0):0),t=A[g>>2];;){if(r=t,(-8&A[t+4>>2])==(0|e))break r;if(t=s>>>29|0,s<<=1,!(t=A[(g=r+(4&t)|0)+16>>2]))break}A[g+16>>2]=a,A[a+24>>2]=r}else A[57153]=t|r,A[g>>2]=a,A[a+24>>2]=g;A[a+12>>2]=a,A[a+8>>2]=a;break e}e=A[r+8>>2],A[e+12>>2]=a,A[r+8>>2]=a,A[a+24>>2]=0,A[a+12>>2]=r,A[a+8>>2]=e}e=A[57160]-1|0,A[57160]=e||-1}}}function ke(e,t,r){var a,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0;F=a=F-176|0;A:{if(32&t)v=r-((0|r)>1)|0;else{n=w0(e,93302);e:{r:{i:{if((0|t)!=2){if(n)break i;t=0;break A}if(v=r+1|0,m=(D=T(r,76)+133152|0)+56|0,E=w0(e,89360),g=w0(e,93318),f=w0(e,93426),c=w0(e,93499),n)break r;break e}v=r+1|0,m=(D=T(r,76)+133152|0)+56|0,c=0}for(e=0,I=(0|(s=A[n-4>>2]))!=34?(0|s)==39?s:0:s,Y=T(r,76)+133208|0;;){if(s=e,!(e=A[n>>2]))break e;r:{if(!I){if((0|e)==32|e-9>>>0<5)break e;if((0|e)!=47)break r;break e}if((0|s)!=92&&(0|e)==(0|I))break e}if(n=n+4|0,!((0|(b=k0(e,b+Y|0)+b|0))<16))break}}I=0,l[b+m|0]=0,b=T(r,76)+133168|0,n=0;e:if(E)for(e=0,m=(0|(s=A[E-4>>2]))!=34?(0|s)==39?s:0:s;;){if(s=e,!(e=A[E>>2]))break e;r:{if(!m){if((0|e)==32|e-9>>>0<5)break e;if((0|e)!=47)break r;break e}if((0|s)!=92&&(0|e)==(0|m))break e}if(E=E+4|0,!((0|(n=k0(e,n+b|0)+n|0))<36))break}if(l[n+b|0]=0,!(!g|A[g>>2]-48>>>0>=10)){for(;I=(A[g>>2]+T(I,10)|0)-48|0,A[(g=g+4|0)>>2]-48>>>0<10;);(0|I)<=0||(I=I-1|0)}if(s=T(r,76)+133152|0,A[s+4>>2]=I,e=0,n=0,!(!f|A[f>>2]-48>>>0>=10))for(;n=(A[f>>2]+T(n,10)|0)-48|0,A[(f=f+4|0)>>2]-48>>>0<10;);A[s+12>>2]=n,n=T(r,76)+133152|0;e:{r:if(c){for(;r=l[e+93099|0],(s=A[(e<<2)+c>>2])&&(e=e+1|0,(0|r)==(0|s)););i:{s:switch(s-34|0){case 0:case 5:break s;default:break i}if(!r){e=0;break e}}for(e=0;r=l[e+93116|0],(s=A[(e<<2)+c>>2])&&(e=e+1|0,(0|r)==(0|s)););i:{s:switch(s-34|0){case 0:case 5:break s;default:break i}if(!r){e=1;break e}}for(e=0;r=l[e+93197|0],(s=A[(e<<2)+c>>2])&&(e=e+1|0,(0|r)==(0|s)););i:switch(s-34|0){case 0:case 5:break i;default:break r}if(!r){e=2;break e}}e=3}A[n+8>>2]=A[131156+(e<<3)>>2],A[D>>2]=t}if(cA(137776,133168),r=cA(a+96|0,133208),l[a+157|0]=A[33291],l[a+156|0]=A[33290],e=A[33289],A[a+152>>2]=0,l[a+158|0]=e,(0|v)>0)for(g=0;;){if(f=1,t=T(g,76)+133152|0,C[0|(e=t+16|0)]&&Mr(0,e)&&(cA(137776,e),f=0,l[0|r]=0,l[a+158|0]=0,B[a+156>>1]=0),C[0|(e=t+56|0)]){c=cA(r,e),s=A[33679];e:if(C[0|(e=s)])for(;;){if(!c0(e=e+1|0,c)){cA(c,s+1|0);break e}if(e=1+(lA(e)+e|0)|0,!C[0|e])break}f&&(l[137776]=0)}if((e=A[t+8>>2])&&(l[a+156|0]=e),(e=A[t+12>>2])&&(l[a+157|0]=e),(e=A[t+4>>2])&&(l[a+158|0]=e),(0|v)==(0|(g=g+1|0)))break}A[a+148>>2]=r,A[a+144>>2]=137776,(e=E8(a+144|0,a+172|0))?Ee(e,43)||(t=C[a+156|0],!C[134672]|((0|t)!=C[134724]?t:0)||(A[a>>2]=e,A[a+4>>2]=134672,nA(t=a+16|0,93533,a),e=137776,A0(137776,t,40))):e=92003,t=0,c0(e,134784)&&(cA(134784,e),t=131072)}return F=a+176|0,t}function v8(e,t){var r,a=0,s=0,n=0,g=0,f=0;r=e+t|0;A:{e:if(!(1&(a=A[e+4>>2]))){if(!(3&a))break A;t=(a=A[e>>2])+t|0;r:{if((0|(e=e-a|0))!=A[57157]){if(a>>>0<=255){if(n=A[e+8>>2],a=a>>>3|0,(0|(s=A[e+12>>2]))!=(0|n))break r;A[57152]=A[57152]&R0(-2,a);break e}if(f=A[e+24>>2],(0|(a=A[e+12>>2]))==(0|e))if((s=A[(n=e+20|0)>>2])||(s=A[(n=e+16|0)>>2])){for(;g=n,(s=A[(n=(a=s)+20|0)>>2])||(n=a+16|0,s=A[a+16>>2]););A[g>>2]=0}else a=0;else s=A[e+8>>2],A[s+12>>2]=a,A[a+8>>2]=s;if(!f)break e;n=A[e+28>>2];i:{if(A[(s=228912+(n<<2)|0)>>2]==(0|e)){if(A[s>>2]=a,a)break i;A[57153]=A[57153]&R0(-2,n);break e}if(A[f+(A[f+16>>2]==(0|e)?16:20)>>2]=a,!a)break e}if(A[a+24>>2]=f,(s=A[e+16>>2])&&(A[a+16>>2]=s,A[s+24>>2]=a),!(s=A[e+20>>2]))break e;A[a+20>>2]=s,A[s+24>>2]=a;break e}if(3&~(a=A[r+4>>2]))break e;return A[57154]=t,A[r+4>>2]=-2&a,A[e+4>>2]=1|t,void(A[r>>2]=t)}A[n+12>>2]=s,A[s+8>>2]=n}e:{if(!(2&(a=A[r+4>>2]))){if(A[57158]==(0|r)){if(A[57158]=e,t=A[57155]+t|0,A[57155]=t,A[e+4>>2]=1|t,A[57157]!=(0|e))break A;return A[57154]=0,void(A[57157]=0)}if(A[57157]==(0|r))return A[57157]=e,t=A[57154]+t|0,A[57154]=t,A[e+4>>2]=1|t,void(A[e+t>>2]=t);t=(-8&a)+t|0;r:if(a>>>0<=255){if(n=A[r+8>>2],a=a>>>3|0,(0|(s=A[r+12>>2]))==(0|n)){A[57152]=A[57152]&R0(-2,a);break r}A[n+12>>2]=s,A[s+8>>2]=n}else{if(f=A[r+24>>2],(0|r)==(0|(a=A[r+12>>2])))if((n=A[(s=r+20|0)>>2])||(n=A[(s=r+16|0)>>2])){for(;g=s,(n=A[(s=(a=n)+20|0)>>2])||(s=a+16|0,n=A[a+16>>2]););A[g>>2]=0}else a=0;else s=A[r+8>>2],A[s+12>>2]=a,A[a+8>>2]=s;if(f){n=A[r+28>>2];i:{if(A[(s=228912+(n<<2)|0)>>2]==(0|r)){if(A[s>>2]=a,a)break i;A[57153]=A[57153]&R0(-2,n);break r}if(A[f+(A[f+16>>2]==(0|r)?16:20)>>2]=a,!a)break r}A[a+24>>2]=f,(s=A[r+16>>2])&&(A[a+16>>2]=s,A[s+24>>2]=a),(s=A[r+20>>2])&&(A[a+20>>2]=s,A[s+24>>2]=a)}}if(A[e+4>>2]=1|t,A[e+t>>2]=t,A[57157]!=(0|e))break e;return void(A[57154]=t)}A[r+4>>2]=-2&a,A[e+4>>2]=1|t,A[e+t>>2]=t}if(t>>>0<=255)return a=228648+(-8&t)|0,(s=A[57152])&(t=1<<(t>>>3))?t=A[a+8>>2]:(A[57152]=t|s,t=a),A[a+8>>2]=e,A[t+12>>2]=e,A[e+12>>2]=a,void(A[e+8>>2]=t);n=31,t>>>0<=16777215&&(n=62+((t>>>38-(a=oA(t>>>8|0))&1)-(a<<1)|0)|0),A[e+28>>2]=n,A[e+16>>2]=0,A[e+20>>2]=0,g=228912+(n<<2)|0;e:{if((s=A[57153])&(a=1<<n)){for(n=t<<((0|n)!=31?25-(n>>>1|0):0),a=A[g>>2];;){if(s=a,(-8&A[a+4>>2])==(0|t))break e;if(a=n>>>29|0,n<<=1,!(a=A[(g=s+(4&a)|0)+16>>2]))break}A[g+16>>2]=e,A[e+24>>2]=s}else A[57153]=a|s,A[g>>2]=e,A[e+24>>2]=g;return A[e+12>>2]=e,void(A[e+8>>2]=e)}t=A[s+8>>2],A[t+12>>2]=e,A[s+8>>2]=e,A[e+24>>2]=0,A[e+12>>2]=s,A[e+8>>2]=t}}function G8(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0;if(!(t=l[88105]))return e;if(e=Ee(e,t)){if(!C[88106])return e;if(C[e+1|0]){if(!C[88107]){s=!!(0|(r=C[e+1|0]));A:if(r&&(0|(t=r|C[0|e]<<8))!=(0|(f=C[88106]|C[88105]<<8)))for(r=e+1|0;;){if(s=!!(0|(a=C[(e=r)+1|0])),!a)break A;if(r=e+1|0,(0|f)==(0|(t=a|t<<8&65280)))break}return s?e:0}if(C[e+2|0]){if(!C[88108]){r=e+2|0,s=!!(0|(t=C[e+2|0]));A:if(t&&(0|(t=C[e+1|0]<<16|C[0|e]<<24|t<<8))!=(0|(f=C[88106]<<16|C[88105]<<24|C[88107]<<8)))for(;;){if(e=r+1|0,s=!!(0|(a=C[r+1|0])),!a)break A;if(r=e,(0|f)==(0|(t=(t|a)<<8)))break}else e=r;return s?e-2|0:0}if(C[e+3|0]){if(!C[88109]){r=e+3|0,s=!!(0|(t=C[e+3|0]));A:if(t&&(0|(t=t|C[e+1|0]<<16|C[0|e]<<24|C[e+2|0]<<8))!=(0|(f=(e=C[88105]|C[88106]<<8|C[88107]<<16|C[88108]<<24)<<24|(65280&e)<<8|e>>>8&65280|e>>>24)))for(;;){if(e=r+1|0,s=!!(0|(a=C[r+1|0])),!a)break A;if(r=e,(0|f)==(0|(t=a|t<<8)))break}else e=r;return s?e-3|0:0}f=e,F=c=F-1056|0,A[(e=c+1048|0)>>2]=0,A[e+4>>2]=0,A[(e=c+1040|0)>>2]=0,A[e+4>>2]=0,A[c+1032>>2]=0,A[c+1036>>2]=0,A[c+1024>>2]=0,A[c+1028>>2]=0;A:{e:{r:{i:{if(t=C[88105]){for(;;){if(!C[n+f|0])break e;if(n=n+1|0,A[((255&t)<<2)+c>>2]=n,A[(e=(c+1024|0)+(t>>>3&28)|0)>>2]=A[e>>2]|1<<t,!(t=C[n+88105|0]))break}if(e=1,I=-1,n>>>0>1)break i}else I=-1,e=1;g=-1,r=1;break r}for(a=1,t=1;;){i:if((0|(g=C[88105+(t+I|0)|0]))!=(0|(s=C[e+88105|0])))s>>>0<g>>>0?(a=e-I|0,r=e,t=1):(I=r,r=r+1|0,a=1,t=1);else{if((0|t)==(0|a)){r=r+a|0,t=1;break i}t=t+1|0}if(!(n>>>0>(e=r+t|0)>>>0))break}if(r=1,g=-1,n>>>0<=1)e=a;else{for(e=0,s=1,t=1;;){i:if((0|(m=C[88105+(t+g|0)|0]))!=(0|(b=C[r+88105|0])))b>>>0>m>>>0?(s=r-g|0,e=r,t=1):(g=e,e=e+1|0,s=1,t=1);else{if((0|t)==(0|s)){e=e+s|0,t=1;break i}t=t+1|0}if(!(n>>>0>(r=e+t|0)>>>0))break}e=a,r=s}}for(t=e,F0(88105,(a=(e=g+1>>>0>I+1>>>0)?r:t)+88105|0,m=(b=e?g:I)+1|0)?(a=((e=~b+n|0)>>>0<b>>>0?b:e)+1|0,s=0):s=n-a|0,v=n-1|0,E=63|n,g=0,e=f;;){if(!(f-e>>>0>=n>>>0))if(r=j2(f,0,E)){if(f=r,r-e>>>0<n>>>0)break e}else f=f+E|0;r=C[e+v|0],t=n;r:{if(A[(c+1024|0)+(r>>>3&28)>>2]>>>r&1)if((0|(r=A[(r<<2)+c>>2]))==(0|n)){i:{if(I=C[(r=(t=m)>>>0>g>>>0?t:g)+88105|0])for(;;){if(C[e+r|0]!=(255&I))break i;if(!(I=C[(r=r+1|0)+88105|0]))break}for(;;){if(t>>>0<=g>>>0)break A;if(C[(t=t-1|0)+88105|0]!=C[e+t|0])break}t=a,g=s;break r}t=r-b|0}else t=(r=n-r|0)>>>0>g>>>0?r:g;g=0}e=e+t|0}}e=0}F=c+1056|0,r=e}}}}return r}function wr(e,t,r,a,s,n){var g,f,c,I,b=0,m=0,E=0;if(F=g=F-560|0,l[g+448|0]=0,l[g+144|0]=0,l[g+120|0]=0,c=34&n,f=t-T(m=(0|t)/100|0,100)|0,1&(I=64&C[e+106|0]?(0|t)>999|n:0)|(0|t)>99){A:{e:{r:{if(!(!c|f)){if(!dA(e,90606,g+304|0))break r;break A}if(f)break e}if(dA(e,90691,g+304|0))break A}dA(e,90725,g+304|0)}b=n,(0|t)<1e3||(b=n,!(8&C[e+105|0])|t-2e3>>>0<4294967196&&(l[g+208|0]=0,x8(e,b=(m>>>0)/10|0,a=16384&A[e+108>>2]?0:s+1|0,!((t>>>0)%1e3|0)|c,g+272|0)||kr(e,b,s,A[e+212>>2]==28012?520:(0|a)<4?(A[e+108>>2]>>>a&1)<<3:0,g+208|0),2&C[e+109|0]?(A[g+108>>2]=15,A[g+100>>2]=15,A[g+104>>2]=g+208,A[g+96>>2]=g+272,nA(g+144|0,90761,g+96|0)):(A[g+92>>2]=15,A[g+84>>2]=15,A[g+88>>2]=g+272,A[g+80>>2]=g+208,nA(g+144|0,90761,g+80|0)),a=1,1&(!!(0|(m=m-T(b,10)|0))|I)||(l[g+304|0]=0),b=1|n)),l[g+208|0]=0;A:if(!(~I&(0|m)<=0))if(!(4&C[e+106|0])|!(1&b|C[g+144|0])||dA(e,90824,g+120|0),!c|(16&C[e+109|0]?0:f)||(A[g+64>>2]=m,nA(a=g+548|0,90875,g- -64|0),E=dA(e,a,g+208|0),!(4096&A[e+108>>2])|(0|f)<=0||P0(g+208|0,133104)),a=1,1&(~I|!!(0|m))){e:{r:{i:{s:{if(!(131072&A[e+108>>2])||1&b|(0|m)!=1){if(f|E||(A[g+48>>2]=m,nA(a=g+548|0,90985,g+48|0),E=dA(e,a,g+208|0)),E||(A[g+32>>2]=m,nA(a=g+548|0,91027,g+32|0),dA(e,a,g+208|0)))break s;if((0|m)!=1)break r;break i}if(!E)break i}l[g+304|0]=0;break e}if(a=1,4&C[e+105|0])break A}kr(e,m,s,0,g+208|0)}a=1}else dA(e,88875,g+208|0);A[g+28>>2]=g+304,A[g+24>>2]=g+208,A[g+20>>2]=g+120,A[g+16>>2]=g+144,nA(g+448|0,91059,g+16|0)}else b=n;l[g+132|0]=0;A:{e:{if((0|f)>0)16&C[e+109|0]&&2&b||(!(1&b)|s&&(0|t)<=100||!(64&(a=A[e+104>>2]))&(!(8388608&a)|f>>>0>9)||dA(e,90824,g+132|0),!(1&b|C[g+144|0])|!(524288&A[e+104>>2])|m||dA(e,90824,g+132|0)),l[g+336|0]=0;else if(l[g+336|0]=0,!f&a)break e;if(s?(n=A[e+108>>2],t=(0|s)<4?(n>>>s&1)<<3:0):(a=c?3:2,t=32&n|((0|t)<100?1&b?a:4|a:a),n=A[e+108>>2]),t=(0|s)==1&&A[e+212>>2]==28012?520|t:t,1048576&n&&(a=16|t,t=(0|m)>0||1&b?a:t),!kr(e,f,s,256&b|t,g+336|0)|!(128&C[e+104|0]))break A;l[g+132|0]=0;break A}C[133104]&&((0|(e=lA(g+448|0)))<=0||C[(e=e+g|0)+447|0]==10&&(l[e+447|0]=0),cA(g+336|0,133104))}A[g+8>>2]=15,A[g+12>>2]=g+336,A[g+4>>2]=g+132,A[g>>2]=g+448,nA(r,91101,g),F=g+560|0}function Q8(e){var t,r,a,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0;for(s=A[32972],A[s+64>>2]=290816,A[s+68>>2]=4104,A[s+96>>2]=0,A[s+100>>2]=0,A[s+120>>2]=90,A[s+124>>2]=100,A[s+112>>2]=64,A[s+116>>2]=256,A[s+104>>2]=5,A[s+108>>2]=0,A[s+84>>2]=100,A[s+88>>2]=64,n=A[50754],A[s+132>>2]=0,A[s+136>>2]=0,A[s+128>>2]=n,A[s+140>>2]=0,A[s+144>>2]=0,A[s+148>>2]=0,A[s+152>>2]=0,A[s+156>>2]=0,A[s+160>>2]=0,A[36435]=450,A[s+92>>2]=2,A[50870]=0,A[50871]=0,A[50872]=0,A[50873]=0,A[50880]=0,A[50881]=0,A[50882]=0,A[50883]=0,A[50890]=0,A[50891]=0,A[50892]=0,A[50893]=0,g=-3.141592653589793/+A[50754],Q[25429]=g,c=-2*g,Q[25430]=c,t=(g=we(200*g))*-g,Q[25434]=t,Q[25439]=t,Q[25444]=t,g=(c=g*te(2e3*c))+c,Q[25433]=g,Q[25438]=g,Q[25443]=g,c=1-g-t,Q[25432]=c,Q[25437]=c,Q[25442]=c,A[50902]=0,A[50903]=0,A[50900]=0,A[50901]=0,Q[25449]=t,Q[25448]=g,A[50912]=0,A[50913]=0,Q[25447]=c,A[50910]=0,A[50911]=0,Q[25454]=t,Q[25453]=g,A[50922]=0,A[50923]=0,Q[25452]=c,A[50920]=0,A[50921]=0,Q[25459]=t,Q[25458]=g,A[50932]=0,A[50933]=0,Q[25457]=c,A[50930]=0,A[50931]=0,Q[25464]=t,Q[25463]=g,Q[25462]=c,A[50942]=0,A[50943]=0,A[50940]=0,A[50941]=0,Q[25469]=t,Q[25468]=g,Q[25467]=c,A[50952]=0,A[50953]=0,A[50950]=0,A[50951]=0,Q[25474]=t,Q[25473]=g,Q[25472]=c,r=A[32972],n=0;B[(I=(n<<1)+r|0)+236>>1]=256,B[I+164>>1]=256,s=C[n+105376|0]<<1,B[I+254>>1]=s,B[I+182>>1]=s,B[I+200>>1]=C[n+105385|0]<<1,A[(s=(f=n<<2)+r|0)+308>>2]=A[f+105408>>2],A[s+272>>2]=0,B[I+218>>1]=0,A[f+200944>>2]=(0|T(A[f+105456>>2],22050))/A[50754],(0|(n=n+1|0))!=9;);for(v=A[32961],n=0,a=r+344|0;;){if(s=b,m=v,I=n,(0|(b=A[(n=(f=n<<2)+131840|0)>>2]))==-1&&(b=8e3,A[n>>2]=8e3,I&&(A[131840+(4|f)>>2]=A[f+131836>>2])),v=A[131840+(4|f)>>2],!((0|s)>=(0|(b=(0|b)/8|0))||(0|(E=b-s|0))<=0||(f=s+1|0,n=s,1&E&&(l[344+(s+r|0)|0]=(0|m)>=255?255:m,n=f),(0|f)==(0|b))))for(D=v-m|0;f=((0|T(n-s|0,D))/(0|E)|0)+m|0,l[n+a|0]=(0|f)>=255?255:f,Y=((0|T((f=n+1|0)-s|0,D))/(0|E)|0)+m|0,l[f+a|0]=(0|Y)>=255?255:Y,(0|b)!=(0|(n=n+2|0)););if(n=I+2|0,!(I>>>0<10))break}n=A[32972],A[n+80>>2]=232,A[n+72>>2]=256,A[n+76>>2]=238,e||(A[49848]=0),B[n+200>>1]=(0|T(B[n+200>>1],105))/100}function y8(e,t,r){var a,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;F=a=F-288|0,(0|t)!=132848&&oi(132848,t,40),(0|(s=e+228|0))!=(0|t)&&oi(s,t,40),A[a+88>>2]=t,A[a+84>>2]=47,A[a+80>>2]=137584,nA(s=a+96|0,84089,a+80|0),n=Ke(s),(s=A[e+688>>2])&&(SA(s),A[e+688>>2]=0),s=_e(a+96|0,84577);A:if((0|n)>0&&s)if(r=m0(n),A[e+688>>2]=r,r)if(I=Ci(r,n,s),H0(s),I>>>0<=1032)A[a+16>>2]=a+96,n0(A[30450],85164,a+16|0),r=2;else if(s=A[e+688>>2],r=A[s+4>>2],!((0|(n=A[s>>2]))!=1024|(0|r)<=0)&(0|r)<134217729){s=r+s|0,A[e+684>>2]=s,m=QA(e+5168|0,0,1024),QA(e+7664|0,0,260),QA(e+7924|0,255,256),QA(e+4788|0,0,380),QA(e+6192|0,0,512);e:if((0|(r=C[0|s]))!=7)for(;;){if((0|(n=255&r))!=6){if(!n)break e;n=A[e+684>>2],A[a+72>>2]=r<<24>>24,A[a+64>>2]=132848,A[a+68>>2]=s-n,n0(A[30450],88950,a- -64|0);break}r:{i:{s:{o:{f:switch((n=C[0|(r=s+1|0)])-18|0){case 0:break o;case 2:break f;default:break s}for(r=4+(-4&r)|0,A[e+180>>2]=r;r=(s=r)+1|0,!zi(s););for(;n=C[0|s],r=s,s=s+1|0,(0|n)!=7;);break r}if(r=s+3|0,(0|(s=((0|(s=l[s+2|0]))<65?191:-65)+s|0))>94)break i;A[4788+((s<<2)+e|0)>>2]=r;break i}r=1+((f=lA(r))+r|0)|0;s:switch(0|f){case 1:A[5168+((n<<2)+e|0)>>2]=r;break i;case 0:A[m>>2]=r;break i;default:break s}f=C[s+2|0],(0|n)!=1?(s=A[e+7664>>2],C[0|(b=(g=e+n|0)+7924|0)]==255&&(l[0|b]=s),l[0|(g=g+7668|0)]=C[0|g]+1,A[(g=(s<<2)+e|0)+6704>>2]=r,A[e+7664>>2]=s+1,A[g+7184>>2]=n|f<<8):A[6188+((f<<2)+e|0)>>2]=r}if(C[0|r]!=7)for(;r=1+(lA(r)+r|0)|0,C[0|r]!=7;);}r=C[0|(s=r+1|0)]}for(s=A[e+688>>2]+8|0;;){for(A[692+((r=c<<2)+e|0)>>2]=s;n=C[0|s];)s=s+n|0;for(s=s+1|0,A[692+((4|r)+e|0)>>2]=s;r=C[0|s];)s=r+s|0;if(s=s+1|0,(0|(c=c+2|0))==1024)break}r=0,(0|(e=A[e+324>>2]))<=0|e>>>0<=I>>>0||(A[a+48>>2]=t,n0(A[30450],85519,a+48|0))}else A[a+40>>2]=r,A[a+36>>2]=n,A[a+32>>2]=a+96,n0(A[30450],85349,a+32|0),r=2;else H0(s),r=3;else{if(r||(A[a>>2]=a+96,n0(A[30450],84963,a)),r=1,!s)break A;H0(s)}return F=a+288|0,r}function U2(e){var t,r=0,a=0;for(t=QA(e+344|0,0,256),l[e+364|0]=1,l[e+356|0]=1,l[e+357|0]=1,l[e+358|0]=1,l[e+359|0]=1,l[e+360|0]=1,l[e+361|0]=1,l[e+362|0]=1,l[e+363|0]=1,l[e+348|0]=1,l[e+349|0]=1,l[e+350|0]=1,l[e+351|0]=1,l[e+352|0]=1,l[e+353|0]=1,l[e+354|0]=1,l[e+355|0]=1,l[e+431|0]=3,l[e+429|0]=3,l[e+430|0]=3,l[e+406|0]=3,l[e+407|0]=3,l[e+408|0]=3,l[e+409|0]=3,l[e+410|0]=3,l[e+411|0]=3,l[e+412|0]=3,l[e+413|0]=3,l[e+414|0]=3,l[e+415|0]=3,l[e+416|0]=3,l[e+417|0]=3,l[e+418|0]=3,l[e+419|0]=3,l[e+420|0]=3,l[e+421|0]=3,l[e+440|0]=3,l[e+441|0]=3,l[e+442|0]=3,l[e+443|0]=3,a=21;l[(r=e+a|0)+344|0]=4|C[r+344|0],(0|(r=a+1|0))!=58;)l[0|(r=r+t|0)]=4|C[0|r],l[(r=a+t|0)+2|0]=4|C[r+2|0],l[r+3|0]=4|C[r+3|0],a=a+4|0;l[e+346|0]=4|C[e+346|0],l[e+347|0]=4|C[e+347|0],l[e+432|0]=4|C[e+432|0],l[e+433|0]=4|C[e+433|0],l[e+434|0]=4|C[e+434|0],l[e+435|0]=4|C[e+435|0],l[e+436|0]=4|C[e+436|0],l[e+437|0]=4|C[e+437|0],l[e+438|0]=4|C[e+438|0],l[e+439|0]=4|C[e+439|0],l[e+467|0]=4|C[e+467|0],l[e+468|0]=4|C[e+468|0],l[e+470|0]=4|C[e+470|0],l[e+471|0]=4|C[e+471|0],l[e+348|0]=64|C[e+348|0],l[e+349|0]=64|C[e+349|0],l[e+350|0]=64|C[e+350|0],l[e+351|0]=64|C[e+351|0],l[e+352|0]=64|C[e+352|0],l[e+353|0]=64|C[e+353|0],l[e+354|0]=64|C[e+354|0],l[e+355|0]=64|C[e+355|0],l[e+356|0]=64|C[e+356|0],l[e+357|0]=64|C[e+357|0],l[e+358|0]=64|C[e+358|0],l[e+359|0]=64|C[e+359|0],l[e+360|0]=64|C[e+360|0],l[e+361|0]=64|C[e+361|0],l[e+362|0]=64|C[e+362|0],l[e+363|0]=64|C[e+363|0],l[e+364|0]=64|C[e+364|0],l[e+406|0]=64|C[e+406|0],l[e+407|0]=64|C[e+407|0],l[e+408|0]=64|C[e+408|0],l[e+409|0]=64|C[e+409|0],l[e+410|0]=64|C[e+410|0],l[e+411|0]=64|C[e+411|0],l[e+412|0]=64|C[e+412|0],l[e+413|0]=64|C[e+413|0],l[e+414|0]=64|C[e+414|0],l[e+415|0]=64|C[e+415|0],l[e+416|0]=64|C[e+416|0],l[e+417|0]=64|C[e+417|0],l[e+418|0]=64|C[e+418|0],l[e+419|0]=64|C[e+419|0],l[e+420|0]=64|C[e+420|0],l[e+440|0]=64|C[e+440|0],l[e+441|0]=64|C[e+441|0],l[e+429|0]=64|C[e+429|0],l[e+430|0]=64|C[e+430|0],l[e+431|0]=64|C[e+431|0],l[e+442|0]=64|C[e+442|0],l[e+443|0]=64|C[e+443|0],A[e+40>>2]=1,A[e+204>>2]=A[e+600>>2]+77}function D8(e,t,r,a,s,n,g,f,c){var I,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0;F=I=F-128|0;A:{e:{if(x2(n,g,f,c,0,0,0,0)){m=65535&c;r:i:{if((0|(v=c>>>16&32767))!=32767){if(b=4,v)break i;b=n|f|g|m?3:2;break r}b=!(n|f|g|m)}if((0|(D=32767&(L=s>>>16|0)))!=32767&&b)break e}_A(I+16|0,t,r,a,s,n,g,f,c),h8(I,t=A[I+16>>2],a=A[I+20>>2],s=A[I+24>>2],r=A[I+28>>2],t,a,s,r),a=A[I+8>>2],s=A[I+12>>2],f=A[I>>2],c=A[I+4>>2];break A}if(v=f,(0|x2(t,r,b=a,Y=2147483647&s,n,g,f,E=2147483647&c))<=0){if(x2(t,r,b,Y,n,g,v,E)){f=t,c=r;break A}_A(I+112|0,t,r,a,s,0,0,0,0),a=A[I+120>>2],s=A[I+124>>2],f=A[I+112>>2],c=A[I+116>>2]}else{if(O=c>>>16&32767,D?(c=r,f=t):(_A(I+96|0,t,r,b,Y,0,0,0,1081540608),b=A[I+104>>2],Y=f=A[I+108>>2],D=(f>>>16|0)-120|0,c=A[I+100>>2],f=A[I+96>>2]),O||(_A(I+80|0,n,g,v,E,0,0,0,1081540608),v=A[I+88>>2],E=n=A[I+92>>2],O=(n>>>16|0)-120|0,g=A[I+84>>2],n=A[I+80>>2]),R=v,U=65535&E|65536,Y=65535&Y|65536,(0|D)>(0|O)){for(;;){if(v=(E=b-R|0)-(m=(0|g)==(0|c)&n>>>0>f>>>0|g>>>0>c>>>0)|0,(0|(m=(Y-((b>>>0<R>>>0)+U|0)|0)-(m>>>0>E>>>0)|0))>0|(0|m)>=0){if(b=f,!((f=f-n|0)|v|(c=c-((n>>>0>b>>>0)+g|0)|0)|m)){_A(I+32|0,t,r,a,s,0,0,0,0),a=A[I+40>>2],s=A[I+44>>2],f=A[I+32>>2],c=A[I+36>>2];break A}m=m<<1|v>>>31,b=v<<1|c>>>31}else m=Y<<1|b>>>31,b=b<<1|c>>>31;if(Y=m,m=c<<1|f>>>31,f<<=1,c=m,!((0|(D=D-1|0))>(0|O)))break}D=O}if(v=(E=b-R|0)-(m=(0|g)==(0|c)&n>>>0>f>>>0|g>>>0>c>>>0)|0,E=m=(Y-((b>>>0<R>>>0)+U|0)|0)-(m>>>0>E>>>0)|0,(0|m)<0)v=b,E=Y;else if(b=f,!((f=f-n|0)|v|(c=c-((n>>>0>b>>>0)+g|0)|0)|E)){_A(I+48|0,t,r,a,s,0,0,0,0),a=A[I+56>>2],s=A[I+60>>2],f=A[I+48>>2],c=A[I+52>>2];break A}if((0|E)==65535|E>>>0<65535)for(;t=c>>>31|0,D=D-1|0,Y=c<<1|f>>>31,f<<=1,c=Y,r=t,t=E<<1|v>>>31,v=r|v<<1,E=t,t>>>0<65536;);t=32768&L,(0|D)<=0?(_A(I- -64|0,f,c,v,65535&E|(t|D+120)<<16,0,0,0,1065811968),a=A[I+72>>2],s=A[I+76>>2],f=A[I+64>>2],c=A[I+68>>2]):(a=v,s=65535&E|(t|D)<<16)}}A[e>>2]=f,A[e+4>>2]=c,A[e+8>>2]=a,A[e+12>>2]=s,F=I+128|0}function Ai(e,t,r){var a,s,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0;if(F=a=F-1040|0,(0|(g=bl(e,589824,0)))>=0&&((n=vl(1,2072))?A[n+8>>2]=g:(ZA(0|g),n=0)),s=n,n){A:if(n=ul(s))for(v=A[30450],E=(a+96|0)+t|0;;){if((0|(g=A[50303]))>=348){A[a+4>>2]=350,A[a>>2]=g+1,n0(v,91860,a);break A}if(C[n+19|0]!=46)if(A[a+88>>2]=n+19,A[a+84>>2]=47,A[a+80>>2]=e,nA(n=a+96|0,91924,a+80|0),(0|(n=Ke(n)))!=-31){if(!((0|n)<=0)&&(m=_e(a+96|0,85712))){f=0,l[a+832|0]=0,l[a+752|0]=0,A[a+360>>2]=0,A[a+356>>2]=4,I=0;e:for(;;){for(b=299-I|0;Dr(a+912|0,120,m);){n=a+912|0;r:{if(C[a+912|0]!=35){i:if(!((0|(n=lA(a+912|0)-1|0))<=0))for(;;){if(!((0|(g=l[0|(c=(a+912|0)+n|0)]))==32|g-9>>>0<5))break i;if(l[0|c]=0,!((0|(n=n-1|0))>0))break}if(!(n=G8(a+912|0)))break r}l[0|n]=0}n=a+912|0;r:if(g=C[a+912|0])for(;;){if(v0(g<<24>>24))break r;if(!(g=C[0|(n=n+1|0)]))break}if(l[0|n]=0,C[a+912|0]){n=n+1|0;r:switch(Le(131904,a+912|0)-1|0){case 0:for(;g=n,n=n+1|0,(0|(c=l[0|g]))==32|c-9>>>0<5;);A0(a+832|0,g,80);continue;case 1:if(l[a+672|0]=0,A[a+364>>2]=5,g=a+672|0,A[a+16>>2]=g,A[a+20>>2]=a+364,qA(n,86237,a+16|0),(g=lA(g)+2|0)>>>0>=b>>>0)continue;l[0|(n=(a+368|0)+I|0)]=A[a+364>>2],cA(n+1|0,a+672|0),f=f+1|0,I=g+I|0;continue e;case 2:if(A[a+52>>2]=a+360,A[a+48>>2]=a+752,qA(n,86237,a+48|0),!r)continue;A[a+32>>2]=E,n0(v,92042,a+32|0);continue;case 5:break r;default:continue}A[a+64>>2]=a+356,qA(n,87268,a- -64|0)}}break}l[(a+368|0)+I|0]=0,g=Le(132112,a+752|0),f?(c=lA(E)+I|0,b=MA((f=vl(28+(lA(a+832|0)+c|0)|0,1))+24|0,a+368|0,n=I+1|0),A[f+4>>2]=b,n=cA(n+b|0,E),A[f>>2]=n,A[f+8>>2]=n,C[a+832|0]&&(A[f>>2]=cA(2+(c+b|0)|0,a+832|0)),n=A[a+360>>2],l[f+14|0]=0,l[f+12|0]=g,l[f+13|0]=n,l[f+15|0]=A[a+356>>2],H0(m),n=A[50303],A[50303]=n+1,A[201216+(n<<2)>>2]=f):H0(m)}}else Ai(a+96|0,t,r);if(!(n=ul(s)))break}Ol(A[s+8>>2]),SA(s)}F=a+1040|0}function ei(e,t){var r,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;F=r=F-352|0;A:if(e||(e=A[136284+(t<<4)>>2])){C[0|e]!=47&&(A[r+12>>2]=e,A[r+4>>2]=47,A[r+8>>2]=47,A[r>>2]=137584,nA(e=r+16|0,84114,r)),l[r+240|0]=0;e:{r:{if(a=_e(e,84577)){if((0|Dl(a,20))==-1)break e;if(n=yi(a),s=yi(a),f=yi(a),!((0|n)!=65537|(0|s)!=A[50754])&(0|f)==s<<1)break r;H0(a),B[r+256>>1]=C[84864]|C[84865]<<8,e=C[84852]|C[84853]<<8|C[84854]<<16|C[84855]<<24,A[r+240>>2]=C[84848]|C[84849]<<8|C[84850]<<16|C[84851]<<24,A[r+244>>2]=e,e=C[84860]|C[84861]<<8|C[84862]<<16|C[84863]<<24,A[r+248>>2]=C[84856]|C[84857]<<8|C[84858]<<16|C[84859]<<24,A[r+252>>2]=e,F=n=F-16|0;i:{if((a=lA(e=r+240|0))>>>0>=6&&!F0(f=(e+a|0)-6|0,84274,6)){for(I=100;;){for(c=0,F=a=F-16|0,C[227196]||(l[227197]=E0(),l[227196]=1),m=+CA(),sA(g=m/1e3)<9223372036854776e3?(b=sA(g)>=1?~~(g>0?PA(vA(23283064365386963e-26*g),4294967295):mA(23283064365386963e-26*(g-+(~~g>>>0>>>0))))>>>0:0,s=~~g>>>0):(b=-2147483648,s=0),A[a>>2]=s,A[a+4>>2]=b,g=1e3*(m-(+(DA(s,b,1e3,0)>>>0)+4294967296*+(0|_)))*1e3,s=sA(g)<2147483648?~~g:-2147483648,A[a+8>>2]=s,s=f+(a>>>4|0)^T(A[a+8>>2],65537);l[f+c|0]=65+(15&s|s<<1&32),s=s>>>5|0,(0|(c=c+1|0))!=6;);if(F=a+16|0,A[n>>2]=384,(0|(a=bl(e,194,n)))>=0)break i;if(I=I-1|0,A[56798]!=20||!I)break}MA(f,84274,6)}else A[56798]=28;a=-1}F=n+16|0,(0|a)<0||Ol(a)}if(!(a=_e(e,84577))){e=e2(0,A[56798],e);break A}}if((0|(n=Ke(e)))<0){H0(a),e=e2(0,0-n|0,e);break A}if((0|Dl(a,0))==-1){t=A[56798],H0(a),e=e2(0,t,e);break A}if(!(s=Re(A[(f=136280+(t<<4)|0)>>2],n))){H0(a),e=48;break A}if((0|Ci(s,n,a))!=(0|n)){t=A[56798],H0(a),C[r+240|0]&&yl(r+240|0),SA(s),e=e2(0,t,e);break A}H0(a),C[r+240|0]&&yl(r+240|0),A[136276+(t<<4)>>2]=(C[s+40|0]|C[s+41|0]<<8|C[s+42|0]<<16|C[s+43|0]<<24)/2,A[f>>2]=s,e=0;break A}t=A[56798],H0(a),e=e2(0,t,e)}else e=28;return F=r+352|0,e}function M8(e,t,r,a,s,n){var g,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0;for(l[0|r]=1,g=1&n,U=1,Y=-1,O=-1,b=1,n=t;;){J=L-2|0,R=m,v=O;A:{e:{for(;;){if(!(E=C[0|n])){O=v,m=R;break A}if(n=n+1|0,D=A[144464+(E<<2)>>2]){r:{if((0|(f=C[D+11|0]))!=1){if(16&C[D+6|0]|(0|f)!=2)break r;l[0|(m=r+b|0)]=Y,f=(0|Y)<4|(0|v)>(0|Y),!(2&C[D+4|0])|!g|(0|Y)>=0||(l[0|m]=1),m=f?R:b,O=f?v:Y,Y=-1,b=b+1|0;break e}if(!y[D+8>>1]){f=0,I=b;i:if((0|E)!=8)f=C[D+14|0],A[s>>2]&&f>>>0>=4||(v=(0|f)<(0|v)?v:f,Y=f);else{for(;;){if(E=f,I=I-1|0,A[s>>2]|(0|I)<=0||(0|(D=l[0|(c=r+I|0)]))>3)break i;if(f=E+1|0,!(D>>>0<2))break}if(l[0|c]=4,R=(0|v)<4?I:R,v=(0|v)<=4?4:v,I>>>0<2)break i;if(D=3&(I=~E+L|0),f=1,J-E>>>0>=3)for(E=-4&I,I=0;C[0|(c=r+f|0)]==4&&(l[0|c]=3),C[c+1|0]==4&&(l[c+1|0]=3),C[c+2|0]==4&&(l[c+2|0]=3),C[c+3|0]==4&&(l[c+3|0]=3),f=f+4|0,(0|E)!=(0|(I=I+4|0)););if(c=0,!D)break i;for(;C[0|(E=r+f|0)]==4&&(l[0|E]=3),f=f+1|0,(0|D)!=(0|(c=c+1|0)););}if(U)continue;break A}}break}}O=v,m=R,(0|E)==20&&(l[r+b|0]=g&&(0|Y)<0?1:Y,b=b+1|0)}if(l[0|t]=E,L=b-1|0,t=t+1|0,U=(0|b)<99)continue}break}l[r+b|0]=1,l[0|t]=0;A:if((0|(t=A[s>>2]))>0)O=4,(0|t)>=(0|b)&&(A[s>>2]=L,t=L),l[t+r|0]=4,m=A[s>>2];else if((0|O)==5&&(O=4,!((0|b)<2))){if(n=1,v=1&(t=b-1|0),(0|b)!=2)for(R=-2&t,I=0;;){c=4;e:{r:{i:switch(C[0|(t=(f=n)+r|0)]-4|0){case 1:break r;case 0:break i;default:break e}c=2&C[e+14|0]?1:3,f=m}l[0|t]=c,m=f}c=4;e:{r:{i:switch(C[0|(t=(f=n+1|0)+r|0)]-4|0){case 1:break r;case 0:break i;default:break e}c=2&C[e+14|0]?1:3,f=m}l[0|t]=c,m=f}if(n=n+2|0,(0|R)==(0|(I=I+2|0)))break}if(v){c=4;e:{r:switch(C[0|(t=r+n|0)]-4|0){case 1:break e;case 0:break r;default:break A}c=2&C[e+14|0]?1:3,n=m}l[0|t]=c,m=n}}return A[s>>2]=m,A[a>>2]=b,O}function Re(e,t){var r,a,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0;if(!e)return m0(t);if(t>>>0>=4294967232)return A[56798]=48,0;r=t>>>0<11?16:t+11&-8,g=-8&(a=A[(f=e-8|0)+4>>2]);A:if(3&a){c=g+f|0;e:if(g>>>0>=r>>>0){if((n=g-r|0)>>>0<16)break e;A[f+4>>2]=1&a|r|2,A[(s=f+r|0)+4>>2]=3|n,A[c+4>>2]=1|A[c+4>>2],v8(s,n)}else if(A[57158]!=(0|c))if(A[57157]!=(0|c)){if(2&(n=A[c+4>>2])||(b=g+(-8&n)|0)>>>0<r>>>0)break A;E=b-r|0;r:if(n>>>0<=255){if(g=A[c+8>>2],s=n>>>3|0,(0|(n=A[c+12>>2]))==(0|g)){A[57152]=A[57152]&R0(-2,s);break r}A[g+12>>2]=n,A[n+8>>2]=g}else{if(m=A[c+24>>2],(0|(I=A[c+12>>2]))==(0|c))if((s=A[(g=c+20|0)>>2])||(s=A[(g=c+16|0)>>2])){for(;n=g,I=s,(s=A[(g=s+20|0)>>2])||(g=I+16|0,s=A[I+16>>2]););A[n>>2]=0}else I=0;else s=A[c+8>>2],A[s+12>>2]=I,A[I+8>>2]=s;if(m){n=A[c+28>>2];i:{if(A[(s=228912+(n<<2)|0)>>2]==(0|c)){if(A[s>>2]=I,I)break i;A[57153]=A[57153]&R0(-2,n);break r}if(A[(A[m+16>>2]==(0|c)?16:20)+m>>2]=I,!I)break r}A[I+24>>2]=m,(s=A[c+16>>2])&&(A[I+16>>2]=s,A[s+24>>2]=I),(s=A[c+20>>2])&&(A[I+20>>2]=s,A[s+24>>2]=I)}}E>>>0<=15?(A[f+4>>2]=1&a|b|2,A[(s=f+b|0)+4>>2]=1|A[s+4>>2]):(A[f+4>>2]=1&a|r|2,A[(n=f+r|0)+4>>2]=3|E,A[(s=f+b|0)+4>>2]=1|A[s+4>>2],v8(n,E))}else{if((n=g+A[57154]|0)>>>0<r>>>0)break A;(s=n-r|0)>>>0>=16?(A[f+4>>2]=1&a|r|2,A[(g=f+r|0)+4>>2]=1|s,A[(n=n+f|0)>>2]=s,A[n+4>>2]=-2&A[n+4>>2]):(A[f+4>>2]=n|1&a|2,A[(s=n+f|0)+4>>2]=1|A[s+4>>2],s=0,g=0),A[57157]=g,A[57154]=s}else{if((g=g+A[57155]|0)>>>0<=r>>>0)break A;A[f+4>>2]=1&a|r|2,s=g-r|0,A[(n=f+r|0)+4>>2]=1|s,A[57155]=s,A[57158]=n}s=f}else{if(r>>>0<256||g>>>0>=r+4>>>0&&(s=f,g-r>>>0<=A[57272]<<1>>>0))break A;s=0}return s?s+8|0:(f=m0(t))?(MA(f,e,t>>>0>(s=(3&(s=A[e-4>>2])?-4:-8)+(-8&s)|0)>>>0?s:t),SA(e),f):0}function z8(){var e,t,r=0,a=0;return e=ae(12),A[e>>2]=22050,t=ae(432),A[(a=t)+4>>2]=0,A[a+8>>2]=0,A[a>>2]=132304,A[a+32>>2]=0,A[a+12>>2]=0,A[a+16>>2]=0,A[a+20>>2]=0,A[a+24>>2]=0,QA(a+40|0,0,376),A[a+420>>2]=0,A[a+424>>2]=-1,l[a+416|0]=1,r=QA(ae(408),0,408),A[a+28>>2]=r,l[r+8|0]=1,A[e+4>>2]=a,r=ae(1096),A[r+8>>2]=22050,A[r+4>>2]=22050,A[r>>2]=132352,A[r+64>>2]=22050,A[r+56>>2]=0,A[r+60>>2]=0,A[r+32>>2]=0,A[r+36>>2]=0,A[r+24>>2]=22050,A[r+16>>2]=0,A[r+20>>2]=0,A[r+40>>2]=0,A[r+44>>2]=0,l[r+48|0]=0,A[r+128>>2]=0,A[r+132>>2]=0,B[r+96>>1]=0,A[r+72>>2]=22050,A[r+136>>2]=0,A[r+140>>2]=0,B[r+168>>1]=0,A[r+144>>2]=22050,A[r+200>>2]=0,A[r+204>>2]=0,A[r+208>>2]=0,A[r+212>>2]=0,A[r+216>>2]=22050,B[r+240>>1]=0,A[r+280>>2]=0,A[r+284>>2]=0,A[r+272>>2]=0,A[r+276>>2]=0,A[r+288>>2]=22050,B[r+312>>1]=0,A[r+344>>2]=0,A[r+348>>2]=0,A[r+352>>2]=0,A[r+356>>2]=0,A[r+360>>2]=22050,B[r+384>>1]=0,A[r+416>>2]=0,A[r+420>>2]=0,A[r+424>>2]=0,A[r+428>>2]=0,A[r+432>>2]=22050,B[r+456>>1]=0,A[r+488>>2]=0,A[r+492>>2]=0,A[r+496>>2]=0,A[r+500>>2]=0,A[r+504>>2]=22050,B[r+528>>1]=1,A[r+560>>2]=0,A[r+564>>2]=0,A[r+568>>2]=0,A[r+572>>2]=0,B[r+600>>1]=0,A[r+576>>2]=22050,A[r+640>>2]=0,A[r+644>>2]=0,A[r+632>>2]=0,A[r+636>>2]=0,B[r+680>>1]=0,A[r+656>>2]=22050,A[r+648>>2]=22050,A[r+720>>2]=0,A[r+724>>2]=0,A[r+712>>2]=0,A[r+716>>2]=0,B[r+752>>1]=0,A[r+728>>2]=22050,A[r+792>>2]=0,A[r+796>>2]=0,A[r+784>>2]=0,A[r+788>>2]=0,B[r+824>>1]=0,A[r+800>>2]=22050,A[r+864>>2]=0,A[r+868>>2]=0,A[r+856>>2]=0,A[r+860>>2]=0,A[r+872>>2]=22050,B[r+896>>1]=0,A[r+936>>2]=0,A[r+940>>2]=0,A[r+928>>2]=0,A[r+932>>2]=0,B[r+968>>1]=0,A[r+944>>2]=22050,A[r+1008>>2]=0,A[r+1012>>2]=0,A[r+1e3>>2]=0,A[r+1004>>2]=0,B[r+1040>>1]=0,A[r+1016>>2]=22050,A[r+1088>>2]=0,A[(a=r+1080|0)>>2]=0,A[a+4>>2]=0,A[(a=r+1072|0)>>2]=0,A[a+4>>2]=0,A[e+8>>2]=r,xA[A[A[r>>2]+4>>2]](r,t),e}function Y8(e,t,r){var a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0;A:if(m=A[50759]){if(a=A[50980],s=T(a,80)+222176|0,(0|(c=(0|(s=(0|(s=(A[s+12>>2]+A[s>>2]|0)/(0|e)|0))<(0|(b=((0|T(A[50754],19))/40<<16)/(0|e)|0))?s:b))>=399?399:s))>=0&&(QA(t,0,4+(c<<2)|0),a=A[50980]),(0|a)>=0)for(E=A[50801];;){if(n=T(g,80)+222176|0,A[n+4>>2]&&(f=A[n>>2])){if(v=f+A[n+12>>2]|0,a=1+((f-A[n+8>>2]|0)/(0|e)|0)|0,(0|f)>(0|(a=T(s=(0|a)<=1?1:a,e))))for(;A[(I=(s<<2)+t|0)>>2]=A[I>>2]+T(A[n+4>>2],C[((f-a|0)/(A[n+8>>2]>>8)|0)+E|0]),s=s+1|0,(0|f)>(0|(a=e+a|0)););if(!((0|a)>=(0|v)))for(;A[(I=(s<<2)+t|0)>>2]=A[I>>2]+T(A[n+4>>2],C[((a-f|0)/(A[n+12>>2]>>8)|0)+E|0]),s=s+1|0,(0|v)>(0|(a=e+a|0)););}if(!((0|(g=g+1|0))<=A[50980]))break}if(s=1,!((0|(n=65536e3/(0|e)|0))<=0||(0|(a=T(A[55565],10)))<=0))for(n=(0|a)/(0|n)|0;A[(f=(s<<2)+t|0)>>2]=A[f>>2]+a,s=s+1|0,(0|(a=a-n|0))>0;);if((0|g)<=8)for(;s=(a=g<<2)+203216|0,n=T(g,80)+222176|0,f=A[n+4>>2]>>14,A[s>>2]=(0|T(T(f,f),5))/2,r?a=A[a+203264>>2]:(f=a+203264|0,a=A[n>>2]/(0|e)|0,A[f>>2]=a),(0|a)>=(0|b)&&(A[s>>2]=0),(0|(g=g+1|0))!=9;);if(s=0,(0|c)>=0)for(a=0;n=A[(g=(a<<2)+t|0)>>2]>>15,n=T(n,n)>>8,A[g>>2]=n,(0|s)<=524287999&&(A[g>>2]=T(n,C[344+((s>>19)+m|0)|0])>>13),s=e+s|0,g=(0|a)!=(0|c),a=a+1|0,g;);if(A[t+4>>2]=(0|T(A[t+4>>2],C[203300]?6:10))/8,1&r)for(e=A[50826],a=1;;){if(A[(r=a<<2)+203312>>2]=A[t+r>>2]-A[e+r>>2]>>3,(0|(r=a+1|0))==30)break A;A[(r<<=2)+203312>>2]=A[t+r>>2]-A[e+r>>2]>>3,a=a+2|0}}else c=1;return c}function N8(e,t,r,a){var s,n=0,g=0;F=s=F-176|0,l[0|e]=0,B[s+80>>1]=24320,A[s+104>>2]=0,A[s+108>>2]=0,l[82+(k0(r,n=s+80|2)+s|0)|0]=0;A:{e:{if(!a){if(a=s+80|1,A[s+12>>2]=a,N0(t,s+12|0,s+16|0,s+104|0,0,0)||(A[s+12>>2]=n,N0(t,s+12|0,s+16|0,s+104|0,0,0)||(l[s+81|0]=32,oe(t,n,s+16|0,60,0,0,0))),(r=C[s+16|0])&&(0|r)!=21)break e;r:{if(A[t+212>>2]!=25966){if(Pr(85719,188772,189296),l[s+81|0]=95,A[s+12>>2]=a,N0(A[47193],s+12|0,s+16|0,s+104|0,0,0)||(A[s+12>>2]=n,N0(A[47193],s+12|0,s+16|0,s+104|0,0,0)),C[s+16|0])break r;W0(A[A[32972]+60>>2]),r=C[s+16|0]}if(255&r)break e;t=C[87124]|C[87125]<<8|C[87126]<<16|C[87127]<<24,r=C[87120]|C[87121]<<8|C[87122]<<16|C[87123]<<24,l[0|e]=r,l[e+1|0]=r>>>8,l[e+2|0]=r>>>16,l[e+3|0]=r>>>24,l[e+4|0]=t,l[e+5|0]=t>>>8,l[e+6|0]=t>>>16,l[e+7|0]=t>>>24,l[e+16|0]=C[87136],t=C[87132]|C[87133]<<8|C[87134]<<16|C[87135]<<24,r=C[87128]|C[87129]<<8|C[87130]<<16|C[87131]<<24,l[e+8|0]=r,l[e+9|0]=r>>>8,l[e+10|0]=r>>>16,l[e+11|0]=r>>>24,l[e+12|0]=t,l[e+13|0]=t>>>8,l[e+14|0]=t>>>16,l[e+15|0]=t>>>24;break A}a=s+16|0,n=s+104|0,F=r=F-112|0,(g=A[47193])?(me(g,a,n,-1,0),$e(n=a,a=r+48|0),t=A[t+212>>2],l[r+43|0]=t>>>24,l[0|(g=(n=r+43|0)+(t>>>0>16777215)|0)]=t>>>16,l[0|(g=g+!!(16711680&t)|0)]=t>>>8,l[0|(g=g+!!(65280&t)|0)]=t,l[g+!!(255&t)|0]=0,A[r+16>>2]=85719,A[r+24>>2]=n,A[r+20>>2]=a,nA(e,85662,r+16|0)):(me(t,a,n,-1,0),$e(a,t=r+48|0),A[r>>2]=t,nA(e,85451,r)),F=r+112|0,W0(A[A[32972]+60>>2]);break A}if(A[s+12>>2]=n,N0(t,s+12|0,s+16|0,s+104|0,0,0),!C[s+16|0])break A}me(r=t,t=s+16|0,s+104|0,-1,0),$e(r=t,t=s+112|0),A[s>>2]=t,nA(e,85451,s)}return F=s+176|0,e}function X2(e,t){var r,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0;if(F=r=F-112|0,A[r+72>>2]=-1,A[(a=r- -64|0)>>2]=-1,A[a+4>>2]=-1,A[r+56>>2]=-1,A[r+60>>2]=-1,A[r+48>>2]=-1,A[r+52>>2]=-1,A[r+40>>2]=-1,A[r+44>>2]=-1,A[r+32>>2]=-1,A[r+36>>2]=-1,A[r+24>>2]=-1,A[r+28>>2]=-1,A[r+16>>2]=-1,A[r+20>>2]=-1,(0|t)>0){for(n=A[r+72>>2],g=A[r+68>>2],f=A[r+64>>2],c=A[r+60>>2],I=A[r+56>>2],b=A[r+52>>2],m=A[r+48>>2],E=A[r+44>>2],v=A[r+40>>2],D=A[r+36>>2],Y=A[r+32>>2],O=A[r+28>>2],R=A[r+24>>2],L=A[r+20>>2],U=A[r+16>>2];s=n,n=(0|(n=A[(a=134912+(J<<6)|0)+60>>2]))<0?s:n,s=g,g=(0|(g=A[a+56>>2]))<0?s:g,s=f,f=(0|(f=A[a+52>>2]))<0?s:f,s=c,c=(0|(c=A[a+48>>2]))<0?s:c,s=I,I=(0|(I=A[a+44>>2]))<0?s:I,s=b,b=(0|(b=A[a+40>>2]))<0?s:b,s=m,m=(0|(m=A[a+36>>2]))<0?s:m,s=E,E=(0|(E=A[a+32>>2]))<0?s:E,s=v,v=(0|(v=A[a+28>>2]))<0?s:v,s=D,D=(0|(D=A[a+24>>2]))<0?s:D,s=Y,Y=(0|(Y=A[a+20>>2]))<0?s:Y,s=O,O=(0|(O=A[a+16>>2]))<0?s:O,s=R,R=(0|(R=A[a+12>>2]))<0?s:R,s=L,L=(0|(L=A[a+8>>2]))<0?s:L,U=(0|(a=A[a+4>>2]))<0?U:a,(0|(J=J+1|0))!=(0|t););A[r+72>>2]=n,A[r+68>>2]=g,A[r+64>>2]=f,A[r+60>>2]=c,A[r+56>>2]=I,A[r+52>>2]=b,A[r+48>>2]=m,A[r+44>>2]=E,A[r+40>>2]=v,A[r+36>>2]=D,A[r+32>>2]=Y,A[r+28>>2]=O,A[r+24>>2]=R,A[r+20>>2]=L,A[r+16>>2]=U}for(t=0;;){if((0|(a=A[(n=t<<2)+(r+16|0)>>2]))!=A[(n=n+134848|0)>>2]){l[r+80|0]=0;A:{e:switch(t-1|0){case 4:A[47201]=a-1;break A;case 5:A[47200]=a;break A;case 0:case 1:case 2:case 3:case 11:break e;default:break A}A[r+4>>2]=a,A[r>>2]=1,A[r+8>>2]=l[t+102812|0],nA(r+80|0,91942,r)}A[n>>2]=a,a=r+80|0,cA(A[e>>2]+189424|0,a),A[e>>2]=A[e>>2]+lA(a)}if((0|(t=t+1|0))==15)break}F=r+112|0}function ti(e){var t,r,a,s=0,n=0,g=0,f=0;for(s=17,A[e+328>>2]=17,A[e+224>>2]=0,A[e+216>>2]=1105,A[e+220>>2]=1072,A[e+600>>2]=1056,A[e+8180>>2]=105296,g=QA(e+344|0,0,256),l[e+393|0]=1,l[e+365|0]=1,l[e+360|0]=1,l[e+545|0]=1,l[e+529|0]=1,l[e+391|0]=1,l[e+379|0]=1,l[e+374|0]=1,l[e+489|0]=1,l[e+487|0]=1,l[e+398|0]=1,l[e+387|0]=1,l[e+388|0]=2,l[e+389|0]=1,l[e+390|0]=1,l[e+385|0]=2,l[e+383|0]=2,l[e+368|0]=1,l[e+369|0]=2,n=104224;l[0|(s=s+g|0)]=4|C[0|s],s=g+C[n+1|0]|0,l[0|s]=4|C[0|s],s=g+C[n+2|0]|0,l[0|s]=4|C[0|s],s=C[0|(n=n+3|0)],(0|n)!=104251;);l[e+386|0]=8|C[e+386|0],l[e+382|0]=8|C[e+382|0],l[e+384|0]=8|C[e+384|0],l[e+369|0]=16|C[e+369|0],l[e+370|0]=16|C[e+370|0],l[e+371|0]=16|C[e+371|0],n=C[e+361|0],g=C[e+362|0],s=C[e+363|0],f=C[e+364|0],t=C[e+366|0],r=C[e+367|0],l[e+372|0]=16|C[e+372|0],l[e+373|0]=16|C[e+373|0],l[e+375|0]=16|C[e+375|0],l[e+376|0]=16|C[e+376|0],l[e+377|0]=16|C[e+377|0],l[e+378|0]=16|C[e+378|0],l[e+380|0]=16|C[e+380|0],l[e+381|0]=16|C[e+381|0],l[e+383|0]=16|C[e+383|0],l[e+385|0]=16|C[e+385|0],a=C[e+388|0],l[e+367|0]=48|r,l[e+366|0]=40|t,l[e+364|0]=48|f,l[e+363|0]=48|s,l[e+362|0]=48|g,l[e+361|0]=48|n,l[e+388|0]=80|a,n=C[e+390|0],g=C[e+391|0],s=C[e+393|0],l[e+360|0]=128|C[e+360|0],f=C[e+365|0],l[e+393|0]=192|s,l[e+365|0]=128|f,l[e+368|0]=128|C[e+368|0],l[e+374|0]=128|C[e+374|0],l[e+379|0]=128|C[e+379|0],l[e+387|0]=128|C[e+387|0],s=C[e+389|0],l[e+391|0]=192|g,l[e+390|0]=192|n,l[e+389|0]=128|s,l[e+529|0]=128|C[e+529|0],l[e+545|0]=128|C[e+545|0],l[e+489|0]=128|C[e+489|0],l[e+487|0]=128|C[e+487|0],l[e+398|0]=128|C[e+398|0]}function N0(e,t,r,a,s,n){var g,f=0,c=0,I=0,b=0,m=0,E=0;F=g=F-192|0,f=m=A[t>>2];A:{e:{for(;c=1,(0|(I=l[0|f]))>=0||(c=2,I>>>0<4294967264||(c=I>>>0<4294967280?3:4)),!(C[0|(I=c+f|0)]!=32|C[I+1|0]!=46);){if(b-160>>>0<4294967135)break e;MA((E=g+32|0)+b|0,f,c),l[(c=c+b|0)+E|0]=46,f=I+3|0,b=c+1|0}if(b){for(c=0;I=c,c=c+1|0,223&C[f+I|0];);if(!((E=I+b|0)+1>>>0>160)&&(MA((c=g+32|0)+b|0,f,I),l[c+E|0]=0,_1(e,c,f,r,a,s,n))){A[a>>2]=128|A[a>>2],A[33264]=b,e=1;break A}}}for(f=0;;){if(m=(c=m)+1|0,223&(c=C[0|c]))if(!f|(0|c)!=46|l[31+(f+g|0)|0]-48>>>0>=10){if(l[(g+32|0)+f|0]=c,c=159,(0|(f=f+1|0))!=159)continue}else c=f;else c=f;break}l[(f=g+32|0)+c|0]=0,f=_1(e,f,m,r,a,s,n);e:if(8&C[a+3|0]){if(!c0(r,I=e+268|0)){if(I=A[e+288>>2]+1|0,A[e+288>>2]=I,(0|I)<4)break e;l[0|r]=0;break e}A0(I,r,20),A[e+288>>2]=1}else A[e+288>>2]=0;e:{if(!f){if(f=0,8&C[a+5|0]&&(I=NA(g+28|0,f=g+32|C[g+32|0]==95),S8(e,A[g+28>>2],r),f=f+I|0),!(c>>>0<2|f)){if(l[0|r]=0,!(16&s&&C[0|(f=31+(c+g|0)|0)]==101)&&(!(4096&s)||C[0|(f=(c=(g+32|0)+c|0)-1|0)]!=C[c-2|0]))break e;l[0|f]=0,f=_1(e,g+32|0,m,r,a,s,n)}if(!f)break e}if(b=A[a>>2],C[e+172|0]&&(b^=536870912,A[a>>2]=b),e=1,!(536870912&b))break A;2&s&&(B[66448]=8192,A[g+16>>2]=r,nA(132898,87470,g+16|0),e=A[t>>2],A[t>>2]=132898,8&C[188788]&&(MA(t=g+32|0,a=e,e=f-e|0),l[e+t|0]=0,A[g+4>>2]=132898,e=A[47195],A[g>>2]=t,n0(e,87652,g)))}l[0|r]=0,e=0}return F=g+192|0,e}function ri(e,t){var r=0,a=0,s=0;r=31&e;A:{e:{r:{if((0|(e&=96))==96)e=-1;else{if((0|e)!=64)break r;e=1}if(r>>>0>=15)break A;t=A[203136+(r<<2)>>2]+T(e,t)|0;break e}if(r>>>0>=15)break A}e=A[(a=r<<2)+105616>>2],A[a+203136>>2]=(0|t)>=0?(0|e)>(0|t)?t:e:0}A:{e:{r:{i:{s:switch(r-1|0){case 5:if(!(e=A[50759]))break e;A[54728]=A[50982],t=A[50979],r=A[50978],QA(205184,0,11e3),A[51293]=0,t=(r=(s=(0|(a=A[50789]))>0)?130:(0|r)>=5499?5499:r)?s?a:(0|t)>=100?100:t:0,A[50755]=t,r=(0|T(r,A[50754]))/1e3|0,A[51292]=r,A[54729]=(0|t)>20?r<<1:t?r:0,A[33037]=(0|T(500-t|0,(0|T(C[A[50797]+105596|0],(0|T(A[50787],55))/100|0))/16|0))/500;break i;case 0:break s;case 2:case 12:break A;case 4:break r;default:break e}if(!(e=A[50759]))break e}return t=256,(0|(r=(0|(r=A[50785]))>=101?101:r))>=51&&(t=256+(((T(r,25)-1250&65535)>>>0)/50|0)|0),B[e+164>>1]=(0|T(B[e+236>>1],t))/256,B[e+166>>1]=(0|T(B[e+238>>1],t))/256,B[e+168>>1]=(0|T(B[e+240>>1],t))/256,B[e+170>>1]=(0|T(B[e+242>>1],t))/256,B[e+172>>1]=(0|T(B[e+244>>1],t))/256,B[e+174>>1]=(0|T(B[e+246>>1],t))/256,e=A[50790],B[102e3]=(0|T(B[102036],T(e,-3)+256|0))/256,void(B[101999]=(0|T(B[102035],T(e,-6)+256|0))/256)}A[50759]&&(A[54728]=A[50982],e=A[50979],t=A[50978],QA(205184,0,11e3),A[51293]=0,e=(t=(a=(0|(r=A[50789]))>0)?130:(0|t)>=5499?5499:t)?a?r:(0|e)>=100?100:e:0,A[50755]=e,t=(0|T(t,A[50754]))/1e3|0,A[51292]=t,A[54729]=(0|e)>20?t<<1:e?t:0,A[33037]=(0|T(500-e|0,(0|T(C[A[50797]+105596|0],(0|T(A[50787],55))/100|0))/16|0))/500)}return}A[33037]=(0|T(C[A[50797]+105596|0],(0|T(A[50787],55))/100|0))/16}function ai(e,t,r){var a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0;r&&(A[r>>2]=0);A:{e:if(!((0|(a=l[0|e]))<0)){for(;;){if((0|(n=255&a))==32|n-9>>>0<5){if((0|(a=l[0|(e=e+1|0)]))>=0)continue;break e}break}if(!(255&a))break A}for(;;){if((0|(a=c=255&a))==32|a-9>>>0<5)break A;if((0|c)!=124||(0|(a=C[0|(n=e+1|0)]))==124){e:{if((0|(m=A[36115]))>=2){for(a=1,n=-1,I=0;;){r:if(!(!(b=A[144464+(a<<2)>>2])|C[b+11|0]==15)){f=A[b>>2];i:{s:{if(c>>>0>=33){if(E=0,g=0,(255&f)==(0|c)&&(g=1,(s=C[e+1|0])>>>0<33|(0|s)!=(f>>>8&255)||(g=2,(s=C[e+2|0])>>>0<33|(0|s)!=(f>>>16&255)||(g=(s=(s=C[e+3|0])>>>0>32&(0|s)==(f>>>24|0))?4:3,E=0-s|0))),(0|n)>=(0|g))break r;if(s=4,!(1&E))break s;break i}if(g=0,(0|n)>=0)break r}if(f>>>((s=g)<<3)&255)break r}I=C[b+10|0],n=s}if((0|m)==(0|(a=a+1|0)))break}if(I)break e}return r&&NA(r,e),void(l[0|t]=0)}l[0|t]=I,e=((0|n)<=1?1:n)+e|0,t=n=t+1|0;e:if((0|I)==21){r:if((0|(s=C[0|e]))==32|s-9>>>0<5)a=n;else if(a=n,s)for(;;){if(l[0|a]=We(s),a=a+1|0,(0|(s=C[0|(e=e+1|0)]))==32|s-9>>>0<5)break r;if(!s)break}if(l[0|a]=0,!s){if(t=a,c0(n,85593))break e;return void(l[0|n]=0)}l[0|a]=124,t=a+1|0}a=C[0|e]}else e=n;if(!(255&a))break}}l[0|t]=0}function T8(e,t){var r=0,a=0,s=0,n=0,g=0;A:{e:{r:{i:{s:switch((0|(r=A[e+4>>2]))==A[e+104>>2]?r=WA(e):(A[e+4>>2]=r+1,r=C[0|r]),r-43|0){case 0:case 2:break s;default:break i}if(n=(0|r)==45,g=!t,(0|(r=A[e+4>>2]))==A[e+104>>2]?r=WA(e):(A[e+4>>2]=r+1,r=C[0|r]),g|(t=r-58|0)>>>0>4294967285)break r;if(A[e+116>>2]<0)break e;A[e+4>>2]=A[e+4>>2]-1;break e}t=r-58|0}if(!(t>>>0<4294967286)){if((t=r-48|0)>>>0<10){for(;s=(0|(a=(a=T(a,10)+r|0)-48|0))<214748364,(0|(t=A[e+4>>2]))==A[e+104>>2]?r=WA(e):(A[e+4>>2]=t+1,r=C[0|t]),s&(t=r-48|0)>>>0<=9;);s=a>>31}r:if(!(t>>>0>=10))for(;;){if(t=(a=DA(a,s,10,0))+r|0,r=_,r=t>>>0<a>>>0?r+1|0:r,a=t-48|0,s=r-(t>>>0<48)|0,(0|(t=A[e+4>>2]))==A[e+104>>2]?r=WA(e):(A[e+4>>2]=t+1,r=C[0|t]),(t=r-48|0)>>>0>9)break r;if(!(a>>>0<2061584302&(0|s)<=21474836|(0|s)<21474836))break}if(t>>>0<10)for(;(0|(t=A[e+4>>2]))==A[e+104>>2]?t=WA(e):(A[e+4>>2]=t+1,t=C[0|t]),t-48>>>0<10;);(0|(t=A[e+116>>2]))>0|(0|t)>=0&&(A[e+4>>2]=A[e+4>>2]-1),e=a,a=n?0-e|0:e,s=n?0-(!!(0|e)+s|0)|0:s;break A}}if(s=-2147483648,!(A[e+116>>2]<0))return A[e+4>>2]=A[e+4>>2]-1,_=-2147483648,0}return _=s,a}function Br(e){var t=0,r=0,a=0,s=0;if(A[36432]=110,A[36433]=100,A[36434]=450,A[36430]=5,t=A[203136+((0|e)==2?32:8)>>2],a=A[32972],(0|(r=A[a+84>>2]))>0&&(t=(0|T(t,r))/100|0),r=(0|t)>=359?359:t,r=(0|(t=(0|t)>=450?450:t))>399?6:(0|t)>379?7:C[((0|r)<=80?80:r)+101856|0],1&e&&(A[32526]=(0|T(r,A[a+72>>2]))/256,A[32527]=(0|T(r,A[a+76>>2]))/256,A[32528]=(0|T(r,A[a+80>>2]))/256,r>>>0>7||(s=r-1|0,A[32528]=s,A[32526]=r,A[32527]=s)),2&e){e=A[a+72>>2];A:{e:{r:{i:{s:{o:{f:{u:{if((0|t)>=351)a=t-350|0,A[36432]=85-(((255&a)>>>0)/3|0)&255,a=60-(a>>>3|0)|0;else{if((0|t)<251)break u;a=t-250|0,A[36432]=110-(a>>>2|0),a=110-(a>>>1|0)|0}if(A[36433]=a,e=(0|T(e,r))/256|0,A[36431]=110+((0|T(e,150))/128|0),t>>>0<=349)break f;if(r=t-350|0,A[36431]=C[r+102224|0],t>>>0<390)break s;if(A[36434]=450+((t+112<<24>>24)/-2<<24>>24),t>>>0<441)break o;A[36434]=860-t,e=12;break e}e=(0|T(e,r))/256|0,A[36431]=(0|t)>=170?110+((0|T(e,150))/128|0)|0:128+((e<<7)/130|0)|0}e=(e<<8)/115|0;break e}if(e=12,t>>>0>430)break e;if(e=13,t>>>0<=400)break i;break e}if(e=(e<<8)/115|0,A[36428]=e,t>>>0<375)break r}e=14;break e}if((0|t)<351)break A;e=C[r+102336|0]}A[36428]=e}A[36429]=(0|e)<=16?16:e}}function O8(e,t,r){var a,s,n,g;a=.000244140625*+A[50767],Q[r>>3]=a,Q[r+40>>3]=.015625*+A[e+112>>2],Q[r+48>>3]=.015625*+A[e+276>>2],Q[r+56>>3]=.00390625*+(0|T(B[e+166>>1],B[t+4>>1]))+ +B[e+220>>1],Q[r+64>>3]=.00390625*+(0|T(B[e+168>>1],B[t+6>>1]))+ +B[e+222>>1],Q[r+72>>3]=.00390625*+(0|T(B[e+170>>1],B[t+8>>1]))+ +B[e+224>>1],Q[r+80>>3]=.00390625*+(0|T(B[e+172>>1],B[t+10>>1]))+ +B[e+226>>1],Q[r+88>>3]=.00390625*+(0|T(B[e+174>>1],B[t+12>>1]))+ +B[e+228>>1],s=B[e+230>>1],n=B[e+176>>1],g=B[t+14>>1],A[r+112>>2]=0,A[r+116>>2]=1080623104,A[r+104>>2]=0,A[r+108>>2]=1081032704,Q[r+96>>3]=.00390625*+(0|T(n,g))+ +(0|s),C[t+40|0]?(A[r+184>>2]=0,A[r+188>>2]=1072693248,Q[r+104>>3]=C[t+40|0]<<1):(A[r+184>>2]=0,A[r+188>>2]=0),Q[r+120>>3]=.00390625*+B[e+202>>1]*+(C[t+35|0]<<1),Q[r+128>>3]=.00390625*+B[e+204>>1]*+(C[t+36|0]<<1),Q[r+136>>3]=.00390625*+B[e+206>>1]*+(C[t+37|0]<<1),t=C[t+38|0],e=B[e+208>>1],A[r+176>>2]=0,A[r+180>>2]=1079574528,A[r+160>>2]=0,A[r+164>>2]=1083129856,A[r+152>>2]=0,A[r+156>>2]=1083129856,A[r+352>>2]=0,A[r+356>>2]=1072693248,A[r+168>>2]=0,A[r+172>>2]=1079574528,Q[r+144>>3]=.00390625*+(0|e)*+(t<<1),e=A[50779],Q[r+368>>3]=a,Q[r+360>>3]=+(0|e)/100*3}function Er(e){var t=0;V2(e,A2(e));A:{e:{r:{i:{s:{o:{f:{u:{g:{n:{if((0|(e=-1048576&_))<268435455|(0|e)<=268435455){d:{p:{if((0|e)<33554431|(0|e)<=33554431){if((0|e)<8388607|(0|e)<=8388607){if(t=524328,!0&(0|e)==-2147483648)break A;if(0|(0|e)!=-2143289344)break e;return 557096}if(!0&(0|e)==8388608)break p;if(0|(0|e)!=16777216)break e;return 524358}if((0|e)>71303167)break d;if(!0&(0|e)==33554432)break r;if(0|(0|e)!=67108864)break e}return 266270}if(!0&(0|e)==71303168)break n;if(!0&(0|e)==134217728)break i;if(0|(0|e)!=138412032)break e;return 294942}if((0|e)<542113791|(0|e)<=542113791){if((0|e)<536870911|(0|e)<=536870911){if(!0&(0|e)==268435456)break s;if(0|(0|e)!=272629760)break e;return 299028}if(!0&(0|e)==536870912)break f;if(!0&(0|e)==538968064)break o;if(0|(0|e)!=541065216)break e;return 569389}if((0|e)<1075838975|(0|e)<=1075838975){if(!0&(0|e)==542113792)break n;if(0|(0|e)!=1073741824)break e;return 532520}if(!0&(0|e)==1075838976)break u;if(!0&(0|e)==1077936128)break g;if(0|(0|e)!=1078984704)break e}return 299038}return 565288}return 1581096}return 536621}return 1585197}return 266260}return 262174}return 2396190}t=16384}return t}function xr(e,t,r,a,s,n){var g,f,c=0,I=0,b=0,m=0;if(f=8388607&e,I=A[34456],c=C[0|(e=f+I|0)]|C[e+1|0]<<8){g=!(b=C[e+2|0]),e=A[36434]<<g,(0|r)<=0?r=c:(r=(0|T(A[50754],r))/1e3<<g,e=(0|e)<(0|(m=(0|T(r,e))/(0|c)|0))?m:e),s=(0|s)>0?(0|T(r,s))/256|0:r,r=(0|T(s,A[36431]))/256|0,r=(0|e)<(0|(r=(4&a)>>>2|0&&(0|r)>(0|s)?s:r))?r:e,b||(c=c>>>1|0,r=(0|r)/2|0);A:if(!((0|n)<0)){if(a=f+4|0,256&t)e=A[50758],A[36439]=e,A[(t=216192+(e<<4)|0)>>2]=7,A[t+8>>2]=a+I,A[t+4>>2]=c<<16|r,n=b|n<<8;else{if(e=A[50758],A[36439]=e,A[(e=216192+(e<<4)|0)>>2]=6,n=b|n<<8,A[e+12>>2]=n,A[e+8>>2]=a+I,I=e,e=T(t=c>>>2|0,3),s=(0|r)>(0|c),A[I+4>>2]=s?e:r,I=A[50758]+1|0,A[50758]=(0|I)<=169?I:0,(0|e)<(0|(r=s?r-e|0:0)))for(s=t<<1,b=a+(b?t:s)|0;t=A[50758],A[36439]=t,A[(t=216192+(t<<4)|0)>>2]=6,A[t+4>>2]=s,A[t+12>>2]=n,A[t+8>>2]=b+A[34456],t=A[50758]+1|0,A[50758]=(0|t)<=169?t:0,(0|e)<(0|(r=r-s|0)););if((0|r)<=0)break A;e=A[50758],A[36439]=e,A[(t=216192+(e<<4)|0)>>2]=6,A[t+4>>2]=r,A[t+8>>2]=A[34456]+(a+(c-r<<g)|0)}A[12+(216192+(e<<4)|0)>>2]=n,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0}}}function MA(e,t,r){var a,s=0,n=0;if(r>>>0>=512)return ue(0|e,0|t,0|r),e;a=e+r|0;A:if(3&(e^t))if(a>>>0<4)r=e;else if((s=a-4|0)>>>0<e>>>0)r=e;else for(r=e;l[0|r]=C[0|t],l[r+1|0]=C[t+1|0],l[r+2|0]=C[t+2|0],l[r+3|0]=C[t+3|0],t=t+4|0,s>>>0>=(r=r+4|0)>>>0;);else{e:if(3&e)if(r)for(r=e;;){if(l[0|r]=C[0|t],t=t+1|0,!(3&(r=r+1|0)))break e;if(!(r>>>0<a>>>0))break}else r=e;else r=e;if(!((s=-4&a)>>>0<64||(n=s+-64|0)>>>0<r>>>0))for(;A[r>>2]=A[t>>2],A[r+4>>2]=A[t+4>>2],A[r+8>>2]=A[t+8>>2],A[r+12>>2]=A[t+12>>2],A[r+16>>2]=A[t+16>>2],A[r+20>>2]=A[t+20>>2],A[r+24>>2]=A[t+24>>2],A[r+28>>2]=A[t+28>>2],A[r+32>>2]=A[t+32>>2],A[r+36>>2]=A[t+36>>2],A[r+40>>2]=A[t+40>>2],A[r+44>>2]=A[t+44>>2],A[r+48>>2]=A[t+48>>2],A[r+52>>2]=A[t+52>>2],A[r+56>>2]=A[t+56>>2],A[r+60>>2]=A[t+60>>2],t=t- -64|0,n>>>0>=(r=r- -64|0)>>>0;);if(r>>>0>=s>>>0)break A;for(;A[r>>2]=A[t>>2],t=t+4|0,s>>>0>(r=r+4|0)>>>0;);}if(r>>>0<a>>>0)for(;l[0|r]=C[0|t],t=t+1|0,(0|a)!=(0|(r=r+1|0)););return e}function we(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0;S(+e),t=0|M(1),M(0);A:{if((a=(t=t>>>20&2047)-969|0)>>>0<63)c=t;else{if((0|a)<0)return e+1;if(!(t>>>0<1033)){if(S(+e),a=0|M(1),r=0,!(0|M(0))&(0|a)==-1048576)break A;return t>>>0>=2047?e+1:(0|a)<0?(Q[(t=F-16|0)+8>>3]=12882297539194267e-247,12882297539194267e-247*Q[t+8>>3]):(Q[(t=F-16|0)+8>>3]=3105036184601418e216,3105036184601418e216*Q[t+8>>3])}}if(r=Q[14409],n=(r=(e=(r=(s=Q[14408]*e+r)-r)*Q[14411]+(r*Q[14410]+e))*e)*r*(e*Q[14415]+Q[14414]),r*=e*Q[14413]+Q[14412],S(+s),M(1),f=0|M(0),e=n+(r+(Q[(a=f<<4&2032)+115376>>3]+e)),g=A[(a=a+115384|0)>>2],t=(f<<13)+(t=A[a+4>>2])|0,t=(a=(a=g)+(g=0)|0)>>>0<g>>>0?t+1|0:t,!c)return-2147483648&f?(N(0,0|a),N(1,t+1071644672|0),(e=(s=(r=+H())*e)+r)<1&&(A[(t=F-16|0)+8>>2]=0,A[t+12>>2]=1048576,Q[t+8>>3]=22250738585072014e-324*Q[t+8>>3],e=(e=(n=e+1)+(s+(r-e)+(e+(1-n)))+-1)==0?0:e),e*=22250738585072014e-324):(N(0,0|a),N(1,t-1058013184|0),e=5486124068793689e288*((r=+H())*e+r)),e;N(0,0|a),N(1,0|t),r=(r=+H())*e+r}return r}function _e(e,t){var r,a=0,s=0,n=0,g=0;F=r=F-16|0;A:{if(Ee(84270,l[0|t])){if(s=2,Ee(t,43)||(s=C[0|t]!=114),s=Ee(t,120)?128|s:s,n=s=Ee(t,101)?524288|s:s,g=64|s,n=(0|(s=C[0|t]))==114?n:g,n=(0|s)==119?512|n:n,A[r>>2]=438,A[r+4>>2]=0,(e=0|gA(-100,0|e,32768|((0|s)==97?1024|n:n),0|r))>>>0>=4294963201&&(A[56798]=0-e,e=-1),(0|e)<0)break A;F=s=F-32|0;e:{r:{if(Ee(84270,l[0|t])){if(a=m0(1176))break r}else A[56798]=28;t=0;break e}QA(a,0,144),Ee(t,43)||(A[a>>2]=C[0|t]==114?8:4),C[0|t]==97?(1024&(t=0|i0(0|e,3,0))||(t|=1024,A[s+16>>2]=t,A[s+20>>2]=t>>31,i0(0|e,4,s+16|0)),t=128|A[a>>2],A[a>>2]=t):t=A[a>>2],A[a+80>>2]=-1,A[a+48>>2]=1024,A[a+60>>2]=e,A[a+44>>2]=a+152,8&t||(A[s>>2]=s+24,A[s+4>>2]=0,0|jA(0|e,21523,0|s)||(A[a+80>>2]=10)),A[a+40>>2]=10,A[a+36>>2]=11,A[a+32>>2]=12,A[a+12>>2]=13,C[227205]||(A[a+76>>2]=-1),A[a+56>>2]=A[56816],(t=A[56816])&&(A[t+52>>2]=a),A[56816]=a,t=a}if(F=s+32|0,a=t)break A;ZA(0|e)}else A[56798]=28;a=0}return F=r+16|0,a}function H8(e,t,r){var a,s=0,n=0,g=0,f=0,c=0;if(g=e,F=a=F-208|0,A[a+8>>2]=1,A[a+12>>2]=0,f=t<<2){for(A[a+16>>2]=4,A[a+20>>2]=4,t=4,s=4,n=2;e=t,t=(s+4|0)+t|0,A[(a+16|0)+(n<<2)>>2]=t,n=n+1|0,s=e,t>>>0<f>>>0;);if((e=(g+f|0)-4|0)>>>0<=g>>>0)n=0,t=1,e=0;else{for(n=1,t=1;3&~n?(aA[(a+16|0)+((s=t-1|0)<<2)>>2]>=e-g>>>0?zr(g,r,a+8|0,t,0,a+16|0):di(g,r,t,a+16|0),(0|t)!=1?(Wr(a+8|0,s),t=1):(Wr(a+8|0,1),t=0)):(di(g,r,t,a+16|0),Kr(a+8|0,2),t=t+2|0),n=1|(s=A[a+8>>2]),A[a+8>>2]=n,e>>>0>(g=g+4|0)>>>0;);n=s>>>0>1,e=A[a+12>>2]!=0}if(zr(g,r,a+8|0,t,0,a+16|0),n|(0|t)!=1|e)for(;(0|t)<=1?(Kr(s=a+8|0,e=xl(s)),n=A[a+8>>2],e=e+t|0):(Wr(s=a+8|0,2),A[a+8>>2]=7^A[a+8>>2],Kr(s,1),zr((c=g-4|0)-A[(f=a+16|0)+((e=t-2|0)<<2)>>2]|0,r,s,t-1|0,1,f),Wr(s,1),n=1|A[a+8>>2],A[a+8>>2]=n,zr(c,r,s,e,1,f)),t=e,g=g-4|0,A[a+12>>2]|(0|t)!=1|(0|n)!=1;);}F=a+208|0}function ii(e,t,r,a){var s,n=0,g=0,f=0;F=s=F-32|0,f=n=2147483647&a,g=n-1006698496|0;A:if(0|(n=n-1140785152|0)>>>0>g>>>0){if(n=r<<4|t>>>28,r=a<<4|r>>>28,(0|(t&=268435455))==134217728&!!(0|e)|t>>>0>134217728){g=r+1073741824|0,g=(n=n+1|0)?g:g+1|0;break A}if(g=r+1073741824|0,e|(0|t)!=134217728)break A;g=(e=1&n)>>>0>(n=e+n|0)>>>0?g+1|0:g}else(!r&(0|f)==2147418112?!(e|t):f>>>0<2147418112)?(n=0,g=2146435072,f>>>0>1140785151||(g=0,(f=f>>>16|0)>>>0<15249||(T0(s+16|0,e,t,r,n=65535&a|65536,f-15233|0),v2(s,e,t,r,n,15361-f|0),n=(t=A[s+8>>2])<<4,t=A[s+12>>2]<<4|t>>>28,r=A[s>>2],f=g=A[s+4>>2],n|=g>>>28,g=t,(0|(e=268435455&f))==134217728&!!(0|(t=r|!!(A[s+16>>2]|A[s+24>>2]|A[s+20>>2]|A[s+28>>2])))|e>>>0>134217728?g=(n=n+1|0)?g:g+1|0:t|(0|e)!=134217728||(g=(e=n)>>>0>(n=n+(1&n)|0)>>>0?g+1|0:g)))):(n=r<<4|t>>>28,g=524287&(e=a<<4|r>>>28)|2146959360);return F=s+32|0,N(0,0|n),N(1,-2147483648&a|g),+H()}function P8(e){var t,r=0,a=0,s=0,n=0,g=0;if(S(+e),g=0|M(1),s=0|M(0),(0|(n=g>>>20&2047))==2047)return(e*=1)/e;if(!(a=s<<1)&(0|(r=g<<1|s>>>31))==2145386496|r>>>0<2145386496)return!a&(0|r)==2145386496?0*e:e;if(n)r=1048575&g|1048576;else{if(n=0,a=s<<12,(0|(r=g<<12|s>>>20))>0|(0|r)>=0)for(;n=n-1|0,r=r<<1|a>>>31,a<<=1,(0|r)>0|(0|r)>=0;);a=31&(r=1-n|0),(63&r)>>>0>=32?(r=s<<a,s=0):(r=(1<<a)-1&s>>>32-a|g<<a,s<<=a)}if(a=s,(0|n)>1023){for(;;){if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*e;if(r=r<<1|a>>>31,a<<=1,!((0|(n=n-1|0))>1023))break}n=1023}if(!((0|(s=r+-1048576|0))<0||(r=s)|a))return 0*e;if((0|r)==1048575|r>>>0<1048575)for(;n=n-1|0,s=r>>>0<524288,r=r<<1|a>>>31,a<<=1,s;);return t=-2147483648&g,(0|n)>0?r=r+-1048576|n<<20:(s=1-n|0,g=r,n=a,a=31&s,(63&s)>>>0>=32?(r=0,a=g>>>a|0):(r=g>>>a|0,a=((1<<a)-1&g)<<32-a|n>>>a)),N(0,0|a),N(1,r|t),+H()}function B2(e,t,r,a,s){var n,g=0,f=0;F=n=F-160|0;A:{e:{r:{i:switch((g=C[t+10|0])-15|0){case 6:break r;case 0:break i;default:break e}l[0|e]=0;break A}A[n>>2]=T(C[r+7|0],44)+137856,nA(e,86002,n),e=lA(e)+e|0;break A}if(a){if(l[n+140|0]=0,r?V0(0,0,r,n+8|0,0):pi(g,n+8|0),r=n+140|0,g=C[n+140|0]){if((0|g)==32){l[0|e]=0;break A}224&(g=g<<24>>24)||(s&&(A[s>>2]=g),r=n+141|0)}if(!((0|(s=lA(r)))<=0)){e=cA(e,r)+s|0,l[0|e]=0;break A}}s=0;e:if(!(!(r=255&(g=A[t>>2]))|(0|r)==47)){if(a){if((0|(f=255&g))==95)break e;r:{i:{if((0|f)==35){if(f=3,C[t+11|0]!=2)break i;break e}if((f=r-32|0)>>>0>95)break r}r=y[93952+(f<<1)>>1]}s=k0(r,e)}else l[0|e]=g,s=1;for(;;){if(!(r=255&(g>>=8))|(0|r)==47)break e;if(a){if((0|r)==35&C[t+11|0]==2)break e;if(r-48>>>0<10)continue;(f=r-32|0)>>>0<=95&&(r=y[93952+(f<<1)>>1]),s=k0(r,e+s|0)+s|0}else l[e+s|0]=g,s=s+1|0}}l[0|(e=e+s|0)]=0}return F=n+160|0,e}function Qt(e){var t,r=0;t=e,r=131280;A:{e:{if(!((0|e)<=1023||(r=131300,e>>>0<1328||(r=131320,e>>>0<1424||(r=131340,e>>>0<1536||(r=131360,e>>>0<1792||(r=131380,e>>>0<1872||(r=131400,e>>>0<2432||(r=131420,e>>>0<2560||(r=131440,e>>>0<2688||(r=131460,e>>>0<2816||(r=131480,e>>>0<2944||(r=131500,e>>>0<3072||(r=131520,e>>>0<3200||(r=131540,e>>>0<3328||(r=131560,e>>>0<3456||(r=131580,e>>>0<3584||(r=131600,e>>>0<3712||(r=131620,e>>>0<3840||(r=131640,e>>>0<4096||(r=131660,e>>>0<4256||(r=131680,e>>>0<4352||(r=131700,e>>>0<4608||(r=131720,e>>>0<5024||(r=131740,e>>>0<10496||(r=131760,e>>>0<12544||(r=131780,e>>>0<40960))))))))))))))))))))))))))){if(e>>>0>=55296)break e;r=131800}if((0|t)>=y[(e=r)+8>>1])break A}e=0}return e}function S8(e,t,r){var a,s=0,n=0,g=0,f=0;F=a=F-208|0,l[a+80|0]=0;A:{if((s=t-224|0)>>>0<=158)t=101072+(s<<1)|0;else{if((t=t-592|0)>>>0>88)break A;t=101392+(t<<1)|0}if(t=y[t>>1]){if(g=t<<16>>16,f=(s=63&t)>>>0>37?s+59|0:B[101584+(s<<1)>>1],s=t>>>6|0,(0|g)<0)s=59+(63&s)|0,t=t>>>12&7;else{if(!(n=31&s))break A;s=0,t=t>>>11&15}(n=dA(e,A[129920+(n<<3)>>2],a+112|0))&&ml(e,f,a+176|0)&&(t&&4096&dA(e,A[129920+(t<<3)>>2],a+80|0)&&(r=lA(t=cA(r,a+80|0)),l[a+80|0]=0,r=t+r|0),s?(ml(t=e,s,e=a+144|0),A[a+68>>2]=a+80,A[a- -64>>2]=e,A[a+60>>2]=6,A[a+52>>2]=23,A[a+56>>2]=a+176,A[a+48>>2]=a+112,nA(r,84101,a+48|0)):(0|g)<0?cA(r,a+176|0):1&A[e+144>>2]|4096&n?(A[a+36>>2]=23,A[a+40>>2]=6,A[a+44>>2]=a+176,A[a+32>>2]=a+112,nA(r,84430,a+32|0)):(A[a+16>>2]=23,A[a+8>>2]=23,A[a>>2]=4,A[a+12>>2]=a+112,A[a+4>>2]=a+176,nA(r,84802,a)))}}F=a+208|0}function F8(){xi(),A[55928]=0,A[55926]=0,A[55927]=0,A[55924]=0,A[56244]=0,A[56245]=0,A[56246]=0,A[56247]=0,A[56260]=0,A[56261]=0,A[56262]=0,A[56263]=0,A[56276]=0,A[56277]=0,A[56278]=0,A[56279]=0,A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,A[55988]=0,A[55989]=0,A[55990]=0,A[55991]=0,A[56004]=0,A[56005]=0,A[56006]=0,A[56007]=0,A[56020]=0,A[56021]=0,A[56022]=0,A[56023]=0,A[56036]=0,A[56037]=0,A[56038]=0,A[56039]=0,A[56052]=0,A[56053]=0,A[56054]=0,A[56055]=0,A[56068]=0,A[56069]=0,A[56070]=0,A[56071]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0}function R8(e,t){var r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;A:{if((0|(n=A[e+4>>2]))==A[e>>2])if((g=A[e+8>>2])>>>0<(r=A[e+12>>2])>>>0)r=(s=(1+(r-g>>2)|0)/2<<2)+g|0,(0|n)!=(0|g)&&(Qr(r=r-(a=g-n|0)|0,n,a),n=A[e+8>>2]),A[e+4>>2]=r,A[e+8>>2]=s+n;else{if((a=(0|r)==(0|n)?1:r-n>>1)>>>0>=1073741824)break A;if(b=(c=ae(r=a<<2))+r|0,f=r=(a+3&-4)+c|0,(0|n)!=(0|g)){if(m=-4&(g=g-n|0),s=r,a=n,g=1+((I=g-4|0)>>>2|0)&7)for(f=0;A[s>>2]=A[a>>2],a=a+4|0,s=s+4|0,(0|g)!=(0|(f=f+1|0)););if(f=r+m|0,!(I>>>0<28))for(;A[s>>2]=A[a>>2],A[s+4>>2]=A[a+4>>2],A[s+8>>2]=A[a+8>>2],A[s+12>>2]=A[a+12>>2],A[s+16>>2]=A[a+16>>2],A[s+20>>2]=A[a+20>>2],A[s+24>>2]=A[a+24>>2],A[s+28>>2]=A[a+28>>2],a=a+32|0,(0|f)!=(0|(s=s+32|0)););}A[e+12>>2]=b,A[e+8>>2]=f,A[e+4>>2]=r,A[e>>2]=c,n&&(SA(n),r=A[e+4>>2])}else r=n;return A[r-4>>2]=A[t>>2],void(A[e+4>>2]=A[e+4>>2]-4)}Qi(),K()}function W8(e,t,r){var a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;A:{e:{r:{i:{s:{o:{f:{u:{g:{if(t){if(!r)break g;break u}return Z2=(t=e)-T(e=(e>>>0)/(r>>>0)|0,r)|0,L2=0,_=0,e}if(!e)break f;break o}if(!((a=r-1|0)&r))break s;n=0-(g=(oA(r)+33|0)-oA(t)|0)|0;break r}return Z2=0,L2=t-T(e=(t>>>0)/0|0,0)|0,_=0,e}if((a=32-oA(t)|0)>>>0<31)break i;break e}if(Z2=e&a,L2=0,(0|r)==1)break A;return r=31&(a=Vr(r)),(63&a)>>>0>=32?e=t>>>r|0:(s=t>>>r|0,e=((1<<r)-1&t)<<32-r|e>>>r),_=s,e}g=a+1|0,n=63-a|0}if(a=31&(s=63&g),s>>>0>=32?(s=0,f=t>>>a|0):(s=t>>>a|0,f=((1<<a)-1&t)<<32-a|e>>>a),a=31&(n&=63),n>>>0>=32?(t=e<<a,e=0):(t=(1<<a)-1&e>>>32-a|t<<a,e<<=a),g)for(b=(0|(a=r-1|0))==-1?-1:0;c=s<<1|f>>>31,f=(s=f<<1|t>>>31)-(I=r&(n=b-(c+(s>>>0>a>>>0)|0)>>31))|0,s=c-(s>>>0<I>>>0)|0,t=t<<1|e>>>31,e=m|e<<1,m=c=1&n,g=g-1|0;);return Z2=f,L2=s,_=t<<1|e>>>31,c|e<<1}Z2=e,L2=t,e=0,t=0}return _=t,e}function K8(e,t){var r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0;A:{if((0|(r=A[e+8>>2]))==A[e+12>>2])if((a=A[e+4>>2])>>>0>(g=A[e>>2])>>>0)s=Qr((n=(1+(a-g>>2)|0)/-2<<2)+a|0,a,r=r-a|0)+r|0,A[e+8>>2]=s,A[e+4>>2]=n+A[e+4>>2];else{if((n=(0|r)==(0|g)?1:r-g>>1)>>>0>=1073741824)break A;if(b=(f=ae(s=n<<2))+s|0,s=n=(-4&n)+f|0,(0|r)!=(0|a)){if(m=-4&(r=r-a|0),I=1+((c=r-4|0)>>>2|0)&7)for(s=0,r=n;A[r>>2]=A[a>>2],a=a+4|0,r=r+4|0,(0|I)!=(0|(s=s+1|0)););else r=n;if(s=n+m|0,!(c>>>0<28))for(;A[r>>2]=A[a>>2],A[r+4>>2]=A[a+4>>2],A[r+8>>2]=A[a+8>>2],A[r+12>>2]=A[a+12>>2],A[r+16>>2]=A[a+16>>2],A[r+20>>2]=A[a+20>>2],A[r+24>>2]=A[a+24>>2],A[r+28>>2]=A[a+28>>2],a=a+32|0,(0|s)!=(0|(r=r+32|0)););}A[e+12>>2]=b,A[e+8>>2]=s,A[e+4>>2]=n,A[e>>2]=f,g&&(SA(g),s=A[e+8>>2])}else s=r;return A[s>>2]=A[t>>2],void(A[e+8>>2]=A[e+8>>2]+4)}Qi(),K()}function vr(e,t){var r,a=0,s=0,n=0,g=0,f=0;s=189088,F=r=F-320|0,A[r+312>>2]=0,n=M8(e,g=cA(r+112|0,189088),r,r+316|0,r+312|0,0),a=A[r+316>>2];A:if((0|t)<=3){if((0|a)<2)break A;if(n=3&(t=a-1|0),e=1,a-2>>>0>=3)for(f=-4&t,t=0;l[0|(a=e+r|0)]>=4&&(l[0|a]=3),l[(a=e+r|0)+1|0]>=4&&(l[a+1|0]=3),l[a+2|0]>=4&&(l[a+2|0]=3),l[a+3|0]>=4&&(l[a+3|0]=3),e=e+4|0,(0|f)!=(0|(t=t+4|0)););if(!n)break A;for(t=0;l[0|(a=e+r|0)]>=4&&(l[0|a]=3),e=e+1|0,(0|n)!=(0|(t=t+1|0)););}else if(e=1,!((0|a)<=1)){for(;;){if((0|n)>l[0|(f=e+r|0)]){if((0|a)!=(0|(e=e+1|0)))continue;break A}break}l[0|f]=t}if(e=C[0|g])for(t=1;a=A[144464+((255&e)<<2)>>2],C[a+11|0]!=2|16&C[a+6|0]||(n=255&(a=l[t+r|0]),(0|a)<2&&n||(l[0|s]=C[n+94151|0],s=s+1|0,e=C[0|g]),t=t+1|0),l[0|s]=e,s=s+1|0,e=C[0|(g=g+1|0)];);l[0|s]=0,F=r+320|0}function Z8(e){var t=0,r=0,a=0,s=0,n=0,g=0;r=t=A[(e|=0)>>2],A[e>>2]=t+1;A:{e:{r:{i:{s:{o:{f:switch(((n=C[0|t])>>>4|0)-8|0){case 0:case 1:case 2:case 3:break e;case 7:break s;case 6:break o;case 4:case 5:break f;default:break A}if((a=t+2|0)>>>0>=(s=A[e+4>>2])>>>0)break i;if(A[e>>2]=a,(192&(r=C[r+1|0]))!=128)break r;return 63&r|n<<6&1984}if((a=t+3|0)>>>0>=(s=A[e+4>>2])>>>0)break i;if(r=t+2|0,A[e>>2]=r,(192&(t=C[t+1|0]))!=128){a=r;break r}if(A[e>>2]=a,(192&(r=C[0|r]))!=128)break r;return 63&r|(63&t|n<<6&960)<<6}if(!((s=A[e+4>>2])>>>0<=(r=t+4|0)>>>0)){if(a=t+2|0,A[e>>2]=a,(192&(s=C[t+1|0]))!=128||(a=t+3|0,A[e>>2]=a,(192&(g=C[t+2|0]))!=128)||(A[e>>2]=r,t=C[0|a],a=r,(192&t)!=128))break r;return 0|((e=63&t|g<<6&4032|(63&s|n<<6&960)<<12)>>>0>=1114112?65533:e)}}A[e>>2]=s;break e}A[e>>2]=a-1}n=65533}return 0|n}function yt(e,t,r,a){var s,n,g=0,f=0,c=0,I=0,b=0,m=0;if(F=s=F-432|0,!(!a|!(536870912&(n=m2(e,t,r,a))))&&(B[s+48>>1]=8192,a=cA(s+48|2,a),C[0|a])){for(c=s+224|0,g=1,I=200;;){if(NA(s+44|0,a),t=Ze(A[s+44>>2]),f=A[r>>2],t?(A[r>>2]=2|f,k0(We(A[s+44>>2]),a)):A[r>>2]=-3&f,m=A[33264],m2(e,a,r,0),1&g?(A[s+16>>2]=189088,f=ye(c,I,84130,s+16|0)):(A[s+32>>2]=15,A[s+36>>2]=189088,f=ye(c,I,84434,s+32|0)),g=(t=A[33264])+1|0,A[33264]=g,t>>>0<=2147483646){for(;;)if(t=a,a=a+1|0,(0|(b=l[0|t]))==32|b-9>>>0<5){for(;t=(a=t)+1|0,(0|(b=l[0|a]))==32|b-9>>>0<5;);if(g=g-1|0,A[33264]=g,!((0|g)>0))break}}if(c=c+f|0,A[33264]=m,!(C[0|a]&&(g=0,(0|(I=I-f|0))>1)))break}(s+224|0)!=(0|c)&&(A[s>>2]=s+224,ye(189088,200,84130,s))}return F=s+432|0,n}function si(e,t,r,a,s,n,g,f){var c,I;c=A[32972],I=A[c+116>>2],B[e+8>>1]=y[e+8>>1]+n,n=32&f?0-n|0:n,B[e+10>>1]=n+y[e+10>>1],B[e+12>>1]=n+y[e+12>>1],a=(0|a)>(0|(n=((n=(0|T(t,I))/256|0)-(t=B[e+6>>1])|0)/2|0))?n:a,B[e+6>>1]=((0|r)<(0|a)?a:r)+t;A:{e:switch(s-1|0){case 0:t=(0|(t=235-(r=B[e+4>>1])|0))<=-100?-100:t,B[e+4>>1]=((0|t)>=-60?-60:t)+r;break A;case 1:t=(0|(t=(0|(t=235-(r=B[e+4>>1])|0))<=-300?-300:t))>=-150?-150:t,B[e+4>>1]=t+r,B[e+2>>1]=t+y[e+2>>1];break A;case 2:break e;default:break A}t=(0|(t=(0|(t=100-(r=B[e+4>>1])|0))<=-400?-400:t))>-300?-400:t,B[e+4>>1]=t+r,B[e+2>>1]=t+y[e+2>>1]}A[c+132>>2]||(l[e+20|0]=(T(C[e+20|0],g)>>>0)/100,l[e+21|0]=(T(C[e+21|0],g)>>>0)/100,l[e+22|0]=(T(C[e+22|0],g)>>>0)/100,l[e+23|0]=(T(C[e+23|0],g)>>>0)/100,l[e+24|0]=(T(C[e+24|0],g)>>>0)/100,l[e+25|0]=(T(C[e+25|0],g)>>>0)/100)}function Gr(e){var t,r=0,a=0,s=0,n=0;F=t=F-48|0;A:{if(e){C[0|e]||(e=zt(84285),C[0|e]&&e||(e=zt(121696),C[0|e]&&e||(e=zt(84614),C[0|e]&&e||(e=84891))));e:{for(;;){if(!(!(a=C[e+r|0])|(0|a)==47)){if(s=23,(0|(r=r+1|0))!=23)continue;break e}break}s=r}a=84891;e:{r:{if(r=C[0|e],(C[e+s|0]|(0|r)==46||(a=e,(0|r)==67))&&!C[a+1|0]||!c0(a,84891)||!c0(a,85136)){if(r=121652,C[a+1|0]==46)break r;e=0;break e}if(r=A[56851])for(;;){if(!c0(a,r+8|0))break r;if(!(r=A[r+32>>2]))break}(e=m0(36))&&(r=A[30414],A[e>>2]=A[30413],A[e+4>>2]=r,MA(r=e+8|0,a,s),l[r+s|0]=0,A[e+32>>2]=A[56851],A[56851]=e),r=e||121652}e=r}if((0|e)==-1)break A;A[56809]=e}else e=A[56809];n=e?e+8|0:84309}return F=t+48|0,n}function WA(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0;c=!!((t=A[e+112>>2])|(a=A[e+116>>2])),s=t,g=t=(n=A[e+4>>2])-(f=A[e+44>>2])|0,r=t+A[e+120>>2]|0,t=A[e+124>>2]+(t>>31)|0;A:{if(!(((0|(t=r>>>0<g>>>0?t+1|0:t))>=(0|a)&r>>>0>=s>>>0|(0|t)>(0|a))&c)){if((0|(c=Rr(e)))>=0)break A;n=A[e+4>>2],f=A[e+44>>2]}return A[e+112>>2]=-1,A[e+116>>2]=-1,A[e+104>>2]=n,a=(g=r)+(r=f-n|0)|0,t=(r>>31)+t|0,A[e+120>>2]=a,A[e+124>>2]=r>>>0>a>>>0?t+1|0:t,-1}return t=(a=r+1|0)?t:t+1|0,n=A[e+4>>2],f=A[e+8>>2],g=s=A[e+116>>2],s|(r=A[e+112>>2])&&(s=r-a|0,(0|(r=g-(t+(r>>>0<a>>>0)|0)|0))>=(0|(g=(I=f-n|0)>>31))&s>>>0>=I>>>0|(0|r)>(0|g)||(f=s+n|0)),A[e+104>>2]=f,a=(s=(r=A[e+44>>2])-n|0)+a|0,t=(s>>31)+t|0,A[e+120>>2]=a,A[e+124>>2]=a>>>0<s>>>0?t+1|0:t,r>>>0>=n>>>0&&(l[n-1|0]=c),c}function Qr(e,t,r){var a=0,s=0;A:if((0|e)!=(0|t)){if(t-(s=e+r|0)>>>0<=0-(r<<1)>>>0)return MA(e,t,r);if(a=3&(e^t),e>>>0<t>>>0){if(a)a=e;else{if(3&e)for(a=e;;){if(!r)break A;if(l[0|a]=C[0|t],t=t+1|0,r=r-1|0,!(3&(a=a+1|0)))break}else a=e;if(!(r>>>0<=3))for(;A[a>>2]=A[t>>2],t=t+4|0,a=a+4|0,(r=r-4|0)>>>0>3;);}if(r)for(;l[0|a]=C[0|t],a=a+1|0,t=t+1|0,r=r-1|0;);}else{if(!a){if(3&s)for(;;){if(!r)break A;if(l[0|(a=(r=r-1|0)+e|0)]=C[t+r|0],!(3&a))break}if(!(r>>>0<=3))for(;A[(r=r-4|0)+e>>2]=A[t+r>>2],r>>>0>3;);}if(!r)break A;for(;l[(r=r-1|0)+e|0]=C[t+r|0],r;);}}return e}function L8(e,t,r,a){A:switch(t-9|0){case 0:return t=A[r>>2],A[r>>2]=t+4,void(A[e>>2]=A[t>>2]);case 6:return t=A[r>>2],A[r>>2]=t+4,t=B[t>>1],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 7:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=y[t>>1],void(A[e+4>>2]=0);case 8:return t=A[r>>2],A[r>>2]=t+4,t=l[0|t],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 9:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=C[0|t],void(A[e+4>>2]=0);case 16:return t=A[r>>2]+7&-8,A[r>>2]=t+8,void(Q[e>>3]=Q[t>>3]);case 17:xA[0|a](e,r);default:return;case 1:case 4:case 14:return t=A[r>>2],A[r>>2]=t+4,t=A[t>>2],A[e>>2]=t,void(A[e+4>>2]=t>>31);case 2:case 5:case 11:case 15:return t=A[r>>2],A[r>>2]=t+4,A[e>>2]=A[t>>2],void(A[e+4>>2]=0);case 3:case 10:case 12:case 13:break A}t=A[r>>2]+7&-8,A[r>>2]=t+8,r=A[t+4>>2],A[e>>2]=A[t>>2],A[e+4>>2]=r}function V8(e,t,r,a,s,n){var g;F=g=F-80|0;A:if((0|n)>=16384){if(_A(g+32|0,t,r,a,s,0,0,0,2147352576),a=A[g+40>>2],s=A[g+44>>2],t=A[g+32>>2],r=A[g+36>>2],n>>>0<32767){n=n-16383|0;break A}_A(g+16|0,t,r,a,s,0,0,0,2147352576),n=((0|n)>=49149?49149:n)-32766|0,a=A[g+24>>2],s=A[g+28>>2],t=A[g+16>>2],r=A[g+20>>2]}else(0|n)>-16383||(_A(g- -64|0,t,r,a,s,0,0,0,7471104),a=A[g+72>>2],s=A[g+76>>2],t=A[g+64>>2],r=A[g+68>>2],n>>>0>4294934644?n=n+16269|0:(_A(g+48|0,t,r,a,s,0,0,0,7471104),n=((0|n)<=-48920?-48920:n)+32538|0,a=A[g+56>>2],s=A[g+60>>2],t=A[g+48>>2],r=A[g+52>>2]));_A(g,t,r,a,s,0,0,0,n+16383<<16),t=A[g+12>>2],A[e+8>>2]=A[g+8>>2],A[e+12>>2]=t,t=A[g+4>>2],A[e>>2]=A[g>>2],A[e+4>>2]=t,F=g+80|0}function U8(e,t){var r,a,s=0;F=r=F+-64|0,s=A[e>>2],a=A[s-4>>2],s=A[s-8>>2],A[r+32>>2]=0,A[r+36>>2]=0,A[r+40>>2]=0,A[r+44>>2]=0,A[r+48>>2]=0,A[r+52>>2]=0,l[r+55|0]=0,l[r+56|0]=0,l[r+57|0]=0,l[r+58|0]=0,l[r+59|0]=0,l[r+60|0]=0,l[r+61|0]=0,l[r+62|0]=0,A[r+24>>2]=0,A[r+28>>2]=0,A[r+20>>2]=0,A[r+16>>2]=125084,A[r+12>>2]=e,A[r+8>>2]=t,e=e+s|0,s=0;A:if(Me(a,t,0))A[r+56>>2]=1,xA[A[A[a>>2]+20>>2]](a,r+8|0,e,e,1,0),s=A[r+32>>2]==1?e:0;else{xA[A[A[a>>2]+24>>2]](a,r+8|0,e,1,0);e:switch(A[r+44>>2]){case 0:s=A[r+48>>2]==1&&A[r+36>>2]==1&&A[r+40>>2]==1?A[r+28>>2]:0;break A;case 1:break e;default:break A}A[r+32>>2]!=1&&A[r+48>>2]|A[r+36>>2]!=1|A[r+40>>2]!=1||(s=A[r+24>>2])}return F=r- -64|0,s}function E2(e,t,r,a,s){var n,g,f=0;F=n=F-80|0,B[n+72>>1]=0,A[n+64>>2]=0,A[n+68>>2]=0,l[0|a]=0,f=k0(t,g=2|(f=n- -64|0))+f|0,l[f+2|0]=32;A:if((0|r)!=-1)t>>>0>=33&&!v0(t)?(l[f+3|0]=(0|r)==32?32:31,l[n+65|0]=95,dA(e,n- -64|1,n+16|0)||(l[n+65|0]=32,dA(e,g,n+16|0)||oe(e,g,n+16|0,40,0,268435456,0)),C[n+16|0]||S8(e,t,n+16|0),t=cA(a,n+16|0),!(r=C[0|t])|(0|r)==21||(A[n+56>>2]=0,A[n+60>>2]=0,me(e,t,n+56|0,-1,1&s))):(A[n>>2]=t,nA(t=n- -64|1,85485,n),dA(e,t,a));else{if(dA(e,g,a)||(l[n+65|0]=95,dA(e,n- -64|1,n+16|0)|A[e+212>>2]==25966))break A;St(85055),dA(A[47194],g,n+16|0)&&(l[0|a]=21,l[a+1|0]=0),W0(A[A[32972]+60>>2])}F=n+80|0}function QA(e,t,r){var a=0,s=0,n=0,g=0;if(r&&(l[0|e]=t,l[(a=e+r|0)-1|0]=t,!(r>>>0<3||(l[e+2|0]=t,l[e+1|0]=t,l[a-3|0]=t,l[a-2|0]=t,r>>>0<7||(l[e+3|0]=t,l[a-4|0]=t,r>>>0<9||(s=(a=0-e&3)+e|0,t=T(255&t,16843009),A[s>>2]=t,A[(r=(a=r-a&-4)+s|0)-4>>2]=t,a>>>0<9||(A[s+8>>2]=t,A[s+4>>2]=t,A[r-8>>2]=t,A[r-12>>2]=t,a>>>0<25||(A[s+24>>2]=t,A[s+20>>2]=t,A[s+16>>2]=t,A[s+12>>2]=t,A[r-16>>2]=t,A[r-20>>2]=t,A[r-24>>2]=t,A[r-28>>2]=t,(r=a-(g=4&s|24)|0)>>>0<32))))))))for(a=DA(t,0,1,1),n=_,t=s+g|0;A[t+24>>2]=a,A[t+28>>2]=n,A[t+16>>2]=a,A[t+20>>2]=n,A[t+8>>2]=a,A[t+12>>2]=n,A[t>>2]=a,A[t+4>>2]=n,t=t+32|0,(r=r-32|0)>>>0>31;);return e}function yr(){var e,t=0,r=0,a=0,s=0,n=0;if(F=e=F-208|0,(0|(a=A[50303]))>0)for(;(s=A[(r=201216+(t<<2)|0)>>2])&&(SA(s),A[r>>2]=0),(0|a)!=(0|(t=t+1|0)););if(A[50303]=0,A[e+16>>2]=137584,A[e+20>>2]=47,nA(t=e+32|0,87827,e+16|0),Ai(t,lA(t)+1|0,0),A[e+4>>2]=47,A[e>>2]=137584,nA(t,87933,e),Ai(t,lA(t)+1|0,1),t=A[50303],A[(r=t<<2)+201216>>2]=0,r=Re(a=A[50741],r+4|0)){if(A[50741]=r,H8(201216,t,7),a=A[50741],r=0,t=A[50304])for(s=0;n=A[t+4>>2],C[0|n]&&c0(n+1|0,86589)&&F0(A[t+8>>2],88032,3)&&(A[(r<<2)+a>>2]=t,r=r+1|0),t=A[201216+((s=s+1|0)<<2)>>2];);A[(r<<2)+a>>2]=0}return F=e+208|0,a}function Dr(e,t,r){var a=0,s=0,n=0,g=0;if(n=t-1|0,(0|t)>=2){t=e;A:{for(;;){e:{r:{if((0|(a=A[r+4>>2]))!=(0|(s=A[r+8>>2]))){if((g=j2(a,10,s-a|0))?s=1+(g-(a=A[r+4>>2])|0)|0:(a=A[r+4>>2],s=A[r+8>>2]-a|0),MA(t,a,a=s>>>0<n>>>0?s:n),s=a+A[r+4>>2]|0,A[r+4>>2]=s,t=t+a|0,g||!(n=n-a|0))break e;if((0|s)!=A[r+8>>2]){A[r+4>>2]=s+1,a=C[0|s];break r}}if(!((0|(a=Rr(r)))>=0)){if(a=0,(0|e)==(0|t))break A;if(16&C[0|r])break e;break A}}if(l[0|t]=a,t=t+1|0,(255&a)!=10&&(n=n-1|0))continue}break}e?(l[0|t]=0,a=e):a=0}}else if(t=A[r+72>>2],A[r+72>>2]=t-1|t,!n)return l[0|e]=0,e;return a}function ni(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0;if(t=T(e,44),(0|(e=A[t+137896>>2]))>0&&ni(e-1|0),e=A[36115],!((0|(t=A[(r=t+137856|0)+36>>2]))<=0)){if(s=A[r+32>>2],f=1&t,(0|t)!=1)for(c=-2&t,r=0;t=C[(n=(a=r<<4)+s|0)+10|0],A[144464+(t<<2)>>2]=n,(0|e)>=(0|t)?t=e:QA(144464+((e=e+1|0)<<2)|0,0,t-e<<2),e=C[(a=(16|a)+s|0)+10|0],A[144464+(e<<2)>>2]=a,(0|e)<=(0|t)?e=t:QA(144464+((t=t+1|0)<<2)|0,0,e-t<<2),r=r+2|0,(0|c)!=(0|(g=g+2|0)););else r=0;f&&(t=C[(r=(r<<4)+s|0)+10|0],A[144464+(t<<2)>>2]=r,(0|e)>=(0|t)||(QA(144464+((e=e+1|0)<<2)|0,0,t-e<<2),e=t))}A[36115]=e}function X8(e,t,r,a,s){var n,g=0,f=0,c=0;F=n=F-16|0;A:if(1&l[e+106|0]&&(g=C[0|r],!(!(1&l[a+2|0])&(0|g)!=46||256&(c=A[a+12>>2])|!(!(2&c)||s)||(NA(n+12|0,(0|g)!=46?r:r+2|0),!(g=C[0|r])|!C[r+1|0])))){if(!(!(c=A[n+12>>2])|2&C[a+2|0])){if(!r0(c))break A;g=C[0|r]}(0|g)==46&&(l[0|r]=32),f=2,A[e+212>>2]!=26741|s||(r=r0(A[n+12>>2])?yt(e,r+2|0,0,0):0,128&C[e+8233|0]&&(!(!(s=A[n+12>>2])|2&C[a+2|0])&s-48>>>0>=10||(f=0)),f=32768&r?0:f,131072&r&&(f=163840&A[e+8232>>2]?34:C[t-2|0]!=45?f:0))}return F=n+16|0,f}function J8(e,t,r,a,s){var n,g=0,f=0;if(F=n=F-208|0,A[n+204>>2]=r,QA(r=n+160|0,0,40),A[n+200>>2]=A[n+204>>2],(0|B8(0,t,n+200|0,n+80|0,r,a,s))<0)s=-1;else{A[e+76>>2]>=0,g=A[e>>2],A[e+72>>2]<=0&&(A[e>>2]=-33&g);A:{e:{if(A[e+48>>2]){if(A[e+16>>2])break e}else A[e+48>>2]=80,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,f=A[e+44>>2],A[e+44>>2]=n;if(r=-1,ki(e))break A}r=B8(e,t,n+200|0,n+80|0,n+160|0,a,s)}f&&(xA[A[e+36>>2]](e,0,0),A[e+48>>2]=0,A[e+44>>2]=f,A[e+28>>2]=0,t=A[e+20>>2],A[e+16>>2]=0,A[e+20>>2]=0,r=t?r:-1),t=e,e=A[e>>2],A[t>>2]=e|32&g,s=32&e?-1:r}return F=n+208|0,s}function j8(e,t,r,a){var s,n=0,g=0,f=0,c=0,I=0,b=0,m=0;if(F=s=F-208|0,g=C[0|t])for(;l[n+s|0]=g,c=((255&g)==6&(0|f)!=21)+c|0,f=g<<24>>24,g=C[(n=n+1|0)+t|0];);if(l[n+s|0]=0,n=C[0|s])for(b=c-2|0,f=0,m=(0|a)<2,g=0;;){A:{e:if((255&n)!=6|m|(0|g)==21){if((0|(a=255&n))==255){if(!I|(0|r)<2)break A;a=r>>>0>2?11:(0|f)%3|0?23:11}g=a,a=f}else{if(n=f+1|0,C[e+169|0]){g=(0|n)>1?5:6,a=n;break e}if(g=6,a=c,(0|n)==(0|c))break e;g=(0|n)%3|0||(0|f)==(0|b)?5:6,a=n}f=a,l[0|t]=g,t=t+1|0}if(!(n=C[(I=I+1|0)+s|0]))break}(0|r)>=2&&(l[0|t]=11,t=t+1|0),l[0|t]=0,F=s+208|0}function Ge(e,t){var r=0;r=0,e&&(r=A[50754],r=(e=(e=(0|T(A[145712+(t?12:((0|e)>199)<<2)>>2],e))/256|0)>>>0>(t=A[36430])>>>0?e:t)>>>0<=89999?(T(e,r)>>>0)/1e3|0:(T(e,(0|r)/25|0)>>>0)/40|0),(0|(e=A[36440]))<=0||(0|(t=A[36424]))<0||(A[(t=216192+(t<<4)|0)+4>>2]||(A[t+4>>2]=e),A[36440]=0),A[36426]=0,A[36439]=-1,A[36455]=A[50758],w2(),A[36427]=-1,e=216192+(A[50758]<<4)|0,A[e>>2]=5,A[e+4>>2]=r,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0,A[36426]=0,A[36438]&&(A[36438]=0,e=216192+(A[50758]<<4)|0,A[e>>2]=14,A[e+4>>2]=0,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}function x2(e,t,r,a,s,n,g,f){var c,I=0,b=0,m=0;I=1,c=b=2147483647&a;A:if(!((m=(0|b)==2147418112)&!r?e|t:m&!!(0|r)|b>>>0>2147418112)&&!((m=(0|(b=2147483647&f))==2147418112)&!g?s|n:m&!!(0|g)|b>>>0>2147418112)){if(!(e|s|r|g|t|n|b|c))return 0;if((0|(I=a&f))>0|(0|I)>=0){if(I=-1,(0|r)==(0|g)&(0|a)==(0|f)?(0|t)==(0|n)&e>>>0<s>>>0|t>>>0<n>>>0:r>>>0<g>>>0&(0|a)<=(0|f)|(0|a)<(0|f))break A;return!!(e^s|r^g|t^n|a^f)}I=-1,((0|r)==(0|g)&(0|a)==(0|f)?(0|t)==(0|n)&e>>>0>s>>>0|t>>>0>n>>>0:r>>>0>g>>>0&(0|a)>=(0|f)|(0|a)>(0|f))||(I=!!(e^s|r^g|t^n|a^f))}return I}function $e(e,t){var r=0,a=0,s=0,n=0;for(r=C[85836]|C[85837]<<8,l[0|t]=r,l[t+1|0]=r>>>8,l[t+2|0]=C[85838];;)if(s=C[0|e],e=r=e+1|0,(0|s)!=255){if(!s)break;if(!(a=A[144464+(s<<2)>>2]))continue;if(C[a+11|0]==1&&(n=C[a+14|0],!(y[a+8>>1]|n>>>0>4))){if(n>>>0<2)continue;l[0|t]=C[n+93943|0],t=t+1|0;continue}if(255&(e=A[a>>2]))for(;l[0|t]=e,t=t+1|0,a=65280&e,e=e>>>8|0,a;);if(e=r,(0|s)!=21||(32|(r=l[0|e]))-97>>>0>=26)continue;for(;l[0|t]=r,t=t+1|0,(32|(r=l[0|(e=e+1|0)]))-97>>>0<26;);}l[0|t]=0}function Mr(e,t){var r,a,s=0,n=0,g=0;F=r=F-112|0,e||(A[50303]||yr(),e=201216),A0(s=r+16|0,t,40),A[r>>2]=47,A[r+4>>2]=s,nA(t=r- -64|0,87599,r),a=lA(t),g=-1;A:{e:{r:{if(n=A[e>>2]){t=0,s=-1;i:{for(;;){if(li(r+16|0,A[n>>2])){if(li(r+16|0,n=A[n+8>>2])?g=li(r- -64|0,n+(lA(n)-a|0)|0)?g:t:s=t,n=A[((t=t+1|0)<<2)+e>>2])continue;break i}break}if((0|t)>=0)break e;t=(0|s)<0?g:s;break r}if((0|(t=s))>=0)break r}t=g}if(s=0,(0|t)<0)break A}s=A[(t<<2)+e>>2]}return F=r+112|0,s}function Qe(e,t){var r,a,s=0,n=0,g=0,f=0,c=0;F=r=F-16|0,S(+t),a=0|M(1),n=0|M(0),(0|(g=(s=2147483647&a)+-1048576|0))==2145386495|g>>>0<2145386495?(f=n<<28,g=s>>>4|0,s=(15&s)<<28|n>>>4,n=g+1006632960|0):(0|s)==2146435072|s>>>0>2146435072?(f=n<<28,s=(15&a)<<28|n>>>4,n=a>>>4|2147418112):s|n?(T0(r,n,g=s,0,0,(s=s?oA(s):oA(n)+32|0)+49|0),c=A[r>>2],f=A[r+4>>2],g=15372-s<<16,s=A[r+8>>2],n=g|65536^A[r+12>>2]):(s=0,n=0),A[e>>2]=c,A[e+4>>2]=f,A[e+8>>2]=s,A[e+12>>2]=-2147483648&a|n,F=r+16|0}function oi(e,t,r){var a=0,s=0;A:{e:{r:{if(!(3&((s=e)^t))){a=!!(0|r);i:if(!(!(3&t)|!r))for(;;){if(a=C[0|t],l[0|s]=a,!a)break A;if(s=s+1|0,a=!!(0|(r=r-1|0)),!(3&(t=t+1|0)))break i;if(!r)break}if(!a)break e;if(!C[0|t])break A;if(!(r>>>0<4))for(;;){if(~(a=A[t>>2])&a-16843009&-2139062144)break r;if(A[s>>2]=a,s=s+4|0,t=t+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break e}for(;;){if(a=C[0|t],l[0|s]=a,!a)break A;if(s=s+1|0,t=t+1|0,!(r=r-1|0))break}}r=0}return QA(s,0,r),e}function zr(e,t,r,a,s,n){var g,f=0,c=0,I=0;F=g=F-240|0,f=A[r>>2],A[g+232>>2]=f,r=A[r+4>>2],A[g>>2]=e,A[g+236>>2]=r,I=1;A:{e:{r:{if(r|(0|f)!=1){for(f=e;;){if((0|M2(r=f-A[(c=(a<<2)+n|0)>>2]|0,e,t))<=0){r=f;break r}i:{if(!((0|a)<2|s)&&(s=A[c-8>>2],(0|M2(c=f-4|0,r,t))>=0||(0|M2(c-s|0,r,t))>=0))break i;if(A[(I<<2)+g>>2]=r,Kr(f=g+232|0,s=xl(f)),I=I+1|0,a=a+s|0,s=0,f=r,A[g+236>>2]|A[g+232>>2]!=1)continue;break e}break}r=f;break e}r=e}if(s)break A}fl(g,I),di(r,t,a,n)}F=g+240|0}function J2(e,t){var r=0;A[4+((r=e<<2)+134912|0)>>2]=t,A[r+136192>>2]=t,r=28;A:{e:{r:switch(e-1|0){case 0:A[50792]=t,A[50786]=t,Br(3);break e;case 1:A[50787]=t,A[33037]=(0|T(C[A[50797]+105596|0],(0|T(A[50787],55))/100|0))/16;break e;case 2:e=(0|t)>=99?99:t,A[50785]=(0|e)>0?e:0;break e;case 3:A[50788]=(0|t)>=99?99:t;break e;case 12:A[47268]=t;break e;case 6:A[47205]=t;break e;case 9:break e;case 8:break r;default:break A}(e=255&t)&&(A[A[47192]+152>>2]=e),A[47196]=t}r=0}return r}function w0(e,t){var r=0,a=0,s=0;A:if(A[e>>2])for(;;){if(v0(A[e-4>>2])){if(a=0,(0|(r=l[0|t]))==A[e>>2])for(;(0|(r=l[(a=a+1|0)+t|0]))==A[(e=e+4|0)>>2];);if(!r){for(;t=e,e=e+4|0,v0(A[t>>2]););for(s=t+((A[t>>2]==61)<<2)|0;s=(e=s)+4|0,v0(A[e>>2]););e:switch((t=A[e>>2])-34|0){case 0:case 5:break A;default:break e}return v0(t)||A[e>>2]==47?102808:e}}if(!A[(e=e+4|0)>>2])break}return s}function ee(e,t,r,a){var s,n,g=0,f=0,c=0;return!C[e+25|0]|Q[e+8>>3]!=r|Q[e+16>>3]!=a?(Q[e+16>>3]=a,Q[e+8>>3]=r,a=(g=we(-3.141592653589793/(f=+A[e>>2])*a))*-g,Q[e+48>>3]=a,g*=te(-6.283185307179586/f*r),g+=g,Q[e+40>>3]=g,f=1-g-a,Q[e+32>>3]=f,!(c=C[e+24|0])|r==0||(f=1/f,Q[e+32>>3]=f,a*=r=-f,Q[e+48>>3]=a,g*=r,Q[e+40>>3]=g,c=1)):(c=C[e+24|0],a=Q[e+48>>3],g=Q[e+40>>3],f=Q[e+32>>3]),l[e+25|0]=1,r=Q[e+64>>3],s=Q[e+56>>3],Q[e+64>>3]=s,n=t,t=a*r+(f*t+g*s),Q[e+56>>3]=c?n:t,t}function q8(e,t,r,a,s){var n=0,g=0,f=0,c=0,I=0;if((f=A[34388])&&!((0|(g=A[34436]))>=(A[34393]-2|0))){if(A[34436]=g+1,n=T(g,36)+f|0,A[n>>2]=e,A[n+4>>2]=A[34437],I=A[34438],A[n+12>>2]=t>>>24,A[n+8>>2]=16777215&t,A[n+24>>2]=I,t=A[50754],s=A[34439]+((s-A[34392]|0)/2|0)|0,A[n+20>>2]=s,t=sA(c=1e3*+(0|s)/+(0|t))<2147483648?~~c:-2147483648,A[n+16>>2]=t,e-3>>>0<=1)return void(A[28+(T(g,36)+f|0)>>2]=A[33282]+r);t=28+(T(g,36)+f|0)|0,A[t>>2]=r,(0|e)==7&&(A[t+4>>2]=a)}}function v2(e,t,r,a,s,n){var g=0,f=0,c=0,I=0;64&n?(t=31&(r=n+-64|0),(63&r)>>>0>=32?(r=0,t=s>>>t|0):(r=s>>>t|0,t=((1<<t)-1&s)<<32-t|a>>>t),a=0,s=0):n&&(c=a,g=31&(f=64-n|0),(63&f)>>>0>=32?(f=c<<g,I=0):(f=(1<<g)-1&c>>>32-g|s<<g,I=c<<g),c=t,t=31&n,(63&n)>>>0>=32?(g=0,t=r>>>t|0):(g=r>>>t|0,t=((1<<t)-1&r)<<32-t|c>>>t),t|=I,r=g|f,g=a,a=31&n,(63&n)>>>0>=32?(f=0,a=s>>>a|0):(f=s>>>a|0,a=((1<<a)-1&s)<<32-a|g>>>a),s=f),A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=s}function Yr(e){var t=0,r=0;if(!e){if(A[33174]&&(t=Yr(A[33174])),A[33136]&&(t=Yr(A[33136])|t),e=A[56816])for(;A[e+20>>2]!=A[e+28>>2]&&(t=Yr(e)|t),e=A[e+56>>2];);return t}return A[e+76>>2]>=0,A[e+20>>2]==A[e+28>>2]||(xA[A[e+36>>2]](e,0,0),A[e+20>>2])?((0|(t=A[e+8>>2]))!=(0|(r=A[e+4>>2]))&&(t=r-t|0,xA[A[e+40>>2]](e,t,t>>31,1)),t=0,A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e+4>>2]=0,A[e+8>>2]=0):t=-1,t}function Nr(e,t){var r=0,a=0,s=0,n=0,g=0;if((192&(r=C[0|t]))==128)for(;(192&(r=C[0|(t=t-1|0)]))==128;);A:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break A}}else a=2,g=1;r=C[a+93846|0]&r,(n=C[t+1|0])?(r=63&n|r<<6,(0|s)!=192&&((s=C[t+2|0])?(r=63&s|r<<6,g||((t=C[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return A[e>>2]=r,a+1|0}function Tr(e,t,r,a){var s,n=0,g=0;return F=s=F-224|0,e?(A[s>>2]=137584,A[s+4>>2]=47,A[s+8>>2]=t,nA(t=s+16|0,85430,s),(0|(n=Ke(t)))<0?t=e2(a,0-n|0,s+16|0):(t=_e(s+16|0,85659))?((g=A[e>>2])&&SA(g),n?(g=m0(n),A[e>>2]=g,g?(0|Ci(g,n,t))==(0|n)?(H0(t),t=0,r&&(A[r>>2]=n)):(r=A[56798],H0(t),SA(A[e>>2]),A[e>>2]=0,t=e2(a,r,s+16|0)):(H0(t),t=48)):(t=0,A[e>>2]=0)):t=e2(a,A[56798],s+16|0)):t=28,F=s+224|0,t}function NA(e,t){var r=0,a=0,s=0,n=0,g=0;if((192&(r=C[0|t]))==128)for(;(192&(r=C[0|(t=t+1|0)]))==128;);A:if(128&(r=r<<24>>24)){if(a=1,(0|(s=224&r))!=192)if((240&r)!=224){if(a=3,(248&r)!=240){r&=255,a=0;break A}}else a=2,g=1;r=C[a+93846|0]&r,(n=C[t+1|0])?(r=63&n|r<<6,(0|s)!=192&&((s=C[t+2|0])?(r=63&s|r<<6,g||((t=C[t+3|0])?r=63&t|r<<6:a=2)):a=1)):a=0}return A[e>>2]=r,a+1|0}function T0(e,t,r,a,s,n){var g=0,f=0,c=0;64&n?(a=t,t=31&(s=n+-64|0),(63&s)>>>0>=32?(s=a<<t,a=0):(s=(1<<t)-1&a>>>32-t|r<<t,a<<=t),t=0,r=0):n&&(g=a,a=31&n,(63&n)>>>0>=32?(f=g<<a,c=0):(f=(1<<a)-1&g>>>32-a|s<<a,c=g<<a),g=t,a=31&(s=64-n|0),(63&s)>>>0>=32?(s=0,t=r>>>a|0):(s=r>>>a|0,t=((1<<a)-1&r)<<32-a|g>>>a),a=c|t,s|=f,t=31&n,(63&n)>>>0>=32?(f=g<<t,t=0):(f=(1<<t)-1&g>>>32-t|r<<t,t=g<<t),r=f),A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=s}function A2(e){var t=0;return e>>>0<=55295?t=C[A[125552+(e>>>6&67108860)>>2]+(255&e)|0]:(t=4,e>>>0<57344||(e>>>0<63488?t=3:e>>>0<=195327?t=C[A[126416+(e-63488>>>6&67108860)>>2]+(255&e)|0]:(t=2,e>>>0<917504||(e>>>0<=918015?t=C[A[128476+(e-917504>>>6&67108860)>>2]+(255&e)|0]:e>>>0<983040||(e>>>0<1048574?t=3:e>>>0<1048576||(t=3,e>>>0<1114110||(t=e>>>0<1114112?2:5))))))),255&t}function _8(e,t){var r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0;if(!((0|(r=A[33709]))<=0)){if(s=(0|e)>31?e-32|0:e,e=0,r>>>0>=4)for(b=-4&r;f=2|e,c=1|e,a=A[134912+((g=3|e)<<6)>>2]==(0|s)?g:A[134912+(f<<6)>>2]==(0|s)?f:A[134912+(c<<6)>>2]==(0|s)?c:A[134912+(e<<6)>>2]==(0|s)?e:a,e=e+4|0,(0|b)!=(0|(n=n+4|0)););if(n=3&r)for(;a=A[134912+(e<<6)>>2]==(0|s)?e:a,e=e+1|0,(0|n)!=(0|(I=I+1|0)););(0|a)<=0||(A[33709]=a,r=a)}X2(t,r)}function $8(e){var t,r=0,a=0,s=0;for(F=t=F-96|0,A0(t,e,60),Or(t,1);s=We(l[0|(a=t+r|0)]),l[0|a]=s,r=r+1|0,255&s;);A[t+92>>2]=0,A[t+84>>2]=0,A[t+88>>2]=0,A[t+76>>2]=0,A[t+80>>2]=0,A[t+72>>2]=e;A:{e:{r:{if(k2(t,1)){if(C[202976])break r;break e}if(A[50303]||yr(),r=268437247,!(e=Mr(201216,t))||!k2(A[e+8>>2],0))break A;if(!C[202976])break e}k2(202976,2)}Gl(A[32972]),A[t+76>>2]=A[32972]+40,ui(t+72|0,202976),r=0}return F=t+96|0,r}function Al(e,t){if(!e)return 0;A:{e:{if(e){if(t>>>0<=127)break e;if(A[A[56841]>>2]){if(t>>>0<=2047){l[e+1|0]=63&t|128,l[0|e]=t>>>6|192,e=2;break A}if(!((-8192&t)!=57344&t>>>0>=55296)){l[e+2|0]=63&t|128,l[0|e]=t>>>12|224,l[e+1|0]=t>>>6&63|128,e=3;break A}if(t-65536>>>0<=1048575){l[e+3|0]=63&t|128,l[0|e]=t>>>18|240,l[e+2|0]=t>>>6&63|128,l[e+1|0]=t>>>12&63|128,e=4;break A}}else if((-128&t)==57216)break e;A[56798]=25,e=-1}else e=1;break A}l[0|e]=t,e=1}return e}function el(e){var t=0,r=0,a=0,s=0;if(A[e+20>>2]=0,(a=(r=A[e+8>>2])-(t=A[e+4>>2])|0)>>>0>=9)for(;SA(A[t>>2]),t=A[e+4>>2]+4|0,A[e+4>>2]=t,(a=(r=A[e+8>>2])-t|0)>>>0>8;);s=512;A:switch((a>>>2|0)-1|0){case 1:s=1024;case 0:A[e+16>>2]=s;break;default:break A}if((0|t)!=(0|r)){for(;SA(A[t>>2]),(0|r)!=(0|(t=t+4|0)););(0|(t=A[e+8>>2]))!=(0|(r=A[e+4>>2]))&&(A[e+8>>2]=t+(3+(r-t|0)&-4))}(e=A[e>>2])&&SA(e)}function j2(e,t,r){var a=0,s=0;a=!!(0|r);A:{e:{r:if(!(!(3&e)|!r))for(s=255&t;;){if((0|s)==C[0|e])break e;if(a=!!(0|(r=r-1|0)),!(3&(e=e+1|0)))break r;if(!r)break}if(!a)break A;if(!(C[0|e]==(255&t)|r>>>0<4))for(a=T(255&t,16843009);;){if(~(s=a^A[e>>2])&s-16843009&-2139062144)break e;if(e=e+4|0,!((r=r-4|0)>>>0>3))break}if(!r)break A}for(t&=255;;){if((0|t)==C[0|e])return e;if(e=e+1|0,!(r=r-1|0))break}}return 0}function gi(e,t){var r=0,a=0;A:{if(a=255&t){if(3&e)for(;;){if(!(r=C[0|e])|(0|r)==(255&t))break A;if(!(3&(e=e+1|0)))break}e:if(!(~(r=A[e>>2])&r-16843009&-2139062144))for(a=T(a,16843009);;){if(~(r^=a)&r-16843009&-2139062144)break e;if(r=A[e+4>>2],e=e+4|0,r-16843009&~r&-2139062144)break}for(;(a=C[0|(r=e)])&&(e=r+1|0,(0|a)!=(255&t)););return r}return lA(e)+e|0}return e}function tl(e,t,r,a,s){var n,g=0,f=0;f=-1;A:if(!(((g=(0|(n=2147483647&a))==2147418112)&!r?e|t:g&!!(0|r)|n>>>0>2147418112)||(g=2147483647&s)>>>0>2147418112&(0|g)!=2147418112)){if(!(e|r|g|n|t))return 0;if((0|(g=a&s))>0|(0|g)>=0){if((!!(0|r)|(0|a)!=(0|s))&(0|a)<(0|s))break A;return!!(e|r|a^s|t)}(!r&(0|a)==(0|s)?e|t:!!(0|r)&(0|a)>=(0|s)|(0|a)>(0|s))||(f=!!(e|r|a^s|t))}return f}function Or(e,t){var r,a=0;F=r=F+-64|0,l[202976]=0,A[r+48>>2]=47,nA(r+59|0,91351,r+48|0),t||(l[r+59|0]=0);A:{e:{if(e&&(e=Ee(e,43))){if(l[0|e]=0,l[0|(e=e+1|0)]-48>>>0>=10)break e;a=y2(e)}if((0|a)<=0)break A;if(a>>>0<=9){A[r+4>>2]=a,A[r>>2]=r+59,nA(202976,91378,r);break A}A[r+20>>2]=a-10,A[r+16>>2]=r+59,nA(202976,91503,r+16|0);break A}A[r+36>>2]=e,A[r+32>>2]=r+59,nA(202976,85425,r+32|0)}F=r- -64|0}function Dt(e){var t,r=0,a=0,s=0;F=t=F-80|0,r=E8(e,t+12|0),A[t+12>>2]?(A0(a=t+16|0,r,60),r=0,Or(a,1),!k2(a,0)|!C[202976]||k2(202976,2),Gl(A[32972]),ui(e,86012)):r=268437247,F=t+80|0;A:{e:{r:{i:{if((0|r)<=268437502){if(!r)break A;if((0|r)==268436479)break e;if((0|r)!=268437247)break i;return 2}if((0|r)==268437503|(0|r)==268437759)break r;if((0|r)==268439295)break A}return-1}return 2}s=1}return s}function D0(e,t,r,a,s,n,g,f,c){var I,b,m;c=DA(t,r,f,c),f=_,s=DA(a,s,n,g),a=_+f|0,f=s>>>0>(c=s+c|0)>>>0?a+1|0:a,I=g,b=r,g=(r=DA(g,s=0,r,a=0))+c|0,c=_+f|0,m=g,r=r>>>0>g>>>0?c+1|0:c,g=DA(n,0,t,0),f=_,a=DA(n,c=0,b,a),n=_+c|0,n=a>>>0>(f=f+a|0)>>>0?n+1|0:n,a=r,n=n>>>0>(c=n+m|0)>>>0?a+1|0:a,r=DA(t,0,I,s)+f|0,s=_,f=(s=r>>>0<f>>>0?s+1|0:s)+c|0,c=n,A[e+8>>2]=f,A[e+12>>2]=s>>>0>f>>>0?c+1|0:c,A[e>>2]=g,A[e+4>>2]=r}function cA(e,t){var r=0,a=0;A:{if(3&((a=e)^t))r=C[0|t];else{if(3&t)for(;;){if(r=C[0|t],l[0|a]=r,!r)break A;if(a=a+1|0,!(3&(t=t+1|0)))break}if(!(~(r=A[t>>2])&r-16843009&-2139062144))for(;A[a>>2]=r,r=A[t+4>>2],a=a+4|0,t=t+4|0,!(r-16843009&~r&-2139062144););}if(l[0|a]=r,255&r)for(;r=C[t+1|0],l[a+1|0]=r,a=a+1|0,t=t+1|0,r;);}return e}function te(e){var t,r=0,a=0;F=t=F-16|0,S(+e),a=0|M(1),M(0);A:if((a&=2147483647)>>>0<=1072243195){if(r=1,a>>>0<1044816030)break A;r=Ot(e,0)}else if(r=e-e,!(a>>>0>=2146435072)){e:switch(3&k8(e,t)){case 0:r=Ot(Q[t>>3],Q[t+8>>3]);break A;case 1:r=-Nt(Q[t>>3],Q[t+8>>3],1);break A;case 2:r=-Ot(Q[t>>3],Q[t+8>>3]);break A;default:break e}r=Nt(Q[t>>3],Q[t+8>>3],1)}return F=t+16|0,e=r}function fi(e,t,r,a){var s=0,n=0,g=0;if(!((lA(a)+lA(t)|0)>=(0|r))){for(g=A[36115],r=a;s=C[0|r];)if(r=r+1|0,!((0|s)>=(0|g))){A:{e:switch(s=A[144464+(s<<2)>>2],C[s+11|0]-1|0){case 1:break A;case 0:break e;default:continue}n=C[s+14|0]<4|n;continue}1&(C[s+4|0]>>>1|n)||(A[e+8212>>2]=A[e+8212>>2]+1),A[e+8208>>2]=A[e+8208>>2]+1,n=0}t&&P0(t,a)}}function Hr(e){var t,r=0;F=t=F-16|0,S(+e),r=0|M(1),M(0);A:if((r&=2147483647)>>>0<=1072243195){if(r>>>0<1045430272)break A;e=Nt(e,0,0)}else if(r>>>0>=2146435072)e-=e;else{e:switch(3&k8(e,t)){case 0:e=Nt(Q[t>>3],Q[t+8>>3],1);break A;case 1:e=Ot(Q[t>>3],Q[t+8>>3]);break A;case 2:e=-Nt(Q[t>>3],Q[t+8>>3],1);break A;default:break e}e=-Ot(Q[t>>3],Q[t+8>>3])}return F=t+16|0,e}function rl(e){var t=0;A[e+296>>2]=303173648,A[e+300>>2]=370677780,t=A[26341],A[e+304>>2]=A[26340],A[e+308>>2]=t,t=A[26343],A[e+312>>2]=A[26342],A[e+316>>2]=t,ti(e),A[e+56>>2]=2,A[e+36>>2]=3,A[e+40>>2]=1074,l[e+168|0]=5,A[e+132>>2]=32,A[e+104>>2]=1032,A[e+108>>2]=66,A[e+8>>2]=5,A[e+12>>2]=32,l[e+365|0]=64|C[e+365|0],l[e+368|0]=64|C[e+368|0],l[e+396|0]=64|C[e+396|0],l[e+399|0]=64|C[e+399|0]}function al(e,t,r){var a=0,s=0,n=0;A:{if(!(a=A[r+16>>2])){if(ki(r))break A;a=A[r+16>>2]}if(a-(n=A[r+20>>2])>>>0<t>>>0)return 0|xA[A[r+36>>2]](r,e,t);e:if(A[r+80>>2]<0)a=0;else{for(s=t;;){if(!(a=s)){a=0;break e}if(C[(s=a-1|0)+e|0]==10)break}if((s=0|xA[A[r+36>>2]](r,e,a))>>>0<a>>>0)break A;e=e+a|0,t=t-a|0,n=A[r+20>>2]}MA(n,e,t),A[r+20>>2]=A[r+20>>2]+t,s=t+a|0}return s}function il(e){var t,r=0,a=0;A:{if((0|(t=A[34064]))>0)for(;;){if((a=A[136284+(r<<4)>>2])&&!c0(e,a)){if(A[136276+(r<<4)>>2])return r;if(a=-1,ei(0,r))break A;return r}if((0|t)==(0|(r=r+1|0)))break}a=-1,ei(e,t)||(r=Re(A[12+(136272+(A[34064]<<4)|0)>>2],lA(e)+1|0),a=A[34064],A[12+(136272+(a<<4)|0)>>2]=r,cA(r,e),A[34064]=a+1)}return a}function sl(e,t){var r,a=0,s=0,n=0,g=0;for(F=r=F-16|0,l[0|t]=0,(a=15&A[e>>2])&&(t=(s=lA(t=cA(t,Ht(128496,64|a))))+t|0),a=8;;){A:{e:{if(a>>>0<=29){if(A[e>>2]>>>a&1)break e;break A}if(!(A[e+4>>2]>>>a-32&1)|a>>>0<32)break A}(0|(s=(g=lA(n=Ht(128496,a))+1|0)+s|0))>=80||(A[r>>2]=n,nA(t,84439,r),t=t+g|0)}if((0|(a=a+1|0))==64)break}F=r+16|0}function nl(e,t,r){var a,s=0,n=0,g=0;if(F=a=F-16|0,C[0|e]){for(g=A[30450];;)if(n=e,e=e+1|0,!((0|(s=l[0|n]))==32|s-9>>>0<5)){for((0|(s=y2(n)))>0&&((0|s)<32?A[t>>2]=A[t>>2]|1<<s:(n=Ht(129568,r),A[a+4>>2]=s,A[a>>2]=n,n0(g,84902,a)),n=e);n=(e=n)+1|0,(s=l[0|e])-48>>>0<10|(32|s)-97>>>0<26;);if(!s)break}}F=a+16|0}function Mt(e,t,r){var a=0,s=0,n=0,g=0;A:if(t&&!((0|(s=r-4|0))<=0))for(n=(0|(r=A[t-4>>2]))!=34?(0|r)==39?r:0:r,r=0;;){if(g=r,!(r=A[t>>2]))break A;e:{if(!n){if((0|r)==32|r-9>>>0<5)break A;if((0|r)!=47)break e;break A}if((0|g)!=92&&(0|r)==(0|n))break A}if(t=t+4|0,!((0|s)>(0|(a=k0(r,e+a|0)+a|0))))break}return l[e+a|0]=0,a}function r0(e){var t=0;A:if(!De(e)){t=0;e:if(!(e>>>0<768)){if(e-2305>>>0<=1270){if((124&e)>>>0<100)break A;if(t=1,Gi(93850,e))break e;return e-3450>>>0<6}if((0|e)==1541|e-1456>>>0<19|(0|e)==1648||(0|(t=-256&e))==10240|(0|t)==4352|e-3904>>>0<125|e>>>0<880)break A;t=1,e-1611>>>0<20||(t=e-12353>>>0<30400)}return t}return 1}function ui(e,t){var r=0;e?((r=A[e+4>>2])&&cA(133208,r),(r=A[e>>2])&&A0(133168,r,40),A[33289]=C[e+14|0],A[33291]=C[e+13|0],A[33290]=C[e+12|0],A0(134672,C[0|t]!=33|C[t+1|0]!=118?t:(C[t+2|0]==47?3:0)+t|0,40),e=A[50298],A[33678]=A[50297],A[33679]=e,e=A[50302],A[33682]=A[50301],A[33683]=e,e=A[50300],A[33680]=A[50299],A[33681]=e):QA(133152,0,76)}function ol(e,t,r,a){l[e+53|0]=1;A:if(A[e+4>>2]==(0|r)){l[e+52|0]=1;e:{if(!(r=A[e+16>>2])){if(A[e+36>>2]=1,A[e+24>>2]=a,A[e+16>>2]=t,(0|a)!=1)break A;if(A[e+48>>2]==1)break e;break A}if((0|t)==(0|r)){if((0|(r=A[e+24>>2]))==2&&(A[e+24>>2]=a,r=a),A[e+48>>2]!=1)break A;if((0|r)==1)break e;break A}A[e+36>>2]=A[e+36>>2]+1}l[e+54|0]=1}}function G2(e,t){var r=0,a=0,s=0,n=0,g=0;A:if(r=A[t>>2])for(;;){a=0;e:if(e){for(;g=l[a+r|0],(s=A[(a<<2)+e>>2])&&(a=a+1|0,(0|g)==(0|s)););r:switch(s-34|0){case 0:case 5:break r;default:break e}if(!g)break A}if(!(r=A[((n=n+1|0)<<3)+t>>2]))break}return A[4+((n<<3)+t|0)>>2]}function Q2(e,t){A:if((0|t)>=1024){if(e*=898846567431158e293,t>>>0<2047){t=t-1023|0;break A}e*=898846567431158e293,t=((0|t)>=3069?3069:t)-2046|0}else(0|t)>-1023||(e*=2004168360008973e-307,t>>>0>4294965304?t=t+969|0:(e*=2004168360008973e-307,t=((0|t)<=-2960?-2960:t)+1938|0));return N(0,0),N(1,t+1023<<20),e*+H()}function ye(e,t,r,a){var s,n,g,f=0;return F=n=F-16|0,A[n+12>>2]=a,F=s=F-160|0,g=t?e:s+158|0,A[s+144>>2]=g,f=-1,e=t-1|0,A[s+148>>2]=e>>>0<=t>>>0?e:0,e=QA(s,0,144),A[e+76>>2]=-1,A[e+36>>2]=17,A[e+80>>2]=-1,A[e+44>>2]=e+159,A[e+84>>2]=e+144,(0|t)<0?A[56798]=61:(l[0|g]=0,f=J8(e,r,a,15,16)),F=e+160|0,F=n+16|0,f}function li(e,t){var r=0,a=0,s=0;A:if(r=C[0|e])for(;;){if(!(a=C[0|t])){s=r;break A}if((0|r)!=(0|a)&&(0|(a=r-65>>>0<26?32|r:r))!=(0|((r=C[0|t])-65>>>0<26?32|r:r))){s=C[0|e];break A}if(t=t+1|0,r=C[e+1|0],e=e+1|0,!r)break}return(s=(e=255&s)-65>>>0<26?32|e:e)-((e=C[0|t])-65>>>0<26?32|e:e)|0}function Ci(e,t,r){var a=0,s=0;if(a=A[r+72>>2],A[r+72>>2]=a-1|a,(0|(a=A[r+4>>2]))==(0|(s=A[r+8>>2]))?a=t:(MA(e,a,a=t>>>0>(a=s-a|0)>>>0?a:t),A[r+4>>2]=a+A[r+4>>2],e=e+a|0,a=t-a|0),a)for(;;){if(Ii(r)||!(s=0|xA[A[r+32>>2]](r,e,a)))return t-a|0;if(e=e+s|0,!(a=a-s|0))break}return t}function y2(e){for(var t=0,r=0,a=0,s=0;e=(t=e)+1|0,(0|(r=l[0|t]))==32|r-9>>>0<5;);A:{e:{r:switch((r=l[0|t])-43|0){case 0:break e;case 2:break r;default:break A}s=1}r=l[0|e],t=e}if(r-48>>>0<10)for(;a=48+(T(a,10)-l[0|t]|0)|0,e=l[t+1|0],t=t+1|0,e-48>>>0<10;);return s?a:0-a|0}function ci(e,t){var r,a,s,n=0;return F=r=F-32|0,A[t>>2]=0,A[t+4>>2]=0,A[(n=a=t+24|0)>>2]=0,A[n+4>>2]=0,A[(n=s=t+16|0)>>2]=0,A[n+4>>2]=0,A[(n=t+8|0)>>2]=0,A[n+4>>2]=0,A[r+28>>2]=t+28,A[r+24>>2]=a,A[r+20>>2]=t+20,A[r+16>>2]=s,A[r+12>>2]=t+12,A[r+8>>2]=n,A[r+4>>2]=t+4,A[r>>2]=t,e=qA(e,84553,r),F=r+32|0,e}function gl(e){var t=0,r=0,a=0;if((t=C[0|e])&&((r=C[e+1|0])?(r=t|r<<8,(t=C[e+2|0])&&(r|=t<<16,(e=C[e+3|0])&&(r|=e<<24))):r=t),(0|(t=A[36115]))>0)for(e=0;;){if(!(!(a=A[144464+(e<<2)>>2])|A[a>>2]!=(0|r)))return C[a+10|0];if((0|t)==(0|(e=e+1|0)))break}return 0}function di(e,t,r,a){var s,n=0,g=0,f=0,c=0,I=0;F=s=F-240|0,A[s>>2]=e,f=1;A:if(!((0|r)<2))for(n=e;;){if((0|M2(e,g=(n=n-4|0)-A[((c=r-2|0)<<2)+a>>2]|0,t))>=0&&(0|M2(e,n,t))>=0)break A;if(I=g,n=(g=(0|M2(g,n,t))>=0)?I:n,A[(f<<2)+s>>2]=n,f=f+1|0,!((0|(r=g?r-1|0:c))>1))break}fl(s,f),F=s+240|0}function nA(e,t,r){var a,s,n,g=0;return F=s=F-16|0,A[s+12>>2]=r,F=a=F-160|0,MA(n=a+8|0,124528,144),A[a+52>>2]=e,A[a+28>>2]=e,g=(g=-2-e|0)>>>0>2147483647?2147483647:g,A[a+56>>2]=g,e=e+g|0,A[a+36>>2]=e,A[a+24>>2]=e,e=Ni(n,t,r),g&&(t=A[a+28>>2],l[t-((0|t)==A[a+24>>2])|0]=0),F=a+160|0,F=s+16|0,e}function fl(e,t){var r,a=0,s=0,n=0,g=0,f=0;if(a=4,F=r=F-256|0,(0|t)>=2)for(A[(f=(t<<2)+e|0)>>2]=r;;){for(n=a>>>0>=256?256:a,MA(A[f>>2],A[e>>2],n),s=0;g=(s<<2)+e|0,s=s+1|0,MA(A[g>>2],A[(s<<2)+e>>2],n),A[g>>2]=A[g>>2]+n,(0|t)!=(0|s););if(!(a=a-n|0))break}F=r+256|0}function dA(e,t,r){var a,s=0;return F=a=F-96|0,A[a+88>>2]=0,A[a+92>>2]=1073741824,A[a+84>>2]=t,t=N0(e,a+84|0,r,a+88|0,2,0),536870912&(s=A[a+88>>2])?(t=A[47202],A[47202]=0,l[a+2|0]=32,B[a>>1]=8192,A0(s=3|a,A[a+84>>2],77),e=yt(e,s,0,0),cA(r,189088),A[47202]=t):e=t?s:0,F=a+96|0,e}function Pr(e,t,r){var a=0,s=0,n=0;s=Yt(e),a=A[t>>2];A:{e:if((0|s)>=0){if(a){if(!c0(e,r))break e;(n=A[a+688>>2])&&SA(n),SA(a),A[t>>2]=0}A[t>>2]=X1(e),e=cA(r,e),y8(r=A[t>>2],r+228|0,0)&&(W0(A[A[32972]+60>>2]),l[0|e]=0,s=-1),a=A[t>>2],A[a+292>>2]=s}else if(!a)break A;l[a+268|0]=0}return s}function Sr(e){var t=0,r=0;return(0|(t=A[e+76>>2]))>=0&(!t|A[56823]!=(-1073741825&t))?(r=A[(t=e+76|0)>>2],A[t>>2]=r||1073741823,(0|(r=A[e+4>>2]))==A[e+8>>2]?e=Rr(e):(A[e+4>>2]=r+1,e=C[0|r]),A[t>>2]=0,e):(0|(t=A[e+4>>2]))!=A[e+8>>2]?(A[e+4>>2]=t+1,C[0|t]):Rr(e)}function F0(e,t,r){var a=0,s=0;A:{e:{if(r>>>0>=4){if(3&(e|t))break e;for(;;){if(A[e>>2]!=A[t>>2])break e;if(t=t+4|0,e=e+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break A}for(;;){if((0|(a=C[0|e]))==(0|(s=C[0|t]))){if(t=t+1|0,e=e+1|0,r=r-1|0)continue;break A}break}return a-s|0}return 0}function re(e,t){var r,a=0,s=0,n=0;F=r=F-16|0,t?(T0(r,s=((a=t>>31)^t)-a|0,0,0,0,(a=oA(s))+81|0),s=0+A[r+8>>2]|0,a=(65536^A[r+12>>2])+(16414-a<<16)|0,n=-2147483648&t|(a=s>>>0<n>>>0?a+1|0:a),a=A[r+4>>2],t=A[r>>2]):t=0,A[e>>2]=t,A[e+4>>2]=a,A[e+8>>2]=s,A[e+12>>2]=n,F=r+16|0}function zt(e){var t,r=0,a=0,s=0;if((0|(r=gi(e,61)))==(0|e))return 0;A:if(!C[(t=r-e|0)+e|0]&&(r=A[56800])&&(a=A[r>>2])){for(;;){if(Il(e,a,t)||(a=A[r>>2]+t|0,C[0|a]!=61)){if(a=A[r+4>>2],r=r+4|0,a)continue;break A}break}s=a+1|0}return s}function Yt(e){var t=0,r=0;A:if(!((0|(r=A[34461]))<=0)){for(;;){if(!c0(e,T(t,44)+137856|0)){A[34457]=t;break A}if((0|r)==(0|(t=t+1|0)))break}return-1}return(e=(0|t)==(0|r))?-1:((0|(e=e?-1:t))!=A[36114]&&(A[36115]=0,ni(e),A[36114]=e,A[36115]=A[36115]+1),t)}function bi(e,t,r,a){var s=0,n=0;A:if((32|C[0|t])!=32){if(s=((0|a)>2)<<1,n=q1(e,t,r,s=(0|a)>1?4|s:s),C[0|r]!=21)for(s|=1,t=t+n|0,n=1;;){if((32|C[0|t])==32)break A;if(t=q1(e,t,r,s)+t|0,n=n+1|0,C[0|r]==21)break}return cA(189088,r),0}return j8(e,r,a,n),t}function k0(e,t){var r,a=0,s=0,n=0;if(e>>>0<=127)return l[0|t]=e,1;if(e>>>0>=1114112)return l[0|t]=32,1;for(a=T(r=e>>>0<2048?1:e>>>0<65536?2:3,6),l[0|t]=C[r+93842|0]|e>>>a;a=a-6|0,l[(s=s+1|0)+t|0]=e>>>a&63|128,(0|(n=n+1|0))!=(0|r););return r+1|0}function ul(e){var t=0,r=0;A:{if((0|(t=A[e+12>>2]))>=A[e+16>>2]){if(t=0,(0|(r=0|HC(A[e+8>>2],e+24|0,2048)))<=0){if(!r|(0|r)==-44)break A;return A[56798]=0-r,0}A[e+16>>2]=r}r=t,t=e+t|0,A[e+12>>2]=r+y[t+40>>1],r=A[t+36>>2],A[e>>2]=A[t+32>>2],A[e+4>>2]=r,t=t+24|0}return t}function ll(e,t){var r,a=0;if(a=A[e+632>>2])return!!(0|G0(a,t));A:{e:{if((0|(r=A[e+600>>2]))>0){if(a=0,(t=t-r|0)-1>>>0<255)break e;break A}if((a=t-192|0)>>>0<=413)return 128&C[344+(C[a+94240|0]+e|0)|0];if(a=0,t>>>0>255)break A}a=128&C[344+(e+t|0)|0]}return a}function Nt(e,t,r){var a,s,n;return n=(a=e*e)*(a*a)*(158969099521155e-24*a-25050760253406863e-24)+(a*(27557313707070068e-22*a-.0001984126982985795)+.00833333333332249),s=a*e,r?e-(a*(.5*t-n*s)-t+.16666666666666632*s):s*(a*n-.16666666666666632)+e}function q2(e,t){var r,a=0,s=0,n=0;F=r=F-16|0,t?(T0(r,a=t,0,0,0,(t=oA(t))+81|0),a=0+A[r+8>>2]|0,t=(65536^A[r+12>>2])+(16414-t<<16)|0,n=s>>>0>a>>>0?t+1|0:t,s=A[r+4>>2],t=A[r>>2]):t=0,A[e>>2]=t,A[e+4>>2]=s,A[e+8>>2]=a,A[e+12>>2]=n,F=r+16|0}function Cl(e){var t,r=0;F=t=F-16|0,l[t+15|0]=10;A:{if(!(r=A[e+16>>2])){if(ki(e))break A;r=A[e+16>>2]}(0|r)==(0|(r=A[e+20>>2]))|A[e+80>>2]==10?xA[A[e+36>>2]](e,t+15|0,1):(A[e+20>>2]=r+1,l[0|r]=10)}F=t+16|0}function Ii(e){var t,r=0;return r=A[e+72>>2],A[e+72>>2]=r-1|r,A[e+20>>2]!=A[e+28>>2]&&xA[A[e+36>>2]](e,0,0),A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,4&(r=A[e>>2])?(A[e>>2]=32|r,-1):(t=A[e+44>>2]+A[e+48>>2]|0,A[e+8>>2]=t,A[e+4>>2]=t,r<<27>>31)}function Tt(e){var t=0;A:{e:{r:{i:{if((0|(e=$8(e)))<=268437502){if(!e)break A;if((0|e)==268436479)break e;if((0|e)!=268437247)break i;return 2}if((0|e)==268437503|(0|e)==268437759)break r;if((0|e)==268439295)break A}return-1}return 2}t=1}return t}function lA(e){var t=0,r=0,a=0;A:{if(3&(t=e))for(;;){if(!C[0|t])break A;if(!(3&(t=t+1|0)))break}for(;r=t,t=t+4|0,!(~(a=A[r>>2])&a-16843009&-2139062144););for(;r=(t=r)+1|0,C[0|t];);}return t-e|0}function Be(e,t,r){var a,s=0,n=0,g=0;A[e+112>>2]=t,A[e+116>>2]=r,a=A[e+4>>2],s=A[e+44>>2]-a|0,A[e+120>>2]=s,A[e+124>>2]=s>>31,s=A[e+8>>2],t|r&&((0|r)>=(0|(g=(n=s-a|0)>>31))&t>>>0>=n>>>0|(0|r)>(0|g)||(s=t+a|0)),A[e+104>>2]=s}function cl(e,t){var r,a,s=0;if(S(+e),r=0|M(1),a=0|M(0),(0|(s=r>>>20&2047))!=2047){if(!s)return e==0?s=0:(e=cl(18446744073709552e3*e,t),s=A[t>>2]+-64|0),A[t>>2]=s,e;A[t>>2]=s-1022,N(0,0|a),N(1,-2146435073&r|1071644672),e=+H()}return e}function WC(e,t,r){return A[e+20>>2]!=A[e+28>>2]&&(xA[A[e+36>>2]](e,0,0),!A[e+20>>2])||(A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,xA[A[e+40>>2]](e,t,r,0),(0|_)<0)?-1:(A[e+4>>2]=0,A[e+8>>2]=0,A[e>>2]=-17&A[e>>2],0)}function Ot(e,t){var r,a,s=0;return(a=1-(s=.5*(r=e*e)))+(1-a-s+(r*(r*(r*(2480158728947673e-20*r-.001388888888887411)+.0416666666666666)+(s=r*r)*s*(r*(-11359647557788195e-27*r+2087572321298175e-24)-27557314351390663e-23))-e*t))}function _2(e,t,r){var a=0,s=0;if(t)for(;r=r-1|0,s=e,e=Oi(e,t,10),a=_,l[0|r]=s-DA(e,a,10,0)|48,s=t>>>0>9,t=a,s;);if(e)for(;t=(e>>>0)/10|0,l[0|(r=r-1|0)]=e-T(t,10)|48,a=e>>>0>9,e=t,a;);return r}function dl(e,t){var r=0,a=0,s=0;A:if(e){for(;s=l[t+r|0],(a=A[(r<<2)+e>>2])&&(r=r+1|0,(0|s)==(0|a)););e:switch(a-34|0){case 0:case 5:break e;default:break A}if(!s)return 0}return 1}function bl(e,t,r){var a,s=0;return F=a=F-16|0,!(64&t)&&(s=0,4259840&~t)||(A[a+12>>2]=r+4,s=A[r>>2]),A[a>>2]=s,A[a+4>>2]=0,(e=0|gA(-100,0|e,32768|t,0|a))>>>0>=4294963201&&(A[56798]=0-e,e=-1),F=a+16|0,e}function Il(e,t,r){var a=0,s=0,n=0;if(!r)return 0;A:if(a=C[0|e]){for(;;){if((s=C[0|t])&&!(!(r=r-1|0)|(0|a)!=(0|s))){if(t=t+1|0,a=C[e+1|0],e=e+1|0,a)continue;break A}break}n=a}return(255&n)-C[0|t]|0}function pi(e,t){var r,a=0;F=a=F-128|0,a=QA(a,0,128),l[a+98|0]=9,l[a+66|0]=9,l[a+34|0]=e,B[a+68>>1]=1,r=A[36125],A[a+104>>2]=r,A[a+72>>2]=r,A[a+40>>2]=A[144464+(e<<2)>>2],l[a+2|0]=9,A[a+8>>2]=r,V0(0,0,a+32|0,t,0),F=a+128|0}function pl(e){var t=0,r=0,a=0;if(l[A[e>>2]]-48>>>0>=10)return 0;for(;a=A[e>>2],r=-1,t>>>0<=214748364&&(r=(0|(r=l[0|a]-48|0))>(2147483647^(t=T(t,10)))?-1:r+t|0),A[e>>2]=a+1,t=r,l[a+1|0]-48>>>0<10;);return t}function hl(e,t){var r=0;if(!(!e|A[e>>2]-48>>>0>=10)){if(A[e>>2]-48>>>0<10)for(;r=(A[e>>2]+T(r,10)|0)-48|0,A[(e=e+4|0)>>2]-48>>>0<10;);(0|t)==1&&(r=(0|We(A[e>>2]))==115?T(r,1e3):r)}return r}function v0(e){var t=0;t=1;A:{e:switch(0|A2(e)){case 30:if(t=0,(0|e)==160|(0|e)==8199|(0|e)==8239)break A;return 1;case 0:if(e-9>>>0<5)return 1;if((0|e)==133)break A;break;case 28:case 29:break A;default:break e}t=0}return t}function ml(e,t,r){var a,s=0;return F=a=F-16|0,l[a+6|0]=0,l[a+7|0]=95,s=k0(s=t,t=a+8|0)+a|0,l[s+8|0]=32,l[s+9|0]=0,dA(e,a+7|0,r)||(l[a+7|0]=32,dA(e,t,r)||oe(e,t,r,20,0,0,0)),F=a+16|0,l[0|r]}function kl(e){var t=0,r=0;r=170;A:if(!((0|e)<170))for(;;){if((0|e)==(0|r))return y[101616+(t<<1|2)>>1];if((2147483646&(t=t+2|0))==124)break A;if(!((0|(r=y[101616+(t<<1)>>1]))<=(0|e)))break}return 0}function DA(e,t,r,a){var s,n,g,f,c=0,I=0;return f=T(c=r>>>16|0,I=e>>>16|0),c=(65535&(I=((g=T(s=65535&r,n=65535&e))>>>16|0)+T(I,s)|0))+T(c,n)|0,_=(T(t,r)+f|0)+T(e,a)+(I>>>16)+(c>>>16)|0,65535&g|c<<16}function We(e){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=A[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|e))return(t=A[1048+(a<<4)>>2])||e;if(!((0|(s=(r=e>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return e}function hi(e){var t=0,r=0,a=0,s=0;for(t=2778;;){if((0|(r=A[1040+((a=(t+s|0)/2|0)<<4)>>2]))==(0|e))return(t=A[1044+(a<<4)>>2])||e;if(!((0|(s=(r=e>>>0>r>>>0)?a+1|0:s))<=(0|(t=r?t:a-1|0))))break}return e}function Ke(e){var t,r=0;return F=t=F-112|0,(e=0|he(0|e,0|t))>>>0>=4294963201&&(A[56798]=0-e,e=-1),r=0-A[56798]|0,e||(r=-31,(61440&A[t+12>>2])!=16384&&(r=A[t+40>>2])),F=t+112|0,e=r}function wl(e,t,r){var a;if(!(a=A[e+16>>2]))return A[e+36>>2]=1,A[e+24>>2]=r,void(A[e+16>>2]=t);A:{if((0|t)==(0|a)){if(A[e+24>>2]!=2)break A;return void(A[e+24>>2]=r)}l[e+54|0]=1,A[e+24>>2]=2,A[e+36>>2]=A[e+36>>2]+1}}function O0(e,t,r,a,s){var n;if(F=n=F-256|0,!(73728&s|(0|r)<=(0|a))){if(QA(n,255&t,(r=(a=r-a|0)>>>0<256)?a:256),!r)for(;M0(e,n,256),(a=a-256|0)>>>0>255;);M0(e,n,a)}F=n+256|0}function e2(e,t,r){var a=0;A:{if(e){if(a=A[e>>2]){SA(A[a+4>>2]),a=A[e>>2];break A}if(a=m0(16),A[e>>2]=a,a)break A;t=48}return t}return A[a>>2]=0,A[a+4>>2]=Lr(r),e=A[e>>2],A[e+8>>2]=0,A[e+12>>2]=0,t}function H0(e){var t=0,r=0;Yr(e),xA[A[e+12>>2]](e),1&l[0|e]||((t=A[e+52>>2])&&(A[t+56>>2]=A[e+56>>2]),(r=A[e+56>>2])&&(A[r+52>>2]=t),A[56816]==(0|e)&&(A[56816]=r),SA(A[e+96>>2]),SA(e))}function Ze(e){var t=0,r=0;t=1;A:{e:{r:{i:switch((r=A2(e))-9|0){case 1:break A;case 6:case 18:break r;case 0:break i;default:break e}return(0|We(e))!=(0|e)}return V2(e,r)>>>15&1}t=0}return t}function mi(e){var t,r,a,s=0,n=0;if(a=lA(e)+1|0,s=A[33282],(0|(r=(t=A[33287])+a|0))>=A[33286]){if(!(s=Re(s,n=r+1e3|0)))return-1;A[33286]=n,A[33282]=s}return MA(s+t|0,e,a),A[33287]=r,t}function ki(e){var t=0;return t=A[e+72>>2],A[e+72>>2]=t-1|t,8&(t=A[e>>2])?(A[e>>2]=32|t,-1):(A[e+4>>2]=0,A[e+8>>2]=0,t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,A[e+16>>2]=t+A[e+48>>2],0)}function Bl(e,t,r,a){A:if(e){e:switch(t+2|0){case 0:return void(l[0|e]=r);case 1:return void(B[e>>1]=r);case 2:case 3:return void(A[e>>2]=r);case 5:break e;default:break A}A[e>>2]=r,A[e+4>>2]=a}}function wi(e,t,r,a,s,n,g,f,c){var I;F=I=F-16|0,j0(I,t,r,a,s,n,g,f,-2147483648^c),a=A[I>>2],r=A[I+4>>2],t=A[I+12>>2],A[e+8>>2]=A[I+8>>2],A[e+12>>2]=t,A[e>>2]=a,A[e+4>>2]=r,F=I+16|0}function c0(e,t){var r=0,a=0;A:if(!(!(r=C[0|e])|(0|r)!=(0|(a=C[0|t]))))for(;;){if(a=C[t+1|0],!(r=C[e+1|0]))break A;if(t=t+1|0,e=e+1|0,(0|r)!=(0|a))break}return r-a|0}function Ht(e,t){var r=0,a=0,s=0;if(!(r=A[e>>2]))return 84399;if(A[e+4>>2]!=(0|t))for(;;){if(!(r=A[(a=e+8|0)>>2]))return 84399;if(s=e,e=a,A[s+12>>2]==(0|t))break}return r}function El(e,t,r){var a=0,s=0,n=0;A:if(r){for(;;){if(!(!(a=A[t>>2])|!(s=A[e>>2])|(0|a)!=(0|s))){if(t=t+4|0,e=e+4|0,r=r-1|0)continue;break A}break}n=s-a|0}return n}function q0(e){var t,r=0,a=0;if((0|(t=A[36115]))>0)for(;;){if(!(!(a=A[144464+(r<<2)>>2])|A[a>>2]!=(0|e)))return C[a+10|0];if((0|t)==(0|(r=r+1|0)))break}return 0}function $2(e){var t,r;return(e=(t=A[33175])+(r=e+7&-8)|0)>>>0<=t>>>0&&r||e>>>0>j.byteLength/65536<<16>>>0&&!(0|p0(0|e))?(A[56798]=48,-1):(A[33175]=e,t)}function At(e){var t=0;A:if(!((t=A2(e))>>>0>27)){if(!(1<<t&134259072)){if((0|t)==6)return 1;if((0|t)!=9)break A;return(0|hi(e))!=(0|e)}return V2(e,t)>>>14&1}return 0}function Bi(e,t){var r=0;return l[0|e]=t>>>24,l[0|(r=(t>>>0>16777215)+e|0)]=t>>>16,l[0|(r=r+!!(16711680&t)|0)]=t>>>8,l[0|(r=r+!!(65280&t)|0)]=t,l[r+!!(255&t)|0]=0,e}function Ei(e,t){A:if((0|(e=J2(e,t)))<=268437502){if(!e|(0|e)==268436479|(0|e)!=268437247)break A;return}}function xl(e){var t=0;return t=A[e>>2]-1|0,(t=l[121600+(T(0-t&t,124511785)>>>27|0)|0])||(e=A[e+4>>2],t=(e=l[121600+(T(0-e&e,124511785)>>>27|0)|0])?e+32|0:0),t}function Fr(e){var t=0,r=0,a=0;A:{if(!((t=A2(e))>>>0>27)){if(r=1,116672&(a=1<<t))break A;if(134227968&a)return V2(e,t)>>>10&1}r=0}return r}function De(e){var t=0,r=0,a=0;A:{if(!((t=A2(e))>>>0>27)){if(r=1,34752&(a=1<<t))break A;if(134227968&a)return V2(e,t)>>>10&1}r=0}return r}function xi(){var e,t=0;(e=A[56797])&&((t=A[e+8>>2])&&xA[A[A[t>>2]+12>>2]](t),(t=A[e+4>>2])&&xA[A[A[t>>2]+16>>2]](t),SA(e)),A[56797]=0,A[56797]=z8()}function vl(e,t){var r=0;return e&&(r=DA(e,0,t,0),(e|t)>>>0<65536||(r=_?-1:r)),!(e=m0(r))|!(3&C[e-4|0])||QA(e,0,r),e}function vi(e,t){var r,a;a=A[130128+(t-T(r=(0|t)/100|0,100)<<2)>>2],A[e+100>>2]=a,A[e+96>>2]=a,t+99>>>0>=199&&(A[e+100>>2]=A[130128+(r<<2)>>2])}function Gl(e){var t=0;(t=m0(1344))&&(e=MA(t,e,1344),t=216192+(A[50758]<<4)|0,A[t>>2]=11,A[t+8>>2]=e,e=A[50758]+1|0,A[50758]=(0|e)<=169?e:0)}function Le(e,t){var r=0;A:if(r=A[e>>2])for(;;){if(t&&!c0(t,r))break A;if(!(r=A[(e=e+8|0)>>2]))break}return A[e+4>>2]}function Rr(e){var t,r=0;return F=t=F-16|0,r=-1,Ii(e)||(0|xA[A[e+32>>2]](e,t+15|0,1))==1&&(r=C[t+15|0]),F=t+16|0,r}function G0(e,t){var r=0,a=0;if(t){for(;a=e,(r=A[e>>2])&&(e=a+4|0,(0|t)!=(0|r)););return r?a:0}return(Ml(e)<<2)+e|0}function Gi(e,t){var r=0,a=0;if(r=y[e>>1])for(;;){if(a=a+1|0,(0|t)==(0|r))return a;if(!(r=y[(a<<1)+e>>1]))break}return 0}function Wr(e,t){var r=0,a=0;t>>>0<=31?(a=A[e>>2],r=e+4|0):(t=t-32|0,r=e),r=A[r>>2],A[e>>2]=a<<t,A[e+4>>2]=r<<t|a>>>32-t}function Kr(e,t){var r=0,a=0;r=A[e+4>>2],t>>>0<=31?a=A[e>>2]:(t=t-32|0,a=r,r=0),A[e+4>>2]=r>>>t,A[e>>2]=r<<32-t|a>>>t}function ae(e){var t=0;e=e||1;A:{for(;;){if(t=m0(e))break A;if(!(t=A[57276]))break;xA[0|t]()}x0(),K()}return t}function Zr(e){return e>>>0<=131071?C[117424+(e>>>3&31|C[117424+(e>>>8|0)|0]<<5)|0]>>>(7&e)&1:e>>>0<196606}function Ql(e,t,r,a,s,n,g,f,c){A[e>>2]=t,A[e+4>>2]=r,A[e+8>>2]=a,A[e+12>>2]=65535&s|(c>>>16&32768|s>>>16&32767)<<16}function Me(e,t,r){return r?(0|e)==(0|t)?1:!c0(A[e+4>>2],A[t+4>>2]):A[e+4>>2]==A[t+4>>2]}function yl(e){var t=0;(0|(t=0|V1(-100,0|e,0)))==-31&&(t=0|L1(0|e)),t>>>0>=4294963201&&(A[56798]=0-t)}function Qi(){var e;e=m0(84)+80|0,A[e>>2]=125420,A[e>>2]=125380,A[e>>2]=125400,RC(0|e,125512,9),K()}function yi(e){var t,r;return t=Sr(e),r=Sr(e),Sr(e)<<16&16711680|r<<8&65280|255&t|Sr(e)<<24}function et(e){var t=0;return e?(t=1,e-9472>>>0<160|e-65529>>>0<7||(t=v0(e)),t):0}function Dl(e,t){var r;return r=t>>31,e=(A[e+76>>2],WC(e,t,r))}function Ml(e){var t=0,r=0;for(r=e;r=(t=r)+4|0,A[t>>2];);return t-e>>2}function zl(e,t){return l[0|e]=t,l[e+4|0]=0,l[e+3|0]=t>>>24,l[e+2|0]=t>>>16,l[e+1|0]=t>>>8,e}function R0(e,t){var r=0;return(-1>>>(r=31&t)&e)<<r|((r=e)&-1<<(e=0-t&31))>>>e}function Pt(e,t){var r=0;return(0|e)==73&&(r=305,C[t+173|0])||(r=We(e)),r}function W0(e){A[36114]!=(0|e)&&(A[36115]=0,ni(e),A[36114]=e,A[36115]=A[36115]+1)}function Di(e){return e?A[34460]+e|0:(Mi(85328,20,A[30450]),A[32320])}function Lr(e){var t,r;return(r=m0(t=lA(e)+1|0))?MA(r,e,t):0}function Yl(){var e;A[33287]=0,(e=A[33282])&&(SA(e),A[33286]=0,A[33282]=0)}function n0(e,t,r){var a;F=a=F-16|0,A[a+12>>2]=r,Ni(e,t,r),F=a+16|0}function Mi(e,t,r){e=(A[r+76>>2],al(e,t,r))}function D2(e,t){return t?e<<24|(65280&e)<<8|e>>>8&65280|e>>>24:e}function tt(e){return e=e-8212>>>0>=12?Gi(93856,e):1}function Nl(e){var t=0;e&&((t=A[e+688>>2])&&SA(t),SA(e))}function Tl(e){return e=(0|e)<=127?Ee(87712,e):0}function zi(e){return!(e=C[0|e]?1:F0(e,e+1|0,3))}function Ol(e){(e=(0|(e=0|ZA(0|e)))!=27?e:0)&&(A[56798]=e)}function M2(e,t,r){return e|=0,t|=0,0|xA[0|(r|=0)](e,t)}function Ee(e,t){return e=gi(e,t),C[0|e]==(255&t)?e:0}function Yi(e,t){return W8(e,t,2147483647),_=L2,Z2}function Vr(e){return e?31-oA(e-1^e)|0:32}function M0(e,t,r){32&C[0|e]||al(t,r,e)}function A0(e,t,r){l[(oi(e,t,r)+r|0)-1|0]=0}function St(e){return Pr(e,188776,189328)}function Hl(e,t){t|=0,A[(e|=0)+8>>2]=t}function Ni(e,t,r){return J8(e,t,r,0,0)}function Pl(e){return A[(e|=0)+12>>2]}function Sl(e){return A[(e|=0)+16>>2]}function Fl(e){return A[(e|=0)+20>>2]}function Ti(e){return A[(e|=0)+8>>2]}function Rl(e){return A[(e|=0)+4>>2]}function Wl(e){return A[(e|=0)>>2]}function Oi(e,t,r){return W8(e,t,r)}function Ur(e){(e|=0)&&SA(e)}function P0(e,t){cA(lA(e)+e|0,t)}function Hi(e){return 0|(e|=0)}function Kl(e){return 0}function rt(e){SA(e|=0)}function Zl(e){}h(d=C,1024,""),h(d,45536,"HhYWFhgWFhYXExYaFhIWFg4ODg4ODg4ODg4WFhoaGhYWCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoXFhMZERkGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhcaExo="),h(d,45664,""),h(d,81428,"ggAAAAAAAAIAAAAAAAAAAgAAAAAAAAAC"),h(d,81475,"AgAAAAAAACAAAAAAAAAAIA=="),h(d,81506,"IA=="),h(d,81522,"IAAAAAAAAAAg"),h(d,81618,"IA=="),h(d,81634,"IA=="),h(d,81650,"IAAAAAAAAAAg"),h(d,81682,"IAAAAAAAAAAgAAAAAAAAACAAAAAAAIAAAAAAAAAAgA=="),h(d,81728,"gAAAAAAAAACAAAAAAAAAAIA="),h(d,81760,"gAAAAAAAAACA"),h(d,81904,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAU"),h(d,81961,"FAAAAAAAAAAU"),h(d,81985,"FAAAAAAAAAAE"),h(d,82009,"BAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),h(d,82097,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),h(d,82169,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAACA"),h(d,82224,"gAAAAAAAAACA"),h(d,82272,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),h(d,82353,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),h(d,82393,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),h(d,82625,"BAAAAAAAAAAE"),h(d,82649,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),h(d,83033,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),h(d,83097,"BAAAAAAAAAAE"),h(d,83121,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAQAAAEAAAAAFAAAAQAAAAgEAAABAAAAAQQAAAAAAAACBAAAAAAAAAgEAAAAAAAAAAQAAAAAAAAABAAAAQAAAAgEAAAAAAAAAQQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAAQA=="),h(d,83288,"QA=="),h(d,83303,"AkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAACEA="),h(d,83352,"QAAAAAAAABBAAAAQAAAAgAAg"),h(d,83379,"gAAAAABAAACQggAAIEAAAJAAAAAAAAAAgAAAAABAAACQggAAIEAAAJCCAAAgAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkAAAAEBAAACQAAAAYEAAAJCCAABgQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkIIAACBAAACQggAAIAAAAIAAAAAEAAAAAAAAAIAAAAAAAAAACAAAAAAAAAAEAAAAAAAAACAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAABEAAAAAAAAAIAAAAgIIAAAAAAACAgAAAAAAAAIAAAAAAAAAAgIYAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAgAAAAAAAAICAAAAAAAAAgJIAAACAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgIIAAAAAAACAhgAAAAAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgJIAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAhg=="),h(d,83999,""),h(d,93904,"ICAgICAgICAgICYlKyNTRFpBTCEgQD9KTktWP1RYP1dBQkNIRkdZPT0sLCcqICAAIAAhACIAsAIkACUA5gDIAigAKQB+AisAzAItAC4ALwBSAjEAMgBcAjQANQA2ADcAdQI5ANACsgI8AD0APgCUAlkCUQKyA+cA8ABbAkYAYgInAWoCXwJLAGsCcQJLAVQCpgNjAoACgwK4A4oCjAJTAccD+ACSAioDXABdAF4AXwBgAGEAYgBjAGQAZQBmAGECaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegB7AHwAfQADA38APT0sLCcnAAMCBAUGBxoAAAAAAQECAwMEBQYHBwgJCgsAAAEBAgIDAwQFBgcHCAkKAAABAgMDAwQFBgcHBwgJClNldFdvcmRTdHJlc3MA5ADrAO8A9gD8AP8AAAAAAAAAYWFhYWFhYWNlZWVlaWlpaWRub29vb28Ab3V1dXV5dHNhYWFhYWFhY2VlZWVpaWlpZG5vb29vbwBvdXV1dXl0eWFhYWFhYWNjY2NjY2NjZGRkZGVlZWVlZWVlZWVnZ2dnZ2dnZ2hoaGhpaWlpaWlpaWlpaWlqamtra2xsbGxsbGxsbGxubm5ubm5ubm5vb29vb29vb3JycnJycnNzc3Nzc3NzdHR0dHR0dXV1dXV1dXV1dXV1d3d5eXl6enp6enpzYmJiYgAAb2NjZGRkZGRlZWVmZmdnaGlpa2tsbG1ubm9vb29vcHB5AABzc3R0dHR1dXV2eXl6enp6enp6AAAAd3R0dGtkZGRsbGxubm5hYWlpb291dXV1dXV1dXV1ZWFhYWFhYWdnZ2dra29vb296empkZGRnZ3d3bm5hYWFhb29hYWFhZWVlZWlpaWlvb29vcnJycnV1dXVzc3R0eXloaG5kb296emFhZWVvb29vb29vb3l5bG50amRxYWNjbHRzegAAYnV2ZWVqanFxcnJ5eWFhYWJvY2RkZWVlZWVl"),h(d,94846,"TG9va3VwRGljdDIAAAAAAAAAgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAoQCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC6ALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPANAA0QDSANMA1ADVANYA1wDYANkA2gDbANwA3QDeAN8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAQB2AJBAaQAPQFaAacAqABgAV4BZAF5Aa0AfQF7AbAABQHbAkIBtAA+AVsBxwK4AGEBXwFlAXoB3QJ+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEQAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QKAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAmAdgCowCkAP3/JAGnAKgAMAFeAR4BNAGtAP3/ewGwACcBsgCzALQAtQAlAbcAuAAxAV8BHwE1Ab0A/f98AcAAwQDCAP3/xAAKAQgBxwDIAMkAygDLAMwAzQDOAM8A/f/RANIA0wDUACAB1gDXABwB2QDaANsA3ABsAVwB3wDgAOEA4gD9/+QACwEJAecA6ADpAOoA6wDsAO0A7gDvAP3/8QDyAPMA9AAhAfYA9wAdAfkA+gD7APwAbQFdAdkCgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAE4AVYBpAAoATsBpwCoAGABEgEiAWYBrQB9Aa8AsAAFAdsCVwG0ACkBPAHHArgAYQETASMBZwFKAX4BSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgAqARABRQFMATYB1ADVANYA1wDYAHIB2gDbANwAaAFqAd8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4AKwERAUYBTQE3AfQA9QD2APcA+ABzAfoA+wD8AGkBawHZAoAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEEAgQDBAQEBQQGBAcECAQJBAoECwQMBK0ADgQPBBAEEQQSBBMEFAQVBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8EFiFRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXASnAF4EXwSAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAD9//3//f+kAP3//f/9//3//f/9//3/DAatAP3//f/9//3//f/9//3//f/9//3//f/9//3/Gwb9//3//f8fBv3/IQYiBiMGJAYlBiYGJwYoBikGKgYrBiwGLQYuBi8GMAYxBjIGMwY0BjUGNgY3BjgGOQY6Bv3//f/9//3//f9ABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBv3//f/9//3//f/9//3//f/9//3//f/9//3/gACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAGCAZIKMArCCvIKYApwCoAKkAegOrAKwArQD9/xUgsACxALIAswCEA4UDhgO3AIgDiQOKA7sAjAO9AI4DjwOQA5EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQP9/6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgP9/4AAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAP3/ogCjAKQApQCmAKcAqACpANcAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkA9wC7ALwAvQC+AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f8XINAF0QXSBdMF1AXVBdYF1wXYBdkF2gXbBdwF3QXeBd8F4AXhBeIF4wXkBeUF5gXnBegF6QXqBf3//f8OIA8g/f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAChAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwQDCAMMAxADFAMYAxwDIAMkAygDLAMwAzQDOAM8AHgHRANIA0wDUANUA1gDXANgA2QDaANsA3AAwAV4B3wDgAOEA4gDjAOQA5QDmAOcA6ADpAOoA6wDsAO0A7gDvAB8B8QDyAPMA9AD1APYA9wD4APkA+gD7APwAMQFfAf8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAESASIBKgEoATYBpwA7ARABYAFmAX0BrQBqAUoBsAAFARMBIwErASkBNwG3ADwBEQFhAWcBfgEVIGsBSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgDPANAARQFMAdMA1ADVANYAaAHYAHIB2gDbANwA3QDeAN8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4A7wDwAEYBTQHzAPQA9QD2AGkB+ABzAfoA+wD8AP0A/gA4AYAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoO/f/9//3//f8/DkAOQQ5CDkMORA5FDkYORw5IDkkOSg5LDkwOTQ5ODk8OUA5RDlIOUw5UDlUOVg5XDlgOWQ5aDlsO/f/9//3//f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAdIKIAowCkAB4gpgCnANgAqQBWAasArACtAK4AxgCwALEAsgCzABwgtQC2ALcA+AC5AFcBuwC8AL0AvgDmAAQBLgEAAQYBxADFABgBEgEMAckAeQEWASIBNgEqATsBYAFDAUUB0wBMAdUA1gDXAHIBQQFaAWoB3AB7AX0B3wAFAS8BAQEHAeQA5QAZARMBDQHpAHoBFwEjATcBKwE8AWEBRAFGAfMATQH1APYA9wBzAUIBWwFrAfwAfAF+ARkggACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAAh4DHqMACgELAQoepwCAHqkAgh4LHvIerQCuAHgBHh4fHiABIQFAHkEetgBWHoEeVx6DHmAe8x6EHoUeYR7AAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPAHQB0QDSANMA1ADVANYAah7YANkA2gDbANwA3QB2Ad8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wB1AfEA8gDzAPQA9QD2AGse+AD5APoA+wD8AP0AdwH/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAKEAogCjAKwgpQBgAacAYQGpAKoAqwCsAK0ArgCvALAAsQCyALMAfQG1ALYAtwB+AbkAugC7AFIBUwF4Ab8AwADBAMIAwwDEAMUAxgDHAMgAyQDKAMsAzADNAM4AzwDQANEA0gDTANQA1QDWANcA2ADZANoA2wDcAN0A3gDfAOAA4QDiAOMA5ADlAOYA5wDoAOkA6gDrAOwA7QDuAO8A8ADxAPIA8wD0APUA9gD3APgA+QD6APsA/AD9AP4A/wCAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAEAQUBQQGsIB4gYAGnAGEBqQAYAqsAeQGtAHoBewGwALEADAFCAX0BHSC2ALcAfgENARkCuwBSAVMBeAF8AcAAwQDCAAIBxAAGAcYAxwDIAMkAygDLAMwAzQDOAM8AEAFDAdIA0wDUAFAB1gBaAXAB2QDaANsA3AAYARoC3wDgAOEA4gADAeQABwHmAOcA6ADpAOoA6wDsAO0A7gDvABEBRAHyAPMA9ABRAfYAWwFxAfkA+gD7APwAGQEbAv8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAEFAUEBrCAeIGABpwBhAakAGAKrAHkBrQB6AXsBsACxAAwBQgF9AR0gtgC3AH4BDQEZArsAUgFTAXgBfAHAAMEAwgACAcQABgHGAMcAyADJAMoAywDMAM0AzgDPABABQwHSANMA1ABQAdYAWgFwAdkA2gDbANwAGAEaAt8A4ADhAOIAAwHkAAcB5gDnAOgA6QDqAOsA7ADtAO4A7wARAUQB8gDzAPQAUQH2AFsBcQH5APoA+wD8ABkBGwL/AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/wEJAgkDCQUJBgkHCQgJCQkKCQsJDgkPCRAJDQkSCRMJFAkRCRUJFgkXCRgJGQkaCRsJHAkdCR4JHwkgCSEJIgkjCSQJJQkmCScJKAkpCSoJKwksCS0JLgkvCV8JMAkxCTIJMwk0CTUJNgk3CTgJOQkgAD4JPwlACUEJQglDCUYJRwlICUUJSglLCUwJSQlNCTwJZAn9//3//f/9//3/IAAwADEAMgAzADQANQA2ADcAOAA5AP3//f/9//3//f8CAAAAAAAAAAEAAAADAAAA//36+Pb08vDu7Oro5uTi4N7c2tjW1NLQzszKyMbEwsC+vLq4trSysK6sqqimpKKgnpyamJaUkpCOjIqIhoSCgH58enh2dHJwbmxqaGZkYmBeXFpYVlRSUE5MSkhGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgAAAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr9///06uDWzMO6saifl4+Hf3hxamNcVlBKRD85NC8rJiIeGhcTEA0LCAYEAgEAAAAAAAAAAQIDBAUHCAoMDhATFRcaHR8iJSgsLjAyNDY5Oz1AQkVHSkxPUVRXWl1fYmVoa25xdHh7foGFiIuPkpaZnaCkqKyvs7e7v8PHy8/T19vgz8zJxsPAvbm0sKunopyXkoyGgXt1b2ljXVdQSkQ+ODMtJyIcFxINCAQCAgEAAAAAAAEBAgMEBQcICgwNDxIUFhkbHiEkJyotMDQ2ODo8P0FDRkhLTVBSVVhaXWBjZmlsb3J1eHt+gYWIi4+SlpmdoKSorK+zt7u/w8fLz9PX2+D/+fTu6eTf2tXQy8bBvbizr6qmoZ2ZlZCMiISAfXl1cW5qZ2NgXVlWU1BNSkdEQT48OTc0Mi8tKygmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),h(d,99845,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4g0M7NzMrIx8XDwcC9u7i1s7CtqqejoJ2ZlpKPi4eEgHx4dHBtaWVhXVlVUU1KRkI+Ozc0MS8tKigmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),h(d,99973,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4gmJmZmpydn6Gkp6mssLO2ur7BxcnN0dTY3N/j5urt8PL19/n7/P3+/v////////79+/r49vPx7uzp5uTg3drX09DMyMTAvLi0sKyno5+alpGNiIR/e3ZybWllYFxYVFBMSERAPDk1Mi8rKCYjIB0aFxUSDw0KCAcFAwIBAAAAAAD+///////+/fz6+Pb08e7r6OXh3trW0s3JxL+6trCrpqGclpGLhoB7dW9qZF9ZVE9JRD86NTArJiIdGRURDQoHBAMBAAAAAAAAAAABAQIEBQcJCw0QEhUYGx4iJSktMTU6PkNITFFXW15iZWhrbnF0dnh7fH6AgYKDg4SEg4OCgXJycXFwb21samhmZGFfXFpXVFFOS0hFQj87ODUyLywpJiMgHRsYFhQSEA4MCwoJCAcHBwcHBgUFBQUFBQUFBQYHBwgJCgwNDxASFBYYGx0gIyYpLC8zNzs/Q0dMUVZbYGVqb3R5f4SJj5Wboaets7rAx87V3OPq8fX3+vz9/v///v79/fz7+/r6+fj49/f29vX09PPz8vLx8PDv7u7t7Ovq6uno5+bl5OPi4eDe3dzb2djW1dPS0M7My8nHxcPAvry5t7Wyr62qp6ShnpqXlJCNiYWBfXl1cW1oZGFeW1dUUU1KRkNAPDk1Mi4qJyMfHBgUEQ0LCQcFBAMCAQAAAAAAAAAAAQEBAgIDAwQEBQYGBwgICQoLDAwNDg8QERITFBYXGBkbHB0fICIjJSYoKSstLzAyNDY4Ojw+QEJER0lLTlBSVVdaXV9iZWdqbXBzdnl8f4KGiYyQk5aanaCjpqmsr7K1uLu+wcTHys3Q09bZ3N/i5Ofp7O7w8vT2+Pr7/X9/f4CBg4SHiYyPkpaZnaGlqq6yt7vAxcnN0tba3uLm6u3w8/X4+vv8/f7+/fz7+ff08Ozn4tzVzsa9tKmekoiCfXdybGZgWlROSUI8NzItKCQfGxgUEQ4MCQcGBQQEBAQFBggKDRAUGB0jKS83PkdQWmRwfIOFiIqMjo+RkpOTAEAIAEYSAAAAAAAAGAwAAARQEgZOFgAAAAAAACI0AAAEWBYGUhYAAAAAAAAiQAAAAFwIAFxQAAAAAAAATAgBAABWBABeQgAAAAAAACIKAAAAPgoAPhQAAAAAAAAcEAAABEQSBkQWAAAAAAAAHiwAAAZAEABCIAAAAAAAACASAAACRC4AKiAAAAAAAAAuOgAABE4YBkgWAAAAAAAAKjQAAARYIgBAIAAAAAAAAC5SAAAAOAwAOBQAAAAAAAAYDAAAAEYSAEYYAAAAAAAAIBQAAAkAAAAJAAAAEAAAABAAAAAQAAAAFwAAADcAAAAgAAAAACgYCAAKNCAUCgYmGA4EAAYAAAAHAAAACQAAAAkAAAAUAAAAFAAAABQAAAAZAAAA5iAUCA=="),h(d,101072,"ZgNmAWYCpgSmAiYEpoooAmoDagFqAqoCbgNuAW4CrgIpALMEdAN0AXQCtAS0AgAAdAR6A3oBegK6An4BOQC+AgAApgMAAKYBAADmAwAAaAEAAGgCAAAoAwAA6AEAAOkBAABpBAAAqgMAAKoBAAAqAwAA6gMAAOoBAABsAgAArAEAACwDAAAsAgAAbQIAAG0EAACuBAAArgMAAK4BAADuAwAALgAAAO6LAABvAgAAMAIwAAAAcQEAADECAADxAQAAMQMAAHEEAABzAQAAMwIAAPMBMwAAADMAAAC0AwAAtAEAAPQCAAC0igAAdwEAADcCAAD3AQAAeAEAAHgCAAA4AgAA+AEAADkCAAD5AQAAeQQAALoEAAC6AwAAugEAADoEAAD6AgAA+gMAAHwCAAB+AgAAAAB/AQAAPwMAAP8BOACmAAEAgQBnBQAAKAEpBWkF6gAAAEIFAADDAEMdAADvBGwFLABsAAQAAACtAG0FAADuBAUAbgCxBPEEMQXxj7IAAAByBQAAMwVzAPQEtJoAAAgAtwCOADcVAAA3BQAAzQB3ALcIOAUAAG8FyQAJAbkAOQX6BAoAewW7ALwAvgB+AD8FPwEAAAsBAADMAIwAAAAAAGcAAABsDW0ALwGwAHEAdgVMBEwc6Y8AAOnPOY4AADnO"),h(d,101586,"sQNZAlsCswO5A1MByQPGA4MCxQOSApQCfgJ8AgAAqgBhgLIAMoCzADOAuQAxgLoAb4CwAmiAsQJmgrICaoCzAnKAtAJ5grUCe4K2AoGCtwJ3gLgCeYDAApSCwQKVguACY4LhAmyA4gJzgOMCeIBwIDCAcSBpgHQgNIB1IDWAdiA2gHcgN4B4IDiAeSA5gHogK4B7IC2AfCA9gH0gKIB+ICmAfyBugIAgMECBIDFAgiAyQIMgM0CEIDRAhSA1QIYgNkCHIDdAiCA4QIkgOUCKICtAiyAtQIwgPUCNIChAjiApQJAgYUCRIGVAkiBvQJMgeECUIFlClSBoQJYga0CXIGxAmCBtQJkgbkCaIHBAmyBzQJwgdEAAAAAAaXhjbXZsZA=="),h(d,101888,"AQAAAAoAAABkAAAA6AMAAAUAAAAyAAAA9AEAAAAXCgkYExgY"),h(d,101936,"///////9+fXy7uvo5OHe2tjV0s/MycbEwb+8ure1s7CurKmopaOhn56bmZiWlJKRj42LiYiHhYOCgX9+fHt6eHd2dXNycXBvbm1ramloZ2ZlZGNiYWBfXl1cW1pZWVhXVlVUU1JSUVBQT05NTExLS0pJSEdHRkVFRENDQkJBQEA/Pj49PTw7Ozo6OTk4ODc2NjU1NDQ0MzIyMTEwMC8vLi4uLS0sLCwrKyopKCgoJycnJiYmJSUlJCQjIyMjIiIiISEhICAfHx8eHh4dHR0dHBwbGxsbGhoaGhkZGRgYGBgXFxcXFhYWFRUVFRQUFBQTExMSEhERERAQEBAQEA8PDw8ODg4NDQ0MDAwMCwsLCwoKCgkJCQgICAAAAAAAAAAAeHl4d3d2dnV0dHNycXBwb29ubWxrampoZ2dmZmZlZWNiYmFgYF9eXVtaW1pZWFZVVlVVVFJRUE9NTk5MTUtLSklHSEZFRUVDQUA/Pz89PTs7Ozo4OTo4NjU0NDU0NDIwLy8tLi0="),h(d,102336,"FhYWFhYWFhUVFRUUFBMTEhEQDw8PDw8PDwAAAAAAAABkeGRpZG5uZF9kaXhpbn2Ch3N9ZGl4S2RLaXhVS2RpeFVpX3N4ZF9kbnhfaWRzeGRkZGl4ZGlfc3huX2RpeGRpaXp9bmlkaXhkaWl6fW5pZGl4X2lkc3huZGRkeGRkZGRkZGRk"),h(d,102480,"ZJZkaW5zbm5uZGmWaW59h4xzh2RpllppWnqHZFpkaZZkaWR6h2RkZGmWZGlpc4duaWRplmRpaXqCeH1kaZZkaW56fXNuZGmWZGlpeod4aWRplmRpaXOHbmlkZGRkZGRkZGRkZA=="),h(d,102592,"bnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRuZG5ubmRubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubg=="),h(d,102708,"rwAAAGQAAAAyAAAAMg=="),h(d,102744,"ZA=="),h(d,102764,"MjIoRlpkZGRGboeWZGRLZHiWAAAAAAAABwAAAA4AAAAVAAAAKAAAAFAAAAAAAAAAAFNBUFIAQwAAAAAARgAAAAAAAAABAAAAAgAAAAQAAAAPAAAAAAEAAAEBAAEBAgQAAAAAAPMAEAEAAQABAAEAAQAB8ADwAPA="),h(d,102898,"QABaAG4AgACPAJwAqQC1AMAAygDUAN0A5gDvAPcAAAEHAQ8BFgEeASUBLAEyATkBQAFGAUwBUgFYAV4BZAFqAW8BdQF6AYABhQGKAY8BlAGZAZ4BowGoAa0BsgG2AbsBwAHEAckBzQHRAdYB2gHeAeMB5wHrAe8B8wH3AfsBAAIDAgcCCwIPAhMCFwIbAh8CIgImAioCLQIxAjUCOAI8AkACQwJHAkoCTgJRAlQCWAJbAl8CYgJlAmkCbAJvAnMCdgJ5AnwCgAKDAoYCiQKMAo8CkgKWApkCnAKfAqICpQKoAqsCrgKxArQCtwK6Ar0CwALCAsUCyALLAs4C0QLUAtYC2QLcAt8C4gLkAucC6gLtAu8C8gL1AvcC+gL9AgADAgMFAwcDCgMNAw8DEgMVAxcDGgMcAx8DIQMkAycDKQMsAy4DMQMzAzYDOAM7Az0DQANCA0QDRwNJA0wDTgNRA1MDVQNYA1oDXQNfA2EDZANmA2gDawNtA28DcgN0A3YDeQN7A30DgAOCA4QDhgMAAAGqAqytAwQFsLGys7S0tgYHCLkJCrwMDQ4PEBESYWJjZGVmZ2hpamtsbW5vcHFyc3R1"),h(d,103360,"YAYAAPAGAABmCQAA5gkAAGYKAADmCgAAZgsAAOYLAABmDAAA5gwAAGYNAABQDgAA0A4AACAPAABAEAAAkBA="),h(d,103440,"5gDmAOYA5gAAAAAA5gDmAL4AqgC+AMgAAAAAAL4A8AC+AL4A0gDSAAAAAADSANIAyADIANIA0gAAAAAA5gDmAOYA5gDwAPAAAAAAAAQBBAGqAIwA3ADcAAAAAAD6AA4BoACMAMgAjAAAAAAA8ACgALQAtADSANIAAAAAAOYA8ACqANwAtAC0AAAAAAD6AA4BlgCCAMgAyAAAAAAADgEOAbYAjADcANwAAAAAAPgAEwGbALQA0gDSAAAAAAAOASwBwwMAAAAAAABsAAAAAAAAAKAAkQCbAJYAAAAAAMgA9QAnAAAAtwAAAAAAAADCugAAyADIAMgAyAAAAAAA0gDmAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGgAAAAAAABscHR4fICEiIyQlJicoKSorAAAs"),h(d,103790,"LQAAAAAAAAAu"),h(d,103816,"Lw=="),h(d,103833,"MAAAAAAAMQ=="),h(d,103856,"Mg=="),h(d,103868,"MwAAAK0AAQBABgEADCAtAAAAAAC+AL4A0gDSAAAAAADmAPoAoACWAMgAyAAAAAAA+gAEAbkAwwDDAL4AAAAAANIA3AD6AMgA+gD6AAAAAAD6APoAMjM0Njk6PD0+P0BBQkNERkdJSktMTU5PUFFSU1RWAACWAIwAtAC0AAAAAADIAMgAbA=="),h(d,104016,"oADIALQAtAAAAAAA3ADwALQAoADIAMgAAAAAAPAA+gBjAAAAZgAAAGgAAABrAAAAcAAAAHQAAAB4AAAA/g=="),h(d,104096,"oACMAJYApQAAAAAA2gAxAZEAkQCqAKAAAAAAAEoBXgEuAAAALAAAACcAAADIAg=="),h(d,104160,"MTIzNTY3OTo7PD4/QEFCREVGR0hJSktMTU5PUFFSU1RW"),h(d,104208,"vgC0AOYA5gAAAAAA+gD6ABESExQWFxkaGxwdHyAhIiQlJicoKSosc3uDmwAAAAAAtAC0AL4AtAAAAAAA5gDwALQAtAC0AKAAAAAAAOYAtABABAAAMAQAADUEAAA4BAAAOQQAAD4EAABDBAAASwQAAE0EAABOBAAATwQAAFAEAABRBAAAVgQAAFcEAABdBAAAXgQ="),h(d,104368,"tACgAMgAyAAAAAAA3ADmAKAAhwDSANIAAAAAAAQBGAGgAIwAyADIAAAAAADcAOYAyADIAMgAyAAAAAAAyADIAKAAvgCvAK8AAAAAAMgA0gCqAHMA0gDwAAAAAAAEARgBqgCqALQAtAAAAAAA8AAEAZYAtADIAMgAAAAAANIA+gCWAJYAtAC0AAAAAAAsASwBoACHANwA3AAAAAAA+gAYAaAAqgDIAMgAAAAAAEABVAG0AKAA8ADwAAAAAAAEAQQBvgC0AMgA5gAAAAAA8AD6AJYAlgC0ALQA0gDmAOYA8ABhAAAA4AAAAOEAAACjHgAA4wAAAKEeAAADAQAAsR4AAK8eAACzHgAAtR4AALceAADiAAAApx4AAKUeAACpHgAAqx4AAK0eAABlAAAA6AAAAOkAAAC7HgAAvR4AALkeAADqAAAAwR4AAL8eAADDHgAAxR4AAMceAABpAAAA7AAAAO0AAADJHgAAKQEAAMseAABvAAAA8gAAAPMAAADPHgAA9QAAAM0eAAD0AAAA0x4AANEeAADVHgAA1x4AANkeAAChAQAA3R4AANseAADfHgAA4R4AAOMeAAB1AAAA+QAAAPoAAADnHgAAaQEAAOUeAACwAQAA6x4AAOkeAADtHgAA7x4AAPEeAAB5AAAA8x4AAP0AAAD3HgAA+R4AAPUe"),h(d,104896,"5gCWAOYA5gDmAAAA8AD6AAAAAAAnAAAAAAAAAAABAgM="),h(d,104945,"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRo="),h(d,105072,"GxwdAAAeHyAhIiMkACUmAAAAACcAACgAKQAqACsAAAAAAAAsAC0ALgAAAAAALwAAADAAAAAAAAAAMQ=="),h(d,105170,"MgAz"),h(d,105195,"NAAAAAAANQA2"),h(d,105226,"NwA4ADkArQABAAwgAQ=="),h(d,105249,"AQIDAAQAAQIDAAQFBgIDAAQFBwEDAAQICQoDAAAICAoDAAALCwsLAAAMDAwMAAAMAQ4BEwEBAw8DDgYRBgMJAQsPCwEMCQwBDgYOCQ4ODg8OHA4DDxEPEg8PEBEQAREGEQkRDxETEiAS/38AAAAAlgCMANwA3AAAAAAABAEYAYKAeHRkZICAgIyAgKCrq4CAgA=="),h(d,105412,"yAAAAMgAAACQAQAAkAEAAJABAABYAgAAWAIAAFgC"),h(d,105456,"8AAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAAQIMAw0EDgULAAAAAQIDBAUGAAAAAAAACwwNDg=="),h(d,105540,"MgAAAK8AAABkAAAAMg=="),h(d,105568,"rw=="),h(d,105596,"EBAKEBY="),h(d,105620,"/38AANAHAAAsAQAAYwAAAGMAAABjAAAAAAAAANAH"),h(d,105668,"BA=="),h(d,105680,"QEFCQ0RFRkdISUpLTE1OT1BRUlNUVldYWVtcXV5gYWJkZWdoaWtsbm9xc3R2d3l7fH6AgoSFh4mLjY+Rk5WXmZueoKKkp6mrrrCztbi6vb/CxcfKzdDT1tnc3+Ll6Ozv8vb5/P7/"),h(d,105792,"//7+/v7+/v7+/v39/f38/Pz7+/v6+vn5+Pj39/b19fTz8/Lx7+3r6efl4+Hf3drY1dPQzcvIxcK/u7i1sq6rp6OgnJiUkIyIhH97d3JuaWRgXltYVlNRTkxKR0VCQD48OTc1MzEvLCooJiQiIB4dGxkXFRMSEA4MCwkHBgQDAQ=="),h(d,106064,"//7+/v7+/f38+/v6+fj39vX08vHv7uzq6efl4+Hf3NrY1dPRz83LycfFw8G/vbu5t7SysK2rqaakoZ+cmpeUko+MioeEgX57eHZzcGxpZmNgX11bWlhWVVNSUE9NTEpJSEZFRENCQD8+PTw7Ojk4Nzc2NTQ0MzIyMTAwLy8uLi4tLS0sLCwsLCwsKysrKywrKiopKCgnJiYlJCQjIyIhISAgHx4eHR0cHBsaGhkZGBgXFxYWFRUUFBMTEhISEREQEA8PDw4ODQ0NDAwLCwsKCgoJCQkICAgHBwcHBgYGBQUFBQQEBAQEAwMDAwICAgICAgEBAQEBAQ=="),h(d,106341,"RvIpAC8ALwBF8ikALwAuAEXyKAAuAC0ANPIoAC0tLAA08igAKysrADTyKAAqKioANPIoACkpKQA08igAAOf/zv+1/5z/g/9q/1H/N/8e/wX/7P7T/rr+of6I/m/+Vf48/iP+Cv7x/dj9v/2m/Y39dP1b/UL9Kf0Q/ff83vzF/Kz8k/x6/GH8SPwv/Bb8/fvk+8v7svuZ+4D7Z/tP+zb7HfsE++v60vq6+qH6iPpv+lf6Pvol+g369Pnb+cP5qvmR+Xn5YPlH+S/5Fvn++OX4zfi0+Jz4g/hr+FP4Ovgi+Ar48ffZ98H3qPeQ93j3YPdH9y/3F/f/9uf2z/a39p/2h/Zv9lf2P/Yn9g/29/Xf9cf1sPWY9YD1aPVR9Tn1IfUK9fL02/TD9Kz0lPR99GX0TvQ29B/0CPTw89nzwvOr85TzfPNl807zN/Mg8wnz8vLb8sTyrvKX8oDyafJS8jzyJfIO8vjx4fHL8bTxnvGH8XHxW/FE8S7xGPEB8evw1fC/8Knwk/B98GfwUfA78CXwEPD67+Tvzu+576Pvje9472LvTe847yLvDe/47uLuze647qPuju557mTuT+467iXuEO777eft0u297antlO2A7WvtV+1C7S7tGu0F7fHs3ezJ7LXsoeyN7HnsZexR7D3sKuwW7ALs7+vb68jrtOuh643reutn61TrQest6xrrB+v06uLqz+q86qnqluqE6nHqX+pM6jrqJ+oV6gPq8One6czpuumo6ZbphOly6WHpT+k96SzpGukI6ffo5ujU6MPosuig6I/ofuht6FzoS+g76CroGegI6Pjn5+fX58bntuel55Xnhed152XnVedF5zXnJecV5wXn9ubm5tfmx+a45qjmmeaK5nvma+Zc5k3mPuYw5iHmEuYD5vXl5uXY5cnlu+Wt5Z7lkOWC5XTlZuVY5UrlPOUv5SHlE+UG5fjk6+Te5NDkw+S25KnknOSP5ILkdeRo5FzkT+RD5DbkKuQd5BHkBeT54+3j4ePV48njveOx46XjmuOO44Pjd+Ns42HjVuNL4z/jNOMq4x/jFOMJ4//i9OLq4t/i1eLK4sDituKs4qLimOKO4oTie+Jx4mfiXuJU4kviQuI54i/iJuId4hTiDOID4vrh8eHp4eDh2OHQ4cfhv+G34a/hp+Gf4Zfhj+GI4YDheOFx4WrhYuFb4VThTeFG4T/hOOEx4SrhJOEd4RbhEOEK4QPh/eD34PHg6+Dl4N/g2eDU4M7gyeDD4L7guOCz4K7gqeCk4J/gmuCV4JHgjOCH4IPgfuB64HbgcuBu4GrgZuBi4F7gWuBX4FPgT+BM4EngReBC4D/gPOA54DbgM+Ax4C7gK+Ap4CfgJOAi4CDgHuAc4BrgGOAW4BTgEuAR4A/gDuAN4AvgCuAJ4AjgB+AG4AXgBeAE4APgA+AC4ALgAuAC4ALgAeAC4ALgAuAC4ALgA+AD4ATgBeAF4AbgB+AI4AngCuAL4A3gDuAP4BHgEuAU4BbgGOAa4BzgHuAg4CLgJOAn4CngK+Au4DHgM+A24DngPOA/4ELgReBJ4EzgT+BT4FfgWuBe4GLgZuBq4G7gcuB24HrgfuCD4IfgjOCR4JXgmuCf4KTgqeCu4LPguOC+4MPgyeDO4NTg2eDf4OXg6+Dx4Pfg/eAD4QrhEOEW4R3hJOEq4THhOOE/4UbhTeFU4VvhYuFq4XHheOGA4Yjhj+GX4Z/hp+Gv4bfhv+HH4dDh2OHg4enh8eH64QPiDOIU4h3iJuIv4jniQuJL4lTiXuJn4nHie+KE4o7imOKi4qzituLA4sri1eLf4uri9OL/4gnjFOMf4yrjNOM/40vjVuNh42zjd+OD447jmuOl47HjvePJ49Xj4ePt4/njBeQR5B3kKuQ25EPkT+Rc5GjkdeSC5I/knOSp5Lbkw+TQ5N7k6+T45AblE+Uh5S/lPOVK5VjlZuV05YLlkOWe5a3lu+XJ5djl5uX15QPmEuYh5jDmPuZN5lzma+Z75ormmeao5rjmx+bX5ubm9uYF5xXnJec150XnVedl53XnheeV56XntufG59fn5+f45wjoGegq6DvoS+hc6G3ofuiP6KDosujD6NTo5uj36AjpGuks6T3pT+lh6XLphOmW6ajpuunM6d7p8OkD6hXqJ+o66kzqX+px6oTqluqp6rzqz+ri6vTqB+sa6y3rQetU62freuuN66HrtOvI69vr7+sC7BbsKuw97FHsZex57I3soey17Mns3ezx7AXtGu0u7ULtV+1r7YDtlO2p7b3t0u3n7fvtEO4l7jruT+5k7nnuju6j7rjuze7i7vjuDe8i7zjvTe9i73jvje+j77nvzu/k7/rvEPAl8DvwUfBn8H3wk/Cp8L/w1fDr8AHxGPEu8UTxW/Fx8YfxnvG08cvx4fH48Q7yJfI88lLyafKA8pfyrvLE8tvy8vIJ8yDzN/NO82XzfPOU86vzwvPZ8/DzCPQf9Db0TvRl9H30lPSs9MP02/Ty9Ar1IfU59VH1aPWA9Zj1sPXH9d/19/UP9if2P/ZX9m/2h/af9rf2z/bn9v/2F/cv90f3YPd495D3qPfB99n38fcK+CL4OvhT+Gv4g/ic+LT4zfjl+P74Fvkv+Uf5YPl5+ZH5qvnD+dv59PkN+iX6PvpX+m/6iPqh+rr60vrr+gT7Hfs2+0/7Z/uA+5n7svvL++T7/fsW/C/8SPxh/Hr8k/ys/MX83vz3/BD9Kf1C/Vv9dP2N/ab9v/3Y/fH9Cv4j/jz+Vf5v/oj+of66/tP+7P4F/x7/N/9R/2r/g/+c/7X/zv/n/wAAGQAyAEsAZAB9AJYArwDJAOIA+wAUAS0BRgFfAXgBkQGrAcQB3QH2AQ8CKAJBAloCcwKMAqUCvgLXAvACCQMiAzsDVANtA4YDnwO4A9ED6gMDBBwENQROBGcEgASZBLEEygTjBPwEFQUuBUYFXwV4BZEFqQXCBdsF8wUMBiUGPQZWBm8GhwagBrkG0QbqBgIHGwczB0wHZAd9B5UHrQfGB94H9gcPCCcIPwhYCHAIiAigCLkI0QjpCAEJGQkxCUkJYQl5CZEJqQnBCdkJ8QkJCiEKOQpQCmgKgAqYCq8KxwrfCvYKDgslCz0LVAtsC4MLmwuyC8oL4Qv4CxAMJww+DFUMbAyEDJsMsgzJDOAM9wwODSUNPA1SDWkNgA2XDa4NxA3bDfINCA4fDjUOTA5iDnkOjw6lDrwO0g7oDv8OFQ8rD0EPVw9tD4MPmQ+vD8UP2w/wDwYQHBAyEEcQXRBzEIgQnhCzEMgQ3hDzEAgRHhEzEUgRXRFyEYcRnBGxEcYR2xHwEQUSGRIuEkMSVxJsEoASlRKpEr4S0hLmEvsSDxMjEzcTSxNfE3MThxObE68TwxPWE+oT/hMRFCUUOBRMFF8UcxSGFJkUrBS/FNMU5hT5FAwVHhUxFUQVVxVqFXwVjxWhFbQVxhXZFesV/RUQFiIWNBZGFlgWahZ8Fo4WnxaxFsMW1BbmFvgWCRcaFywXPRdOF2AXcReCF5MXpBe1F8UX1hfnF/gXCBgZGCkYOhhKGFsYaxh7GIsYmxirGLsYyxjbGOsY+xgKGRoZKRk5GUgZWBlnGXYZhRmVGaQZsxnCGdAZ3xnuGf0ZCxoaGigaNxpFGlMaYhpwGn4ajBqaGqgathrEGtEa3xrtGvoaCBsVGyIbMBs9G0obVxtkG3EbfhuLG5gbpBuxG70byhvWG+Mb7xv7GwccExwfHCscNxxDHE8cWxxmHHIcfRyJHJQcnxyqHLUcwRzMHNYc4RzsHPccAR0MHRYdIR0rHTYdQB1KHVQdXh1oHXIdfB2FHY8dmR2iHawdtR2+Hccd0R3aHeMd7B30Hf0dBh4PHhceIB4oHjAeOR5BHkkeUR5ZHmEeaR5xHngegB6IHo8elh6eHqUerB6zHroewR7IHs8e1h7cHuMe6h7wHvYe/R4DHwkfDx8VHxsfIR8nHywfMh83Hz0fQh9IH00fUh9XH1wfYR9mH2sfbx90H3kffR+CH4Yfih+OH5Iflh+aH54foh+mH6kfrR+xH7Qftx+7H74fwR/EH8cfyh/NH88f0h/VH9cf2R/cH94f4B/iH+Qf5h/oH+of7B/uH+8f8R/yH/Mf9R/2H/cf+B/5H/of+x/7H/wf/R/9H/4f/h/+H/4f/h//H/4f/h/+H/4f/h/9H/0f/B/7H/sf+h/5H/gf9x/2H/Uf8x/yH/Ef7x/uH+wf6h/oH+Yf5B/iH+Af3h/cH9kf1x/VH9Ifzx/NH8ofxx/EH8Efvh+7H7cftB+xH60fqR+mH6Ifnh+aH5Yfkh+OH4ofhh+CH30feR90H28fax9mH2EfXB9XH1IfTR9IH0IfPR83HzIfLB8nHyEfGx8VHw8fCR8DH/0e9h7wHuoe4x7cHtYezx7IHsEeuh6zHqwepR6eHpYejx6IHoAeeB5xHmkeYR5ZHlEeSR5BHjkeMB4oHiAeFx4PHgYe/R30Hewd4x3aHdEdxx2+HbUdrB2iHZkdjx2FHXwdch1oHV4dVB1KHUAdNh0rHSEdFh0MHQEd9xzsHOEc1hzMHMEctRyqHJ8clByJHH0cchxmHFscTxxDHDccKxwfHBMcBxz7G+8b4xvWG8obvRuxG6QbmBuLG34bcRtkG1cbShs9GzAbIhsVGwgb+hrtGt8a0RrEGrYaqBqaGowafhpwGmIaUxpFGjcaKBoaGgsa/RnuGd8Z0BnCGbMZpBmVGYUZdhlnGVgZSBk5GSkZGhkKGfsY6xjbGMsYuxirGJsYixh7GGsYWxhKGDoYKRgZGAgY+BfnF9YXxRe1F6QXkxeCF3EXYBdOFz0XLBcaFwkX+BbmFtQWwxaxFp8WjhZ8FmoWWBZGFjQWIhYQFv0V6xXZFcYVtBWhFY8VfBVqFVcVRBUxFR4VDBX5FOYU0xS/FKwUmRSGFHMUXxRMFDgUJRQRFP4T6hPWE8MTrxObE4cTcxNfE0sTNxMjEw8T+xLmEtISvhKpEpUSgBJsElcSQxIuEhkSBRLwEdsRxhGxEZwRhxFyEV0RSBEzER4RCBHzEN4QyBCzEJ4QiBBzEF0QRxAyEBwQBhDwD9sPxQ+vD5kPgw9tD1cPQQ8rDxUP/w7oDtIOvA6lDo8OeQ5iDkwONQ4fDggO8g3bDcQNrg2XDYANaQ1SDTwNJQ0ODfcM4AzJDLIMmwyEDGwMVQw+DCcMEAz4C+ELyguyC5sLgwtsC1QLPQslCw4L9grfCscKrwqYCoAKaApQCjkKIQoJCvEJ2QnBCakJkQl5CWEJSQkxCRkJAQnpCNEIuQigCIgIcAhYCD8IJwgPCPYH3gfGB60HlQd9B2QHTAczBxsHAgfqBtEGuQagBocGbwZWBj0GJQYMBvMF2wXCBakFkQV4BV8FRgUuBRUF/ATjBMoEsQSZBIAEZwROBDUEHAQDBOoD0QO4A58DhgNtA1QDOwMiAwkD8ALXAr4CpQKMAnMCWgJBAigCDwL2Ad0BxAGrAZEBeAFfAUYBLQEUAfsA4gDJAK8AlgB9AGQASwAyABkAMAAAADAAAABAAAAAUAAAAJAAAACgAAAAsAAAAMAAAACAm7XL3Ojt7Obczr+wo5iQjIuMj5KUlZKMg3hpWUk8MSopLTZEVml9j5+qsbKtpJaHeGlcU09PVV5reoiWoquwsa6ooJiRi4iJjZSdqLK7wMG9tKWSfGNKMh4OBQIFDx4wRFltf4yWnJ+fnZuZmZyhqbO/ytXc4N7YzLumj3dgSzouKCkvOkhZanqGkJSVkYmAdWtiXFpcYWl0gIqUmp6dmJCGfHFoYmBja3iIm6/C0t/m5+LXxrKchG9bS0A5Nzg9Q0pQVFZVUk1IQj8+QUlWZ3yTq8PZ6vb8+/Tn1cCqlIBxZF1aXGFocHd9f397dGthV05IRkhOWWZ1hJOfp6uqpJmLe2pbTkZDRU1aa3+SprjFz9PSzcS5raGWjomHh4qNkZKRjIR4aFVBLhwOBQEFDx80TWiBmrDBzdPT0Mi/taukn5ydoKWqrrGwq6OWh3ZjUUI2Ly0xOkhZa36OnKaqqaOYintsXVJKSEpQWmd1gi0AAAAmAAAALQAAAC0AAAA3AAAALQ=="),h(d,110928,"yv5w/hICZAHgAFkAFwD2/8b/8P/NAVcCGAK9AgIDXQLxAc0BMAKUAW4A4ACDAGgAn/+bABYBZv9z+6r94QJ9ALD9KQALAAn/9v9BAFwAUADQ/kcApwD//3oA6QChANX/FgHfAeUBlwEKAYoChgBQAOwARAAEAQ0BswA1AIwAEwElASgBaAABAZgANwG2AAcB9QB9ADoBjAAsAMsA5gAV/+L+FwBrAFwApf8mANABuwGwAGIA8Pxv9p346/vA+Ur6mPoT+0v8Jv0="),h(d,111162,"BgAHAAgACQAKAAsADQAOABAAEgAUABYAGQAcACAAIwAoAC0AMwA5AEAARwBQAFoAZQByAIAAjgCfALMAygDjAAABHAE+AWcBlQHHAQACOAJ+As8CcQOPAwAEcQT8BJ4FVgYfBwAI4Qj4CTsLrAw9DgAQwxHwE3cWWBl7HAAghSPfJ+4ssDL2OABArkekUIVbZmYzc/9/"),h(d,111324,"qMtoQQAAAACoy2jBAAAAAAAAAAAXCtQJkglQCQ8JzgiPCE8IEwjVB5oHYgcoB/MGvgaLBloGKwb9BdMFqQWBBVwFOAUWBfcE1wS7BKAEhgRuBFcEQQQtBBkEBwT1A+QD1APFA7YDqAOZA40DfwNxA2UDVwNLAz4DMgMkAxgDCwP+AvIC5ALYAssCvgKxAqQClwKLAn0CcgJkAlkCTAJAAjQCKAIcAhICBQL7AfAB5QHbAdABxgG7AbIBqAGeAZQBigGBAXcBbgFjAVsBUAFIAT0BNAErASABGAENAQQB+gDwAOcA3ADUAMgAwAC1AKwAoQCYAI4AhQB7AHEAaQBeAFYATABDADkAMQAnAB4AFgALAAQA+//y/+n/4P/X/87/xP+7/7L/qf+g/5X/jf+C/3r/cP9m/1z/Uv9J/z//Nf8r/yL/F/8O/wT/+v7x/uf+3f7T/sr+wP62/q3+o/6b/pD+h/59/nP+av5f/lb+TP5C/jj+Lf4j/hn+Df4D/vf97P3h/dX9yf29/bH9pf2Y/Yz9f/1z/Wb9Wf1M/T/9M/0k/Rn9Cv3//PH85fzY/Mz8vvyz/KT8mPyL/H78cfxi/FX8Rfw4/Cb8GfwG/Pb74vvQ+7r7pfuO+3b7XPtB+yT7Bvvl+sT6n/p5+lP6KPr++dD5oflw+Tz5CfnR+Jr4YPgm+Oj3q/ds9yz36/aq9mj2Jvbj9bAEdgRABA4E3wO0A4sDZQNBAx8DAAPiAsYCqwKSAnoCZAJOAjoCJwIVAgMC8wHjAdQBxgG4AasBnwGTAYcBfAFyAWgBXgFVAUwBQwE7ATMBLAEkAR0BFgEQAQkBAwH9APcA8gDtAOcA4gDdANkA1ADQAMwAxwDDAMAAvAC4ALQAsQCuAKoApwCkAKEAngCbAJkAlgCTAJEAjgCMAIkAhwCFAIMAgAB+AHwAegB4AHcAdQBzAHEAbwBuAGwAagBpAGcAZgBkAGMAYQBgAF8AXQBcAFsAWgBYAFcAVgBVAFQAUwBSAFAATwBOAE0ATABLAEsASgBJAEgARwBGAEUARABEAEMAQgBBAEAAQAA/AD4APQA9ADwAOwA7ADoAOQA5ADgAOAA3ADcANgA2ADUANQA0ADQAMwAzADIAMgAxADEAMAAwAC8ALwAuAC4ALQAtACwALAArACsAKgAqACkAKQApACkAKAAoACcAJwAmACYAJgAmACUAJQAkACQAJAAkACMAIwAjACMAIgAiACEAIQAhACEAIAAgACAAIAAfAB8AHwAfAB4AHgAeAB4AHQAdAB0AHQAcABwAHAAcABsAGwAxNkZyYW1lTWFuYWdlckltcGwAMTJGcmFtZU1hbmFnZXIAMjNTcGVlY2hXYXZlR2VuZXJhdG9ySW1wbAAxOVNwZWVjaFdhdmVHZW5lcmF0b3IAMTNXYXZlR2VuZXJhdG9y"),h(d,112416,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA"),h(d,115203,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNf6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8="),h(d,115390,"8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/EhETFBUWFxgZGhscHR4fICERIiMkESUmJygpKissES0uLxAQMBAQEBAQEBAxMjMQNDUQEBERERERERERERERERERERERERERERERERE2ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERNxERERE4ETk6Ozw9PhERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBBEUJDREVGR0hJShFLTE1OT1BREFJTVFVWV1hZWltcXRBeX2AQERERYWJjEBAQEBAQEBAQEBERERFkEBAQEBAQEBAQEBAQEBAQERFlEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERFmZxAQaGkREREREREREREREREREREREREREREREWoREWsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEWxtEBAQEBAQEBAQbhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQb3BxchAQEBAQEBAQc3R1EBAQEBB2dxAQEBB4EBB5EBAQEBAQEBAQEBAQEBA="),h(d,117968,"//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUA=="),h(d,118072,"IAAAAAAA37xA1///+////////////7///////////////////////wP8///////////////////////////+////fwL//////wEAAAAA/7+2AP///4cHAAAA/wf//////////v/D////////////////7x/+4f+fAAD///////8A4P///////////////wMA//////8HMAT////8/x8AAP///wH/BwAAAAAAAP//3z8AAPD/+AP////////////v/9/h/8///v/vn/n///3F459ZgLDP/wMQ7of5///9bcOHGQJewP8/AO6/+////e3jvxsBAM//AB7un/n///3t458ZwLDP/wIA7Mc91hjH/8PHHYEAwP8AAO/f/f///f/j3x1gB8//AADv3/3///3v498dYEDP/wYA79/9/////+ffXfCAz/8A/Oz/f/z///svf4Bf/8D/DAD+/////3//Bz8g/wMAAAAA1vf//6///ztfIP/zAAAAAAEAAAD/AwAA//7///8f/v8D///+////HwAAAAAAAAAA////////f/n/A////////////z//////vyD///////f///////////89fz3//////z3/////PX89/3//////////Pf//////////BwAAAAD//wAA/////////////z8//v//////////////////////////////////////////////////////////n////v//B////////////8f/Af/fDwD//w8A//8PAP/fDQD////////P//8BgBD/AwAAAAD/A///////////////Af//////B///////////PwD///9//w//AcD/////Px8A//////8P////A/8DAAAAAP///w//////////f/7/HwD/A/8DgA=="),h(d,118768,"////////7//vD/8DAAAAAP//////8////////7//AwD///////9/AP/j//////8//wH//////+cAAAAAAN5vBP///////////////////////////////wAAAACA/x8A//8/P/////8/P/+q////P////////99f3B/PD/8f3B8="),h(d,118910,"AoAAAP8f"),h(d,118928,"hPwvPlC9//PgQwAA//////8B"),h(d,118982,"wP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIA="),h(d,119088,"4AAAAP4DPh/+////////////f+D+//////////////fg///////+/////////////38AAP///wcAAAAAAAD///////////////////////////////8/"),h(d,119184,"////////////////////////////////////////AAD//////////////////////x8AAAAAAAAAAP//////P/8f////DwAA//////9/8I///////////////////wAAAACA//z////////////////5////////fAAAAAAAgP+//////wAAAP///////w8A//////////8vAP8DAAD86P//////B/////8HAP///x/////////3/wCA/wP///9/////////fwD/P/8D//9//P////////9/BQAAOP//PAB+fn4Af3////////f/AP///////////////////wf/A///////////////////////////DwD//3/4//////8P/////////////////z//////////////////AwAAAAB/APjg//1/X9v/////////////////AwAAAPj///////////////8/AAD///////////z///////8AAAAAAP8P"),h(d,119582,"3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////Hw=="),h(d,119712,"////H////////wEAAAAAAP////8A4P///wf//////wf///8//////w//PgAAAAAA/////////////////////////z//A/////8P/////w///////wD///////8P"),h(d,119824,"////////fwD//z8A/w=="),h(d,119856,"P/3/////v5H//z8A//9/AP///38AAAAAAAAAAP//NwD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//z8AAAAAAP///x////8fAAAAAP/+//8fAAAA////////PwD//z8A//8HAP//Aw=="),h(d,119984,"////////////AQAAAAAAAP///////wcA////////BwD//////wD/Aw=="),h(d,120048,"////H4AA//8/"),h(d,120076,"//9/AP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/9wAP////9HAP//////////HgD/FwAAAAD///v///+fQAAAAAAAAAAAf73/v/8B/////////wH/A++f+f///e3jnxmB4A8="),h(d,120208,"//////////+7B/+DAAAAAP//////////swD/Aw=="),h(d,120256,"////////P38AAAA/AAAAAP////////9/EQD/AwAAAAD///////8/Af8DAAAAAAAA////5/8H/wM="),h(d,120336,"/////////wE="),h(d,120356,"////////////AwCA"),h(d,120388,"//z///////waAAAA////////538AAP///////////yAAAAAA/////////wH//f////9/fwEA/wMAAPz////8///+fw=="),h(d,120464,"f/v/////f7TLAP8Dv/3///9/ewH/Aw=="),h(d,120524,"//9/AP////////////////////////8D"),h(d,120560,"/////////////////38AAP///////////////////////////////w8="),h(d,120624,"//////9/"),h(d,120656,"//////////9/"),h(d,120688,"/////////wH///9//wM="),h(d,120714,"////PwAA////////AAAPAP8D+P//4P//"),h(d,120760,"//////////8="),h(d,120784,"////////////h/////////+A//8AAAAAAAAAAAsAAAD/////////////////////////////////////////AP///////////////////////////////////////wcA////fwAAAAAAAAcA8AD/////////////////////////////////////////////////////////////////D/////////////////8H/x//Af9D"),h(d,120976,"/////////////9///////////99k3v/r7/////////+/59/f////e1/8/f//////////////////////////////////////////////////////P/////3///f////3///f////3///f////3/////9/////f//98////////9////52wc="),h(d,121136,"//////8fgD//Qw=="),h(d,121192,"//////8P/wP///////////////////////////////8fAAAAAAAAAP//////////jwj/Aw=="),h(d,121264,"7////5b+9wqE6paqlvf3Xv/7/w/u+/8P"),h(d,121302,"////A////wP///8D"),h(d,121328,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8="),h(d,121601,"ARcCHRgTAx4bGQsUCAQNHxYcEhoKBwwVEQkGEAUPDt4SBJUAAAAA////////////////INsBABQAAABDLlVURi04"),h(d,121696,"TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVM="),h(d,121776,"Qy5VVEYtOA=="),h(d,121800,"MAUCAE5vIGVycm9yIGluZm9ybWF0aW9uAElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl"),h(d,123730,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB"),h(d,123928,"IQQAAAAAAAAAAC8C"),h(d,123960,"NQRHBFYE"),h(d,123982,"oAQ="),h(d,124002,"RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYeBzkHSQdeBw=="),h(d,124048,"GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk="),h(d,124129,"DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO"),h(d,124187,"DA=="),h(d,124199,"EwAAAAATAAAAAAkMAAAAAAAMAAAM"),h(d,124245,"EA=="),h(d,124257,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ"),h(d,124303,"Eg=="),h(d,124315,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa"),h(d,124370,"GgAAABoaGgAAAAAAAAk="),h(d,124419,"FA=="),h(d,124431,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU"),h(d,124477,"Fg=="),h(d,124489,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG"),h(d,124564,"EQ=="),h(d,124604,"//////////8="),h(d,124672,"0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAAIAAAAAkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAGjpAQB46AEAZOoBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAGjpAQCo6AEAnOgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAGjpAQDY6AEAnOgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAGjpAQAI6QEA/OgBAAAAAADM6AEAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAAAAAAsOkBABQAAAAcAAAAFgAAABcAAAAYAAAAHQAAAB4AAAAfAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAGjpAQCI6QEAzOgBAAAAAAAg6gEACQAAACAAAAAhAAAAAAAAAEjqAQAJAAAAIgAAACMAAAAAAAAACOoBAAkAAAAkAAAAJQAAAFN0OWV4Y2VwdGlvbgAAAABA6QEA+OkBAFN0OWJhZF9hbGxvYwAAAABo6QEAEOoBAAjqAQBTdDIwYmFkX2FycmF5X25ld19sZW5ndGgAAAAAaOkBACzqAQAg6gEAU3Q5dHlwZV9pbmZvAAAAAEDpAQBU6gE="),h(d,125552,"wLEAAMCyAADAswAAwLQAAMC1AADAtgAAwLcAAMC4AADAuQAAwLoAAMC7AADAvAAAwL0AAMC+AADAvwAAwMAAAMDBAADAwgAAwMMAAMDEAADAxQAAwMIAAMDGAADAxwAAwMgAAMDJAADAygAAwMsAAMDMAADAzQAAwM4AAMDPAADA0AAAwNEAAMDSAADA0wAAwNQAAMDVAADA1gAAwNcAAMDYAADA2QAAwNIAAMDaAADA2wAAwNwAAMDdAADA3gAAwN8AAMDgAADA4QAAwNgAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA4gAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwOMAAMDkAADAwgAAwMIAAMDCAADA5QAAwMIAAMDmAADA5wAAwOgAAMDpAADA6gAAwOsAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA7AAAwO0AAMDCAADA7gAAwO8AAMDCAADA8AAAwPEAAMDyAADA8wAAwPQAAMD1AADA9gAAwPcAAMD4AADAwgAAwPkAAMD6AADA+wAAwPwAAMD9AADA/gAAwP8AAMAAAQDAAQEAwAIBAMADAQDABAEAwAUBAMAGAQDABwEAwAgBAMAJAQDACgEAwAsBAMAMAQDACwEAwA0BAMAOAQDADwEAwAsBAMDCAADAwgAAwMIAAMAQAQDAEQEAwBIBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMDCAADAwgAAwBMBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBQBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBUBAMAWAQDACwEAwAsBAMAXAQDAGAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAGQEAwMIAAMDCAADAGgEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAGwEAwBwBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMAdAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwB4BAMAfAQDAIAEAwCEBAMAiAQDAIwEAwCQBAMAlAQDA2AAAwNgAAMAmAQDACwEAwAsBAMALAQDACwEAwAsBAMAnAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwCgBAMApAQDACwEAwAsBAMAqAQDACwEAwCsBAMALAQDALAEAwC0BAMAuAQDALwEAwNgAAMDYAADAMAEAwDEBAMAyAQDAMwEAwDQBAMALAQDACwEAwAsBAMALAQDACwEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA1AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwDYBAMA3AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAOAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA5AQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMA6AQDAOwEAwDwB"),h(d,128496,"oVcBAEEAAADdVwEAQgAAACZYAQBDAAAAa1gBAEQAAADSWAEARQAAABNZAQBGAAAAfFkBAEcAAACEWQEASAAAADBaAQBJAAAAZ1oBAEoAAADuWgEASwAAAC5bAQBMAAAAcVsBAE0AAADZWwEATgAAAGtcAQBPAAAAh1wBAAgAAADcXAEACQAAAB9dAQAKAAAAZ10BAAsAAACVXQEADAAAAMpdAQANAAAAD14BAA4AAAAqXgEADwAAAIZeAQAPAAAAvV4BABAAAABDXwEAEQAAAH1fAQASAAAAq18BABMAAADZXwEAFAAAAAVgAQAVAAAAMGABABcAAABgYAEAGAAAAHlgAQAZAAAAtWABABsAAADdYAEAHAAAAPBgAQAdAAAAI2EBACAAAABEYQEAIQAAAG9hAQAiAAAAnWEBACMAAADRYQEAJAAAAPNhAQAlAAAAFWIBACYAAABZYgEAKAAAAH1iAQApAAAArmIBACoAAADoYgEAKwAAADVjAQAtAAAAb2MBAC4AAACnYwEALwAAAOZjAQAwAAAAeGQBADEAAACdZAEAMgAAAM9kAQAzAAAA/mQBAGQAAABgZQEAyAAAAN1lAQDJAAAAAAAAAP////8iZgEAAQAAAD5mAQACAAAABVUBAAMAAADNZgEAEQAAADRnAQASAAAAg2cBABMAAAD7ZwEAFAAAADtoAQAVAAAATGgBABYAAAB0aAEAEQAAALdoAQAhAAAAymgBACIAAAD+aAEAIwAAAEtpAQAkAAAAaWkBACUAAACfaQEAJgAAAOJpAQAhAAAAAAAAAP////8AAAAAAAAAACYAAAAAAAAAAQAAAJByAQABAAAAkHMBAAEAAACQdAEAAQAAAJB1AQABAAAAkHYBAAEAAACQdwEAAQAAAJB4AQABAAAAkHkBAAEAAACQegEAAQAAAJB7AQABAAAAkHwBAAEAAACQfQEAAQAAAJB+AQABAAAAkH8BAAEAAACQgAEAAQAAAJCBAQABAAAAkIIBAAUAAAAAAAAABg=="),h(d,129280,"oIMBAKCDAQAghAEAIIQBAKCEAQAghQEAoIUBACCGAQCghgEAoIYBACCHAQAghwEAoIcBAKCHAQAgiAEAIIgBAKCIAQCgiAEAIIkBACCJAQAuOU4ycIoBAAMHBQCQigEALjlOLnCKAQADBwUAkIoBAC45Ti5wigEAAwcFAJCKAQAuOVoycIoBAAMJBQCVigEALjlOMnCKAQADBwUAkIoBAC45SjdwigEABAcFAJqKAQAuOUo3cIoBAAQHBQCaigEALjlKN3CKAQAEBwUAmooBAC45TjJwigEAAwcFAJCKAQAuOU4ucIoBAAMHBQCQigEALjlOMnCKAQADBwUAkIoBACIpKSBwigEAAwcFAJqKAQAuOTcycIoBAAMHBQCaigEAo1MBABABAAAAVAEADAEAANJUAQARAQAAClUBACMAAAB/VQEAGwAAADRWAQAVAAAAxVYBAAABAAABVwEAAgEAAE1XAQADAQAAvVcBAAQBAAD7VwEABQEAAE5YAQATAAAAkVgBAB4AAADVWAEAFwAAAF9ZAQAaAAAAkVkBABkAAAD0WQEAGAAAADhaAQAdAAAAzloBABwAAAAPWwEAFgAAADdbAQAU"),h(d,129744,"Q1gBABABAACIWAEADAEAAPNYAQARAQAAM1kBACMAAACHWQEAGwAAAOBZAQAVAAAAQloBAAABAACcWgEAAgEAAABbAQADAQAAT1sBAAQBAACnWwEABQEAAEhcAQATAAAAc1wBAB4AAADEXAEAFwAAABVdAQAaAAAAXV0BABkAAACIXQEAGAAAANJdAQAdAAAABF4BABwAAAAvXgEAFgAAAF9eAQAU"),h(d,129920,"u08BAAEAAABcUAEAAAAAAM9QAQAAAAAAOFIBAAAAAABBUwEAAAAAAIFTAQAAAAAA+1MBAAAAAADnVAEAAAAAACVVAQAAAAAAiVUBAAAAAABUVgEAAAAAAPxWAQAAAAAADlcBAAAAAABIVwEAAAAAAKdXAQAAAAAA9lcBAAAAAAA3WAEAAAAAAKNYAQAAAAAA6FgBAAAAAAAuWQEAAAAAAH9ZAQAAAAAA61kBAAAAAAD/////g00BAIIAAAB5AAAAdg=="),h(d,130128,"4I8BAOCPAQBQkAEAwJABAMCQAQDAkAEAAQAAANQKAwCMCgMAROcC"),h(d,130176,"I0sBAAEAAAAAAAAA/////1dMAQABAAAA+0wBAAIAAADGTQEAAwAAAAAAAAD/////Vk4BAAAAAADSTgEAAQAAALJPAQACAAAAGFABABQAAAAAAAAA/////wAAAAAAAAAAt1ABABIAAABNUgEAFAAAAN5SAQAkAAAAhlMBAEAAAAARVAEAwQAAAAAAAAD/////q1QBAAEAAAAAAAAA/////1dMAQAAAAAAGVUBAAEAAACRVQEAAgAAAENWAQADAAAA31YBAAQAAAAgVwEABQAAAAAAAAD/////AAAAAAAAAABXTAEAAQAAAIlXAQACAAAAr1cBAAMAAADfVgEABAAAACBXAQAFAAAAAAAAAP////8AAAAAClgBADxYAQAYUAEAqFgB"),h(d,130480,"8l8BAAEAAAA5YAEAAgAAAFhgAQADAAAAgWABAAQAAACwYAEABQAAANNgAQAGAAAABWEBAAcAAAAqYQEACAAAAFFhAQAJAAAAdmEBAAoAAACQYQEACwAAAMNhAQAMAAAA+WEBAA0AAAAuYgEADgAAAE5iAQAPAAAAhmIBAA8AAADUYgEADwAAABljAQAPAAAAP2MBAA8AAACkYwEABwAAANpjAQAHAAAAO2QBAAcAAACEZAEABwAAAK9kAQAHAAAAw2QBAA4AAADnZAEADgAAAAplAQAQAAAA9GUBABAAAAArZgEAEAAAAN9WAQAQAAAAbmYBABAAAADBZgEAEA=="),h(d,130752,"f20BAD4AAACjbQEAPOAAAM1tAQAmAAAA1G0BACIAAAA6bgEAIAAAAHhuAQAnAAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAxWcBAAAAAAAJaAEAHgAAAEJoAQBBAAAAQ1YBAGQAAACGaAEAlgAAAKVoAQDmAAAAAAAAAP////9jZwEAZAAAAL5oAQA8AAAA6WgBAFAAAABDVgEAZAAAABJpAQB9AAAAUmkBAKAAAAAAAAAA/////wAAAAAAAAAAY2cBAGQAAACUaQEARgAAAN5pAQBVAAAAQ1YBAGQAAAAoagEAbgAAAGdqAQB4AAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAlGkBABQAAADeaQEAMgAAAENWAQBkAAAAKGoBAIwAAABnagEAtAAAAAAAAAD/////"),h(d,131076,"QP8BAAD/AQCA/wEAwP8B"),h(d,131104,"wmoBACDgAAALawEACeAAAEFrAQBf4AAAe2sBACI="),h(d,131152,"q2sBAAEAAAC8awEAAgAAAA1sAQAD"),h(d,131184,"+EwBAMJNAQBTTgEACU8BAOVPAQBkUAEA2lABAGdSAQDyUgEA1FMBAGFUAQ=="),h(d,131236,"iFIBADlTAQAAAAAAnlMBAGRUAQDwVAEAL1UBAJpVAQBQVgE="),h(d,131280,"Y1IBAIADAACAA/8DbGUAAAcAAAA0UwEAIAQAAAAELwUAAAAAAAAAAHNTAQAwBQAAMAWPBXloAAAEAAAAG1QBAJAFAACQBf8FAAAAAAAAAAC3VAEAAAYAAAAG/wYAAAAAAAAAACpVAQAABwAAAAdPBwAAAAAAAAAAllUBAAAJAAAACX8JaWgAAAQAAAA/VgEAgAkAAIAJ/wluYgAABAAAANZWAQAACgAAAAp/CmFwAAAEAAAAClcBAIAKAACACv8KdWcAAAQAAABfVwEAAAsAAAALfwsAAAAAAAAAAM5XAQCACwAAgAv/C2F0AAAEAAAAD1gBAAAMAAAADH8MZXQAAAAAAAAsWAEAgAwAAIAM/wxuawAABAAAAJ9YAQAADQAAAA1/DWxtAAAEAAAA5FgBAIANAACADf8NaXMAAAQAAAA8WQEAAA4AAAAOfw4AAAAAAAAAAJtZAQCADgAAgA7/DgAAAAAAAAAA8FkBAAAPAAAAD/8PAAAAAAAAAAA0WgEAABAAAAAQnxAAAAAAAAAAANlaAQCgEAAAoBD/EGFrAAAEAAAAGFsBAAARAAAAEf8Rb2sAAAQAAABKWwEAABIAAAASnxMAAAAAAAAAALlbAQAAKAAAACj/KAAAAAAQAAAAWlwBAEAwAABAMP8wAAAAAAgAAACDXAEAADEAAAAx/58AAAAACAAAABhbAQAApwAAAKf/129rAAAM"),h(d,131840,"WAIAAKoAAACwBAAAhwAAANAHAABuAAAAuAsAAG4AAAD/////"),h(d,131888,"qAsD"),h(d,131904,"mF4BAAEAAAA4XwEAAgAAAGFfAQADAAAAnV8BAAYAAADCXwEACQAAAPhfAQAKAAAAJ2ABAAQAAABNYAEABQAAAI1gAQAkAAAAq2ABAAsAAADVYAEADAAAAPZgAQANAAAAFmEBAA4AAABMYQEADwAAAGdhAQAQAAAAlmEBABEAAAC7YQEAEgAAAAJiAQAfAAAAG2IBACUAAABIYgEAIAAAAJJiAQAhAAAAzmIBACIAAADwYgEABwAAAC5jAQAI"),h(d,132112,"jmMBAAEAAAC8YwEAAgAAAAAAAAABAAAAFJwBACCcAQAsnAEAPAAAABo="),h(d,132163,"AgMFCAsOEhYbICUrMTc+RUxTWmJpcXmAiJCYn6autbzCyc/V2uDk6e3w9Pb5+/z9/f39/Pv59vTw7enk4NrVz8nCvLWupp+YkIiAeXFpYlpTTEU+NzErJSAbFhIOCwgFAwI="),h(d,132288,"QAAAAAABAAAAAAAA7AQCACcAAAAoAAAAKQAAACoAAAArAAAAQOkBAMO2AQBo6QEAsLYBAOQEAgAAAAAAJAUCACwAAAAtAAAALgAAAC8AAABA6QEAArcBAGjpAQDstgEAEAUCAGjpAQDStgEAGAUCAAU="),h(d,132412,"DQ=="),h(d,132436,"CwAAAAoAAADoeAM="),h(d,132460,"Ag=="),h(d,132476,"//////////8="),h(d,132544,"MAUCAAAAAAAF"),h(d,132564,"MA=="),h(d,132588,"CwAAADEAAAD4eAMAAAQ="),h(d,132612,"AQ=="),h(d,132628,"/////wo="),h(d,132696,"yAUCAAB/BA==");var Ft,xA=(Ft=[null,function(e){var t,r=0;return r=A[(e|=0)>>2],A[e>>2]=r+1,r=255&(t=l[0|r]),(0|t)<0&&(r=y[(A[e+12>>2]+(r<<1)|0)-256>>1]),0|r},Kl,function(e){var t,r;return t=A[(e|=0)>>2],r=A[t>>2],A[e>>2]=t+4,0|r},function(e){var t=0,r=0;return t=A[(e|=0)>>2],(0|(r=Z8(e)))==65533&&(A[e>>2]=t+1,A[e+8>>2]=1,r=255&(t=l[0|t]),(0|t)>=0||(r=y[(A[e+12>>2]+(r<<1)|0)-256>>1])),0|r},Z8,function(e){var t,r,a=0;return(a=A[4+(e|=0)>>2])>>>0<=(r=(t=A[e>>2])+1|0)>>>0?(A[e>>2]=a,65533):(A[e>>2]=r,a=C[0|t],A[e>>2]=t+2,a|C[t+1|0]<<8)},function(e,t){var r,a,s;return t|=0,e=A[(e|=0)>>2],r=A[e+4>>2],a=A[t>>2],(t=c0(r+1|0,(s=A[a+4>>2])+1|0))||(t=l[0|r]-l[0|s]|0)||(t=c0(A[e>>2],A[a>>2])),0|t},function(e,t){var r;return e|=0,t=A[(t|=0)>>2],r=A[e>>2],(e=A[t+16>>2]-A[r+16>>2]|0)||(e=c0(A[r>>2],A[t>>2])),0|e},Hi,function(e,t,r,a){var s;return t|=0,r|=0,a|=0,F=s=F-16|0,(e=0|h2(A[60+(e|=0)>>2],0|t,0|r,255&a,s+8|0))?(A[56798]=e,e=-1):e=0,F=s+16|0,_=e?-1:A[s+12>>2],0|(e?-1:A[s+8>>2])},function(e,t,r){t|=0,r|=0;var a,s=0,n=0,g=0,f=0,c=0,I=0;F=a=F-32|0,s=A[28+(e|=0)>>2],A[a+16>>2]=s,g=A[e+20>>2],A[a+28>>2]=r,A[a+24>>2]=t,t=g-s|0,A[a+20>>2]=t,g=t+r|0,c=2;A:{e:{t=a+16|0,(s=0|BA(A[e+60>>2],0|t,2,a+12|0))?(A[56798]=s,s=-1):s=0;r:{if(s)s=t;else for(;;){if((0|(n=A[a+12>>2]))==(0|g))break r;if((0|n)<0){s=t;break e}if(f=n-((I=(f=A[t+4>>2])>>>0<n>>>0)?f:0)|0,A[(s=(I<<3)+t|0)>>2]=f+A[s>>2],A[(t=(I?12:4)+t|0)>>2]=A[t>>2]-f,g=g-n|0,t=s,c=c-I|0,(n=0|BA(A[e+60>>2],0|t,0|c,a+12|0))?(A[56798]=n,n=-1):n=0,n)break}if((0|g)!=-1)break e}t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,A[e+16>>2]=t+A[e+48>>2],e=r;break A}A[e+28>>2]=0,A[e+16>>2]=0,A[e+20>>2]=0,A[e>>2]=32|A[e>>2],e=0,(0|c)!=2&&(e=r-A[s+4>>2]|0)}return F=a+32|0,0|e},function(e,t,r){e|=0,t|=0,r|=0;var a,s=0,n=0,g=0;F=a=F-32|0,A[a+16>>2]=t,s=A[e+48>>2],A[a+20>>2]=r-!!(0|s),n=A[e+44>>2],A[a+28>>2]=s,A[a+24>>2]=n;A:{e:{if((s=0|FC(A[e+60>>2],a+16|0,2,a+12|0))?(A[56798]=s,s=-1):s=0,s)t=32;else{if((0|(s=A[a+12>>2]))>0)break e;t=s?32:16}A[e>>2]=t|A[e>>2];break A}g=s,(n=A[a+20>>2])>>>0>=s>>>0||(s=A[e+44>>2],A[e+4>>2]=s,A[e+8>>2]=s+(g-n|0),A[e+48>>2]&&(A[e+4>>2]=s+1,l[(t+r|0)-1|0]=C[0|s]),g=r)}return F=a+32|0,0|g},function(e){return 0|ZA(A[60+(e|=0)>>2])},M2,function(e,t,r,a,s,n){e|=0,t=+t,r|=0,a|=0,s|=0,n|=0;var g,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0,tA=0;F=g=F-560|0,A[g+44>>2]=0,S(+t),f=0|M(1),M(0),(0|f)<0?(L=1,AA=84997,S(+(t=-t)),f=0|M(1),M(0)):2048&s?(L=1,AA=85e3):(AA=(L=1&s)?85003:84998,tA=!L);A:if(2146435072&~f){J=g+16|0;e:{r:{i:{if(t=cl(t,g+44|0),(t+=t)!=0){if(f=A[g+44>>2],A[g+44>>2]=f-1,(0|(q=32|n))!=97)break i;break e}if((0|(q=32|n))==97)break e;m=A[g+44>>2],E=(0|a)<0?6:a;break r}m=f-29|0,A[g+44>>2]=m,t*=268435456,E=(0|a)<0?6:a}for(c=O=(g+48|0)+((0|m)>=0?288:0)|0;a=t<4294967296&t>=0?~~t>>>0:0,A[c>>2]=a,c=c+4|0,(t=1e9*(t-+(a>>>0)))!=0;);if((0|m)<=0)a=m,f=c,I=O;else for(I=O,a=m;;){if(D=(0|a)>=29?29:a,!(I>>>0>(f=c-4|0)>>>0)){for(a=0;b=A[f>>2],$=a,a=31&D,(63&D)>>>0>=32?(v=b<<a,a=0):(v=(1<<a)-1&b>>>32-a,a=b<<a),b=v+Y|0,a=Oi($=$+a|0,a>>>0>$>>>0?b+1|0:b,1e9),A[f>>2]=$-DA(a,_,1e9,0),I>>>0<=(f=f-4|0)>>>0;);a&&(A[(I=I-4|0)>>2]=a)}for(;I>>>0<(f=c)>>>0&&!A[(c=f-4|0)>>2];);if(a=A[g+44>>2]-D|0,A[g+44>>2]=a,c=f,!((0|a)>0))break}if((0|a)<0)for(U=1+((E+25>>>0)/9|0)|0,Y=(0|q)==102;;){if(v=(0|(a=0-a|0))>=9?9:a,f>>>0<=I>>>0)c=A[I>>2];else{for(D=1e9>>>v|0,b=~(-1<<v),a=0,c=I;$=a,a=A[c>>2],A[c>>2]=$+(a>>>v|0),a=T(D,a&b),(c=c+4|0)>>>0<f>>>0;);c=A[I>>2],a&&(A[f>>2]=a,f=f+4|0)}if(a=v+A[g+44>>2]|0,A[g+44>>2]=a,I=(!c<<2)+I|0,f=f-(c=Y?O:I)>>2>(0|U)?c+(U<<2)|0:f,!((0|a)<0))break}if(a=0,!(f>>>0<=I>>>0||(a=T(O-I>>2,9),c=10,(b=A[I>>2])>>>0<10)))for(;a=a+1|0,b>>>0>=(c=T(c,10))>>>0;);if((0|(c=(E-((0|q)!=102?a:0)|0)-((0|q)==103&!!(0|E))|0))<(T(f-O>>2,9)-9|0)){if(m=((((0|m)<0?4:292)+g|0)+((b=(0|(D=c+9216|0))/9|0)<<2)|0)-4048|0,c=10,(0|(v=D-T(b,9)|0))<=7)for(;c=T(c,10),(0|(v=v+1|0))!=8;);if(!(!(Y=(D=A[m>>2])-T(c,U=(D>>>0)/(c>>>0)|0)|0)&(0|(b=m+4|0))==(0|f))&&(!(1&U)&&(t=9007199254740992,!(1&l[m-4|0])|(0|c)!=1e9|I>>>0>=m>>>0)||(t=9007199254740994),R=(0|f)==(0|b)?1:1.5,R=(b=c>>>1|0)>>>0>Y>>>0?.5:(0|b)==(0|Y)?R:1.5,C[0|AA]!=45|tA||(R=-R,t=-t),b=D-Y|0,A[m>>2]=b,t+R!=t)){if(a=c+b|0,A[m>>2]=a,a>>>0>=1e9)for(;A[m>>2]=0,(m=m-4|0)>>>0<I>>>0&&(A[(I=I-4|0)>>2]=0),a=A[m>>2]+1|0,A[m>>2]=a,a>>>0>999999999;);if(a=T(O-I>>2,9),c=10,!((b=A[I>>2])>>>0<10))for(;a=a+1|0,b>>>0>=(c=T(c,10))>>>0;);}f=f>>>0>(c=m+4|0)>>>0?c:f}for(;b=f,!(D=f>>>0<=I>>>0)&&!A[(f=b-4|0)>>2];);if((0|q)==103){if(E=((f=(0|(c=E||1))>(0|a)&(0|a)>-5)?~a:-1)+c|0,n=(f?-1:-2)+n|0,!(m=8&s)){if(f=-9,!D&&(m=A[b-4>>2])&&(v=10,f=0,!((m>>>0)%10|0))){for(;c=f,f=f+1|0,!((m>>>0)%((v=T(v,10))>>>0)|0););f=~c}c=T(b-O>>2,9),(-33&n)!=70?(m=0,E=(0|(f=(0|(f=((a+c|0)+f|0)-9|0))>0?f:0))>(0|E)?E:f):(m=0,E=(0|(f=(0|(f=(f+c|0)-9|0))>0?f:0))>(0|E)?E:f)}}else m=8&s;if(v=-1,(0|((D=m|E)?2147483645:2147483646))<(0|E))break A;if(Y=1+(!!(0|D)+E|0)|0,(0|(c=-33&n))!=70){if((J-(f=_2(((f=a>>31)^a)-f|0,0,J))|0)<=1)for(;l[0|(f=f-1|0)]=48,(J-f|0)<2;);if(l[0|(U=f-2|0)]=n,l[f-1|0]=(0|a)<0?45:43,(0|(f=J-U|0))>(2147483647^Y))break A}else{if((2147483647^Y)<(0|a))break A;f=(0|a)>0?a:0}if((0|(a=f+Y|0))>(2147483647^L))break A;O0(e,32,r,Y=a+L|0,s),M0(e,AA,L),O0(e,48,r,Y,65536^s);r:{i:{s:{if((0|c)==70){for(a=8|(n=g+16|0),m=9|n,I=c=I>>>0>O>>>0?O:I;;){f=_2(A[I>>2],0,m);o:if((0|c)==(0|I))(0|f)==(0|m)&&(l[g+24|0]=48,f=a);else{if(g+16>>>0>=f>>>0)break o;for(;l[0|(f=f-1|0)]=48,g+16>>>0<f>>>0;);}if(M0(e,f,m-f|0),!(O>>>0>=(I=I+4|0)>>>0))break}if(D&&M0(e,85998,1),(0|E)<=0|I>>>0>=b>>>0)break s;for(;;){if((f=_2(A[I>>2],0,m))>>>0>g+16>>>0)for(;l[0|(f=f-1|0)]=48,g+16>>>0<f>>>0;);if(M0(e,f,(0|E)>=9?9:E),f=E-9|0,b>>>0<=(I=I+4|0)>>>0)break i;if(a=(0|E)>9,E=f,!a)break}break i}o:if(!((0|E)<0))for(O=I>>>0<b>>>0?b:I+4|0,a=8|(n=g+16|0),b=9|n,c=I;;){(0|b)==(0|(f=_2(A[c>>2],0,b)))&&(l[g+24|0]=48,f=a);f:if((0|c)==(0|I))M0(e,f,1),f=f+1|0,m|E&&M0(e,85998,1);else{if(g+16>>>0>=f>>>0)break f;for(;l[0|(f=f-1|0)]=48,g+16>>>0<f>>>0;);}if(M0(e,f,(0|(n=b-f|0))>(0|E)?E:n),E=E-n|0,O>>>0<=(c=c+4|0)>>>0)break o;if(!((0|E)>=0))break}O0(e,48,E+18|0,18,0),M0(e,U,J-U|0);break r}f=E}O0(e,48,f+9|0,9,0)}O0(e,32,r,Y,8192^s),v=(0|r)<(0|Y)?Y:r;break A}if(m=(n<<26>>31&9)+AA|0,!(a>>>0>11)){for(f=12-a|0,R=16;R*=16,f=f-1|0;);t=C[0|m]!=45?t+R-R:-(R+(-t-R))}for((0|J)==(0|(f=_2(((f=A[g+44>>2])^(c=f>>31))-c|0,0,J)))&&(l[g+15|0]=48,f=g+15|0),O=2|L,I=32&n,c=A[g+44>>2],l[0|(E=f-2|0)]=n+15,l[f-1|0]=(0|c)<0?45:43,f=8&s,c=g+16|0;n=c,b=sA(t)<2147483648?~~t:-2147483648,l[0|c]=I|C[b+124512|0],!((0|a)>0|f)&(t=16*(t-+(0|b)))==0|((c=n+1|0)-(g+16|0)|0)!=1||(l[n+1|0]=46,c=n+2|0),t!=0;);v=-1,(2147483645-(n=(f=J-E|0)+O|0)|0)<(0|a)||(O0(e,32,r,n=(a=!a||((I=c-(g+16|0)|0)-2|0)>=(0|a)?I=c-(g+16|0)|0:a+2|0)+n|0,s),M0(e,m,O),O0(e,48,r,n,65536^s),M0(e,g+16|0,I),O0(e,48,a-I|0,0,0),M0(e,E,f),O0(e,32,r,n,8192^s),v=(0|r)<(0|n)?n:r)}else O0(e,32,r,f=L+3|0,-65537&s),M0(e,AA,L),a=32&n,M0(e,t!=t?a?85596:85774:a?85247:85460,3),O0(e,32,r,f,8192^s),v=(0|r)<(0|f)?f:r;return F=g+560|0,0|v},function(e,t){var r;e|=0,r=t|=0,t=A[t>>2]+7&-8,A[r>>2]=t+16,Q[e>>3]=ii(A[t>>2],A[t+4>>2],A[t+8>>2],A[t+12>>2])},function(e,t,r){t|=0,r|=0;var a,s,n=0,g=0;return a=A[84+(e|=0)>>2],g=A[a+4>>2],s=A[e+28>>2],(n=(n=A[e+20>>2]-s|0)>>>0>g>>>0?g:n)&&(MA(A[a>>2],s,n),A[a>>2]=n+A[a>>2],g=A[a+4>>2]-n|0,A[a+4>>2]=g),n=A[a>>2],(g=r>>>0>g>>>0?g:r)&&(MA(n,t,g),n=g+A[a>>2]|0,A[a>>2]=n,A[a+4>>2]=A[a+4>>2]-g),l[0|n]=0,t=A[e+44>>2],A[e+28>>2]=t,A[e+20>>2]=t,0|r},function(e,t,r){r|=0;var a,s,n=0;return MA(t|=0,a=A[84+(e|=0)>>2],r=r>>>0>(n=(s=j2(a,0,n=r+256|0))?s-a|0:n)>>>0?n:r),t=a+n|0,A[e+84>>2]=t,A[e+8>>2]=t,A[e+4>>2]=r+a,0|r},function(e,t,r){t|=0,r|=0;var a,s=0,n=0,g=0;s=A[84+(e|=0)>>2],a=A[s>>2]?s:84412,s=0;A:if(A[e+48>>2])for(;;){if(!(n=A[(s<<2)+a>>2]))break A;if(l[A[e+44>>2]+s|0]=(0|n)>=128?64:n,!((s=s+1|0)>>>0<aA[e+48>>2]))break}return n=A[e+44>>2],A[e+4>>2]=n,A[e+84>>2]=(s<<2)+a,A[e+8>>2]=s+n,!r|!s||(A[e+4>>2]=n+1,l[0|t]=C[0|n],g=1),0|g},Hi,rt,Zl,Zl,function(e,t,r){r|=0;var a,s=0;return F=a=F+-64|0,s=1,Me(e|=0,t|=0,0)||(s=0,t&&(s=0,(t=U8(t,125132))&&(QA(4|(s=a+8|0),0,52),A[a+56>>2]=1,A[a+20>>2]=-1,A[a+16>>2]=e,A[a+8>>2]=t,xA[A[A[t>>2]+28>>2]](t,s,A[r>>2],1),(0|(e=A[a+32>>2]))==1&&(A[r>>2]=A[a+24>>2]),s=(0|e)==1))),F=a- -64|0,0|s},function(e,t,r,a,s,n){r|=0,a|=0,s|=0,n|=0,Me(e|=0,A[8+(t|=0)>>2],n)&&ol(t,r,a,s)},function(e,t,r,a,s){if(r|=0,a|=0,s|=0,Me(e|=0,A[8+(t|=0)>>2],s))A[t+28>>2]==1|A[t+4>>2]!=(0|r)||(A[t+28>>2]=a);else A:if(Me(e,A[t>>2],s)){if(!(A[t+16>>2]!=(0|r)&A[t+20>>2]!=(0|r))){if((0|a)!=1)break A;return void(A[t+32>>2]=1)}A[t+20>>2]=r,A[t+32>>2]=a,A[t+40>>2]=A[t+40>>2]+1,A[t+36>>2]!=1|A[t+24>>2]!=2||(l[t+54|0]=1),A[t+44>>2]=4}},function(e,t,r,a){r|=0,a|=0,Me(e|=0,A[8+(t|=0)>>2],0)&&wl(t,r,a)},rt,function(e,t,r,a,s,n){r|=0,a|=0,s|=0,n|=0,Me(e|=0,A[8+(t|=0)>>2],n)?ol(t,r,a,s):(e=A[e+8>>2],xA[A[A[e>>2]+20>>2]](e,t,r,a,s,n))},function(e,t,r,a,s){if(r|=0,a|=0,s|=0,Me(e|=0,A[8+(t|=0)>>2],s))A[t+28>>2]==1|A[t+4>>2]!=(0|r)||(A[t+28>>2]=a);else A:{if(Me(e,A[t>>2],s)){if(!(A[t+16>>2]!=(0|r)&A[t+20>>2]!=(0|r))){if((0|a)!=1)break A;return void(A[t+32>>2]=1)}A[t+32>>2]=a;e:if(A[t+44>>2]!=4){if(B[t+52>>1]=0,e=A[e+8>>2],xA[A[A[e>>2]+20>>2]](e,t,r,r,1,s),C[t+53|0]){if(A[t+44>>2]=3,!C[t+52|0])break e;break A}A[t+44>>2]=4}if(A[t+20>>2]=r,A[t+40>>2]=A[t+40>>2]+1,A[t+36>>2]!=1|A[t+24>>2]!=2)break A;return void(l[t+54|0]=1)}e=A[e+8>>2],xA[A[A[e>>2]+24>>2]](e,t,r,a,s)}},function(e,t,r,a){r|=0,a|=0,Me(e|=0,A[8+(t|=0)>>2],0)?wl(t,r,a):(e=A[e+8>>2],xA[A[A[e>>2]+28>>2]](e,t,r,a))},rt,function(e){return 84787},rt,function(e){return 85058},rt,function(e){return 84147},function(e){var t;return t=e|=0,e=A[e>>2],A[t>>2]=e+1,0|((0|(e=l[0|e]))<0?65533:255&e)},function(e,t,r,a,s,n){e|=0,t|=0,r|=0,a|=0,s|=0,n|=0;var g,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0;if(g=ae(408),A[g+4>>2]=a,A[g>>2]=r,t?(MA(g+16|0,t,376),Q[g+392>>3]=(Q[t+368>>3]-Q[t>>3])/+(r>>>0),t=0):t=1,A[g+400>>2]=s,l[g+8|0]=t,n){if(r=A[e+24>>2])for(t=A[e+20>>2],a=A[e+8>>2];(s=A[A[(t>>>8&16777212)+a>>2]+((1023&t)<<2)>>2])&&(SA(s),r=A[e+24>>2],a=A[e+8>>2],t=A[e+20>>2]),t=t+1|0,A[e+20>>2]=t,r=r-1|0,A[e+24>>2]=r,t>>>0>=2048&&(SA(A[a>>2]),a=A[e+8>>2]+4|0,A[e+8>>2]=a,t=A[e+20>>2]-1024|0,A[e+20>>2]=t,r=A[e+24>>2]),r;);t=A[e+28>>2],A[e+420>>2]=A[t>>2],(r=A[e+32>>2])&&(l[t+8|0]=C[r+8|0],MA(t+16|0,e+40|0,376),(t=A[e+32>>2])&&SA(t),A[e+32>>2]=0)}if(r=(a=A[e+24>>2])+A[e+20>>2]|0,s=A[e+12>>2],(0|r)==(0|((0|(t=A[e+8>>2]))!=(0|s)?(s-t<<8)-1:0))){F=f=F-32|0;A:{e:{r:{i:{if((t=A[16+(n=e+4|0)>>2])>>>0>=1024){if(A[n+16>>2]=t-1024,t=A[n+4>>2],E=A[t>>2],s=t+4|0,A[n+4>>2]=s,(0|(t=A[n+8>>2]))==A[n+12>>2])if((c=A[n>>2])>>>0<s>>>0)r=Qr((a=(1+(s-c>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,A[n+8>>2]=r,A[n+4>>2]=a+A[n+4>>2];else{if((r=(0|t)==(0|c)?1:t-c>>1)>>>0>=1073741824)break i;if(v=(a=r<<2)+(I=ae(a))|0,r=a=I+(-4&r)|0,(0|t)!=(0|s)){if(D=-4&(t=t-s|0),m=1+((b=t-4|0)>>>2|0)&7)for(r=0,t=a;A[t>>2]=A[s>>2],s=s+4|0,t=t+4|0,(0|m)!=(0|(r=r+1|0)););else t=a;if(r=a+D|0,!(b>>>0<28))for(;A[t>>2]=A[s>>2],A[t+4>>2]=A[s+4>>2],A[t+8>>2]=A[s+8>>2],A[t+12>>2]=A[s+12>>2],A[t+16>>2]=A[s+16>>2],A[t+20>>2]=A[s+20>>2],A[t+24>>2]=A[s+24>>2],A[t+28>>2]=A[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}A[n+12>>2]=v,A[n+8>>2]=r,A[n+4>>2]=a,A[n>>2]=I,c&&(SA(c),r=A[n+8>>2])}else r=t;A[r>>2]=E,A[n+8>>2]=A[n+8>>2]+4;break A}if((c=(s=A[n+8>>2])-A[n+4>>2]>>2)>>>0<(a=(t=A[n+12>>2])-(r=A[n>>2])|0)>>2>>>0){if((0|t)!=(0|s)){A[f+8>>2]=ae(4096),K8(n,f+8|0);break A}if(A[f+8>>2]=ae(4096),R8(n,f+8|0),t=A[n+4>>2],E=A[t>>2],s=t+4|0,A[n+4>>2]=s,(0|(t=A[n+8>>2]))==A[n+12>>2])if((c=A[n>>2])>>>0<s>>>0)r=Qr((a=(1+(s-c>>2)|0)/-2<<2)+s|0,s,t=t-s|0)+t|0,A[n+8>>2]=r,A[n+4>>2]=a+A[n+4>>2];else{if((r=(0|t)==(0|c)?1:t-c>>1)>>>0>=1073741824)break i;if(v=(a=r<<2)+(I=ae(a))|0,r=a=I+(-4&r)|0,(0|t)!=(0|s)){if(D=-4&(t=t-s|0),m=1+((b=t-4|0)>>>2|0)&7)for(r=0,t=a;A[t>>2]=A[s>>2],s=s+4|0,t=t+4|0,(0|m)!=(0|(r=r+1|0)););else t=a;if(r=a+D|0,!(b>>>0<28))for(;A[t>>2]=A[s>>2],A[t+4>>2]=A[s+4>>2],A[t+8>>2]=A[s+8>>2],A[t+12>>2]=A[s+12>>2],A[t+16>>2]=A[s+16>>2],A[t+20>>2]=A[s+20>>2],A[t+24>>2]=A[s+24>>2],A[t+28>>2]=A[s+28>>2],s=s+32|0,(0|r)!=(0|(t=t+32|0)););}A[n+12>>2]=v,A[n+8>>2]=r,A[n+4>>2]=a,A[n>>2]=I,c&&(SA(c),r=A[n+8>>2])}else r=t;A[r>>2]=E,A[n+8>>2]=A[n+8>>2]+4;break A}if(A[f+24>>2]=n+12,!((t=(0|t)==(0|r)?1:a>>1)>>>0>=1073741824)){if(t=ae(r=t<<2),A[f+8>>2]=t,a=t+(c<<2)|0,A[f+16>>2]=a,A[f+20>>2]=t+r,A[f+12>>2]=a,A[f+4>>2]=ae(4096),K8(f+8|0,f+4|0),(0|(s=A[n+8>>2]))==A[n+4>>2]){t=s;break e}for(;R8(f+8|0,s=s-4|0),A[n+4>>2]!=(0|s););break r}}Qi(),K()}t=A[n+8>>2]}r=A[n>>2],A[n>>2]=A[f+8>>2],A[f+8>>2]=r,A[n+4>>2]=A[f+12>>2],A[f+12>>2]=s,A[n+8>>2]=A[f+16>>2],A[f+16>>2]=t,a=A[n+12>>2],A[n+12>>2]=A[f+20>>2],A[f+20>>2]=a,(0|t)!=(0|s)&&(A[f+16>>2]=t+(3+(s-t|0)&-4)),r&&SA(r)}F=f+32|0,r=(a=A[e+24>>2])+A[e+20>>2]|0,t=A[e+8>>2]}A[A[t+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2]=g,A[e+24>>2]=a+1},function(e){var t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0;r=A[420+(e|=0)>>2]+1|0,A[e+420>>2]=r;A:{if(t=A[e+32>>2]){if(r>>>0>(f=A[t+4>>2])>>>0){(r=A[e+28>>2])&&(SA(r),t=A[e+32>>2]),A[e+32>>2]=0,A[e+28>>2]=t;break A}for(n=e+40|0,g=t+16|0,c=A[e+28>>2]+16|0,I=+(r>>>0)/+(f>>>0),t=0;;){if(a=Q[(r=t<<3)+g>>3],s=Q[r+c>>3],Q[r+n>>3]=a==a?(a-s)*I+s:s,(0|(r=1|t))==47)break A;a=Q[(r<<=3)+g>>3],s=Q[r+c>>3],Q[r+n>>3]=a==a?(a-s)*I+s:s,t=t+2|0}}if(t=A[e+28>>2],r>>>0>aA[t>>2]){if(n=A[e+24>>2]){if(l[e+416|0]=0,g=A[e+8>>2],r=A[e+20>>2],t=A[A[g+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2],A[e+32>>2]=t,A[e+24>>2]=n-1,r=r+1|0,A[e+20>>2]=r,r>>>0>=2048&&(SA(A[g>>2]),A[e+8>>2]=A[e+8>>2]+4,A[e+20>>2]=A[e+20>>2]-1024,t=A[e+32>>2]),C[t+8|0])MA(t+16|0,A[e+28>>2]+16|0,376),t=A[e+32>>2],A[t+368>>2]=0,A[t+372>>2]=0,a=Q[e+40>>3],A[t+392>>2]=0,A[t+396>>2]=0,Q[t+16>>3]=a;else if(r=A[e+28>>2],C[r+8|0]&&(MA(r+16|0,t+16|0,376),t=A[e+28>>2],A[t+368>>2]=0,A[t+372>>2]=0,!(t=A[e+32>>2])))break A;(0|(r=A[t+400>>2]))!=-1&&(A[e+424>>2]=r),A[e+420>>2]=0,Q[t+16>>3]=Q[t+392>>3]*+aA[t+4>>2]+Q[t+16>>3];break A}l[e+416|0]=1}else a=Q[t+392>>3]+Q[e+40>>3],Q[e+40>>3]=a,Q[t+16>>3]=a}return 0|(C[e+416|0]?0:e+40)},function(e){return A[424+(e|=0)>>2]},function(e){var t=0;return A[(e|=0)>>2]=132304,(t=A[e+28>>2])&&SA(t),(t=A[e+32>>2])&&SA(t),el(e+4|0),0|e},function(e){var t=0;A[(e|=0)>>2]=132304,(t=A[e+28>>2])&&SA(t),(t=A[e+32>>2])&&SA(t),el(e+4|0),SA(e)},function(e,t,r){t|=0,r|=0;var a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0;if(!A[1088+(e|=0)>>2])return 0;A:if(t){for(I=e+648|0,c=e- -64|0;;){if(a=A[e+1088>>2],!(a=0|xA[A[A[a>>2]+4>>2]](a)))break A;if(s=P8(Q[e+32>>3]+Q[a+16>>3]/+A[e+24>>2]),Q[e+32>>3]=s,s=Hr(6.283185307179586*s),s=P8(Q[e+16>>3]+Q[a>>3]*(.06*s*Q[a+8>>3]+1)/+A[e+8>>2]),Q[e+16>>3]=s,f=DA(A[56848],A[56849],1284865837,1481765933),n=_,n=(f=f+1|0)?n:n+1|0,A[56848]=f,A[56849]=n,g=.75*Q[e+40>>3]+ +(n>>>1|0)/2147483647,Q[e+40>>3]=g,b=Q[a+24>>3],n=s>=Q[a+32>>3],l[e+48|0]=n,g=(E=b)*(b=.2*g),g=ee(c+512|0,ee(c+440|0,s=Q[a+352>>3]*(b*Q[a+48>>3]+Q[a+40>>3]*(s+s+-1+(n?g:.01*g)))*.5,Q[a+104>>3],Q[a+168>>3]),Q[a+112>>3],Q[a+176>>3]),g=ee(c+8|0,ee(c+80|0,ee(c+152|0,ee(c+224|0,ee(c+296|0,ee(c+368|0,g==g?(g-s)*Q[a+184>>3]+s:s,Q[a+96>>3],Q[a+160>>3]),Q[a+88>>3],Q[a+152>>3]),Q[a+80>>3],Q[a+144>>3]),Q[a+72>>3],Q[a+136>>3]),Q[a+64>>3],Q[a+128>>3]),Q[a+56>>3],Q[a+120>>3]),f=DA(A[56848],A[56849],1284865837,1481765933),n=_,n=(f=f+1|0)?n:n+1|0,A[56848]=f,A[56849]=n,s=.75*Q[e+56>>3]+ +(n>>>1|0)/2147483647,Q[e+56>>3]=s,n=(m<<1)+r|0,b=ee(I+8|0,s=Q[a+352>>3]*(Q[a+192>>3]*(.3*s))*.5,Q[a+200>>3],Q[a+248>>3]),v=Q[a+296>>3],D=ee(I+80|0,s,Q[a+208>>3],Q[a+256>>3]),Y=Q[a+304>>3],O=ee(I+152|0,s,Q[a+216>>3],Q[a+264>>3]),R=Q[a+312>>3],L=ee(I+224|0,s,Q[a+224>>3],Q[a+272>>3]),U=Q[a+320>>3],J=ee(I+296|0,s,Q[a+232>>3],Q[a+280>>3]),q=Q[a+328>>3],E=g,g=(ee(I+368|0,s,Q[a+240>>3],Q[a+288>>3])-s)*Q[a+336>>3]+(q*(J-s)+(U*(L-s)+(R*(O-s)+(Y*(D-s)+(v*(b-s)+0))))),s=(E+(s==s?(s-g)*Q[a+344>>3]+g:g))*Q[a+360>>3]*4e3,a=(0|(a=sA(s)<2147483648?~~s:-2147483648))>=32e3?32e3:a,B[n>>1]=(0|a)<=-32e3?-32e3:a,(0|(m=m+1|0))==(0|t))break}m=t}return 0|(t>>>0>m>>>0?m:t)},function(e,t){t|=0,A[1088+(e|=0)>>2]=t},Hi,rt,Kl,function(e,t,r,a){return _=0,0}],Ft.grow=function(e){var t=this.length;return this.length=this.length+e,t},Ft.set=function(e,t){this[e]=t},Ft.get=function(e){return this[e]},Ft);return{v:function(){var e,t=0;F=e=F-16|0,0|SC(e+12|0,e+8|0)||(t=m0(4+(A[e+12>>2]<<2)|0),A[56800]=t,t&&(!(t=m0(A[e+8>>2]))||(A[A[56800]+(A[e+12>>2]<<2)>>2]=0,0|PC(A[56800],0|t)))&&(A[56800]=0)),F=e+16|0,A[56841]=227236,A[56823]=42},w:Ur,x:Wl,y:function(e,t){t|=0,A[(e|=0)>>2]=t},z:function(e,t){return t|=0,l[A[(e|=0)+4>>2]+t|0]},A:Ti,B:Hl,C:function(e){return C[(e|=0)+12|0]},D:function(e,t){t|=0,l[(e|=0)+12|0]=t},E:function(e){return C[(e|=0)+13|0]},F:function(e,t){t|=0,l[(e|=0)+13|0]=t},G:function(e){return C[(e|=0)+14|0]},H:function(e,t){t|=0,l[(e|=0)+14|0]=t},I:function(e){return C[(e|=0)+15|0]},J:function(e,t){t|=0,l[(e|=0)+15|0]=t},K:Sl,L:function(e,t){t|=0,A[(e|=0)+16>>2]=t},M:Fl,N:function(e,t){t|=0,A[(e|=0)+20>>2]=t},O:Ur,P:Wl,Q:Rl,R:Ti,S:Pl,T:Sl,U:Fl,V:function(e){return A[(e|=0)+24>>2]},W:Ur,X:function(){var e,t=0,r=0,a=0,s=0,n=0,g=0,f=0,c=0,I=0,b=0,m=0,E=0,v=0,D=0,Y=0,O=0,R=0,L=0,U=0,J=0,q=0,$=0,AA=0;if(e=ae(20),A[e+16>>2]=0,A[e+8>>2]=175,A[e+12>>2]=50,!(t=A[33208])){F=t=(F=U=F-16|0)-80|0;A:{if((r=zt(84292))&&(A[t+32>>2]=r,ye(137584,160,85959,t+32|0),(0|Ke(137584))==-31||(A[t+16>>2]=r,ye(137584,160,86031,t+16|0),(0|Ke(137584))==-31)))break A;(r=zt(84619))&&(A[t>>2]=r,ye(137584,160,85959,t),(0|Ke(137584))==-31)||(r=C[84826]|C[84827]<<8|C[84828]<<16|C[84829]<<24,A[34396]=C[84822]|C[84823]<<8|C[84824]<<16|C[84825]<<24,A[34397]=r,B[68804]=C[84846]|C[84847]<<8,r=C[84842]|C[84843]<<8|C[84844]<<16|C[84845]<<24,A[34400]=C[84838]|C[84839]<<8|C[84840]<<16|C[84841]<<24,A[34401]=r,r=C[84834]|C[84835]<<8|C[84836]<<16|C[84837]<<24,A[34398]=C[84830]|C[84831]<<8|C[84832]<<16|C[84833]<<24,A[34399]=r)}if(F=t+80|0,A[U+12>>2]=0,s=U+12|0,F=f=F-16|0,A[f+12>>2]=22050,Gr(85144)||Gr(85315)||Gr(85473)||Gr(85698),m=f+12|0,F=n=F-16|0,A[n+12>>2]=0,!((t=Tr(137832,84262,0,s))||(t=Tr(137836,84420,0,s))||(t=Tr(137840,84813,0,s))||(t=Tr(137820,85016,n+12|0,s))))if(A[34454]=aA[n+12>>2]/68,r=A[34460],A[34456]=r,r&&(0|(I=C[0|r]|C[r+1|0]<<8|C[r+2|0]<<16|C[r+3|0]<<24))==83969){if(E=C[r+4|0]|C[r+5|0]<<8|C[r+6|0]<<16|C[r+7|0]<<24,r=A[34458],D=C[0|r],A[34461]=D,D)for(t=r+4|0,I=0;a=T(I,44)+137856|0,s=C[0|t],A[a+36>>2]=s,A[a+40>>2]=C[t+1|0],g=C[t+8|0]|C[t+9|0]<<8|C[t+10|0]<<16|C[t+11|0]<<24,r=C[t+4|0]|C[t+5|0]<<8|C[t+6|0]<<16|C[t+7|0]<<24,l[0|a]=r,l[a+1|0]=r>>>8,l[a+2|0]=r>>>16,l[a+3|0]=r>>>24,l[a+4|0]=g,l[a+5|0]=g>>>8,l[a+6|0]=g>>>16,l[a+7|0]=g>>>24,g=C[t+16|0]|C[t+17|0]<<8|C[t+18|0]<<16|C[t+19|0]<<24,r=C[t+12|0]|C[t+13|0]<<8|C[t+14|0]<<16|C[t+15|0]<<24,l[a+8|0]=r,l[a+9|0]=r>>>8,l[a+10|0]=r>>>16,l[a+11|0]=r>>>24,l[a+12|0]=g,l[a+13|0]=g>>>8,l[a+14|0]=g>>>16,l[a+15|0]=g>>>24,g=C[t+24|0]|C[t+25|0]<<8|C[t+26|0]<<16|C[t+27|0]<<24,r=C[t+20|0]|C[t+21|0]<<8|C[t+22|0]<<16|C[t+23|0]<<24,l[a+16|0]=r,l[a+17|0]=r>>>8,l[a+18|0]=r>>>16,l[a+19|0]=r>>>24,l[a+20|0]=g,l[a+21|0]=g>>>8,l[a+22|0]=g>>>16,l[a+23|0]=g>>>24,g=C[t+32|0]|C[t+33|0]<<8|C[t+34|0]<<16|C[t+35|0]<<24,r=C[t+28|0]|C[t+29|0]<<8|C[t+30|0]<<16|C[t+31|0]<<24,l[a+24|0]=r,l[a+25|0]=r>>>8,l[a+26|0]=r>>>16,l[a+27|0]=r>>>24,l[a+28|0]=g,l[a+29|0]=g>>>8,l[a+30|0]=g>>>16,l[a+31|0]=g>>>24,r=t+36|0,A[a+32>>2]=r,t=r+(s<<4)|0,(0|D)!=(0|(I=I+1|0)););(0|D)<=A[34457]&&(A[34457]=0),t=0,m&&(A[m>>2]=E)}else A:{e:{if(s){if(r=A[s>>2]){SA(A[r+4>>2]),t=A[s>>2];break e}if(t=m0(16),A[s>>2]=t,t)break e;t=48}else t=268436223;break A}A[t>>2]=1,A[t+4>>2]=Lr(137584),r=A[s>>2],A[r+12>>2]=83969,A[r+8>>2]=I,t=268436223}if(F=n+16|0,r=t,!t){if(m=A[f+12>>2],A[50754]=m,A[50759]=0,A[50760]=134217728/(0|m),A[50762]=0,A[50763]=0,A[50765]=2147483647,A[50781]=100,A[50779]=32,A[50761]=(m<<6)/(0|m),t=A[26385],A[50784]=A[26384],A[50785]=t,t=A[26387],A[50786]=A[26386],A[50787]=t,t=A[26389],A[50788]=A[26388],A[50789]=t,t=A[26391],A[50790]=A[26390],A[50791]=t,t=A[26393],A[50792]=A[26392],A[50793]=t,t=A[26395],A[50794]=A[26394],A[50795]=t,t=A[26397],A[50796]=A[26396],A[50797]=t,A[50798]=A[26398],E=(0|(t=(0|(s=T(m,60)))/12800|0))>=128?128:t,A[50799]=E,A[50800]=(0|E)/2,!((0|m)==22050|(0|s)<12800)){if(m=1&(t=(0|E)<=1?1:E),R=+(0|E),I=0,(0|E)>=2)for(E=2147483646&t,t=0;Y=I+132160|0,c=127*(1-te(6.283185307179586*+(0|I)/R)),v=sA(c)<2147483648?~~c:-2147483648,l[0|Y]=v,Y=(s=1|I)+132160|0,c=127*(1-te(6.283185307179586*+(0|s)/R)),v=sA(c)<2147483648?~~c:-2147483648,l[0|Y]=v,I=I+2|0,(0|E)!=(0|(t=t+2|0)););m&&(t=I+132160|0,c=127*(1-te(6.283185307179586*+(0|I)/R)),Y=sA(c)<2147483648?~~c:-2147483648,l[0|t]=Y)}if(A[50801]=105792,A[56797]=z8(),A[55964]=38,A[55921]=1,A[55918]=22050,A[56606]=0,A[55960]=110928,A[55958]=0,A[55959]=1074266112,A[55956]=100,A[55922]=20,A[55923]=220,A[55916]=1,A[55917]=0,xi(),A[56244]=0,A[56245]=0,A[55928]=0,A[55926]=0,A[55927]=0,A[55924]=0,A[56246]=0,A[56247]=0,A[56260]=0,A[56261]=0,A[56262]=0,A[56263]=0,A[56276]=0,A[56277]=0,A[56278]=0,A[56279]=0,A[55974]=0,A[55975]=0,A[55972]=0,A[55973]=0,R=-3.141592653589793/+(0|(t=A[55918])),Q[27967]=R,s=(0|T(t,630))/1e4|0,A[55920]=s,t=(0|T(t,950))/1e4|0,A[55919]=t,c=-2*R,Q[27968]=c,R=($=we(R*+(0|s)))*-$,Q[28129]=R,c=$*te(c*+(0|t)),c+=c,Q[28128]=c,Q[28127]=1-c-R,A[55990]=0,A[55991]=0,A[55988]=0,A[55989]=0,A[56006]=0,A[56007]=0,A[56004]=0,A[56005]=0,A[56022]=0,A[56023]=0,A[56020]=0,A[56021]=0,A[56038]=0,A[56039]=0,A[56036]=0,A[56037]=0,A[56054]=0,A[56055]=0,A[56052]=0,A[56053]=0,A[56070]=0,A[56071]=0,A[56068]=0,A[56069]=0,A[56086]=0,A[56087]=0,A[56084]=0,A[56085]=0,A[56102]=0,A[56103]=0,A[56100]=0,A[56101]=0,A[56118]=0,A[56119]=0,A[56116]=0,A[56117]=0,A[56134]=0,A[56135]=0,A[56132]=0,A[56133]=0,A[56150]=0,A[56151]=0,A[56148]=0,A[56149]=0,A[56166]=0,A[56167]=0,A[56164]=0,A[56165]=0,A[56182]=0,A[56183]=0,A[56180]=0,A[56181]=0,A[56198]=0,A[56199]=0,A[56196]=0,A[56197]=0,A[56214]=0,A[56215]=0,A[56212]=0,A[56213]=0,A[56230]=0,A[56231]=0,A[56228]=0,A[56229]=0,A[56639]=59,A[56640]=59,A[56629]=0,A[56630]=59,A[56619]=89,A[56620]=160,A[56609]=280,A[56610]=688,A[56611]=1064,A[56621]=70,A[56631]=59,A[56612]=2806,A[56613]=3260,A[56622]=160,A[56623]=200,A[56632]=59,A[56633]=59,A[56641]=89,A[56642]=149,A[56643]=200,A[56644]=200,A[56634]=59,A[56635]=59,A[56624]=200,A[56625]=500,A[56614]=3700,A[56615]=6500,A[56645]=500,A[56646]=0,A[56616]=7e3,A[56626]=500,A[56636]=0,A[56647]=0,A[56637]=0,A[56627]=500,A[56617]=8e3,A[56669]=89,A[56648]=0,A[56638]=0,A[56628]=89,A[56618]=280,A[56657]=62,A[56655]=0,A[56656]=0,A[56653]=50,A[56654]=0,A[56651]=0,A[56652]=0,A[56649]=0,A[56650]=40,A[56607]=1e3,A[56608]=59,F=n=F-416|0,A[n+16>>2]=137584,A[n+20>>2]=47,A[n+24>>2]=85952,nA(t=n+240|0,85699,n+16|0),g=_e(t,86034)){if(Dr(n+240|0,170,g))for(m=5|(t=n+240|0),E=10|t;C[n+240|0]!=47&&(A[n+240>>2]!=1701736308?F0(n+240|0,86614,9)||(A[n+4>>2]=n+32,A[n>>2]=n+239,(0|qA(E,86829,n))==2&&(s=A[34064],A[(D=136272+(s<<4)|0)>>2]=l[n+239|0],t=Lr(n+32|0),A[34064]=s+1,A[D+12>>2]=t,A[D+4>>2]=0)):(F=t=F-48|0,A[32960]=-1,A[32961]=-1,A[32970]=-1,A[32971]=-1,A[32968]=-1,A[32969]=-1,A[32966]=-1,A[32967]=-1,A[32964]=-1,A[32965]=-1,A[32962]=-1,A[32963]=-1,A[t+36>>2]=131876,A[t+32>>2]=131872,A[t+28>>2]=131868,A[t+24>>2]=131864,A[t+20>>2]=131860,A[t+16>>2]=131856,A[t+12>>2]=131852,A[t+8>>2]=131848,A[t+4>>2]=131844,A[t>>2]=131840,qA(m,84222,t),F=t+48|0)),Dr(n+240|0,170,g););H0(g)}F=n+416|0,A[50297]=0,A[50298]=0,A[50301]=0,A[50302]=0,A[50299]=0,A[50300]=0,ui(0,85698),A[36425]=0,A[36424]=0,A[36426]=0,A[36427]=-1,Yl(),Q8(0),a=A[25690],A[34062]=a,b=A[25689],n=A[25688],A[34060]=n,A[34061]=b,O=A[25687],g=A[25686],A[34058]=g,A[34059]=O,L=A[25685],D=A[25684],A[34056]=D,A[34057]=L,J=A[25683],m=A[25682],A[34054]=m,A[34055]=J,q=A[25681],E=A[25680],A[34052]=E,A[34053]=q,v=A[25679],s=A[25678],A[34050]=s,A[34051]=v,Y=A[25677],t=A[25676],A[34048]=t,A[34049]=Y,A[33729]=t,A[33730]=Y,A[33731]=s,A[33732]=v,A[33733]=E,A[33734]=q,A[33735]=m,A[33736]=J,A[33737]=D,A[33738]=L,A[33739]=g,A[33740]=O,A[33741]=n,A[33742]=b,A[33743]=a,J2(1,175),J2(2,100),J2(6,A[47200]),J2(5,A[47201]),J2(7,0),A[47198]=0,A[47197]=0,c=+CA()/1e3,s=DA(t=sA(c)<9223372036854776e3?~~c>>>0:0,0,1103515245,0),t=_,t=(s=s+12345|0)>>>0<12345?t+1|0:t,A[33209]=Yi(s,t)}if(F=f+16|0,r){Y=A[30450],J=A[U+12>>2],f=(b=F-560|0)+48|0,F=a=(F=b)-16|0;A:{e:switch(0|R0(r-268435967|0,24)){case 0:A0(f,84133,512);break A;case 1:A0(f,84580,512);break A;case 2:A0(f,84747,512);break A;case 3:A0(f,85084,512);break A;case 4:A0(f,85251,512);break A;case 5:A0(f,85380,512);break A;case 6:A0(f,85607,512);break A;case 7:A0(f,85722,512);break A;case 8:A0(f,85913,512);break A;case 9:A0(f,86046,512);break A;case 10:A0(f,86153,512);break A;case 11:A0(f,86678,512);break A;case 12:A0(f,86773,512);break A;case 14:A0(f,86958,512);break A;case 15:A0(f,87071,512);break A;default:break e}if(1879048192&r)A[a>>2]=r,ye(f,512,87182,a);else{if(I=0,n=y[123728+((r>>>0<=153?r:0)<<1)>>1]+121804|0,r=A[A[56841]+20>>2]){q=A[r+4>>2],O=A[r>>2],L=A[O>>2]+1794895138|0,v=D2(A[O+8>>2],L),s=D2(A[O+12>>2],L),t=D2(A[O+16>>2],L);e:if(!(q>>>2>>>0<=v>>>0||3&(t|s)|(r=q-(v<<2)|0)>>>0<=s>>>0|t>>>0>=r>>>0))for(m=t>>>2|0,E=s>>>2|0;;){if(D=D2(A[(r=((t=(s=(g=v>>>1|0)+AA|0)<<1)+E<<2)+O|0)>>2],L),(r=D2(A[r+4>>2],L))>>>0>=q>>>0|D>>>0>=q-r>>>0|C[(r+D|0)+O|0])break e;if(!(r=c0(n,r+O|0))){if(t=D2(A[(r=(t+m<<2)+O|0)>>2],L),(r=D2(A[r+4>>2],L))>>>0>=q>>>0|t>>>0>=q-r>>>0)break e;I=C[(t+r|0)+O|0]?0:r+O|0;break e}if((0|v)==1)break e;v=(r=(0|r)<0)?g:v-g|0,AA=r?AA:s}}if((r=lA(t=I||n))>>>0>=512){MA(f,t,511),l[f+511|0]=0;break A}MA(f,t,r+1|0)}}F=a+16|0;A:if(J){e:switch(A[J>>2]){case 0:A[b+16>>2]=A[J+4>>2],A[b+20>>2]=b+48,n0(Y,87384,b+16|0);break A;case 1:break e;default:break A}t=A[J+12>>2],r=A[J+8>>2],A[b+36>>2]=A[J+4>>2],_=r,A[b+40>>2]=t,A[b+44>>2]=_,A[b+32>>2]=b+48,n0(Y,87521,b+32|0)}else A[b>>2]=b+48,n0(Y,87700,b);F=b+560|0,(0|U)!=-12&&(r=A[U+12>>2])&&(SA(A[r+4>>2]),SA(A[U+12>>2]),A[U+12>>2]=0)}r=A[24806],A[34389]=0,A[32538]=r,r=(1e3+((r=T(A[50754],100))-((0|r)%1e3|0)|0)|0)/500|0,A[34390]=r,r=Re(A[34391],r),A[34392]=r,r&&(A[34391]=r,A[34393]=40,(r=Re(A[34388],1440))&&(A[34388]=r)),A[47198]=0,F=U+16|0,t=A[50754],A[33208]=t}return A[e+4>>2]=t,A[e>>2]=yr(),0|e},Y:function(e,t,r){e|=0,t|=0,r|=0,A[34440]=r,Ei(3,A[e+12>>2]),Ei(1,A[e+8>>2]),(e=A[e+16>>2])?Dt(e):Tt(1024),b8(t),A[34440]=0},Z:function(e,t,r){return e|=0,t|=0,r|=0,A[34440]=0,(e=_e(r,1032))?(A[47195]=e,A[47197]=130,e||(A[47195]=A[30450]),b8(t),A[47195]=0,A[47197]=0,A[47195]=A[30450],H0(e),0):-1},_:function(e){return 36},$:function(e,t,r){var a;return e|=0,t|=0,F=a=F-32|0,(r|=0)?(A[a+24>>2]=0,A[a+28>>2]=0,A[a+16>>2]=0,A[a+20>>2]=0,A[a+12>>2]=r,A[a+8>>2]=t,l[a+21|0]=0,t=Dt(a+8|0)):t=Tt(t),A[e+16>>2]=201188,F=a+32|0,0|t},aa:function(e,t,r,a){var s;return e|=0,t|=0,F=s=F-32|0,(r|=0)|(a|=0)?(A[s+24>>2]=0,A[s+28>>2]=0,A[s+16>>2]=0,A[s+20>>2]=0,A[s+12>>2]=r,A[s+8>>2]=t,l[s+22|0]=0,l[s+20|0]=a,t=Dt(s+8|0)):t=Tt(t),A[e+16>>2]=201188,F=s+32|0,0|t},ba:function(e,t,r,a,s){var n;return e|=0,t|=0,F=n=F-32|0,(a|=0)|(s|=0)|(r|=0)?(A[n+24>>2]=0,A[n+28>>2]=0,A[n+16>>2]=0,A[n+20>>2]=0,A[n+12>>2]=r,A[n+8>>2]=t,l[n+21|0]=s,l[n+20|0]=a,t=Dt(n+8|0)):t=Tt(t),A[e+16>>2]=201188,F=n+32|0,0|t},ca:function(e,t,r,a,s,n){var g;return e|=0,t|=0,F=g=F-32|0,(a|=0)|(s|=0)|(n|=0)|(r|=0)?(A[g+24>>2]=0,A[g+28>>2]=0,A[g+16>>2]=0,A[g+20>>2]=0,A[g+12>>2]=r,A[g+8>>2]=t,l[g+22|0]=n,l[g+21|0]=s,l[g+20|0]=a,t=Dt(g+8|0)):t=Tt(t),A[e+16>>2]=201188,F=g+32|0,0|t},da:function(e,t){return t|=0,A[A[(e|=0)>>2]+(t<<2)>>2]},ea:function(e,t,r){t|=0,r|=0,A[A[(e|=0)>>2]+(t<<2)>>2]=r},fa:Rl,ga:Ti,ha:Hl,ia:Pl,ja:function(e,t){t|=0,A[(e|=0)+12>>2]=t},ka:Ur,la:function(){return 0},ma:function(){return 1},na:function(){return 2},oa:function(){return 3},pa:function(){return 4},qa:function(){return 5},ra:function(){return 6},sa:function(){return 7},ta:function(){return 8},ua:xA,va:function(){return 227192},wa:SA,xa:m0,ya:function(e){return(e|=0)?0|!!(0|U8(e,125228)):0}}})(u)})(o)},instantiate:function(i,o){return{then:function(u){var d=new S2.Module(i);u({instance:new S2.Instance(d,o)})}}},RuntimeError:Error};typeof S2!="object"&&Se("no native wasm support detected");var $3=!1;function S1(i,o){i||Se(o)}var L0,F2,pr,XA,h0,Au,eu,tu=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function R2(i,o,u){for(var d=o+u,p=o;i[p]&&!(p>=d);)++p;if(p-o>16&&i.buffer&&tu)return tu.decode(i.subarray(o,p));for(var k="";o<p;){var h=i[o++];if(128&h){var w=63&i[o++];if((224&h)!=192){var x=63&i[o++];if((h=(240&h)==224?(15&h)<<12|w<<6|x:(7&h)<<18|w<<12|x<<6|63&i[o++])<65536)k+=String.fromCharCode(h);else{var G=h-65536;k+=String.fromCharCode(55296|G>>10,56320|1023&G)}}else k+=String.fromCharCode((31&h)<<6|w)}else k+=String.fromCharCode(h)}return k}function W2(i,o){return i?R2(F2,i,o):""}function F1(i,o,u,d){if(!(d>0))return 0;for(var p=u,k=u+d-1,h=0;h<i.length;++h){var w=i.charCodeAt(h);if(w>=55296&&w<=57343&&(w=65536+((1023&w)<<10)|1023&i.charCodeAt(++h)),w<=127){if(u>=k)break;o[u++]=w}else if(w<=2047){if(u+1>=k)break;o[u++]=192|w>>6,o[u++]=128|63&w}else if(w<=65535){if(u+2>=k)break;o[u++]=224|w>>12,o[u++]=128|w>>6&63,o[u++]=128|63&w}else{if(u+3>=k)break;o[u++]=240|w>>18,o[u++]=128|w>>12&63,o[u++]=128|w>>6&63,o[u++]=128|63&w}}return o[u]=0,u-p}function ru(i){for(var o=0,u=0;u<i.length;++u){var d=i.charCodeAt(u);d<=127?o++:d<=2047?o+=2:d>=55296&&d<=57343?(o+=4,++u):o+=3}return o}var Pe,R1=Z.INITIAL_MEMORY||16777216;Ir=Z.wasmMemory?Z.wasmMemory:new S2.Memory({initial:R1/65536,maximum:R1/65536}),Pe=Ir.buffer,Z.HEAP8=L0=new Int8Array(Pe),Z.HEAP16=pr=new Int16Array(Pe),Z.HEAP32=XA=new Int32Array(Pe),Z.HEAPU8=F2=new Uint8Array(Pe),Z.HEAPU16=new Uint16Array(Pe),Z.HEAPU32=h0=new Uint32Array(Pe),Z.HEAPF32=Au=new Float32Array(Pe),Z.HEAPF64=eu=new Float64Array(Pe),R1=Ir.buffer.byteLength;var au=[],iu=[],su=[],nu=!1;function ou(i){iu.unshift(i)}var YA,C0,b2=0,Bt=null;function gu(i){b2++,Z.monitorRunDependencies&&Z.monitorRunDependencies(b2)}function fu(i){if(b2--,Z.monitorRunDependencies&&Z.monitorRunDependencies(b2),b2==0&&Bt){var o=Bt;Bt=null,o()}}function Se(i){throw Z.onAbort&&Z.onAbort(i),P2(i="Aborted("+i+")"),$3=!0,i+=". Build with -sASSERTIONS for more info.",new S2.RuntimeError(i)}function BC(i){this.name="ExitStatus",this.message="Program terminated with exit("+i+")",this.status=i}function W1(i){for(;i.length>0;)i.shift()(Z)}function EC(i,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":case"i8":return L0[i|0];case"i16":return pr[i>>1];case"i32":case"i64":return XA[i>>2];case"float":return Au[i>>2];case"double":return eu[i>>3];case"*":return h0[i>>2];default:Se("invalid type for getValue: "+o)}return null}function xC(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(o){h0[this.ptr+4>>2]=o},this.get_type=function(){return h0[this.ptr+4>>2]},this.set_destructor=function(o){h0[this.ptr+8>>2]=o},this.get_destructor=function(){return h0[this.ptr+8>>2]},this.set_refcount=function(o){XA[this.ptr>>2]=o},this.set_caught=function(o){o=o?1:0,L0[this.ptr+12|0]=o},this.get_caught=function(){return L0[this.ptr+12|0]!=0},this.set_rethrown=function(o){o=o?1:0,L0[this.ptr+13|0]=o},this.get_rethrown=function(){return L0[this.ptr+13|0]!=0},this.init=function(o,u){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(u),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var o=XA[this.ptr>>2];XA[this.ptr>>2]=o+1},this.release_ref=function(){var o=XA[this.ptr>>2];return XA[this.ptr>>2]=o-1,o===1},this.set_adjusted_ptr=function(o){h0[this.ptr+16>>2]=o},this.get_adjusted_ptr=function(){return h0[this.ptr+16>>2]},this.get_exception_ptr=function(){if(C8(this.get_type()))return h0[this.excPtr>>2];var o=this.get_adjusted_ptr();return o!==0?o:this.excPtr}}var a0={isAbs:i=>i.charAt(0)==="/",splitPath:i=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(i).slice(1),normalizeArray:(i,o)=>{for(var u=0,d=i.length-1;d>=0;d--){var p=i[d];p==="."?i.splice(d,1):p===".."?(i.splice(d,1),u++):u&&(i.splice(d,1),u--)}if(o)for(;u;u--)i.unshift("..");return i},normalize:i=>{var o=a0.isAbs(i),u=i.substr(-1)==="/";return(i=a0.normalizeArray(i.split("/").filter((d=>!!d)),!o).join("/"))||o||(i="."),i&&u&&(i+="/"),(o?"/":"")+i},dirname:i=>{var o=a0.splitPath(i),u=o[0],d=o[1];return u||d?(d&&(d=d.substr(0,d.length-1)),u+d):"."},basename:i=>{if(i==="/")return"/";var o=(i=(i=a0.normalize(i)).replace(/\/$/,"")).lastIndexOf("/");return o===-1?i:i.substr(o+1)},join:function(){var i=Array.prototype.slice.call(arguments);return a0.normalize(i.join("/"))},join2:(i,o)=>a0.normalize(i+"/"+o)},qe={resolve:function(){for(var i="",o=!1,u=arguments.length-1;u>=-1&&!o;u--){var d=u>=0?arguments[u]:P.cwd();if(typeof d!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!d)return"";i=d+"/"+i,o=a0.isAbs(d)}return(o?"/":"")+(i=a0.normalizeArray(i.split("/").filter((p=>!!p)),!o).join("/"))||"."},relative:(i,o)=>{function u(G){for(var z=0;z<G.length&&G[z]==="";z++);for(var M=G.length-1;M>=0&&G[M]==="";M--);return z>M?[]:G.slice(z,M-z+1)}i=qe.resolve(i).substr(1),o=qe.resolve(o).substr(1);for(var d=u(i.split("/")),p=u(o.split("/")),k=Math.min(d.length,p.length),h=k,w=0;w<k;w++)if(d[w]!==p[w]){h=w;break}var x=[];for(w=h;w<d.length;w++)x.push("..");return(x=x.concat(p.slice(h))).join("/")}};function uu(i,o,u){var d=ru(i)+1,p=new Array(d),k=F1(i,p,0,p.length);return o&&(p.length=k),p}var I2={ttys:[],init:function(){},shutdown:function(){},register:function(i,o){I2.ttys[i]={input:[],output:[],ops:o},P.registerDevice(i,I2.stream_ops)},stream_ops:{open:function(i){var o=I2.ttys[i.node.rdev];if(!o)throw new P.ErrnoError(43);i.tty=o,i.seekable=!1},close:function(i){i.tty.ops.fsync(i.tty)},fsync:function(i){i.tty.ops.fsync(i.tty)},read:function(i,o,u,d,p){if(!i.tty||!i.tty.ops.get_char)throw new P.ErrnoError(60);for(var k=0,h=0;h<d;h++){var w;try{w=i.tty.ops.get_char(i.tty)}catch{throw new P.ErrnoError(29)}if(w===void 0&&k===0)throw new P.ErrnoError(6);if(w==null)break;k++,o[u+h]=w}return k&&(i.node.timestamp=Date.now()),k},write:function(i,o,u,d,p){if(!i.tty||!i.tty.ops.put_char)throw new P.ErrnoError(60);try{for(var k=0;k<d;k++)i.tty.ops.put_char(i.tty,o[u+k])}catch{throw new P.ErrnoError(29)}return d&&(i.node.timestamp=Date.now()),k}},default_tty_ops:{put_char:function(i,o){o===null||o===10?(br(R2(i.output,0)),i.output=[]):o!=0&&i.output.push(o)},fsync:function(i){i.output&&i.output.length>0&&(br(R2(i.output,0)),i.output=[])}},default_tty1_ops:{put_char:function(i,o){o===null||o===10?(P2(R2(i.output,0)),i.output=[]):o!=0&&i.output.push(o)},fsync:function(i){i.output&&i.output.length>0&&(P2(R2(i.output,0)),i.output=[])}}};function lu(i){Se()}var FA={ops_table:null,mount:function(i){return FA.createNode(null,"/",16895,0)},createNode:function(i,o,u,d){if(P.isBlkdev(u)||P.isFIFO(u))throw new P.ErrnoError(63);FA.ops_table||(FA.ops_table={dir:{node:{getattr:FA.node_ops.getattr,setattr:FA.node_ops.setattr,lookup:FA.node_ops.lookup,mknod:FA.node_ops.mknod,rename:FA.node_ops.rename,unlink:FA.node_ops.unlink,rmdir:FA.node_ops.rmdir,readdir:FA.node_ops.readdir,symlink:FA.node_ops.symlink},stream:{llseek:FA.stream_ops.llseek}},file:{node:{getattr:FA.node_ops.getattr,setattr:FA.node_ops.setattr},stream:{llseek:FA.stream_ops.llseek,read:FA.stream_ops.read,write:FA.stream_ops.write,allocate:FA.stream_ops.allocate,mmap:FA.stream_ops.mmap,msync:FA.stream_ops.msync}},link:{node:{getattr:FA.node_ops.getattr,setattr:FA.node_ops.setattr,readlink:FA.node_ops.readlink},stream:{}},chrdev:{node:{getattr:FA.node_ops.getattr,setattr:FA.node_ops.setattr},stream:P.chrdev_stream_ops}});var p=P.createNode(i,o,u,d);return P.isDir(p.mode)?(p.node_ops=FA.ops_table.dir.node,p.stream_ops=FA.ops_table.dir.stream,p.contents={}):P.isFile(p.mode)?(p.node_ops=FA.ops_table.file.node,p.stream_ops=FA.ops_table.file.stream,p.usedBytes=0,p.contents=null):P.isLink(p.mode)?(p.node_ops=FA.ops_table.link.node,p.stream_ops=FA.ops_table.link.stream):P.isChrdev(p.mode)&&(p.node_ops=FA.ops_table.chrdev.node,p.stream_ops=FA.ops_table.chrdev.stream),p.timestamp=Date.now(),i&&(i.contents[o]=p,i.timestamp=p.timestamp),p},getFileDataAsTypedArray:function(i){return i.contents?i.contents.subarray?i.contents.subarray(0,i.usedBytes):new Uint8Array(i.contents):new Uint8Array(0)},expandFileStorage:function(i,o){var u=i.contents?i.contents.length:0;if(!(u>=o)){o=Math.max(o,u*(u<1048576?2:1.125)>>>0),u!=0&&(o=Math.max(o,256));var d=i.contents;i.contents=new Uint8Array(o),i.usedBytes>0&&i.contents.set(d.subarray(0,i.usedBytes),0)}},resizeFileStorage:function(i,o){if(i.usedBytes!=o)if(o==0)i.contents=null,i.usedBytes=0;else{var u=i.contents;i.contents=new Uint8Array(o),u&&i.contents.set(u.subarray(0,Math.min(o,i.usedBytes))),i.usedBytes=o}},node_ops:{getattr:function(i){var o={};return o.dev=P.isChrdev(i.mode)?i.id:1,o.ino=i.id,o.mode=i.mode,o.nlink=1,o.uid=0,o.gid=0,o.rdev=i.rdev,P.isDir(i.mode)?o.size=4096:P.isFile(i.mode)?o.size=i.usedBytes:P.isLink(i.mode)?o.size=i.link.length:o.size=0,o.atime=new Date(i.timestamp),o.mtime=new Date(i.timestamp),o.ctime=new Date(i.timestamp),o.blksize=4096,o.blocks=Math.ceil(o.size/o.blksize),o},setattr:function(i,o){o.mode!==void 0&&(i.mode=o.mode),o.timestamp!==void 0&&(i.timestamp=o.timestamp),o.size!==void 0&&FA.resizeFileStorage(i,o.size)},lookup:function(i,o){throw P.genericErrors[44]},mknod:function(i,o,u,d){return FA.createNode(i,o,u,d)},rename:function(i,o,u){if(P.isDir(i.mode)){var d;try{d=P.lookupNode(o,u)}catch{}if(d)for(var p in d.contents)throw new P.ErrnoError(55)}delete i.parent.contents[i.name],i.parent.timestamp=Date.now(),i.name=u,o.contents[u]=i,o.timestamp=i.parent.timestamp,i.parent=o},unlink:function(i,o){delete i.contents[o],i.timestamp=Date.now()},rmdir:function(i,o){var u=P.lookupNode(i,o);for(var d in u.contents)throw new P.ErrnoError(55);delete i.contents[o],i.timestamp=Date.now()},readdir:function(i){var o=[".",".."];for(var u in i.contents)i.contents.hasOwnProperty(u)&&o.push(u);return o},symlink:function(i,o,u){var d=FA.createNode(i,o,41471,0);return d.link=u,d},readlink:function(i){if(!P.isLink(i.mode))throw new P.ErrnoError(28);return i.link}},stream_ops:{read:function(i,o,u,d,p){var k=i.node.contents;if(p>=i.node.usedBytes)return 0;var h=Math.min(i.node.usedBytes-p,d);if(h>8&&k.subarray)o.set(k.subarray(p,p+h),u);else for(var w=0;w<h;w++)o[u+w]=k[p+w];return h},write:function(i,o,u,d,p,k){if(!d)return 0;var h=i.node;if(h.timestamp=Date.now(),o.subarray&&(!h.contents||h.contents.subarray)){if(k)return h.contents=o.subarray(u,u+d),h.usedBytes=d,d;if(h.usedBytes===0&&p===0)return h.contents=o.slice(u,u+d),h.usedBytes=d,d;if(p+d<=h.usedBytes)return h.contents.set(o.subarray(u,u+d),p),d}if(FA.expandFileStorage(h,p+d),h.contents.subarray&&o.subarray)h.contents.set(o.subarray(u,u+d),p);else for(var w=0;w<d;w++)h.contents[p+w]=o[u+w];return h.usedBytes=Math.max(h.usedBytes,p+d),d},llseek:function(i,o,u){var d=o;if(u===1?d+=i.position:u===2&&P.isFile(i.node.mode)&&(d+=i.node.usedBytes),d<0)throw new P.ErrnoError(28);return d},allocate:function(i,o,u){FA.expandFileStorage(i.node,o+u),i.node.usedBytes=Math.max(i.node.usedBytes,o+u)},mmap:function(i,o,u,d,p){if(!P.isFile(i.node.mode))throw new P.ErrnoError(43);var k,h,w=i.node.contents;if(2&p||w.buffer!==L0.buffer){if((u>0||u+o<w.length)&&(w=w.subarray?w.subarray(u,u+o):Array.prototype.slice.call(w,u,u+o)),h=!0,!(k=lu()))throw new P.ErrnoError(48);L0.set(w,k)}else h=!1,k=w.byteOffset;return{ptr:k,allocated:h}},msync:function(i,o,u,d,p){return FA.stream_ops.write(i,o,0,d,u,!1),0}}},P={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(i,o={})=>{if(!(i=qe.resolve(i)))return{path:"",node:null};if((o=Object.assign({follow_mount:!0,recurse_count:0},o)).recurse_count>8)throw new P.ErrnoError(32);for(var u=i.split("/").filter((G=>!!G)),d=P.root,p="/",k=0;k<u.length;k++){var h=k===u.length-1;if(h&&o.parent)break;if(d=P.lookupNode(d,u[k]),p=a0.join2(p,u[k]),P.isMountpoint(d)&&(!h||h&&o.follow_mount)&&(d=d.mounted.root),!h||o.follow)for(var w=0;P.isLink(d.mode);){var x=P.readlink(p);if(p=qe.resolve(a0.dirname(p),x),d=P.lookupPath(p,{recurse_count:o.recurse_count+1}).node,w++>40)throw new P.ErrnoError(32)}}return{path:p,node:d}},getPath:i=>{for(var o;;){if(P.isRoot(i)){var u=i.mount.mountpoint;return o?u[u.length-1]!=="/"?u+"/"+o:u+o:u}o=o?i.name+"/"+o:i.name,i=i.parent}},hashName:(i,o)=>{for(var u=0,d=0;d<o.length;d++)u=(u<<5)-u+o.charCodeAt(d)|0;return(i+u>>>0)%P.nameTable.length},hashAddNode:i=>{var o=P.hashName(i.parent.id,i.name);i.name_next=P.nameTable[o],P.nameTable[o]=i},hashRemoveNode:i=>{var o=P.hashName(i.parent.id,i.name);if(P.nameTable[o]===i)P.nameTable[o]=i.name_next;else for(var u=P.nameTable[o];u;){if(u.name_next===i){u.name_next=i.name_next;break}u=u.name_next}},lookupNode:(i,o)=>{var u=P.mayLookup(i);if(u)throw new P.ErrnoError(u,i);for(var d=P.hashName(i.id,o),p=P.nameTable[d];p;p=p.name_next){var k=p.name;if(p.parent.id===i.id&&k===o)return p}return P.lookup(i,o)},createNode:(i,o,u,d)=>{var p=new P.FSNode(i,o,u,d);return P.hashAddNode(p),p},destroyNode:i=>{P.hashRemoveNode(i)},isRoot:i=>i===i.parent,isMountpoint:i=>!!i.mounted,isFile:i=>(61440&i)==32768,isDir:i=>(61440&i)==16384,isLink:i=>(61440&i)==40960,isChrdev:i=>(61440&i)==8192,isBlkdev:i=>(61440&i)==24576,isFIFO:i=>(61440&i)==4096,isSocket:i=>!(49152&~i),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:i=>{var o=P.flagModes[i];if(o===void 0)throw new Error("Unknown file open mode: "+i);return o},flagsToPermissionString:i=>{var o=["r","w","rw"][3&i];return 512&i&&(o+="w"),o},nodePermissions:(i,o)=>P.ignorePermissions||(!o.includes("r")||292&i.mode)&&(!o.includes("w")||146&i.mode)&&(!o.includes("x")||73&i.mode)?0:2,mayLookup:i=>{var o=P.nodePermissions(i,"x");return o||(i.node_ops.lookup?0:2)},mayCreate:(i,o)=>{try{return P.lookupNode(i,o),20}catch{}return P.nodePermissions(i,"wx")},mayDelete:(i,o,u)=>{var d;try{d=P.lookupNode(i,o)}catch(k){return k.errno}var p=P.nodePermissions(i,"wx");if(p)return p;if(u){if(!P.isDir(d.mode))return 54;if(P.isRoot(d)||P.getPath(d)===P.cwd())return 10}else if(P.isDir(d.mode))return 31;return 0},mayOpen:(i,o)=>i?P.isLink(i.mode)?32:P.isDir(i.mode)&&(P.flagsToPermissionString(o)!=="r"||512&o)?31:P.nodePermissions(i,P.flagsToPermissionString(o)):44,MAX_OPEN_FDS:4096,nextfd:(i=0,o=P.MAX_OPEN_FDS)=>{for(var u=i;u<=o;u++)if(!P.streams[u])return u;throw new P.ErrnoError(33)},getStream:i=>P.streams[i],createStream:(i,o,u)=>{P.FSStream||(P.FSStream=function(){this.shared={}},P.FSStream.prototype={},Object.defineProperties(P.FSStream.prototype,{object:{get:function(){return this.node},set:function(p){this.node=p}},isRead:{get:function(){return(2097155&this.flags)!=1}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(p){this.shared.flags=p}},position:{get:function(){return this.shared.position},set:function(p){this.shared.position=p}}})),i=Object.assign(new P.FSStream,i);var d=P.nextfd(o,u);return i.fd=d,P.streams[d]=i,i},closeStream:i=>{P.streams[i]=null},chrdev_stream_ops:{open:i=>{var o=P.getDevice(i.node.rdev);i.stream_ops=o.stream_ops,i.stream_ops.open&&i.stream_ops.open(i)},llseek:()=>{throw new P.ErrnoError(70)}},major:i=>i>>8,minor:i=>255&i,makedev:(i,o)=>i<<8|o,registerDevice:(i,o)=>{P.devices[i]={stream_ops:o}},getDevice:i=>P.devices[i],getMounts:i=>{for(var o=[],u=[i];u.length;){var d=u.pop();o.push(d),u.push.apply(u,d.mounts)}return o},syncfs:(i,o)=>{typeof i=="function"&&(o=i,i=!1),P.syncFSRequests++,P.syncFSRequests>1&&P2("warning: "+P.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var u=P.getMounts(P.root.mount),d=0;function p(h){return P.syncFSRequests--,o(h)}function k(h){if(h)return k.errored?void 0:(k.errored=!0,p(h));++d>=u.length&&p(null)}u.forEach((h=>{if(!h.type.syncfs)return k(null);h.type.syncfs(h,i,k)}))},mount:(i,o,u)=>{var d,p=u==="/",k=!u;if(p&&P.root)throw new P.ErrnoError(10);if(!p&&!k){var h=P.lookupPath(u,{follow_mount:!1});if(u=h.path,d=h.node,P.isMountpoint(d))throw new P.ErrnoError(10);if(!P.isDir(d.mode))throw new P.ErrnoError(54)}var w={type:i,opts:o,mountpoint:u,mounts:[]},x=i.mount(w);return x.mount=w,w.root=x,p?P.root=x:d&&(d.mounted=w,d.mount&&d.mount.mounts.push(w)),x},unmount:i=>{var o=P.lookupPath(i,{follow_mount:!1});if(!P.isMountpoint(o.node))throw new P.ErrnoError(28);var u=o.node,d=u.mounted,p=P.getMounts(d);Object.keys(P.nameTable).forEach((h=>{for(var w=P.nameTable[h];w;){var x=w.name_next;p.includes(w.mount)&&P.destroyNode(w),w=x}})),u.mounted=null;var k=u.mount.mounts.indexOf(d);u.mount.mounts.splice(k,1)},lookup:(i,o)=>i.node_ops.lookup(i,o),mknod:(i,o,u)=>{var d=P.lookupPath(i,{parent:!0}).node,p=a0.basename(i);if(!p||p==="."||p==="..")throw new P.ErrnoError(28);var k=P.mayCreate(d,p);if(k)throw new P.ErrnoError(k);if(!d.node_ops.mknod)throw new P.ErrnoError(63);return d.node_ops.mknod(d,p,o,u)},create:(i,o)=>(o=o!==void 0?o:438,o&=4095,o|=32768,P.mknod(i,o,0)),mkdir:(i,o)=>(o=o!==void 0?o:511,o&=1023,o|=16384,P.mknod(i,o,0)),mkdirTree:(i,o)=>{for(var u=i.split("/"),d="",p=0;p<u.length;++p)if(u[p]){d+="/"+u[p];try{P.mkdir(d,o)}catch(k){if(k.errno!=20)throw k}}},mkdev:(i,o,u)=>(u===void 0&&(u=o,o=438),o|=8192,P.mknod(i,o,u)),symlink:(i,o)=>{if(!qe.resolve(i))throw new P.ErrnoError(44);var u=P.lookupPath(o,{parent:!0}).node;if(!u)throw new P.ErrnoError(44);var d=a0.basename(o),p=P.mayCreate(u,d);if(p)throw new P.ErrnoError(p);if(!u.node_ops.symlink)throw new P.ErrnoError(63);return u.node_ops.symlink(u,d,i)},rename:(i,o)=>{var u,d,p=a0.dirname(i),k=a0.dirname(o),h=a0.basename(i),w=a0.basename(o);if(u=P.lookupPath(i,{parent:!0}).node,d=P.lookupPath(o,{parent:!0}).node,!u||!d)throw new P.ErrnoError(44);if(u.mount!==d.mount)throw new P.ErrnoError(75);var x,G=P.lookupNode(u,h),z=qe.relative(i,k);if(z.charAt(0)!==".")throw new P.ErrnoError(28);if((z=qe.relative(o,p)).charAt(0)!==".")throw new P.ErrnoError(55);try{x=P.lookupNode(d,w)}catch{}if(G!==x){var M=P.isDir(G.mode),N=P.mayDelete(u,h,M);if(N)throw new P.ErrnoError(N);if(N=x?P.mayDelete(d,w,M):P.mayCreate(d,w))throw new P.ErrnoError(N);if(!u.node_ops.rename)throw new P.ErrnoError(63);if(P.isMountpoint(G)||x&&P.isMountpoint(x))throw new P.ErrnoError(10);if(d!==u&&(N=P.nodePermissions(u,"w")))throw new P.ErrnoError(N);P.hashRemoveNode(G);try{u.node_ops.rename(G,d,w)}catch(H){throw H}finally{P.hashAddNode(G)}}},rmdir:i=>{var o=P.lookupPath(i,{parent:!0}).node,u=a0.basename(i),d=P.lookupNode(o,u),p=P.mayDelete(o,u,!0);if(p)throw new P.ErrnoError(p);if(!o.node_ops.rmdir)throw new P.ErrnoError(63);if(P.isMountpoint(d))throw new P.ErrnoError(10);o.node_ops.rmdir(o,u),P.destroyNode(d)},readdir:i=>{var o=P.lookupPath(i,{follow:!0}).node;if(!o.node_ops.readdir)throw new P.ErrnoError(54);return o.node_ops.readdir(o)},unlink:i=>{var o=P.lookupPath(i,{parent:!0}).node;if(!o)throw new P.ErrnoError(44);var u=a0.basename(i),d=P.lookupNode(o,u),p=P.mayDelete(o,u,!1);if(p)throw new P.ErrnoError(p);if(!o.node_ops.unlink)throw new P.ErrnoError(63);if(P.isMountpoint(d))throw new P.ErrnoError(10);o.node_ops.unlink(o,u),P.destroyNode(d)},readlink:i=>{var o=P.lookupPath(i).node;if(!o)throw new P.ErrnoError(44);if(!o.node_ops.readlink)throw new P.ErrnoError(28);return qe.resolve(P.getPath(o.parent),o.node_ops.readlink(o))},stat:(i,o)=>{var u=P.lookupPath(i,{follow:!o}).node;if(!u)throw new P.ErrnoError(44);if(!u.node_ops.getattr)throw new P.ErrnoError(63);return u.node_ops.getattr(u)},lstat:i=>P.stat(i,!0),chmod:(i,o,u)=>{var d;if(typeof i=="string"?d=P.lookupPath(i,{follow:!u}).node:d=i,!d.node_ops.setattr)throw new P.ErrnoError(63);d.node_ops.setattr(d,{mode:4095&o|-4096&d.mode,timestamp:Date.now()})},lchmod:(i,o)=>{P.chmod(i,o,!0)},fchmod:(i,o)=>{var u=P.getStream(i);if(!u)throw new P.ErrnoError(8);P.chmod(u.node,o)},chown:(i,o,u,d)=>{var p;if(typeof i=="string"?p=P.lookupPath(i,{follow:!d}).node:p=i,!p.node_ops.setattr)throw new P.ErrnoError(63);p.node_ops.setattr(p,{timestamp:Date.now()})},lchown:(i,o,u)=>{P.chown(i,o,u,!0)},fchown:(i,o,u)=>{var d=P.getStream(i);if(!d)throw new P.ErrnoError(8);P.chown(d.node,o,u)},truncate:(i,o)=>{if(o<0)throw new P.ErrnoError(28);var u;if(typeof i=="string"?u=P.lookupPath(i,{follow:!0}).node:u=i,!u.node_ops.setattr)throw new P.ErrnoError(63);if(P.isDir(u.mode))throw new P.ErrnoError(31);if(!P.isFile(u.mode))throw new P.ErrnoError(28);var d=P.nodePermissions(u,"w");if(d)throw new P.ErrnoError(d);u.node_ops.setattr(u,{size:o,timestamp:Date.now()})},ftruncate:(i,o)=>{var u=P.getStream(i);if(!u)throw new P.ErrnoError(8);if(!(2097155&u.flags))throw new P.ErrnoError(28);P.truncate(u.node,o)},utime:(i,o,u)=>{var d=P.lookupPath(i,{follow:!0}).node;d.node_ops.setattr(d,{timestamp:Math.max(o,u)})},open:(i,o,u)=>{if(i==="")throw new P.ErrnoError(44);var d;if(u=u===void 0?438:u,u=64&(o=typeof o=="string"?P.modeStringToFlags(o):o)?4095&u|32768:0,typeof i=="object")d=i;else{i=a0.normalize(i);try{d=P.lookupPath(i,{follow:!(131072&o)}).node}catch{}}var p=!1;if(64&o)if(d){if(128&o)throw new P.ErrnoError(20)}else d=P.mknod(i,u,0),p=!0;if(!d)throw new P.ErrnoError(44);if(P.isChrdev(d.mode)&&(o&=-513),65536&o&&!P.isDir(d.mode))throw new P.ErrnoError(54);if(!p){var k=P.mayOpen(d,o);if(k)throw new P.ErrnoError(k)}512&o&&!p&&P.truncate(d,0),o&=-131713;var h=P.createStream({node:d,path:P.getPath(d),flags:o,seekable:!0,position:0,stream_ops:d.stream_ops,ungotten:[],error:!1});return h.stream_ops.open&&h.stream_ops.open(h),!Z.logReadFiles||1&o||(P.readFiles||(P.readFiles={}),i in P.readFiles||(P.readFiles[i]=1)),h},close:i=>{if(P.isClosed(i))throw new P.ErrnoError(8);i.getdents&&(i.getdents=null);try{i.stream_ops.close&&i.stream_ops.close(i)}catch(o){throw o}finally{P.closeStream(i.fd)}i.fd=null},isClosed:i=>i.fd===null,llseek:(i,o,u)=>{if(P.isClosed(i))throw new P.ErrnoError(8);if(!i.seekable||!i.stream_ops.llseek)throw new P.ErrnoError(70);if(u!=0&&u!=1&&u!=2)throw new P.ErrnoError(28);return i.position=i.stream_ops.llseek(i,o,u),i.ungotten=[],i.position},read:(i,o,u,d,p)=>{if(d<0||p<0)throw new P.ErrnoError(28);if(P.isClosed(i))throw new P.ErrnoError(8);if((2097155&i.flags)==1)throw new P.ErrnoError(8);if(P.isDir(i.node.mode))throw new P.ErrnoError(31);if(!i.stream_ops.read)throw new P.ErrnoError(28);var k=p!==void 0;if(k){if(!i.seekable)throw new P.ErrnoError(70)}else p=i.position;var h=i.stream_ops.read(i,o,u,d,p);return k||(i.position+=h),h},write:(i,o,u,d,p,k)=>{if(d<0||p<0)throw new P.ErrnoError(28);if(P.isClosed(i))throw new P.ErrnoError(8);if(!(2097155&i.flags))throw new P.ErrnoError(8);if(P.isDir(i.node.mode))throw new P.ErrnoError(31);if(!i.stream_ops.write)throw new P.ErrnoError(28);i.seekable&&1024&i.flags&&P.llseek(i,0,2);var h=p!==void 0;if(h){if(!i.seekable)throw new P.ErrnoError(70)}else p=i.position;var w=i.stream_ops.write(i,o,u,d,p,k);return h||(i.position+=w),w},allocate:(i,o,u)=>{if(P.isClosed(i))throw new P.ErrnoError(8);if(o<0||u<=0)throw new P.ErrnoError(28);if(!(2097155&i.flags))throw new P.ErrnoError(8);if(!P.isFile(i.node.mode)&&!P.isDir(i.node.mode))throw new P.ErrnoError(43);if(!i.stream_ops.allocate)throw new P.ErrnoError(138);i.stream_ops.allocate(i,o,u)},mmap:(i,o,u,d,p)=>{if(2&d&&!(2&p)&&(2097155&i.flags)!=2)throw new P.ErrnoError(2);if((2097155&i.flags)==1)throw new P.ErrnoError(2);if(!i.stream_ops.mmap)throw new P.ErrnoError(43);return i.stream_ops.mmap(i,o,u,d,p)},msync:(i,o,u,d,p)=>i.stream_ops.msync?i.stream_ops.msync(i,o,u,d,p):0,munmap:i=>0,ioctl:(i,o,u)=>{if(!i.stream_ops.ioctl)throw new P.ErrnoError(59);return i.stream_ops.ioctl(i,o,u)},readFile:(i,o={})=>{if(o.flags=o.flags||0,o.encoding=o.encoding||"binary",o.encoding!=="utf8"&&o.encoding!=="binary")throw new Error('Invalid encoding type "'+o.encoding+'"');var u,d=P.open(i,o.flags),p=P.stat(i).size,k=new Uint8Array(p);return P.read(d,k,0,p,0),o.encoding==="utf8"?u=R2(k,0):o.encoding==="binary"&&(u=k),P.close(d),u},writeFile:(i,o,u={})=>{u.flags=u.flags||577;var d=P.open(i,u.flags,u.mode);if(typeof o=="string"){var p=new Uint8Array(ru(o)+1),k=F1(o,p,0,p.length);P.write(d,p,0,k,void 0,u.canOwn)}else{if(!ArrayBuffer.isView(o))throw new Error("Unsupported data type");P.write(d,o,0,o.byteLength,void 0,u.canOwn)}P.close(d)},cwd:()=>P.currentPath,chdir:i=>{var o=P.lookupPath(i,{follow:!0});if(o.node===null)throw new P.ErrnoError(44);if(!P.isDir(o.node.mode))throw new P.ErrnoError(54);var u=P.nodePermissions(o.node,"x");if(u)throw new P.ErrnoError(u);P.currentPath=o.path},createDefaultDirectories:()=>{P.mkdir("/tmp"),P.mkdir("/home"),P.mkdir("/home/web_user")},createDefaultDevices:()=>{P.mkdir("/dev"),P.registerDevice(P.makedev(1,3),{read:()=>0,write:(i,o,u,d,p)=>d}),P.mkdev("/dev/null",P.makedev(1,3)),I2.register(P.makedev(5,0),I2.default_tty_ops),I2.register(P.makedev(6,0),I2.default_tty1_ops),P.mkdev("/dev/tty",P.makedev(5,0)),P.mkdev("/dev/tty1",P.makedev(6,0)),P.mkdir("/dev/shm"),P.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{P.mkdir("/proc");var i=P.mkdir("/proc/self");P.mkdir("/proc/self/fd"),P.mount({mount:()=>{var o=P.createNode(i,"fd",16895,73);return o.node_ops={lookup:(u,d)=>{var p=+d,k=P.getStream(p);if(!k)throw new P.ErrnoError(8);var h={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>k.path}};return h.parent=h,h}},o}},{},"/proc/self/fd")},createStandardStreams:()=>{Z.stdin?P.createDevice("/dev","stdin",Z.stdin):P.symlink("/dev/tty","/dev/stdin"),Z.stdout?P.createDevice("/dev","stdout",null,Z.stdout):P.symlink("/dev/tty","/dev/stdout"),Z.stderr?P.createDevice("/dev","stderr",null,Z.stderr):P.symlink("/dev/tty1","/dev/stderr"),P.open("/dev/stdin",0),P.open("/dev/stdout",1),P.open("/dev/stderr",1)},ensureErrnoError:()=>{P.ErrnoError||(P.ErrnoError=function(i,o){this.node=o,this.setErrno=function(u){this.errno=u},this.setErrno(i),this.message="FS error"},P.ErrnoError.prototype=new Error,P.ErrnoError.prototype.constructor=P.ErrnoError,[44].forEach((i=>{P.genericErrors[i]=new P.ErrnoError(i),P.genericErrors[i].stack="<generic error, no stack>"})))},staticInit:()=>{P.ensureErrnoError(),P.nameTable=new Array(4096),P.mount(FA,{},"/"),P.createDefaultDirectories(),P.createDefaultDevices(),P.createSpecialDirectories(),P.filesystems={MEMFS:FA}},init:(i,o,u)=>{P.init.initialized=!0,P.ensureErrnoError(),Z.stdin=i||Z.stdin,Z.stdout=o||Z.stdout,Z.stderr=u||Z.stderr,P.createStandardStreams()},quit:()=>{P.init.initialized=!1;for(var i=0;i<P.streams.length;i++){var o=P.streams[i];o&&P.close(o)}},getMode:(i,o)=>{var u=0;return i&&(u|=365),o&&(u|=146),u},findObject:(i,o)=>{var u=P.analyzePath(i,o);return u.exists?u.object:null},analyzePath:(i,o)=>{try{i=(d=P.lookupPath(i,{follow:!o})).path}catch{}var u={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var d=P.lookupPath(i,{parent:!0});u.parentExists=!0,u.parentPath=d.path,u.parentObject=d.node,u.name=a0.basename(i),d=P.lookupPath(i,{follow:!o}),u.exists=!0,u.path=d.path,u.object=d.node,u.name=d.node.name,u.isRoot=d.path==="/"}catch(p){u.error=p.errno}return u},createPath:(i,o,u,d)=>{i=typeof i=="string"?i:P.getPath(i);for(var p=o.split("/").reverse();p.length;){var k=p.pop();if(k){var h=a0.join2(i,k);try{P.mkdir(h)}catch{}i=h}}return h},createFile:(i,o,u,d,p)=>{var k=a0.join2(typeof i=="string"?i:P.getPath(i),o),h=P.getMode(d,p);return P.create(k,h)},createDataFile:(i,o,u,d,p,k)=>{var h=o;i&&(i=typeof i=="string"?i:P.getPath(i),h=o?a0.join2(i,o):i);var w=P.getMode(d,p),x=P.create(h,w);if(u){if(typeof u=="string"){for(var G=new Array(u.length),z=0,M=u.length;z<M;++z)G[z]=u.charCodeAt(z);u=G}P.chmod(x,146|w);var N=P.open(x,577);P.write(N,u,0,u.length,0,k),P.close(N),P.chmod(x,w)}return x},createDevice:(i,o,u,d)=>{var p=a0.join2(typeof i=="string"?i:P.getPath(i),o),k=P.getMode(!!u,!!d);P.createDevice.major||(P.createDevice.major=64);var h=P.makedev(P.createDevice.major++,0);return P.registerDevice(h,{open:w=>{w.seekable=!1},close:w=>{d&&d.buffer&&d.buffer.length&&d(10)},read:(w,x,G,z,M)=>{for(var N=0,H=0;H<z;H++){var S;try{S=u()}catch{throw new P.ErrnoError(29)}if(S===void 0&&N===0)throw new P.ErrnoError(6);if(S==null)break;N++,x[G+H]=S}return N&&(w.node.timestamp=Date.now()),N},write:(w,x,G,z,M)=>{for(var N=0;N<z;N++)try{d(x[G+N])}catch{throw new P.ErrnoError(29)}return z&&(w.node.timestamp=Date.now()),N}}),P.mkdev(p,k,h)},forceLoadFile:i=>{if(i.isDevice||i.isFolder||i.link||i.contents)return!0;throw typeof XMLHttpRequest<"u"?new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."):new Error("Cannot load without read() or XMLHttpRequest.")},createLazyFile:(i,o,u,d,p)=>{function k(){this.lengthKnown=!1,this.chunks=[]}if(k.prototype.get=function(M){if(!(M>this.length-1||M<0)){var N=M%this.chunkSize,H=M/this.chunkSize|0;return this.getter(H)[N]}},k.prototype.setDataGetter=function(M){this.getter=M},k.prototype.cacheLength=function(){var M=new XMLHttpRequest;if(M.open("HEAD",u,!1),M.send(null),!(M.status>=200&&M.status<300||M.status===304))throw new Error("Couldn't load "+u+". Status: "+M.status);var N,H=Number(M.getResponseHeader("Content-length")),S=(N=M.getResponseHeader("Accept-Ranges"))&&N==="bytes",K=(N=M.getResponseHeader("Content-Encoding"))&&N==="gzip",X=1048576;S||(X=H);var V=this;V.setDataGetter((W=>{var j=W*X,l=(W+1)*X-1;if(l=Math.min(l,H-1),V.chunks[W]===void 0&&(V.chunks[W]=((B,A)=>{if(B>A)throw new Error("invalid range ("+B+", "+A+") or no bytes requested!");if(A>H-1)throw new Error("only "+H+" bytes available! programmer error!");var C=new XMLHttpRequest;if(C.open("GET",u,!1),H!==X&&C.setRequestHeader("Range","bytes="+B+"-"+A),C.responseType="arraybuffer",C.overrideMimeType&&C.overrideMimeType("text/plain; charset=x-user-defined"),C.send(null),!(C.status>=200&&C.status<300||C.status===304))throw new Error("Couldn't load "+u+". Status: "+C.status);return C.response!==void 0?new Uint8Array(C.response||[]):uu(C.responseText||"",!0)})(j,l)),V.chunks[W]===void 0)throw new Error("doXHR failed!");return V.chunks[W]})),!K&&H||(X=H=1,H=this.getter(0).length,X=H,br("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=H,this._chunkSize=X,this.lengthKnown=!0},typeof XMLHttpRequest<"u"){if(!wC)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var h=new k;Object.defineProperties(h,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var w={isDevice:!1,contents:h}}else w={isDevice:!1,url:u};var x=P.createFile(i,o,w,d,p);w.contents?x.contents=w.contents:w.url&&(x.contents=null,x.url=w.url),Object.defineProperties(x,{usedBytes:{get:function(){return this.contents.length}}});var G={};function z(M,N,H,S,K){var X=M.node.contents;if(K>=X.length)return 0;var V=Math.min(X.length-K,S);if(X.slice)for(var W=0;W<V;W++)N[H+W]=X[K+W];else for(W=0;W<V;W++)N[H+W]=X.get(K+W);return V}return Object.keys(x.stream_ops).forEach((M=>{var N=x.stream_ops[M];G[M]=function(){return P.forceLoadFile(x),N.apply(null,arguments)}})),G.read=(M,N,H,S,K)=>(P.forceLoadFile(x),z(M,N,H,S,K)),G.mmap=(M,N,H,S,K)=>{P.forceLoadFile(x);var X=lu();if(!X)throw new P.ErrnoError(48);return z(M,L0,X,N,H),{ptr:X,allocated:!0}},x.stream_ops=G,x},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(i,o,u)=>{o=o||(()=>{}),u=u||(()=>{});var d=P.indexedDB();try{var p=d.open(P.DB_NAME(),P.DB_VERSION)}catch(k){return u(k)}p.onupgradeneeded=()=>{br("creating db"),p.result.createObjectStore(P.DB_STORE_NAME)},p.onsuccess=()=>{var k=p.result.transaction([P.DB_STORE_NAME],"readwrite"),h=k.objectStore(P.DB_STORE_NAME),w=0,x=0,G=i.length;function z(){x==0?o():u()}i.forEach((M=>{var N=h.put(P.analyzePath(M).object.contents,M);N.onsuccess=()=>{++w+x==G&&z()},N.onerror=()=>{x++,w+x==G&&z()}})),k.onerror=u},p.onerror=u},loadFilesFromDB:(i,o,u)=>{o=o||(()=>{}),u=u||(()=>{});var d=P.indexedDB();try{var p=d.open(P.DB_NAME(),P.DB_VERSION)}catch(k){return u(k)}p.onupgradeneeded=u,p.onsuccess=()=>{var k=p.result;try{var h=k.transaction([P.DB_STORE_NAME],"readonly")}catch(N){return void u(N)}var w=h.objectStore(P.DB_STORE_NAME),x=0,G=0,z=i.length;function M(){G==0?o():u()}i.forEach((N=>{var H=w.get(N);H.onsuccess=()=>{P.analyzePath(N).exists&&P.unlink(N),P.createDataFile(a0.dirname(N),a0.basename(N),H.result,!0,!0,!0),++x+G==z&&M()},H.onerror=()=>{G++,x+G==z&&M()}})),h.onerror=u},p.onerror=u}},u0={DEFAULT_POLLMASK:5,calculateAt:function(i,o,u){if(a0.isAbs(o))return o;var d;if(i===-100?d=P.cwd():d=u0.getStreamFromFD(i).path,o.length==0){if(!u)throw new P.ErrnoError(44);return d}return a0.join2(d,o)},doStat:function(i,o,u){try{var d=i(o)}catch(w){if(w&&w.node&&a0.normalize(o)!==a0.normalize(P.getPath(w.node)))return-54;throw w}XA[u>>2]=d.dev,XA[u+8>>2]=d.ino,XA[u+12>>2]=d.mode,h0[u+16>>2]=d.nlink,XA[u+20>>2]=d.uid,XA[u+24>>2]=d.gid,XA[u+28>>2]=d.rdev,C0=[d.size>>>0,(YA=d.size,+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[u+40>>2]=C0[0],XA[u+44>>2]=C0[1],XA[u+48>>2]=4096,XA[u+52>>2]=d.blocks;var p=d.atime.getTime(),k=d.mtime.getTime(),h=d.ctime.getTime();return C0=[Math.floor(p/1e3)>>>0,(YA=Math.floor(p/1e3),+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[u+56>>2]=C0[0],XA[u+60>>2]=C0[1],h0[u+64>>2]=p%1e3*1e3,C0=[Math.floor(k/1e3)>>>0,(YA=Math.floor(k/1e3),+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[u+72>>2]=C0[0],XA[u+76>>2]=C0[1],h0[u+80>>2]=k%1e3*1e3,C0=[Math.floor(h/1e3)>>>0,(YA=Math.floor(h/1e3),+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[u+88>>2]=C0[0],XA[u+92>>2]=C0[1],h0[u+96>>2]=h%1e3*1e3,C0=[d.ino>>>0,(YA=d.ino,+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[u+104>>2]=C0[0],XA[u+108>>2]=C0[1],0},doMsync:function(i,o,u,d,p){if(!P.isFile(o.node.mode))throw new P.ErrnoError(43);if(2&d)return 0;var k=F2.slice(i,i+u);P.msync(o,k,p,u,d)},varargs:void 0,get:function(){return u0.varargs+=4,XA[u0.varargs-4>>2]},getStr:function(i){return W2(i)},getStreamFromFD:function(i){var o=P.getStream(i);if(!o)throw new P.ErrnoError(8);return o}},K1={};function Et(){if(!Et.strings){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:P1||"./this.program"};for(var o in K1)K1[o]===void 0?delete i[o]:i[o]=K1[o];var u=[];for(var o in i)u.push(o+"="+i[o]);Et.strings=u}return Et.strings}var Cu=function(i,o,u,d){i||(i=this),this.parent=i,this.mount=i.mount,this.mounted=null,this.id=P.nextInode++,this.name=o,this.mode=u,this.node_ops={},this.stream_ops={},this.rdev=d};Object.defineProperties(Cu.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(i){i?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(i){i?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return P.isDir(this.mode)}},isDevice:{get:function(){return P.isChrdev(this.mode)}}}),P.FSNode=Cu,P.staticInit(),Z.FS_createPath=P.createPath,Z.FS_createDataFile=P.createDataFile,Z.FS_unlink=P.unlink,Z.FS_createLazyFile=P.createLazyFile,Z.FS_createDevice=P.createDevice;var vC={g:function(i,o,u,d){Se("Assertion failed: "+W2(i)+", at: "+[o?W2(o):"unknown filename",u,d?W2(d):"unknown function"])},u:function(i,o,u){throw new xC(i).init(o,u),i},d:function(i,o,u){u0.varargs=u;try{var d=u0.getStreamFromFD(i);switch(o){case 0:return(p=u0.get())<0?-28:P.createStream(d,p).fd;case 1:case 2:case 6:case 7:return 0;case 3:return d.flags;case 4:var p=u0.get();return d.flags|=p,0;case 5:return p=u0.get(),pr[p+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return k=28,XA[l8()>>2]=k,-1}}catch(h){if(P===void 0||!(h instanceof P.ErrnoError))throw h;return-h.errno}var k},q:function(i,o,u){try{var d=u0.getStreamFromFD(i);d.getdents||(d.getdents=P.readdir(d.path));for(var p=280,k=0,h=P.llseek(d,0,1),w=Math.floor(h/p);w<d.getdents.length&&k+p<=u;){var x,G,z=d.getdents[w];if(z===".")x=d.node.id,G=4;else if(z==="..")x=P.lookupPath(d.path,{parent:!0}).node.id,G=4;else{var M=P.lookupNode(d.node,z);x=M.id,G=P.isChrdev(M.mode)?2:P.isDir(M.mode)?4:P.isLink(M.mode)?10:8}C0=[x>>>0,(YA=x,+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[o+k>>2]=C0[0],XA[o+k+4>>2]=C0[1],C0=[(w+1)*p>>>0,(YA=(w+1)*p,+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[o+k+8>>2]=C0[0],XA[o+k+12>>2]=C0[1],pr[o+k+16>>1]=280,L0[o+k+18|0]=G,F1(z,F2,o+k+19,256),k+=p,w+=1}return P.llseek(d,w*p,0),k}catch(N){if(P===void 0||!(N instanceof P.ErrnoError))throw N;return-N.errno}},h:function(i,o,u){u0.varargs=u;try{var d=u0.getStreamFromFD(i);switch(o){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return d.tty?0:-59;case 21519:if(!d.tty)return-59;var p=u0.get();return XA[p>>2]=0,0;case 21520:return d.tty?-28:-59;case 21531:return p=u0.get(),P.ioctl(d,o,p);default:return-28}}catch(k){if(P===void 0||!(k instanceof P.ErrnoError))throw k;return-k.errno}},e:function(i,o,u,d){u0.varargs=d;try{o=u0.getStr(o),o=u0.calculateAt(i,o);var p=d?u0.get():0;return P.open(o,u,p).fd}catch(k){if(P===void 0||!(k instanceof P.ErrnoError))throw k;return-k.errno}},o:function(i){try{return i=u0.getStr(i),P.rmdir(i),0}catch(o){if(P===void 0||!(o instanceof P.ErrnoError))throw o;return-o.errno}},n:function(i,o){try{return i=u0.getStr(i),u0.doStat(P.stat,i,o)}catch(u){if(P===void 0||!(u instanceof P.ErrnoError))throw u;return-u.errno}},p:function(i,o,u){try{return o=u0.getStr(o),o=u0.calculateAt(i,o),u===0?P.unlink(o):u===512?P.rmdir(o):Se("Invalid flags passed to unlinkat"),0}catch(d){if(P===void 0||!(d instanceof P.ErrnoError))throw d;return-d.errno}},i:function(){return!0},l:function(){Se("")},f:function(){return Date.now()},j:function(i,o,u){F2.copyWithin(i,o,o+u)},m:function(i){F2.length,Se("OOM")},r:function(i,o){var u=0;return Et().forEach((function(d,p){var k=o+u;h0[i+4*p>>2]=k,(function(h,w){for(var x=0;x<h.length;++x)L0[0|w++]=h.charCodeAt(x);L0[0|w]=0})(d,k),u+=d.length+1})),0},s:function(i,o){var u=Et();h0[i>>2]=u.length;var d=0;return u.forEach((function(p){d+=p.length+1})),h0[o>>2]=d,0},b:function(i){try{var o=u0.getStreamFromFD(i);return P.close(o),0}catch(u){if(P===void 0||!(u instanceof P.ErrnoError))throw u;return u.errno}},t:function(i,o,u,d){try{var p=(function(k,h,w,x){for(var G=0,z=0;z<w;z++){var M=h0[h>>2],N=h0[h+4>>2];h+=8;var H=P.read(k,L0,M,N,x);if(H<0)return-1;if(G+=H,H<N)break}return G})(u0.getStreamFromFD(i),o,u);return h0[d>>2]=p,0}catch(k){if(P===void 0||!(k instanceof P.ErrnoError))throw k;return k.errno}},k:function(i,o,u,d,p){try{var k=(x=u)+2097152>>>0<4194305-!!(w=o)?(w>>>0)+4294967296*x:NaN;if(isNaN(k))return 61;var h=u0.getStreamFromFD(i);return P.llseek(h,k,d),C0=[h.position>>>0,(YA=h.position,+Math.abs(YA)>=1?YA>0?(0|Math.min(+Math.floor(YA/4294967296),4294967295))>>>0:~~+Math.ceil((YA-+(~~YA>>>0))/4294967296)>>>0:0)],XA[p>>2]=C0[0],XA[p+4>>2]=C0[1],h.getdents&&k===0&&d===0&&(h.getdents=null),0}catch(G){if(P===void 0||!(G instanceof P.ErrnoError))throw G;return G.errno}var w,x},c:function(i,o,u,d){try{var p=(function(k,h,w,x){for(var G=0,z=0;z<w;z++){var M=h0[h>>2],N=h0[h+4>>2];h+=8;var H=P.write(k,L0,M,N,x);if(H<0)return-1;G+=H}return G})(u0.getStreamFromFD(i),o,u);return h0[d>>2]=p,0}catch(k){if(P===void 0||!(k instanceof P.ErrnoError))throw k;return k.errno}},a:Ir};(function(){var i,o={a:vC};function u(p,k){var h=p.exports;Z.asm=h,Z.asm.ua,ou(Z.asm.v),fu()}function d(p){u(p.instance)}if(gu(),Z.instantiateWasm)try{return Z.instantiateWasm(o,u)}catch(p){return P2("Module.instantiateWasm callback failed with error: "+p),!1}i=d,(async function(){return[]})().then((function(p){return S2.instantiate(p,o)})).then((function(p){return p})).then(i,(function(p){P2("failed to asynchronously prepare wasm: "+p),Se(p)}))})(),Z.___wasm_call_ctors=function(){return(Z.___wasm_call_ctors=Z.asm.v).apply(null,arguments)};var cu=Z._emscripten_bind_VoidPtr___destroy___0=function(){return(cu=Z._emscripten_bind_VoidPtr___destroy___0=Z.asm.w).apply(null,arguments)},du=Z._emscripten_bind_espeak_VOICE_get_name_0=function(){return(du=Z._emscripten_bind_espeak_VOICE_get_name_0=Z.asm.x).apply(null,arguments)},bu=Z._emscripten_bind_espeak_VOICE_set_name_1=function(){return(bu=Z._emscripten_bind_espeak_VOICE_set_name_1=Z.asm.y).apply(null,arguments)},Iu=Z._emscripten_bind_espeak_VOICE_get_languages_1=function(){return(Iu=Z._emscripten_bind_espeak_VOICE_get_languages_1=Z.asm.z).apply(null,arguments)},pu=Z._emscripten_bind_espeak_VOICE_get_identifier_0=function(){return(pu=Z._emscripten_bind_espeak_VOICE_get_identifier_0=Z.asm.A).apply(null,arguments)},hu=Z._emscripten_bind_espeak_VOICE_set_identifier_1=function(){return(hu=Z._emscripten_bind_espeak_VOICE_set_identifier_1=Z.asm.B).apply(null,arguments)},mu=Z._emscripten_bind_espeak_VOICE_get_gender_0=function(){return(mu=Z._emscripten_bind_espeak_VOICE_get_gender_0=Z.asm.C).apply(null,arguments)},ku=Z._emscripten_bind_espeak_VOICE_set_gender_1=function(){return(ku=Z._emscripten_bind_espeak_VOICE_set_gender_1=Z.asm.D).apply(null,arguments)},wu=Z._emscripten_bind_espeak_VOICE_get_age_0=function(){return(wu=Z._emscripten_bind_espeak_VOICE_get_age_0=Z.asm.E).apply(null,arguments)},Bu=Z._emscripten_bind_espeak_VOICE_set_age_1=function(){return(Bu=Z._emscripten_bind_espeak_VOICE_set_age_1=Z.asm.F).apply(null,arguments)},Eu=Z._emscripten_bind_espeak_VOICE_get_variant_0=function(){return(Eu=Z._emscripten_bind_espeak_VOICE_get_variant_0=Z.asm.G).apply(null,arguments)},xu=Z._emscripten_bind_espeak_VOICE_set_variant_1=function(){return(xu=Z._emscripten_bind_espeak_VOICE_set_variant_1=Z.asm.H).apply(null,arguments)},vu=Z._emscripten_bind_espeak_VOICE_get_xx1_0=function(){return(vu=Z._emscripten_bind_espeak_VOICE_get_xx1_0=Z.asm.I).apply(null,arguments)},Gu=Z._emscripten_bind_espeak_VOICE_set_xx1_1=function(){return(Gu=Z._emscripten_bind_espeak_VOICE_set_xx1_1=Z.asm.J).apply(null,arguments)},Qu=Z._emscripten_bind_espeak_VOICE_get_score_0=function(){return(Qu=Z._emscripten_bind_espeak_VOICE_get_score_0=Z.asm.K).apply(null,arguments)},yu=Z._emscripten_bind_espeak_VOICE_set_score_1=function(){return(yu=Z._emscripten_bind_espeak_VOICE_set_score_1=Z.asm.L).apply(null,arguments)},Du=Z._emscripten_bind_espeak_VOICE_get_spare_0=function(){return(Du=Z._emscripten_bind_espeak_VOICE_get_spare_0=Z.asm.M).apply(null,arguments)},Mu=Z._emscripten_bind_espeak_VOICE_set_spare_1=function(){return(Mu=Z._emscripten_bind_espeak_VOICE_set_spare_1=Z.asm.N).apply(null,arguments)},zu=Z._emscripten_bind_espeak_VOICE___destroy___0=function(){return(zu=Z._emscripten_bind_espeak_VOICE___destroy___0=Z.asm.O).apply(null,arguments)},Yu=Z._emscripten_bind_espeak_EVENT_get_type_0=function(){return(Yu=Z._emscripten_bind_espeak_EVENT_get_type_0=Z.asm.P).apply(null,arguments)},Nu=Z._emscripten_bind_espeak_EVENT_get_unique_identifier_0=function(){return(Nu=Z._emscripten_bind_espeak_EVENT_get_unique_identifier_0=Z.asm.Q).apply(null,arguments)},Tu=Z._emscripten_bind_espeak_EVENT_get_text_position_0=function(){return(Tu=Z._emscripten_bind_espeak_EVENT_get_text_position_0=Z.asm.R).apply(null,arguments)},Ou=Z._emscripten_bind_espeak_EVENT_get_length_0=function(){return(Ou=Z._emscripten_bind_espeak_EVENT_get_length_0=Z.asm.S).apply(null,arguments)},Hu=Z._emscripten_bind_espeak_EVENT_get_audio_position_0=function(){return(Hu=Z._emscripten_bind_espeak_EVENT_get_audio_position_0=Z.asm.T).apply(null,arguments)},Pu=Z._emscripten_bind_espeak_EVENT_get_sample_0=function(){return(Pu=Z._emscripten_bind_espeak_EVENT_get_sample_0=Z.asm.U).apply(null,arguments)},Su=Z._emscripten_bind_espeak_EVENT_get_user_data_0=function(){return(Su=Z._emscripten_bind_espeak_EVENT_get_user_data_0=Z.asm.V).apply(null,arguments)},Fu=Z._emscripten_bind_espeak_EVENT___destroy___0=function(){return(Fu=Z._emscripten_bind_espeak_EVENT___destroy___0=Z.asm.W).apply(null,arguments)},Ru=Z._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=function(){return(Ru=Z._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=Z.asm.X).apply(null,arguments)},Wu=Z._emscripten_bind_eSpeakNGWorker_synth__2=function(){return(Wu=Z._emscripten_bind_eSpeakNGWorker_synth__2=Z.asm.Y).apply(null,arguments)},Ku=Z._emscripten_bind_eSpeakNGWorker_synth_ipa__2=function(){return(Ku=Z._emscripten_bind_eSpeakNGWorker_synth_ipa__2=Z.asm.Z).apply(null,arguments)},Zu=Z._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=function(){return(Zu=Z._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=Z.asm._).apply(null,arguments)},Lu=Z._emscripten_bind_eSpeakNGWorker_set_voice_2=function(){return(Lu=Z._emscripten_bind_eSpeakNGWorker_set_voice_2=Z.asm.$).apply(null,arguments)},Vu=Z._emscripten_bind_eSpeakNGWorker_set_voice_3=function(){return(Vu=Z._emscripten_bind_eSpeakNGWorker_set_voice_3=Z.asm.aa).apply(null,arguments)},Uu=Z._emscripten_bind_eSpeakNGWorker_set_voice_4=function(){return(Uu=Z._emscripten_bind_eSpeakNGWorker_set_voice_4=Z.asm.ba).apply(null,arguments)},Xu=Z._emscripten_bind_eSpeakNGWorker_set_voice_5=function(){return(Xu=Z._emscripten_bind_eSpeakNGWorker_set_voice_5=Z.asm.ca).apply(null,arguments)},Ju=Z._emscripten_bind_eSpeakNGWorker_get_voices_1=function(){return(Ju=Z._emscripten_bind_eSpeakNGWorker_get_voices_1=Z.asm.da).apply(null,arguments)},ju=Z._emscripten_bind_eSpeakNGWorker_set_voices_2=function(){return(ju=Z._emscripten_bind_eSpeakNGWorker_set_voices_2=Z.asm.ea).apply(null,arguments)},qu=Z._emscripten_bind_eSpeakNGWorker_get_samplerate_0=function(){return(qu=Z._emscripten_bind_eSpeakNGWorker_get_samplerate_0=Z.asm.fa).apply(null,arguments)},_u=Z._emscripten_bind_eSpeakNGWorker_get_rate_0=function(){return(_u=Z._emscripten_bind_eSpeakNGWorker_get_rate_0=Z.asm.ga).apply(null,arguments)},$u=Z._emscripten_bind_eSpeakNGWorker_set_rate_1=function(){return($u=Z._emscripten_bind_eSpeakNGWorker_set_rate_1=Z.asm.ha).apply(null,arguments)},A8=Z._emscripten_bind_eSpeakNGWorker_get_pitch_0=function(){return(A8=Z._emscripten_bind_eSpeakNGWorker_get_pitch_0=Z.asm.ia).apply(null,arguments)},e8=Z._emscripten_bind_eSpeakNGWorker_set_pitch_1=function(){return(e8=Z._emscripten_bind_eSpeakNGWorker_set_pitch_1=Z.asm.ja).apply(null,arguments)},t8=Z._emscripten_bind_eSpeakNGWorker___destroy___0=function(){return(t8=Z._emscripten_bind_eSpeakNGWorker___destroy___0=Z.asm.ka).apply(null,arguments)},r8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=function(){return(r8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=Z.asm.la).apply(null,arguments)},a8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=function(){return(a8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=Z.asm.ma).apply(null,arguments)},i8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=function(){return(i8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=Z.asm.na).apply(null,arguments)},s8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=function(){return(s8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=Z.asm.oa).apply(null,arguments)},n8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=function(){return(n8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=Z.asm.pa).apply(null,arguments)},o8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=function(){return(o8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=Z.asm.qa).apply(null,arguments)},g8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=function(){return(g8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=Z.asm.ra).apply(null,arguments)},f8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=function(){return(f8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=Z.asm.sa).apply(null,arguments)},u8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=function(){return(u8=Z._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=Z.asm.ta).apply(null,arguments)},l8=Z.___errno_location=function(){return(l8=Z.___errno_location=Z.asm.va).apply(null,arguments)};Z._free=function(){return(Z._free=Z.asm.wa).apply(null,arguments)},Z._malloc=function(){return(Z._malloc=Z.asm.xa).apply(null,arguments)};var hr,C8=Z.___cxa_is_pointer_type=function(){return(C8=Z.___cxa_is_pointer_type=Z.asm.ya).apply(null,arguments)};function c8(i){function o(){hr||(hr=!0,Z.calledRun=!0,$3||(nu=!0,Z.noFSInit||P.init.initialized||P.init(),P.ignorePermissions=!1,W1(iu),Z.onRuntimeInitialized&&Z.onRuntimeInitialized(),(function(){if(Z.postRun)for(typeof Z.postRun=="function"&&(Z.postRun=[Z.postRun]);Z.postRun.length;)u=Z.postRun.shift(),su.unshift(u);var u;W1(su)})()))}b2>0||((function(){if(Z.preRun)for(typeof Z.preRun=="function"&&(Z.preRun=[Z.preRun]);Z.preRun.length;)u=Z.preRun.shift(),au.unshift(u);var u;W1(au)})(),b2>0||(Z.setStatus?(Z.setStatus("Running..."),setTimeout((function(){setTimeout((function(){Z.setStatus("")}),1),o()}),1)):o()))}if(Z.___start_em_js=132724,Z.___stop_em_js=132822,Z.addRunDependency=gu,Z.removeRunDependency=fu,Z.FS_createPath=P.createPath,Z.FS_createDataFile=P.createDataFile,Z.FS_createLazyFile=P.createLazyFile,Z.FS_createDevice=P.createDevice,Z.FS_unlink=P.unlink,Bt=function i(){hr||c8(),hr||(Bt=i)},Z.preInit)for(typeof Z.preInit=="function"&&(Z.preInit=[Z.preInit]);Z.preInit.length>0;)Z.preInit.pop()();function Ae(){}function mr(i){return(i||Ae).__cache__}function K2(i,o){var u=mr(o),d=u[i];return d||((d=Object.create((o||Ae).prototype)).ptr=i,u[i]=d)}c8(),Ae.prototype=Object.create(Ae.prototype),Ae.prototype.constructor=Ae,Ae.prototype.__class__=Ae,Ae.__cache__={},Z.WrapperObject=Ae,Z.getCache=mr,Z.wrapPointer=K2,Z.castObject=function(i,o){return K2(i.ptr,o)},Z.NULL=K2(0),Z.destroy=function(i){if(!i.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";i.__destroy__(),delete mr(i.__class__)[i.ptr]},Z.compare=function(i,o){return i.ptr===o.ptr},Z.getPointer=function(i){return i.ptr},Z.getClass=function(i){return i.__class__};var t0={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(t0.needed){for(var i=0;i<t0.temps.length;i++)Z._free(t0.temps[i]);t0.temps.length=0,Z._free(t0.buffer),t0.buffer=0,t0.size+=t0.needed,t0.needed=0}t0.buffer||(t0.size+=128,t0.buffer=Z._malloc(t0.size),S1(t0.buffer)),t0.pos=0},alloc:function(i,o){S1(t0.buffer);var u,d=o.BYTES_PER_ELEMENT,p=i.length*d;return p=p+7&-8,t0.pos+p>=t0.size?(S1(p>0),t0.needed+=p,u=Z._malloc(p),t0.temps.push(u)):(u=t0.buffer+t0.pos,t0.pos+=p),u},copy:function(i,o,u){switch(u>>>=0,o.BYTES_PER_ELEMENT){case 2:u>>>=1;break;case 4:u>>>=2;break;case 8:u>>>=3}for(var d=0;d<i.length;d++)o[u+d]=i[d]}};function p2(i){if(typeof i=="string"){var o=uu(i),u=t0.alloc(o,L0);return t0.copy(o,L0,u),u}return i}function Fe(){throw"cannot construct a VoidPtr, no constructor in IDL"}function IA(){throw"cannot construct a espeak_VOICE, no constructor in IDL"}function KA(){throw"cannot construct a espeak_EVENT, no constructor in IDL"}function HA(){this.ptr=Ru(),mr(HA)[this.ptr]=this}Fe.prototype=Object.create(Ae.prototype),Fe.prototype.constructor=Fe,Fe.prototype.__class__=Fe,Fe.__cache__={},Z.VoidPtr=Fe,Fe.prototype.__destroy__=Fe.prototype.__destroy__=function(){var i=this.ptr;cu(i)},IA.prototype=Object.create(Ae.prototype),IA.prototype.constructor=IA,IA.prototype.__class__=IA,IA.__cache__={},Z.espeak_VOICE=IA,IA.prototype.get_name=IA.prototype.get_name=function(){var i=this.ptr;return W2(du(i))},IA.prototype.set_name=IA.prototype.set_name=function(i){var o=this.ptr;t0.prepare(),i=i&&typeof i=="object"?i.ptr:p2(i),bu(o,i)},Object.defineProperty(IA.prototype,"name",{get:IA.prototype.get_name,set:IA.prototype.set_name}),IA.prototype.get_languages=IA.prototype.get_languages=function(i){var o=this.ptr;return i&&typeof i=="object"&&(i=i.ptr),Iu(o,i)},Object.defineProperty(IA.prototype,"languages",{get:IA.prototype.get_languages}),IA.prototype.get_identifier=IA.prototype.get_identifier=function(){var i=this.ptr;return W2(pu(i))},IA.prototype.set_identifier=IA.prototype.set_identifier=function(i){var o=this.ptr;t0.prepare(),i=i&&typeof i=="object"?i.ptr:p2(i),hu(o,i)},Object.defineProperty(IA.prototype,"identifier",{get:IA.prototype.get_identifier,set:IA.prototype.set_identifier}),IA.prototype.get_gender=IA.prototype.get_gender=function(){var i=this.ptr;return mu(i)},IA.prototype.set_gender=IA.prototype.set_gender=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),ku(o,i)},Object.defineProperty(IA.prototype,"gender",{get:IA.prototype.get_gender,set:IA.prototype.set_gender}),IA.prototype.get_age=IA.prototype.get_age=function(){var i=this.ptr;return wu(i)},IA.prototype.set_age=IA.prototype.set_age=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),Bu(o,i)},Object.defineProperty(IA.prototype,"age",{get:IA.prototype.get_age,set:IA.prototype.set_age}),IA.prototype.get_variant=IA.prototype.get_variant=function(){var i=this.ptr;return Eu(i)},IA.prototype.set_variant=IA.prototype.set_variant=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),xu(o,i)},Object.defineProperty(IA.prototype,"variant",{get:IA.prototype.get_variant,set:IA.prototype.set_variant}),IA.prototype.get_xx1=IA.prototype.get_xx1=function(){var i=this.ptr;return vu(i)},IA.prototype.set_xx1=IA.prototype.set_xx1=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),Gu(o,i)},Object.defineProperty(IA.prototype,"xx1",{get:IA.prototype.get_xx1,set:IA.prototype.set_xx1}),IA.prototype.get_score=IA.prototype.get_score=function(){var i=this.ptr;return Qu(i)},IA.prototype.set_score=IA.prototype.set_score=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),yu(o,i)},Object.defineProperty(IA.prototype,"score",{get:IA.prototype.get_score,set:IA.prototype.set_score}),IA.prototype.get_spare=IA.prototype.get_spare=function(){var i=this.ptr;return Du(i)},IA.prototype.set_spare=IA.prototype.set_spare=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),Mu(o,i)},Object.defineProperty(IA.prototype,"spare",{get:IA.prototype.get_spare,set:IA.prototype.set_spare}),IA.prototype.__destroy__=IA.prototype.__destroy__=function(){var i=this.ptr;zu(i)},KA.prototype=Object.create(Ae.prototype),KA.prototype.constructor=KA,KA.prototype.__class__=KA,KA.__cache__={},Z.espeak_EVENT=KA,KA.prototype.get_type=KA.prototype.get_type=function(){var i=this.ptr;return Yu(i)},Object.defineProperty(KA.prototype,"type",{get:KA.prototype.get_type}),KA.prototype.get_unique_identifier=KA.prototype.get_unique_identifier=function(){var i=this.ptr;return Nu(i)},Object.defineProperty(KA.prototype,"unique_identifier",{get:KA.prototype.get_unique_identifier}),KA.prototype.get_text_position=KA.prototype.get_text_position=function(){var i=this.ptr;return Tu(i)},Object.defineProperty(KA.prototype,"text_position",{get:KA.prototype.get_text_position}),KA.prototype.get_length=KA.prototype.get_length=function(){var i=this.ptr;return Ou(i)},Object.defineProperty(KA.prototype,"length",{get:KA.prototype.get_length}),KA.prototype.get_audio_position=KA.prototype.get_audio_position=function(){var i=this.ptr;return Hu(i)},Object.defineProperty(KA.prototype,"audio_position",{get:KA.prototype.get_audio_position}),KA.prototype.get_sample=KA.prototype.get_sample=function(){var i=this.ptr;return Pu(i)},Object.defineProperty(KA.prototype,"sample",{get:KA.prototype.get_sample}),KA.prototype.get_user_data=KA.prototype.get_user_data=function(){var i=this.ptr;return Su(i)},Object.defineProperty(KA.prototype,"user_data",{get:KA.prototype.get_user_data}),KA.prototype.__destroy__=KA.prototype.__destroy__=function(){var i=this.ptr;Fu(i)},HA.prototype=Object.create(Ae.prototype),HA.prototype.constructor=HA,HA.prototype.__class__=HA,HA.__cache__={},Z.eSpeakNGWorker=HA,HA.prototype.synth_=HA.prototype.synth_=function(i,o){var u=this.ptr;t0.prepare(),i=i&&typeof i=="object"?i.ptr:p2(i),o&&typeof o=="object"&&(o=o.ptr),Wu(u,i,o)},HA.prototype.synth_ipa_=HA.prototype.synth_ipa_=function(i,o){var u=this.ptr;return t0.prepare(),i=i&&typeof i=="object"?i.ptr:p2(i),o=o&&typeof o=="object"?o.ptr:p2(o),Ku(u,i,o)},HA.prototype.getSizeOfEventStruct_=HA.prototype.getSizeOfEventStruct_=function(){var i=this.ptr;return Zu(i)},HA.prototype.set_voice=HA.prototype.set_voice=function(i,o,u,d,p){var k=this.ptr;return t0.prepare(),i=i&&typeof i=="object"?i.ptr:p2(i),o=o&&typeof o=="object"?o.ptr:p2(o),u&&typeof u=="object"&&(u=u.ptr),d&&typeof d=="object"&&(d=d.ptr),p&&typeof p=="object"&&(p=p.ptr),u===void 0?Lu(k,i,o):d===void 0?Vu(k,i,o,u):p===void 0?Uu(k,i,o,u,d):Xu(k,i,o,u,d,p)},HA.prototype.get_voices=HA.prototype.get_voices=function(i){var o=this.ptr;return i&&typeof i=="object"&&(i=i.ptr),K2(Ju(o,i),IA)},HA.prototype.set_voices=HA.prototype.set_voices=function(i,o){var u=this.ptr;t0.prepare(),i&&typeof i=="object"&&(i=i.ptr),o&&typeof o=="object"&&(o=o.ptr),ju(u,i,o)},Object.defineProperty(HA.prototype,"voices",{get:HA.prototype.get_voices,set:HA.prototype.set_voices}),HA.prototype.get_samplerate=HA.prototype.get_samplerate=function(){var i=this.ptr;return qu(i)},Object.defineProperty(HA.prototype,"samplerate",{get:HA.prototype.get_samplerate}),HA.prototype.get_rate=HA.prototype.get_rate=function(){var i=this.ptr;return _u(i)},HA.prototype.set_rate=HA.prototype.set_rate=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),$u(o,i)},Object.defineProperty(HA.prototype,"rate",{get:HA.prototype.get_rate,set:HA.prototype.set_rate}),HA.prototype.get_pitch=HA.prototype.get_pitch=function(){var i=this.ptr;return A8(i)},HA.prototype.set_pitch=HA.prototype.set_pitch=function(i){var o=this.ptr;i&&typeof i=="object"&&(i=i.ptr),e8(o,i)},Object.defineProperty(HA.prototype,"pitch",{get:HA.prototype.get_pitch,set:HA.prototype.set_pitch}),HA.prototype.__destroy__=HA.prototype.__destroy__=function(){var i=this.ptr;t8(i)},(function(){function i(){Z.espeakEVENT_LIST_TERMINATED=r8(),Z.espeakEVENT_WORD=a8(),Z.espeakEVENT_SENTENCE=i8(),Z.espeakEVENT_MARK=s8(),Z.espeakEVENT_PLAY=n8(),Z.espeakEVENT_END=o8(),Z.espeakEVENT_MSG_TERMINATED=g8(),Z.espeakEVENT_PHONEME=f8(),Z.espeakEVENT_SAMPLERATE=u8()}nu?i():ou(i)})(),HA.prototype.list_voices=function(){for(var i,o=[],u=this.get_voices(i=0);u.ptr!=0;u=this.get_voices(++i)){let w=function(x){for(var G="",z=x,M=u.get_languages(z++);M!=0;)G+=String.fromCharCode(M),M=u.get_languages(z++);return G};for(var d={name:u.get_name(),identifier:u.get_identifier(),languages:[]},p=0,k=u.get_languages(p);k!=0;){var h={priority:k,name:w(++p)};d.languages.push(h),p+=h.name.length+1,k=u.get_languages(p)}o.push(d)}return o};var GC=["list_terminated","word","sentence","mark","play","end","msg_terminated","phoneme","samplerate"];HA.prototype.synthesize=function(i,o){var u=this.getSizeOfEventStruct_(),d=addFunction((function(p,k,h){for(var w=new Float32Array(2*k),x=0;x<k;x++)w[2*x]=Math.max(-1,Math.min(1,EC(p+2*x,"i16")/32768)),w[2*x+1]=w[2*x];var G=[];for(p=h,ev=K2(p,KA);ev.get_type()!=Z.espeakEVENT_LIST_TERMINATED;ev=K2(p+=u,KA))G.push({type:GC[ev.get_type()],text_position:ev.get_text_position(),word_length:ev.get_length(),audio_position:ev.get_audio_position()});return o(w,G)?1:0}));this.synth_(i,d),removeFunction(d)},HA.prototype.synthesize_ipa=function(i,o){var u="espeak-ng-ipa-tmp-"+Math.random().toString().substring(2),d="",p=this.synth_ipa_(i,u);return p==0&&(d=P.readFile(u,{encoding:"utf8"})),P.unlink(u),{code:p,ipa:d}};const d8=new Promise((i=>{Z.calledRun?i(new Z.eSpeakNGWorker):Z.onRuntimeInitialized=()=>i(new Z.eSpeakNGWorker)})),QC=["en"],yC=d8.then((i=>{const o=i.list_voices().map((({name:d,identifier:p,languages:k})=>({name:d,identifier:p,languages:k.filter((h=>QC.includes(h.name.split("-")[0])))}))).filter((d=>d.languages.length>0)),u=new Set;for(const d of o){u.add(d.identifier);for(const p of d.languages)u.add(p.name)}return{voices:o,identifiers:u}})),DC=async(i,o="en-us")=>{const u=await d8,{identifiers:d}=await yC;if(!d.has(o))throw new Error(`Invalid language identifier: "${o}". Should be one of: ${Array.from(d).toSorted().join(", ")}.`);return u.set_voice(o),u.synthesize_ipa(i).ipa?.split(`
`).filter((p=>p.length>0))??[]};async function MC(i,o="en-us"){const u=await DC(i,o);return(Array.isArray(u)?u.join(" "):String(u)).split(/[.!?]+/).map(p=>p.trim()).filter(Boolean).map(p=>[...p.normalize("NFD")])}function zC(i){return i.split(/[.!?]+/).map(o=>o.trim()).filter(Boolean).map(o=>[...o.normalize("NFD")])}function YC(i,o){if(!o||o["^"]==null||o.$==null||o._==null)throw new Error("phoneme_id_map is missing core tokens (^, $, _)");const k=[];for(const h of i){k.push(o["^"],o._);for(const w of h){const x=o[w];x!=null&&k.push(x,o._)}k.push(o.$)}return Int32Array.from(k)}class xt{constructor(o,u){this.audio=o,this.sr=u}toWavBlob(){const o=NC(this.audio,this.sr);return new Blob([o],{type:"audio/wav"})}}class Z1{cfg;session;static async create(o,u){const[d,p]=await Promise.all([j3(o),kC(u)]),k=await Aa.create(d,{executionProviders:[{name:"wasm"}]}),h=new Z1;return h.cfg=p,h.session=k,h}getSampleRate(){return this.cfg.audio.sample_rate}getSpeakers(){return(this.cfg.num_speakers??1)<=1?[{id:0,name:"Voice 1"}]:Object.entries(this.cfg.speaker_id_map??{}).sort((u,d)=>u[1]-d[1]).map(([,u])=>({id:u,name:`Voice ${u+1}`}))}async synthesizeChunk(o,u){if(!o.trim())return new xt(new Float32Array(0),this.getSampleRate());const d=this.cfg.phoneme_type==="espeak"?await MC(o):zC(o),p=YC(d,this.cfg.phoneme_id_map);if(!p||p.length===0)return new xt(new Float32Array(0),this.getSampleRate());const k=BigInt64Array.from(p,H=>BigInt(H)),h=BigInt(k.length);if(h===0n)return new xt(new Float32Array(0),this.getSampleRate());const w=Float32Array.from([u?.noiseScale??this.cfg.inference?.noise_scale??.333,u?.lengthScale??this.cfg.inference?.length_scale??1,u?.noiseWScale??this.cfg.inference?.noise_w??.333]),x={input:new $0("int64",k,[1,Number(h)]),input_lengths:new $0("int64",BigInt64Array.from([h]),[1]),scales:new $0("float32",w,[3])};if((this.cfg.num_speakers??1)>1){const H=BigInt(u?.speakerId??0);x.sid=new $0("int64",BigInt64Array.from([H]),[1])}const G=await this.session.run(x),z=this.session.outputNames[0]??"output",M=G[z].data,N=M instanceof Float32Array?M:Float32Array.from(M);return new xt(N,this.getSampleRate())}async*stream(o,u){const d=bC(o);for(const p of pC(d)){const k=await this.synthesizeChunk(p,u);yield{text:p,audio:k}}}}function NC(i,o){const u=new ArrayBuffer(44+i.length*2),d=new DataView(u),p=(h,w)=>{for(let x=0;x<w.length;x++)d.setUint8(h+x,w.charCodeAt(x))};p(0,"RIFF"),d.setUint32(4,36+i.length*2,!0),p(8,"WAVE"),p(12,"fmt "),d.setUint32(16,16,!0),d.setUint16(20,1,!0),d.setUint16(22,1,!0),d.setUint32(24,o,!0),d.setUint32(28,o*2,!0),d.setUint16(32,2,!0),d.setUint16(34,16,!0),p(36,"data"),d.setUint32(40,i.length*2,!0);let k=44;for(let h=0;h<i.length;h++,k+=2){const w=Math.max(-1,Math.min(1,i[h]));d.setInt16(k,w<0?w*32768:w*32767,!0)}return u}let vt=null;self.addEventListener("message",async i=>{const o=i.data;try{if(o.type==="init"){vt=await Z1.create(o.modelURL,o.cfgURL);const d=vt.getSpeakers();self.postMessage({status:"ready",voices:d});return}if(!vt){self.postMessage({status:"error",data:"Model not initialized"});return}const u=o.speed?1/o.speed:void 0;if(o.type==="preview"){let d=null;for await(const{audio:p}of vt.stream(o.text,{speakerId:o.speakerId,lengthScale:u})){d=p;break}d&&self.postMessage({status:"preview",audio:d.toWavBlob()});return}if(o.type==="generate"){const d=[];for await(const{text:G,audio:z}of vt.stream(o.text,{speakerId:o.speakerId,lengthScale:u}))self.postMessage({status:"stream",chunk:{text:G,audio:z.toWavBlob()}}),d.push(z);const p=d[0]?.sr??22050;let k=0;for(const G of d)k+=G.audio.length;let h=new Float32Array(k),w=0;for(const G of d)h.set(G.audio,w),w+=G.audio.length;TC(h,.9),h=OC(h,.002,Math.floor(p*.02));const x=new xt(h,p).toWavBlob();self.postMessage({status:"complete",audio:x})}}catch(u){self.postMessage({status:"error",data:String(u?.message??u)})}});function TC(i,o=.9){let u=1e-9;for(let p=0;p<i.length;p++)u=Math.max(u,Math.abs(i[p]));const d=Math.min(4,o/u);if(d<1)for(let p=0;p<i.length;p++)i[p]*=d}function OC(i,o=.002,u=480){let d=0,p=i.length-1;for(;d<p&&Math.abs(i[d])<o;)d++;for(;p>d&&Math.abs(i[p])<o;)p--;return d=Math.max(0,d-u),p=Math.min(i.length,p+u),i.slice(d,p)}})();
